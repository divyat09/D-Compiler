Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ARROW
    SCOPE
    SIZEOF
    MINUS_MINUS
    SINGLE_QUOTE
    BACK_SLASH

Grammar

Rule 0     S' -> addExpression
Rule 1     addExpression -> mulExpression
Rule 2     addExpression -> addExpression PLUS mulExpression
Rule 3     addExpression -> addExpression MINUS mulExpression
Rule 4     addExpression -> addExpression TILDE mulExpression
Rule 5     aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON
Rule 6     aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON
Rule 7     comma_aliasInitializer -> COMMA aliasInitializer comma_aliasInitializer
Rule 8     comma_aliasInitializer -> empty
Rule 9     multiplestorageClass -> storageClass multiplestorageClass
Rule 10    multiplestorageClass -> empty
Rule 11    aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type
Rule 12    aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON
Rule 13    aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON
Rule 14    andAndExpression -> orExpression
Rule 15    andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression
Rule 16    andExpression -> cmpExpression
Rule 17    andExpression -> andExpression AMPERSAND cmpExpression
Rule 18    argumentList -> assignExpression
Rule 19    argumentList -> argumentList comma_assign
Rule 20    comma_assign -> COMMA assignExpression comma_assign
Rule 21    comma_assign -> empty
Rule 22    arguments -> LPAREN RPAREN
Rule 23    arguments -> LPAREN argumentList RPAREN
Rule 24    arrayInitializer -> LBRACKET RBRACKET
Rule 25    arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
Rule 26    comma_arrayMemberInitialization -> COMMA arrayMemberInitialization comma_arrayMemberInitialization
Rule 27    comma_arrayMemberInitialization -> empty
Rule 28    arrayLiteral -> LBRACKET RBRACKET
Rule 29    arrayLiteral -> LBRACKET argumentList RBRACKET
Rule 30    arrayMemberInitialization -> assignExpression COLON nonVoidInitializer
Rule 31    arrayMemberInitialization -> nonVoidInitializer
Rule 32    assignExpression -> ternaryExpression
Rule 33    assignExpression -> ternaryExpression assignOperator expression
Rule 34    assignOperator -> ASSIGN
Rule 35    assignOperator -> EQ_LEFT
Rule 36    assignOperator -> EQ_RIGHT
Rule 37    assignOperator -> EQ_PLUS
Rule 38    assignOperator -> EQ_MINUS
Rule 39    assignOperator -> EQ_TIMES
Rule 40    assignOperator -> EQ_MODULO
Rule 41    assignOperator -> EQ_AND_BIT
Rule 42    assignOperator -> EQ_DIV
Rule 43    assignOperator -> EQ_OR_BIT
Rule 44    assignOperator -> EQ_XOR_BIT
Rule 45    attribute -> PRIVATE
Rule 46    attribute -> PROTECTED
Rule 47    attribute -> PUBLIC
Rule 48    attribute -> STATIC
Rule 49    attribute -> EXTERN
Rule 50    attribute -> FINAL
Rule 51    attribute -> AUTO
Rule 52    attribute -> CONST
Rule 53    attribute -> IMMUTABLE
Rule 54    attributeDeclaration -> attribute COLON
Rule 55    autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON
Rule 56    comma_identifier_assign_initializer -> COMMA IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer
Rule 57    comma_identifier_assign_initializer -> empty
Rule 58    blockStatement -> LBRACE RBRACE
Rule 59    blockStatement -> LBRACE declarationsAndStatements RBRACE
Rule 60    bodyStatement -> BODY blockStatement
Rule 61    breakStatement -> BREAK SEMICOLON
Rule 62    breakStatement -> BREAK IDENTIFIER SEMICOLON
Rule 63    baseClass -> type2
Rule 64    baseClassList -> baseClass
Rule 65    baseClassList -> baseClassList COMMA baseClass
Rule 66    builtinType -> BOOL
Rule 67    builtinType -> SHORT
Rule 68    builtinType -> USHORT
Rule 69    builtinType -> INT
Rule 70    builtinType -> UINT
Rule 71    builtinType -> LONG
Rule 72    builtinType -> ULONG
Rule 73    builtinType -> CHAR
Rule 74    builtinType -> FLOAT
Rule 75    caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
Rule 76    caseStatement -> CASE argumentList COLON declarationsAndStatements
Rule 77    castExpression -> CAST LPAREN RPAREN unaryExpression
Rule 78    castExpression -> CAST LPAREN type RPAREN unaryExpression
Rule 79    castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression
Rule 80    castQualifier -> CONST
Rule 81    castQualifier -> IMMUTABLE
Rule 82    classDeclaration -> CLASS IDENTIFIER SEMICOLON
Rule 83    classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody
Rule 84    classDeclaration -> CLASS IDENTIFIER structBody
Rule 85    cmpExpression -> shiftExpression
Rule 86    cmpExpression -> equalExpression
Rule 87    cmpExpression -> relExpression
Rule 88    constraint -> IF LPAREN expression RPAREN
Rule 89    constructor -> THIS parameters multiple_memberFunctionAttribute functionBody
Rule 90    constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON
Rule 91    constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody
Rule 92    constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON
Rule 93    multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute
Rule 94    multiple_memberFunctionAttribute -> empty
Rule 95    continueStatement -> CONTINUE SEMICOLON
Rule 96    continueStatement -> CONTINUE IDENTIFIER SEMICOLON
Rule 97    declaration -> multipleattributes declaration2
Rule 98    declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE
Rule 99    multiple_declaration -> declaration multiple_declaration
Rule 100   multiple_declaration -> empty
Rule 101   multipleattributes -> attribute multipleattributes
Rule 102   multipleattributes -> empty
Rule 103   declaration2 -> aliasDeclaration
Rule 104   declaration2 -> aliasThisDeclaration
Rule 105   declaration2 -> anonymousEnumDeclaration
Rule 106   declaration2 -> attributeDeclaration
Rule 107   declaration2 -> classDeclaration
Rule 108   declaration2 -> constructor
Rule 109   declaration2 -> destructor
Rule 110   declaration2 -> enumDeclaration
Rule 111   declaration2 -> functionDeclaration
Rule 112   declaration2 -> importDeclaration
Rule 113   declaration2 -> mixinDeclaration
Rule 114   declaration2 -> unionDeclaration
Rule 115   declaration2 -> variableDeclaration
Rule 116   declarationsAndStatements -> declarationOrStatement
Rule 117   declarationsAndStatements -> declarationOrStatement declarationsAndStatements
Rule 118   declarationOrStatement -> declaration
Rule 119   declarationOrStatement -> statement
Rule 120   declarator -> IDENTIFIER
Rule 121   declarator -> IDENTIFIER ASSIGN initializer
Rule 122   defaultStatement -> DEFAULT COLON declarationsAndStatements
Rule 123   deleteExpression -> DELETE unaryExpression
Rule 124   destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody
Rule 125   destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON
Rule 126   doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
Rule 127   enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE
Rule 128   enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE
Rule 129   comma_enumMember -> COMMA enumMember comma_enumMember
Rule 130   comma_enumMember -> empty
Rule 131   anonymousEnumMember -> TYPEDEF IDENTIFIER ASSIGN assignExpression
Rule 132   anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression
Rule 133   anonymousEnumMember -> IDENTIFIER
Rule 134   anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
Rule 135   anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
Rule 136   multipleanonymousEnumMember -> anonymousEnumMember multipleanonymousEnumMember
Rule 137   multipleanonymousEnumMember -> empty
Rule 138   enumDeclaration -> ENUM IDENTIFIER SEMICOLON
Rule 139   enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON
Rule 140   enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody
Rule 141   enumMember -> IDENTIFIER
Rule 142   enumMember -> IDENTIFIER ASSIGN assignExpression
Rule 143   equalExpression -> shiftExpression IS_EQ shiftExpression
Rule 144   equalExpression -> shiftExpression NOT_EQ shiftExpression
Rule 145   expression -> assignExpression
Rule 146   expression -> expression COMMA assignExpression
Rule 147   expressionStatement -> expression SEMICOLON
Rule 148   forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
Rule 149   forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
Rule 150   forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
Rule 151   forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
Rule 152   forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
Rule 153   forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
Rule 154   forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
Rule 155   forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
Rule 156   foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
Rule 157   foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
Rule 158   foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
Rule 159   foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
Rule 160   foreachType -> IDENTIFIER
Rule 161   foreachType -> type IDENTIFIER
Rule 162   foreachType -> typeConstructors IDENTIFIER
Rule 163   foreachType -> typeConstructors type IDENTIFIER
Rule 164   foreachTypeList -> foreachType
Rule 165   foreachTypeList -> foreachTypeList COMMA foreachType
Rule 166   functionBody -> blockStatement
Rule 167   functionCallExpression -> symbol arguments unaryExpression arguments
Rule 168   functionCallExpression -> type arguments
Rule 169   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
Rule 170   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
Rule 171   functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
Rule 172   functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
Rule 173   functionLiteralExpression -> FUNCTION functionBody
Rule 174   functionLiteralExpression -> FUNCTION TYPEDEF functionBody
Rule 175   functionLiteralExpression -> functionBody
Rule 176   functionLiteralExpression -> IDENTIFIER assignExpression
Rule 177   gotoStatement -> GOTO IDENTIFIER SEMICOLON
Rule 178   gotoStatement -> GOTO DEFAULT SEMICOLON
Rule 179   gotoStatement -> GOTO CASE SEMICOLON
Rule 180   gotoStatement -> GOTO CASE expression SEMICOLON
Rule 181   identifierChain -> IDENTIFIER
Rule 182   identifierChain -> identifierChain DOT IDENTIFIER
Rule 183   identifierList -> IDENTIFIER
Rule 184   identifierList -> identifierList COMMA IDENTIFIER
Rule 185   identifierOrTemplateChain -> identifierOrTemplateInstance
Rule 186   identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance
Rule 187   identifierOrTemplateInstance -> IDENTIFIER
Rule 188   ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement
Rule 189   ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
Rule 190   ifCondition -> AUTO IDENTIFIER ASSIGN expression
Rule 191   ifCondition -> TYPEDEF IDENTIFIER ASSIGN expression
Rule 192   ifCondition -> expression
Rule 193   importBind -> IDENTIFIER
Rule 194   importBind -> IDENTIFIER ASSIGN IDENTIFIER
Rule 195   importBindings -> singleImport COLON importBind
Rule 196   importBindings -> singleImport COLON importBind COLON importBind
Rule 197   importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON
Rule 198   importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON
Rule 199   importDeclaration -> IMPORT importBindings SEMICOLON
Rule 200   comma_singleImport -> COMMA singleImport comma_singleImport
Rule 201   comma_singleImport -> empty
Rule 202   index -> assignExpression
Rule 203   index -> assignExpression RANGE assignExpression
Rule 204   indexExpression -> unaryExpression LBRACKET RBRACKET
Rule 205   indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET
Rule 206   comma_index -> COMMA index comma_index
Rule 207   comma_index -> empty
Rule 208   initializer -> VOID
Rule 209   initializer -> nonVoidInitializer
Rule 210   labeledStatement -> IDENTIFIER COLON
Rule 211   labeledStatement -> IDENTIFIER COLON declarationOrStatement
Rule 212   memberFunctionAttribute -> IMMUTABLE
Rule 213   memberFunctionAttribute -> CONST
Rule 214   memberFunctionAttribute -> RETURN
Rule 215   mixinDeclaration -> mixinExpression SEMICOLON
Rule 216   mixinExpression -> MIXIN LPAREN assignExpression RPAREN
Rule 217   mulExpression -> powExpression
Rule 218   mulExpression -> mulExpression TIMES
Rule 219   mulExpression -> mulExpression DIV
Rule 220   mulExpression -> mulExpression MODULO
Rule 221   newAnonClassExpression -> NEW CLASS arguments baseClassList structBody
Rule 222   newAnonClassExpression -> NEW CLASS arguments structBody
Rule 223   newAnonClassExpression -> NEW CLASS baseClassList structBody
Rule 224   newAnonClassExpression -> NEW CLASS structBody
Rule 225   newAnonClassExpression -> NEW arguments CLASS structBody
Rule 226   newAnonClassExpression -> NEW arguments CLASS arguments structBody
Rule 227   newAnonClassExpression -> NEW arguments CLASS baseClassList structBody
Rule 228   newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody
Rule 229   newExpression -> NEW type
Rule 230   newExpression -> NEW type LBRACKET assignExpression RBRACKET
Rule 231   newExpression -> NEW type arguments
Rule 232   newExpression -> newAnonClassExpression
Rule 233   nonVoidInitializer -> assignExpression
Rule 234   nonVoidInitializer -> arrayInitializer
Rule 235   orExpression -> xorExpression
Rule 236   orExpression -> orExpression PIPE xorExpression
Rule 237   orOrExpression -> andAndExpression
Rule 238   orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression
Rule 239   parameterAttributeStar -> parameterAttribute parameterAttributeStar
Rule 240   parameterAttributeStar -> empty
Rule 241   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
Rule 242   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
Rule 243   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
Rule 244   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type
Rule 245   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
Rule 246   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER
Rule 247   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
Rule 248   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type
Rule 249   parameterAttribute -> typeConstructor
Rule 250   parameterAttribute -> FINAL
Rule 251   parameterAttribute -> AUTO
Rule 252   parameterAttribute -> RETURN
Rule 253   CommaParameterStar -> COMMA parameter CommaParameterStar
Rule 254   CommaParameterStar -> empty
Rule 255   parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
Rule 256   parameters -> LPAREN parameter CommaParameterStar RPAREN
Rule 257   parameters -> LPAREN ELLIPSIS RPAREN
Rule 258   parameters -> LPAREN RPAREN
Rule 259   postblit -> THIS LPAREN THIS RPAREN multiple_memberFunctionAttribute functionBody
Rule 260   postblit -> THIS LPAREN THIS RPAREN multiple_memberFunctionAttribute SEMICOLON
Rule 261   powExpression -> unaryExpression
Rule 262   powExpression -> powExpression CARET unaryExpression
Rule 263   LIT_STRPlus -> LIT_STR LIT_STRPlus
Rule 264   LIT_STRPlus -> LIT_STR
Rule 265   importExpression -> IMPORT LBRACKET assignExpression RBRACKET
Rule 266   primaryExpression -> identifierOrTemplateInstance
Rule 267   primaryExpression -> DOT identifierOrTemplateInstance
Rule 268   primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER
Rule 269   primaryExpression -> type DOT IDENTIFIER
Rule 270   primaryExpression -> type arguments
Rule 271   primaryExpression -> arrayLiteral
Rule 272   primaryExpression -> LPAREN expression RPAREN
Rule 273   primaryExpression -> functionLiteralExpression
Rule 274   primaryExpression -> mixinExpression
Rule 275   primaryExpression -> importExpression
Rule 276   primaryExpression -> DOLLAR
Rule 277   primaryExpression -> THIS
Rule 278   primaryExpression -> NULL
Rule 279   primaryExpression -> TRUE
Rule 280   primaryExpression -> FALSE
Rule 281   primaryExpression -> INUMBER
Rule 282   primaryExpression -> DNUMBER
Rule 283   primaryExpression -> LIT_STRPlus
Rule 284   primaryExpression -> LIT_CHAR
Rule 285   register -> IDENTIFIER
Rule 286   register -> IDENTIFIER LPAREN INUMBER RPAREN
Rule 287   relExpression -> shiftExpression
Rule 288   relExpression -> relExpression relOperator shiftExpression
Rule 289   relOperator -> LESS
Rule 290   relOperator -> LESS_EQ
Rule 291   relOperator -> GREATER
Rule 292   relOperator -> GREATER_EQ
Rule 293   relOperator -> IS_EQ_DIFF
Rule 294   relOperator -> NOT_EQ_DIFF
Rule 295   relOperator -> LESS_EQ_DIFF
Rule 296   relOperator -> LESS_DIFF
Rule 297   relOperator -> GREATER_EQ_DIFF
Rule 298   relOperator -> GREATER_DIFF
Rule 299   returnStatement -> RETURN expression SEMICOLON
Rule 300   returnStatement -> RETURN SEMICOLON
Rule 301   shiftExpression -> addExpression
Rule 302   shiftExpression -> shiftExpression LEFT_SHIFT addExpression
Rule 303   shiftExpression -> shiftExpression RIGHT_SHIFT addExpression
Rule 304   singleImport -> IDENTIFIER ASSIGN identifierChain
Rule 305   singleImport -> identifierChain
Rule 306   statementNoCaseNoDefault -> labeledStatement
Rule 307   statementNoCaseNoDefault -> blockStatement
Rule 308   statementNoCaseNoDefault -> ifStatement
Rule 309   statementNoCaseNoDefault -> whileStatement
Rule 310   statementNoCaseNoDefault -> doStatement
Rule 311   statementNoCaseNoDefault -> forStatement
Rule 312   statementNoCaseNoDefault -> foreachStatement
Rule 313   statementNoCaseNoDefault -> switchStatement
Rule 314   statementNoCaseNoDefault -> continueStatement
Rule 315   statementNoCaseNoDefault -> breakStatement
Rule 316   statementNoCaseNoDefault -> returnStatement
Rule 317   statementNoCaseNoDefault -> gotoStatement
Rule 318   statementNoCaseNoDefault -> withStatement
Rule 319   statementNoCaseNoDefault -> expressionStatement
Rule 320   statement -> statementNoCaseNoDefault
Rule 321   statement -> caseStatement
Rule 322   statement -> caseRangeStatement
Rule 323   statement -> defaultStatement
Rule 324   storageClass -> typeConstructor
Rule 325   storageClass -> AUTO
Rule 326   storageClass -> ENUM
Rule 327   storageClass -> EXTERN
Rule 328   storageClass -> FINAL
Rule 329   storageClass -> STATIC
Rule 330   declarationStar -> declaration declarationStar
Rule 331   declarationStar -> empty
Rule 332   structBody -> LBRACE declarationStar RBRACE
Rule 333   switchStatement -> SWITCH LBRACKET expression RBRACKET statement
Rule 334   symbol -> DOT identifierOrTemplateChain
Rule 335   symbol -> identifierOrTemplateChain
Rule 336   ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression
Rule 337   ternaryExpression -> orOrExpression
Rule 338   typeSuffixStar -> typeSuffix typeSuffixStar
Rule 339   typeSuffixStar -> empty
Rule 340   type -> typeConstructors type2 typeSuffixStar
Rule 341   type -> type2 typeSuffixStar
Rule 342   type2 -> builtinType
Rule 343   type2 -> symbol
Rule 344   type2 -> typeofExpression DOT identifierOrTemplateChain
Rule 345   type2 -> typeofExpression
Rule 346   type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET
Rule 347   typeConstructor -> CONST
Rule 348   typeConstructor -> IMMUTABLE
Rule 349   typeConstructors -> typeConstructor
Rule 350   typeConstructors -> typeConstructor typeConstructors
Rule 351   typeSpecialization -> type
Rule 352   typeSpecialization -> UNION
Rule 353   typeSpecialization -> CLASS
Rule 354   typeSpecialization -> ENUM
Rule 355   typeSpecialization -> FUNCTION
Rule 356   typeSpecialization -> CONST
Rule 357   typeSpecialization -> IMMUTABLE
Rule 358   typeSpecialization -> RETURN
Rule 359   typeSpecialization -> TYPEDEF
Rule 360   typeidExpression -> TYPEID LBRACKET type RBRACKET
Rule 361   typeidExpression -> TYPEID LBRACKET expression RBRACKET
Rule 362   typeofExpression -> TYPEOF LBRACKET expression RBRACKET
Rule 363   typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET
Rule 364   typeSuffix -> TIMES
Rule 365   typeSuffix -> LBRACKET type RBRACKET
Rule 366   typeSuffix -> LBRACKET RBRACKET
Rule 367   typeSuffix -> LBRACKET assignExpression RBRACKET
Rule 368   typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET
Rule 369   typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
Rule 370   typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
Rule 371   typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
Rule 372   typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
Rule 373   typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET
Rule 374   typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET
Rule 375   unaryExpression -> primaryExpression
Rule 376   unaryExpression -> AMPERSAND unaryExpression
Rule 377   unaryExpression -> EXCLAMATION unaryExpression
Rule 378   unaryExpression -> TIMES unaryExpression
Rule 379   unaryExpression -> PLUS unaryExpression
Rule 380   unaryExpression -> MINUS unaryExpression
Rule 381   unaryExpression -> DOT
Rule 382   unaryExpression -> PLUS_PLUS unaryExpression
Rule 383   unaryExpression -> ELLIPSIS
Rule 384   unaryExpression -> newExpression
Rule 385   unaryExpression -> deleteExpression
Rule 386   unaryExpression -> castExpression
Rule 387   unaryExpression -> functionCallExpression
Rule 388   unaryExpression -> indexExpression
Rule 389   unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
Rule 390   unaryExpression -> unaryExpression DOT newExpression
Rule 391   unaryExpression -> unaryExpression DOT
Rule 392   unaryExpression -> identifierOrTemplateInstance
Rule 393   unaryExpression -> RANGE
Rule 394   unaryExpression -> unaryExpression PLUS_PLUS
Rule 395   unionDeclaration -> UNION IDENTIFIER structBody
Rule 396   unionDeclaration -> UNION IDENTIFIER SEMICOLON
Rule 397   unionDeclaration -> UNION structBody
Rule 398   CommaDeclarator -> COMMA declarator CommaDeclarator
Rule 399   CommaDeclarator -> empty
Rule 400   variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON
Rule 401   variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON
Rule 402   variableDeclaration -> autoDeclaration
Rule 403   whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement
Rule 404   withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
Rule 405   xorExpression -> andExpression
Rule 406   xorExpression -> xorExpression CARET andExpression
Rule 407   empty -> <empty>

Terminals, with rules where they appear

ALIAS                : 5 6 13
AMPERSAND            : 17 376
ARROW                : 
ASSIGN               : 11 12 34 55 56 121 131 132 142 190 191 194 241 243 245 247 304 401
AUTO                 : 51 190 251 325
BACK_SLASH           : 
BODY                 : 60
BOOL                 : 66
BREAK                : 61 62
CARET                : 262 406
CASE                 : 75 75 76 179 180
CAST                 : 77 78 79
CHAR                 : 73
CLASS                : 82 83 84 221 222 223 224 225 226 227 228 353
COLON                : 30 54 75 75 76 83 122 135 139 140 195 196 196 210 211 336 369 370 371 372 373 374
COMMA                : 7 20 26 56 65 129 146 165 184 197 200 206 253 255 398
COMMENT              : 
CONST                : 52 80 213 347 356
CONTINUE             : 95 96
DEFAULT              : 122 178
DELEGATE             : 369 370
DELETE               : 123
DIV                  : 219
DNUMBER              : 282
DO                   : 126
DOLLAR               : 276
DOT                  : 182 186 267 268 269 334 344 381 389 390 391
DOUBLE_AMPERSAND     : 15
DOUBLE_PIPE          : 238
DOUBLE_QUOTE         : 127 127 128 128
ELLIPSIS             : 75 241 242 243 244 245 246 247 248 255 257 383
ELSE                 : 189
ENUM                 : 134 135 138 139 140 326 354
EQ_AND_BIT           : 41
EQ_DIV               : 42
EQ_LEFT              : 35
EQ_MINUS             : 38
EQ_MODULO            : 40
EQ_OR_BIT            : 43
EQ_PLUS              : 37
EQ_RIGHT             : 36
EQ_TIMES             : 39
EQ_XOR_BIT           : 44
EXCLAMATION          : 377
EXTERN               : 49 327
FALSE                : 280
FINAL                : 50 250 328
FLOAT                : 74
FOR                  : 148 149 150 151 152 153 154 155
FOREACH              : 156 157
FOREACH_REVERSE      : 158 159
FUNCTION             : 173 174 355 371 372
GOTO                 : 177 178 179 180
GREATER              : 291
GREATER_DIFF         : 298
GREATER_EQ           : 292
GREATER_EQ_DIFF      : 297
IDENTIFIER           : 11 12 13 55 56 62 82 83 84 96 120 121 131 132 133 138 139 140 141 142 160 161 162 163 169 170 171 172 176 177 181 182 183 184 187 190 191 193 194 194 210 211 241 241 242 242 243 244 245 246 268 269 285 286 304 395 396 401
IF                   : 88 188 189
IMMUTABLE            : 53 81 212 348 357
IMPORT               : 197 198 199 265
INT                  : 69
INUMBER              : 281 286
IS_EQ                : 143
IS_EQ_DIFF           : 293
LBRACE               : 58 59 98 134 135 332
LBRACKET             : 24 25 28 29 204 205 230 265 333 346 360 361 362 363 365 366 367 368 369 370 371 372 373 374 389 403 404
LEFT_SHIFT           : 302
LESS                 : 289
LESS_DIFF            : 296
LESS_EQ              : 290
LESS_EQ_DIFF         : 295
LIT_CHAR             : 284
LIT_STR              : 263 264
LONG                 : 71
LPAREN               : 22 23 77 78 79 88 124 125 126 148 149 150 151 152 153 154 155 156 157 158 159 188 189 216 255 256 257 258 259 260 268 272 286
MINUS                : 3 380
MINUS_MINUS          : 
MIXIN                : 216
MODULO               : 220
NEW                  : 221 222 223 224 225 226 227 228 229 230 231
NOT_EQ               : 144
NOT_EQ_DIFF          : 294
NULL                 : 278
PIPE                 : 236
PLUS                 : 2 379
PLUS_PLUS            : 382 394
PRIVATE              : 45
PROTECTED            : 46
PUBLIC               : 47
QUESTION             : 336
RANGE                : 157 159 203 368 393
RBRACE               : 58 59 98 134 135 332
RBRACKET             : 24 25 28 29 157 204 205 230 265 333 346 360 361 362 363 365 366 367 368 369 370 371 372 373 374 389 403 404
RETURN               : 214 252 299 300 358 363 374
RIGHT_SHIFT          : 303
RPAREN               : 22 23 77 78 79 88 124 125 126 148 149 150 151 152 153 154 155 156 158 159 188 189 216 255 256 257 258 259 260 268 272 286
SCOPE                : 
SEMICOLON            : 5 6 12 13 55 61 62 82 90 92 95 96 125 126 138 139 147 148 149 150 151 152 153 154 155 156 157 158 159 169 171 177 178 179 180 197 198 199 215 260 299 300 369 370 371 372 373 374 396 400 401
SHORT                : 67
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 48 329
SWITCH               : 333
THIS                 : 13 89 90 91 92 124 125 259 259 260 260 277
TILDE                : 4 124 125
TIMES                : 218 364 378
TRUE                 : 279
TYPEDEF              : 131 139 140 171 172 174 191 346 359 369 371 389 400 401
TYPEID               : 360 361 369 370 371 372
TYPEOF               : 362 363 373 374
UINT                 : 70
ULONG                : 72
UNION                : 352 395 396 397
USHORT               : 68
VOID                 : 208
WHILE                : 126 403
WITH                 : 404
error                : 

Nonterminals, with rules where they appear

CommaDeclarator      : 398 400
CommaParameterStar   : 253 255 256
LIT_STRPlus          : 263 283
addExpression        : 2 3 4 301 302 303 0
aliasDeclaration     : 103
aliasInitializer     : 5 7
aliasThisDeclaration : 104
andAndExpression     : 15 237 238
andExpression        : 17 405 406
anonymousEnumDeclaration : 105
anonymousEnumMember  : 134 135 136
argumentList         : 19 23 29 76
arguments            : 167 167 168 221 222 225 226 226 227 228 228 231 270
arrayInitializer     : 234
arrayLiteral         : 271
arrayMemberInitialization : 25 26
assignExpression     : 18 20 30 75 75 131 132 142 145 146 176 202 203 203 216 230 233 241 243 245 247 265 367 368 368
assignOperator       : 33
attribute            : 54 98 101
attributeDeclaration : 106
autoDeclaration      : 402
baseClass            : 64 65
baseClassList        : 65 83 221 223 227 228
blockStatement       : 60 166 307
bodyStatement        : 
breakStatement       : 315
builtinType          : 342
caseRangeStatement   : 322
caseStatement        : 321
castExpression       : 386
castQualifier        : 79
classDeclaration     : 107
cmpExpression        : 16 17
comma_aliasInitializer : 5 7
comma_arrayMemberInitialization : 25 26
comma_assign         : 19 20
comma_enumMember     : 128 129
comma_identifier_assign_initializer : 55 56
comma_index          : 205 206
comma_singleImport   : 197 198 200
constraint           : 91 92
constructor          : 108
continueStatement    : 314
declaration          : 99 118 148 150 152 154 330
declaration2         : 97
declarationOrStatement : 116 117 148 149 150 151 152 153 154 155 156 157 158 159 188 189 189 211 403
declarationStar      : 330 332
declarationsAndStatements : 59 75 76 117 122
declarator           : 398 400
defaultStatement     : 323
deleteExpression     : 385
destructor           : 109
doStatement          : 310
empty                : 8 10 21 27 57 94 100 102 130 137 201 207 240 254 331 339 399
enumBody             : 140
enumDeclaration      : 110
enumMember           : 127 128 129
equalExpression      : 86
expression           : 33 88 126 146 147 150 151 152 153 154 154 155 155 156 157 157 158 159 159 180 190 191 192 272 299 333 336 361 362 370 372 373 403 404
expressionStatement  : 319
forStatement         : 311
foreachStatement     : 312
foreachType          : 157 159 164 165
foreachTypeList      : 156 158 165
functionBody         : 89 91 124 170 172 173 174 175 259 401
functionCallExpression : 387
functionDeclaration  : 111
functionLiteralExpression : 12 273
gotoStatement        : 317
identifierChain      : 182 304 305
identifierList       : 6 184
identifierOrTemplateChain : 186 334 335 344
identifierOrTemplateInstance : 185 186 266 267 389 392
ifCondition          : 188 189
ifStatement          : 308
importBind           : 195 196 196
importBindings       : 197 199
importDeclaration    : 112
importExpression     : 275
index                : 205 206
indexExpression      : 388
initializer          : 55 56 121
labeledStatement     : 306
memberFunctionAttribute : 93
mixinDeclaration     : 113
mixinExpression      : 215 274
mulExpression        : 1 2 3 4 218 219 220
multiple_declaration : 98 99
multiple_memberFunctionAttribute : 89 90 91 92 93 124 125 169 170 171 172 259 260 369 370 371 372
multipleanonymousEnumMember : 134 135 136
multipleattributes   : 97 98 101
multiplestorageClass : 6 9 11 55 169 170 400 401
newAnonClassExpression : 232
newExpression        : 384 390
nonVoidInitializer   : 30 31 209
orExpression         : 14 15 236
orOrExpression       : 238 336 337
parameter            : 253 255 256
parameterAttribute   : 239
parameterAttributeStar : 239 241 241 241 242 242 242 243 243 243 244 244 244 245 245 245 246 246 246 247 247 247 248 248 248
parameters           : 89 90 91 92 169 170 171 172 369 370 371 372
postblit             : 
powExpression        : 217 262
primaryExpression    : 375
register             : 
relExpression        : 87 288
relOperator          : 288
returnStatement      : 316
shiftExpression      : 85 143 143 144 144 287 288 302 303
singleImport         : 195 196 197 198 200
statement            : 119 333
statementNoCaseNoDefault : 126 149 151 153 155 320 404
storageClass         : 9 55 169 170
structBody           : 83 84 221 222 223 224 225 226 227 228 395 397
switchStatement      : 313
symbol               : 167 343
ternaryExpression    : 32 33 336
type                 : 6 11 78 135 161 163 168 229 230 231 241 241 241 242 242 242 243 243 243 244 244 244 245 245 245 246 246 246 247 247 247 248 248 248 268 269 270 351 360 365
type2                : 63 340 341
typeConstructor      : 249 268 324 346 349 350
typeConstructors     : 162 163 340 350
typeSpecialization   : 
typeSuffix           : 338
typeSuffixStar       : 338 340 341
typeidExpression     : 369 370 371 372
typeofExpression     : 344 345 373 374
unaryExpression      : 77 78 79 123 167 204 205 261 262 376 377 378 379 380 382 390 391 394
unionDeclaration     : 114
variableDeclaration  : 115
whileStatement       : 309
withStatement        : 318
xorExpression        : 235 236 406

Parsing method: LALR

state 0

    (0) S' -> . addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 54
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 1

    (389) unaryExpression -> LBRACKET . TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (28) arrayLiteral -> LBRACKET . RBRACKET
    (29) arrayLiteral -> LBRACKET . argumentList RBRACKET
    (18) argumentList -> . assignExpression
    (19) argumentList -> . argumentList comma_assign
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    TYPEDEF         shift and go to state 81
    RBRACKET        shift and go to state 82
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    argumentList                   shift and go to state 76
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 71
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    typeConstructor                shift and go to state 15
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49

state 2

    (344) type2 -> typeofExpression . DOT identifierOrTemplateChain
    (345) type2 -> typeofExpression .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 83
    TIMES           reduce using rule 345 (type2 -> typeofExpression .)
    LBRACKET        reduce using rule 345 (type2 -> typeofExpression .)
    DELEGATE        reduce using rule 345 (type2 -> typeofExpression .)
    FUNCTION        reduce using rule 345 (type2 -> typeofExpression .)
    SEMICOLON       reduce using rule 345 (type2 -> typeofExpression .)
    LPAREN          reduce using rule 345 (type2 -> typeofExpression .)
    PLUS_PLUS       reduce using rule 345 (type2 -> typeofExpression .)
    CARET           reduce using rule 345 (type2 -> typeofExpression .)
    DIV             reduce using rule 345 (type2 -> typeofExpression .)
    MODULO          reduce using rule 345 (type2 -> typeofExpression .)
    PLUS            reduce using rule 345 (type2 -> typeofExpression .)
    MINUS           reduce using rule 345 (type2 -> typeofExpression .)
    TILDE           reduce using rule 345 (type2 -> typeofExpression .)
    $end            reduce using rule 345 (type2 -> typeofExpression .)
    LEFT_SHIFT      reduce using rule 345 (type2 -> typeofExpression .)
    RIGHT_SHIFT     reduce using rule 345 (type2 -> typeofExpression .)
    IS_EQ           reduce using rule 345 (type2 -> typeofExpression .)
    NOT_EQ          reduce using rule 345 (type2 -> typeofExpression .)
    AMPERSAND       reduce using rule 345 (type2 -> typeofExpression .)
    PIPE            reduce using rule 345 (type2 -> typeofExpression .)
    DOUBLE_AMPERSAND reduce using rule 345 (type2 -> typeofExpression .)
    QUESTION        reduce using rule 345 (type2 -> typeofExpression .)
    DOUBLE_PIPE     reduce using rule 345 (type2 -> typeofExpression .)
    ASSIGN          reduce using rule 345 (type2 -> typeofExpression .)
    EQ_LEFT         reduce using rule 345 (type2 -> typeofExpression .)
    EQ_RIGHT        reduce using rule 345 (type2 -> typeofExpression .)
    EQ_PLUS         reduce using rule 345 (type2 -> typeofExpression .)
    EQ_MINUS        reduce using rule 345 (type2 -> typeofExpression .)
    EQ_TIMES        reduce using rule 345 (type2 -> typeofExpression .)
    EQ_MODULO       reduce using rule 345 (type2 -> typeofExpression .)
    EQ_AND_BIT      reduce using rule 345 (type2 -> typeofExpression .)
    EQ_DIV          reduce using rule 345 (type2 -> typeofExpression .)
    EQ_OR_BIT       reduce using rule 345 (type2 -> typeofExpression .)
    EQ_XOR_BIT      reduce using rule 345 (type2 -> typeofExpression .)
    RBRACKET        reduce using rule 345 (type2 -> typeofExpression .)
    COMMA           reduce using rule 345 (type2 -> typeofExpression .)
    LESS            reduce using rule 345 (type2 -> typeofExpression .)
    LESS_EQ         reduce using rule 345 (type2 -> typeofExpression .)
    GREATER         reduce using rule 345 (type2 -> typeofExpression .)
    GREATER_EQ      reduce using rule 345 (type2 -> typeofExpression .)
    IS_EQ_DIFF      reduce using rule 345 (type2 -> typeofExpression .)
    NOT_EQ_DIFF     reduce using rule 345 (type2 -> typeofExpression .)
    LESS_EQ_DIFF    reduce using rule 345 (type2 -> typeofExpression .)
    LESS_DIFF       reduce using rule 345 (type2 -> typeofExpression .)
    GREATER_EQ_DIFF reduce using rule 345 (type2 -> typeofExpression .)
    GREATER_DIFF    reduce using rule 345 (type2 -> typeofExpression .)
    RPAREN          reduce using rule 345 (type2 -> typeofExpression .)
    COLON           reduce using rule 345 (type2 -> typeofExpression .)
    RANGE           reduce using rule 345 (type2 -> typeofExpression .)
    TYPEDEF         reduce using rule 345 (type2 -> typeofExpression .)
    IDENTIFIER      reduce using rule 345 (type2 -> typeofExpression .)
    RBRACE          reduce using rule 345 (type2 -> typeofExpression .)
    DOUBLE_QUOTE    reduce using rule 345 (type2 -> typeofExpression .)
    LBRACE          reduce using rule 345 (type2 -> typeofExpression .)
    FINAL           reduce using rule 345 (type2 -> typeofExpression .)
    AUTO            reduce using rule 345 (type2 -> typeofExpression .)
    RETURN          reduce using rule 345 (type2 -> typeofExpression .)
    CONST           reduce using rule 345 (type2 -> typeofExpression .)
    IMMUTABLE       reduce using rule 345 (type2 -> typeofExpression .)
    BOOL            reduce using rule 345 (type2 -> typeofExpression .)
    SHORT           reduce using rule 345 (type2 -> typeofExpression .)
    USHORT          reduce using rule 345 (type2 -> typeofExpression .)
    INT             reduce using rule 345 (type2 -> typeofExpression .)
    UINT            reduce using rule 345 (type2 -> typeofExpression .)
    LONG            reduce using rule 345 (type2 -> typeofExpression .)
    ULONG           reduce using rule 345 (type2 -> typeofExpression .)
    CHAR            reduce using rule 345 (type2 -> typeofExpression .)
    FLOAT           reduce using rule 345 (type2 -> typeofExpression .)
    TYPEOF          reduce using rule 345 (type2 -> typeofExpression .)
    ELLIPSIS        reduce using rule 345 (type2 -> typeofExpression .)

  ! DOT             [ reduce using rule 345 (type2 -> typeofExpression .) ]


state 3

    (166) functionBody -> blockStatement .

    DOT             reduce using rule 166 (functionBody -> blockStatement .)
    PLUS_PLUS       reduce using rule 166 (functionBody -> blockStatement .)
    LBRACKET        reduce using rule 166 (functionBody -> blockStatement .)
    CARET           reduce using rule 166 (functionBody -> blockStatement .)
    TIMES           reduce using rule 166 (functionBody -> blockStatement .)
    DIV             reduce using rule 166 (functionBody -> blockStatement .)
    MODULO          reduce using rule 166 (functionBody -> blockStatement .)
    PLUS            reduce using rule 166 (functionBody -> blockStatement .)
    MINUS           reduce using rule 166 (functionBody -> blockStatement .)
    TILDE           reduce using rule 166 (functionBody -> blockStatement .)
    LEFT_SHIFT      reduce using rule 166 (functionBody -> blockStatement .)
    RIGHT_SHIFT     reduce using rule 166 (functionBody -> blockStatement .)
    IS_EQ           reduce using rule 166 (functionBody -> blockStatement .)
    NOT_EQ          reduce using rule 166 (functionBody -> blockStatement .)
    AMPERSAND       reduce using rule 166 (functionBody -> blockStatement .)
    PIPE            reduce using rule 166 (functionBody -> blockStatement .)
    DOUBLE_AMPERSAND reduce using rule 166 (functionBody -> blockStatement .)
    QUESTION        reduce using rule 166 (functionBody -> blockStatement .)
    DOUBLE_PIPE     reduce using rule 166 (functionBody -> blockStatement .)
    ASSIGN          reduce using rule 166 (functionBody -> blockStatement .)
    EQ_LEFT         reduce using rule 166 (functionBody -> blockStatement .)
    EQ_RIGHT        reduce using rule 166 (functionBody -> blockStatement .)
    EQ_PLUS         reduce using rule 166 (functionBody -> blockStatement .)
    EQ_MINUS        reduce using rule 166 (functionBody -> blockStatement .)
    EQ_TIMES        reduce using rule 166 (functionBody -> blockStatement .)
    EQ_MODULO       reduce using rule 166 (functionBody -> blockStatement .)
    EQ_AND_BIT      reduce using rule 166 (functionBody -> blockStatement .)
    EQ_DIV          reduce using rule 166 (functionBody -> blockStatement .)
    EQ_OR_BIT       reduce using rule 166 (functionBody -> blockStatement .)
    EQ_XOR_BIT      reduce using rule 166 (functionBody -> blockStatement .)
    RPAREN          reduce using rule 166 (functionBody -> blockStatement .)
    COMMA           reduce using rule 166 (functionBody -> blockStatement .)
    LESS            reduce using rule 166 (functionBody -> blockStatement .)
    LESS_EQ         reduce using rule 166 (functionBody -> blockStatement .)
    GREATER         reduce using rule 166 (functionBody -> blockStatement .)
    GREATER_EQ      reduce using rule 166 (functionBody -> blockStatement .)
    IS_EQ_DIFF      reduce using rule 166 (functionBody -> blockStatement .)
    NOT_EQ_DIFF     reduce using rule 166 (functionBody -> blockStatement .)
    LESS_EQ_DIFF    reduce using rule 166 (functionBody -> blockStatement .)
    LESS_DIFF       reduce using rule 166 (functionBody -> blockStatement .)
    GREATER_EQ_DIFF reduce using rule 166 (functionBody -> blockStatement .)
    GREATER_DIFF    reduce using rule 166 (functionBody -> blockStatement .)
    $end            reduce using rule 166 (functionBody -> blockStatement .)
    RBRACKET        reduce using rule 166 (functionBody -> blockStatement .)
    SEMICOLON       reduce using rule 166 (functionBody -> blockStatement .)
    COLON           reduce using rule 166 (functionBody -> blockStatement .)
    RANGE           reduce using rule 166 (functionBody -> blockStatement .)
    TYPEDEF         reduce using rule 166 (functionBody -> blockStatement .)
    IDENTIFIER      reduce using rule 166 (functionBody -> blockStatement .)
    RBRACE          reduce using rule 166 (functionBody -> blockStatement .)
    DOUBLE_QUOTE    reduce using rule 166 (functionBody -> blockStatement .)
    LPAREN          reduce using rule 166 (functionBody -> blockStatement .)
    PRIVATE         reduce using rule 166 (functionBody -> blockStatement .)
    PROTECTED       reduce using rule 166 (functionBody -> blockStatement .)
    PUBLIC          reduce using rule 166 (functionBody -> blockStatement .)
    STATIC          reduce using rule 166 (functionBody -> blockStatement .)
    EXTERN          reduce using rule 166 (functionBody -> blockStatement .)
    FINAL           reduce using rule 166 (functionBody -> blockStatement .)
    AUTO            reduce using rule 166 (functionBody -> blockStatement .)
    CONST           reduce using rule 166 (functionBody -> blockStatement .)
    IMMUTABLE       reduce using rule 166 (functionBody -> blockStatement .)
    CASE            reduce using rule 166 (functionBody -> blockStatement .)
    DEFAULT         reduce using rule 166 (functionBody -> blockStatement .)
    LBRACE          reduce using rule 166 (functionBody -> blockStatement .)
    IF              reduce using rule 166 (functionBody -> blockStatement .)
    WHILE           reduce using rule 166 (functionBody -> blockStatement .)
    DO              reduce using rule 166 (functionBody -> blockStatement .)
    FOR             reduce using rule 166 (functionBody -> blockStatement .)
    FOREACH         reduce using rule 166 (functionBody -> blockStatement .)
    FOREACH_REVERSE reduce using rule 166 (functionBody -> blockStatement .)
    SWITCH          reduce using rule 166 (functionBody -> blockStatement .)
    CONTINUE        reduce using rule 166 (functionBody -> blockStatement .)
    BREAK           reduce using rule 166 (functionBody -> blockStatement .)
    RETURN          reduce using rule 166 (functionBody -> blockStatement .)
    GOTO            reduce using rule 166 (functionBody -> blockStatement .)
    WITH            reduce using rule 166 (functionBody -> blockStatement .)
    EXCLAMATION     reduce using rule 166 (functionBody -> blockStatement .)
    ELLIPSIS        reduce using rule 166 (functionBody -> blockStatement .)
    DOLLAR          reduce using rule 166 (functionBody -> blockStatement .)
    THIS            reduce using rule 166 (functionBody -> blockStatement .)
    NULL            reduce using rule 166 (functionBody -> blockStatement .)
    TRUE            reduce using rule 166 (functionBody -> blockStatement .)
    FALSE           reduce using rule 166 (functionBody -> blockStatement .)
    INUMBER         reduce using rule 166 (functionBody -> blockStatement .)
    DNUMBER         reduce using rule 166 (functionBody -> blockStatement .)
    LIT_CHAR        reduce using rule 166 (functionBody -> blockStatement .)
    NEW             reduce using rule 166 (functionBody -> blockStatement .)
    DELETE          reduce using rule 166 (functionBody -> blockStatement .)
    CAST            reduce using rule 166 (functionBody -> blockStatement .)
    FUNCTION        reduce using rule 166 (functionBody -> blockStatement .)
    MIXIN           reduce using rule 166 (functionBody -> blockStatement .)
    IMPORT          reduce using rule 166 (functionBody -> blockStatement .)
    LIT_STR         reduce using rule 166 (functionBody -> blockStatement .)
    BOOL            reduce using rule 166 (functionBody -> blockStatement .)
    SHORT           reduce using rule 166 (functionBody -> blockStatement .)
    USHORT          reduce using rule 166 (functionBody -> blockStatement .)
    INT             reduce using rule 166 (functionBody -> blockStatement .)
    UINT            reduce using rule 166 (functionBody -> blockStatement .)
    LONG            reduce using rule 166 (functionBody -> blockStatement .)
    ULONG           reduce using rule 166 (functionBody -> blockStatement .)
    CHAR            reduce using rule 166 (functionBody -> blockStatement .)
    FLOAT           reduce using rule 166 (functionBody -> blockStatement .)
    TYPEOF          reduce using rule 166 (functionBody -> blockStatement .)
    ALIAS           reduce using rule 166 (functionBody -> blockStatement .)
    ENUM            reduce using rule 166 (functionBody -> blockStatement .)
    CLASS           reduce using rule 166 (functionBody -> blockStatement .)
    UNION           reduce using rule 166 (functionBody -> blockStatement .)
    ELSE            reduce using rule 166 (functionBody -> blockStatement .)


state 4

    (279) primaryExpression -> TRUE .

    DOT             reduce using rule 279 (primaryExpression -> TRUE .)
    PLUS_PLUS       reduce using rule 279 (primaryExpression -> TRUE .)
    LBRACKET        reduce using rule 279 (primaryExpression -> TRUE .)
    CARET           reduce using rule 279 (primaryExpression -> TRUE .)
    TIMES           reduce using rule 279 (primaryExpression -> TRUE .)
    DIV             reduce using rule 279 (primaryExpression -> TRUE .)
    MODULO          reduce using rule 279 (primaryExpression -> TRUE .)
    PLUS            reduce using rule 279 (primaryExpression -> TRUE .)
    MINUS           reduce using rule 279 (primaryExpression -> TRUE .)
    TILDE           reduce using rule 279 (primaryExpression -> TRUE .)
    LEFT_SHIFT      reduce using rule 279 (primaryExpression -> TRUE .)
    RIGHT_SHIFT     reduce using rule 279 (primaryExpression -> TRUE .)
    IS_EQ           reduce using rule 279 (primaryExpression -> TRUE .)
    NOT_EQ          reduce using rule 279 (primaryExpression -> TRUE .)
    AMPERSAND       reduce using rule 279 (primaryExpression -> TRUE .)
    PIPE            reduce using rule 279 (primaryExpression -> TRUE .)
    DOUBLE_AMPERSAND reduce using rule 279 (primaryExpression -> TRUE .)
    QUESTION        reduce using rule 279 (primaryExpression -> TRUE .)
    DOUBLE_PIPE     reduce using rule 279 (primaryExpression -> TRUE .)
    ASSIGN          reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_LEFT         reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_RIGHT        reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_PLUS         reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_MINUS        reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_TIMES        reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_MODULO       reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_AND_BIT      reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_DIV          reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_OR_BIT       reduce using rule 279 (primaryExpression -> TRUE .)
    EQ_XOR_BIT      reduce using rule 279 (primaryExpression -> TRUE .)
    RBRACKET        reduce using rule 279 (primaryExpression -> TRUE .)
    COMMA           reduce using rule 279 (primaryExpression -> TRUE .)
    LESS            reduce using rule 279 (primaryExpression -> TRUE .)
    LESS_EQ         reduce using rule 279 (primaryExpression -> TRUE .)
    GREATER         reduce using rule 279 (primaryExpression -> TRUE .)
    GREATER_EQ      reduce using rule 279 (primaryExpression -> TRUE .)
    IS_EQ_DIFF      reduce using rule 279 (primaryExpression -> TRUE .)
    NOT_EQ_DIFF     reduce using rule 279 (primaryExpression -> TRUE .)
    LESS_EQ_DIFF    reduce using rule 279 (primaryExpression -> TRUE .)
    LESS_DIFF       reduce using rule 279 (primaryExpression -> TRUE .)
    GREATER_EQ_DIFF reduce using rule 279 (primaryExpression -> TRUE .)
    GREATER_DIFF    reduce using rule 279 (primaryExpression -> TRUE .)
    RPAREN          reduce using rule 279 (primaryExpression -> TRUE .)
    $end            reduce using rule 279 (primaryExpression -> TRUE .)
    SEMICOLON       reduce using rule 279 (primaryExpression -> TRUE .)
    COLON           reduce using rule 279 (primaryExpression -> TRUE .)
    RANGE           reduce using rule 279 (primaryExpression -> TRUE .)
    TYPEDEF         reduce using rule 279 (primaryExpression -> TRUE .)
    IDENTIFIER      reduce using rule 279 (primaryExpression -> TRUE .)
    RBRACE          reduce using rule 279 (primaryExpression -> TRUE .)
    DOUBLE_QUOTE    reduce using rule 279 (primaryExpression -> TRUE .)
    LPAREN          reduce using rule 279 (primaryExpression -> TRUE .)


state 5

    (380) unaryExpression -> MINUS . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 84
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 6

    (271) primaryExpression -> arrayLiteral .

    DOT             reduce using rule 271 (primaryExpression -> arrayLiteral .)
    PLUS_PLUS       reduce using rule 271 (primaryExpression -> arrayLiteral .)
    LBRACKET        reduce using rule 271 (primaryExpression -> arrayLiteral .)
    CARET           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    TIMES           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    DIV             reduce using rule 271 (primaryExpression -> arrayLiteral .)
    MODULO          reduce using rule 271 (primaryExpression -> arrayLiteral .)
    PLUS            reduce using rule 271 (primaryExpression -> arrayLiteral .)
    MINUS           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    TILDE           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    LEFT_SHIFT      reduce using rule 271 (primaryExpression -> arrayLiteral .)
    RIGHT_SHIFT     reduce using rule 271 (primaryExpression -> arrayLiteral .)
    IS_EQ           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    NOT_EQ          reduce using rule 271 (primaryExpression -> arrayLiteral .)
    AMPERSAND       reduce using rule 271 (primaryExpression -> arrayLiteral .)
    PIPE            reduce using rule 271 (primaryExpression -> arrayLiteral .)
    DOUBLE_AMPERSAND reduce using rule 271 (primaryExpression -> arrayLiteral .)
    QUESTION        reduce using rule 271 (primaryExpression -> arrayLiteral .)
    DOUBLE_PIPE     reduce using rule 271 (primaryExpression -> arrayLiteral .)
    ASSIGN          reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_LEFT         reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_RIGHT        reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_PLUS         reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_MINUS        reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_TIMES        reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_MODULO       reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_AND_BIT      reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_DIV          reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_OR_BIT       reduce using rule 271 (primaryExpression -> arrayLiteral .)
    EQ_XOR_BIT      reduce using rule 271 (primaryExpression -> arrayLiteral .)
    RBRACKET        reduce using rule 271 (primaryExpression -> arrayLiteral .)
    COMMA           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    LESS            reduce using rule 271 (primaryExpression -> arrayLiteral .)
    LESS_EQ         reduce using rule 271 (primaryExpression -> arrayLiteral .)
    GREATER         reduce using rule 271 (primaryExpression -> arrayLiteral .)
    GREATER_EQ      reduce using rule 271 (primaryExpression -> arrayLiteral .)
    IS_EQ_DIFF      reduce using rule 271 (primaryExpression -> arrayLiteral .)
    NOT_EQ_DIFF     reduce using rule 271 (primaryExpression -> arrayLiteral .)
    LESS_EQ_DIFF    reduce using rule 271 (primaryExpression -> arrayLiteral .)
    LESS_DIFF       reduce using rule 271 (primaryExpression -> arrayLiteral .)
    GREATER_EQ_DIFF reduce using rule 271 (primaryExpression -> arrayLiteral .)
    GREATER_DIFF    reduce using rule 271 (primaryExpression -> arrayLiteral .)
    RPAREN          reduce using rule 271 (primaryExpression -> arrayLiteral .)
    $end            reduce using rule 271 (primaryExpression -> arrayLiteral .)
    SEMICOLON       reduce using rule 271 (primaryExpression -> arrayLiteral .)
    COLON           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    RANGE           reduce using rule 271 (primaryExpression -> arrayLiteral .)
    TYPEDEF         reduce using rule 271 (primaryExpression -> arrayLiteral .)
    IDENTIFIER      reduce using rule 271 (primaryExpression -> arrayLiteral .)
    RBRACE          reduce using rule 271 (primaryExpression -> arrayLiteral .)
    DOUBLE_QUOTE    reduce using rule 271 (primaryExpression -> arrayLiteral .)
    LPAREN          reduce using rule 271 (primaryExpression -> arrayLiteral .)


state 7

    (71) builtinType -> LONG .

    TIMES           reduce using rule 71 (builtinType -> LONG .)
    LBRACKET        reduce using rule 71 (builtinType -> LONG .)
    DELEGATE        reduce using rule 71 (builtinType -> LONG .)
    FUNCTION        reduce using rule 71 (builtinType -> LONG .)
    SEMICOLON       reduce using rule 71 (builtinType -> LONG .)
    DOT             reduce using rule 71 (builtinType -> LONG .)
    LPAREN          reduce using rule 71 (builtinType -> LONG .)
    IDENTIFIER      reduce using rule 71 (builtinType -> LONG .)
    ELLIPSIS        reduce using rule 71 (builtinType -> LONG .)
    COMMA           reduce using rule 71 (builtinType -> LONG .)
    LBRACE          reduce using rule 71 (builtinType -> LONG .)
    RBRACKET        reduce using rule 71 (builtinType -> LONG .)
    ASSIGN          reduce using rule 71 (builtinType -> LONG .)
    RPAREN          reduce using rule 71 (builtinType -> LONG .)
    FINAL           reduce using rule 71 (builtinType -> LONG .)
    AUTO            reduce using rule 71 (builtinType -> LONG .)
    RETURN          reduce using rule 71 (builtinType -> LONG .)
    CONST           reduce using rule 71 (builtinType -> LONG .)
    IMMUTABLE       reduce using rule 71 (builtinType -> LONG .)
    BOOL            reduce using rule 71 (builtinType -> LONG .)
    SHORT           reduce using rule 71 (builtinType -> LONG .)
    USHORT          reduce using rule 71 (builtinType -> LONG .)
    INT             reduce using rule 71 (builtinType -> LONG .)
    UINT            reduce using rule 71 (builtinType -> LONG .)
    LONG            reduce using rule 71 (builtinType -> LONG .)
    ULONG           reduce using rule 71 (builtinType -> LONG .)
    CHAR            reduce using rule 71 (builtinType -> LONG .)
    FLOAT           reduce using rule 71 (builtinType -> LONG .)
    TYPEOF          reduce using rule 71 (builtinType -> LONG .)
    PLUS_PLUS       reduce using rule 71 (builtinType -> LONG .)
    CARET           reduce using rule 71 (builtinType -> LONG .)
    DIV             reduce using rule 71 (builtinType -> LONG .)
    MODULO          reduce using rule 71 (builtinType -> LONG .)
    PLUS            reduce using rule 71 (builtinType -> LONG .)
    MINUS           reduce using rule 71 (builtinType -> LONG .)
    TILDE           reduce using rule 71 (builtinType -> LONG .)
    $end            reduce using rule 71 (builtinType -> LONG .)
    LEFT_SHIFT      reduce using rule 71 (builtinType -> LONG .)
    RIGHT_SHIFT     reduce using rule 71 (builtinType -> LONG .)
    IS_EQ           reduce using rule 71 (builtinType -> LONG .)
    NOT_EQ          reduce using rule 71 (builtinType -> LONG .)
    AMPERSAND       reduce using rule 71 (builtinType -> LONG .)
    PIPE            reduce using rule 71 (builtinType -> LONG .)
    DOUBLE_AMPERSAND reduce using rule 71 (builtinType -> LONG .)
    QUESTION        reduce using rule 71 (builtinType -> LONG .)
    DOUBLE_PIPE     reduce using rule 71 (builtinType -> LONG .)
    EQ_LEFT         reduce using rule 71 (builtinType -> LONG .)
    EQ_RIGHT        reduce using rule 71 (builtinType -> LONG .)
    EQ_PLUS         reduce using rule 71 (builtinType -> LONG .)
    EQ_MINUS        reduce using rule 71 (builtinType -> LONG .)
    EQ_TIMES        reduce using rule 71 (builtinType -> LONG .)
    EQ_MODULO       reduce using rule 71 (builtinType -> LONG .)
    EQ_AND_BIT      reduce using rule 71 (builtinType -> LONG .)
    EQ_DIV          reduce using rule 71 (builtinType -> LONG .)
    EQ_OR_BIT       reduce using rule 71 (builtinType -> LONG .)
    EQ_XOR_BIT      reduce using rule 71 (builtinType -> LONG .)
    LESS            reduce using rule 71 (builtinType -> LONG .)
    LESS_EQ         reduce using rule 71 (builtinType -> LONG .)
    GREATER         reduce using rule 71 (builtinType -> LONG .)
    GREATER_EQ      reduce using rule 71 (builtinType -> LONG .)
    IS_EQ_DIFF      reduce using rule 71 (builtinType -> LONG .)
    NOT_EQ_DIFF     reduce using rule 71 (builtinType -> LONG .)
    LESS_EQ_DIFF    reduce using rule 71 (builtinType -> LONG .)
    LESS_DIFF       reduce using rule 71 (builtinType -> LONG .)
    GREATER_EQ_DIFF reduce using rule 71 (builtinType -> LONG .)
    GREATER_DIFF    reduce using rule 71 (builtinType -> LONG .)
    COLON           reduce using rule 71 (builtinType -> LONG .)
    RANGE           reduce using rule 71 (builtinType -> LONG .)
    TYPEDEF         reduce using rule 71 (builtinType -> LONG .)
    RBRACE          reduce using rule 71 (builtinType -> LONG .)
    DOUBLE_QUOTE    reduce using rule 71 (builtinType -> LONG .)


state 8

    (379) unaryExpression -> PLUS . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 85
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 9

    (265) importExpression -> IMPORT . LBRACKET assignExpression RBRACKET

    LBRACKET        shift and go to state 86


state 10

    (340) type -> typeConstructors . type2 typeSuffixStar
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 92
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    type2                          shift and go to state 88

state 11

    (282) primaryExpression -> DNUMBER .

    DOT             reduce using rule 282 (primaryExpression -> DNUMBER .)
    PLUS_PLUS       reduce using rule 282 (primaryExpression -> DNUMBER .)
    LBRACKET        reduce using rule 282 (primaryExpression -> DNUMBER .)
    CARET           reduce using rule 282 (primaryExpression -> DNUMBER .)
    TIMES           reduce using rule 282 (primaryExpression -> DNUMBER .)
    DIV             reduce using rule 282 (primaryExpression -> DNUMBER .)
    MODULO          reduce using rule 282 (primaryExpression -> DNUMBER .)
    PLUS            reduce using rule 282 (primaryExpression -> DNUMBER .)
    MINUS           reduce using rule 282 (primaryExpression -> DNUMBER .)
    TILDE           reduce using rule 282 (primaryExpression -> DNUMBER .)
    LEFT_SHIFT      reduce using rule 282 (primaryExpression -> DNUMBER .)
    RIGHT_SHIFT     reduce using rule 282 (primaryExpression -> DNUMBER .)
    IS_EQ           reduce using rule 282 (primaryExpression -> DNUMBER .)
    NOT_EQ          reduce using rule 282 (primaryExpression -> DNUMBER .)
    AMPERSAND       reduce using rule 282 (primaryExpression -> DNUMBER .)
    PIPE            reduce using rule 282 (primaryExpression -> DNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 282 (primaryExpression -> DNUMBER .)
    QUESTION        reduce using rule 282 (primaryExpression -> DNUMBER .)
    DOUBLE_PIPE     reduce using rule 282 (primaryExpression -> DNUMBER .)
    ASSIGN          reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_LEFT         reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_RIGHT        reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_PLUS         reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_MINUS        reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_TIMES        reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_MODULO       reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_AND_BIT      reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_DIV          reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_OR_BIT       reduce using rule 282 (primaryExpression -> DNUMBER .)
    EQ_XOR_BIT      reduce using rule 282 (primaryExpression -> DNUMBER .)
    RBRACKET        reduce using rule 282 (primaryExpression -> DNUMBER .)
    COMMA           reduce using rule 282 (primaryExpression -> DNUMBER .)
    LESS            reduce using rule 282 (primaryExpression -> DNUMBER .)
    LESS_EQ         reduce using rule 282 (primaryExpression -> DNUMBER .)
    GREATER         reduce using rule 282 (primaryExpression -> DNUMBER .)
    GREATER_EQ      reduce using rule 282 (primaryExpression -> DNUMBER .)
    IS_EQ_DIFF      reduce using rule 282 (primaryExpression -> DNUMBER .)
    NOT_EQ_DIFF     reduce using rule 282 (primaryExpression -> DNUMBER .)
    LESS_EQ_DIFF    reduce using rule 282 (primaryExpression -> DNUMBER .)
    LESS_DIFF       reduce using rule 282 (primaryExpression -> DNUMBER .)
    GREATER_EQ_DIFF reduce using rule 282 (primaryExpression -> DNUMBER .)
    GREATER_DIFF    reduce using rule 282 (primaryExpression -> DNUMBER .)
    RPAREN          reduce using rule 282 (primaryExpression -> DNUMBER .)
    $end            reduce using rule 282 (primaryExpression -> DNUMBER .)
    SEMICOLON       reduce using rule 282 (primaryExpression -> DNUMBER .)
    COLON           reduce using rule 282 (primaryExpression -> DNUMBER .)
    RANGE           reduce using rule 282 (primaryExpression -> DNUMBER .)
    TYPEDEF         reduce using rule 282 (primaryExpression -> DNUMBER .)
    IDENTIFIER      reduce using rule 282 (primaryExpression -> DNUMBER .)
    RBRACE          reduce using rule 282 (primaryExpression -> DNUMBER .)
    DOUBLE_QUOTE    reduce using rule 282 (primaryExpression -> DNUMBER .)
    LPAREN          reduce using rule 282 (primaryExpression -> DNUMBER .)


state 12

    (277) primaryExpression -> THIS .

    DOT             reduce using rule 277 (primaryExpression -> THIS .)
    PLUS_PLUS       reduce using rule 277 (primaryExpression -> THIS .)
    LBRACKET        reduce using rule 277 (primaryExpression -> THIS .)
    CARET           reduce using rule 277 (primaryExpression -> THIS .)
    TIMES           reduce using rule 277 (primaryExpression -> THIS .)
    DIV             reduce using rule 277 (primaryExpression -> THIS .)
    MODULO          reduce using rule 277 (primaryExpression -> THIS .)
    PLUS            reduce using rule 277 (primaryExpression -> THIS .)
    MINUS           reduce using rule 277 (primaryExpression -> THIS .)
    TILDE           reduce using rule 277 (primaryExpression -> THIS .)
    LEFT_SHIFT      reduce using rule 277 (primaryExpression -> THIS .)
    RIGHT_SHIFT     reduce using rule 277 (primaryExpression -> THIS .)
    IS_EQ           reduce using rule 277 (primaryExpression -> THIS .)
    NOT_EQ          reduce using rule 277 (primaryExpression -> THIS .)
    AMPERSAND       reduce using rule 277 (primaryExpression -> THIS .)
    PIPE            reduce using rule 277 (primaryExpression -> THIS .)
    DOUBLE_AMPERSAND reduce using rule 277 (primaryExpression -> THIS .)
    QUESTION        reduce using rule 277 (primaryExpression -> THIS .)
    DOUBLE_PIPE     reduce using rule 277 (primaryExpression -> THIS .)
    ASSIGN          reduce using rule 277 (primaryExpression -> THIS .)
    EQ_LEFT         reduce using rule 277 (primaryExpression -> THIS .)
    EQ_RIGHT        reduce using rule 277 (primaryExpression -> THIS .)
    EQ_PLUS         reduce using rule 277 (primaryExpression -> THIS .)
    EQ_MINUS        reduce using rule 277 (primaryExpression -> THIS .)
    EQ_TIMES        reduce using rule 277 (primaryExpression -> THIS .)
    EQ_MODULO       reduce using rule 277 (primaryExpression -> THIS .)
    EQ_AND_BIT      reduce using rule 277 (primaryExpression -> THIS .)
    EQ_DIV          reduce using rule 277 (primaryExpression -> THIS .)
    EQ_OR_BIT       reduce using rule 277 (primaryExpression -> THIS .)
    EQ_XOR_BIT      reduce using rule 277 (primaryExpression -> THIS .)
    RBRACKET        reduce using rule 277 (primaryExpression -> THIS .)
    COMMA           reduce using rule 277 (primaryExpression -> THIS .)
    LESS            reduce using rule 277 (primaryExpression -> THIS .)
    LESS_EQ         reduce using rule 277 (primaryExpression -> THIS .)
    GREATER         reduce using rule 277 (primaryExpression -> THIS .)
    GREATER_EQ      reduce using rule 277 (primaryExpression -> THIS .)
    IS_EQ_DIFF      reduce using rule 277 (primaryExpression -> THIS .)
    NOT_EQ_DIFF     reduce using rule 277 (primaryExpression -> THIS .)
    LESS_EQ_DIFF    reduce using rule 277 (primaryExpression -> THIS .)
    LESS_DIFF       reduce using rule 277 (primaryExpression -> THIS .)
    GREATER_EQ_DIFF reduce using rule 277 (primaryExpression -> THIS .)
    GREATER_DIFF    reduce using rule 277 (primaryExpression -> THIS .)
    RPAREN          reduce using rule 277 (primaryExpression -> THIS .)
    $end            reduce using rule 277 (primaryExpression -> THIS .)
    SEMICOLON       reduce using rule 277 (primaryExpression -> THIS .)
    COLON           reduce using rule 277 (primaryExpression -> THIS .)
    RANGE           reduce using rule 277 (primaryExpression -> THIS .)
    TYPEDEF         reduce using rule 277 (primaryExpression -> THIS .)
    IDENTIFIER      reduce using rule 277 (primaryExpression -> THIS .)
    RBRACE          reduce using rule 277 (primaryExpression -> THIS .)
    DOUBLE_QUOTE    reduce using rule 277 (primaryExpression -> THIS .)
    LPAREN          reduce using rule 277 (primaryExpression -> THIS .)


state 13

    (362) typeofExpression -> TYPEOF . LBRACKET expression RBRACKET
    (363) typeofExpression -> TYPEOF . LBRACKET RETURN RBRACKET

    LBRACKET        shift and go to state 93


state 14

    (335) symbol -> identifierOrTemplateChain .
    (186) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

  ! shift/reduce conflict for DOT resolved as shift
    LPAREN          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    TIMES           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LBRACKET        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    DELEGATE        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    FUNCTION        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    SEMICOLON       reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    IDENTIFIER      reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    PLUS_PLUS       reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    CARET           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    DIV             reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    MODULO          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    PLUS            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    MINUS           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    TILDE           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    $end            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LEFT_SHIFT      reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    RIGHT_SHIFT     reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    IS_EQ           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    NOT_EQ          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    AMPERSAND       reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    PIPE            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    DOUBLE_AMPERSAND reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    QUESTION        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    DOUBLE_PIPE     reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    ASSIGN          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_LEFT         reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_RIGHT        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_PLUS         reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_MINUS        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_TIMES        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_MODULO       reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_AND_BIT      reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_DIV          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_OR_BIT       reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    EQ_XOR_BIT      reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    RBRACKET        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    COMMA           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LESS            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LESS_EQ         reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    GREATER         reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    GREATER_EQ      reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    IS_EQ_DIFF      reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    NOT_EQ_DIFF     reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LESS_EQ_DIFF    reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LESS_DIFF       reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    GREATER_EQ_DIFF reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    GREATER_DIFF    reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    RPAREN          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    COLON           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    RANGE           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    TYPEDEF         reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    RBRACE          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    DOUBLE_QUOTE    reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LBRACE          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    FINAL           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    AUTO            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    RETURN          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    CONST           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    IMMUTABLE       reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    BOOL            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    SHORT           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    USHORT          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    INT             reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    UINT            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    LONG            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    ULONG           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    CHAR            reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    FLOAT           reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    TYPEOF          reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    ELLIPSIS        reduce using rule 335 (symbol -> identifierOrTemplateChain .)
    DOT             shift and go to state 94

  ! DOT             [ reduce using rule 335 (symbol -> identifierOrTemplateChain .) ]


state 15

    (268) primaryExpression -> typeConstructor . LPAREN type RPAREN DOT IDENTIFIER
    (349) typeConstructors -> typeConstructor .
    (350) typeConstructors -> typeConstructor . typeConstructors
    (346) type2 -> typeConstructor . LBRACKET TYPEDEF RBRACKET
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LPAREN          shift and go to state 97
    BOOL            reduce using rule 349 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 349 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 349 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 349 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 349 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 349 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 349 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 349 (typeConstructors -> typeConstructor .)
    LBRACKET        shift and go to state 96
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 95
    typeConstructors               shift and go to state 98

state 16

    (123) deleteExpression -> DELETE . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 99
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 17

    (67) builtinType -> SHORT .

    TIMES           reduce using rule 67 (builtinType -> SHORT .)
    LBRACKET        reduce using rule 67 (builtinType -> SHORT .)
    DELEGATE        reduce using rule 67 (builtinType -> SHORT .)
    FUNCTION        reduce using rule 67 (builtinType -> SHORT .)
    SEMICOLON       reduce using rule 67 (builtinType -> SHORT .)
    DOT             reduce using rule 67 (builtinType -> SHORT .)
    LPAREN          reduce using rule 67 (builtinType -> SHORT .)
    IDENTIFIER      reduce using rule 67 (builtinType -> SHORT .)
    ELLIPSIS        reduce using rule 67 (builtinType -> SHORT .)
    COMMA           reduce using rule 67 (builtinType -> SHORT .)
    LBRACE          reduce using rule 67 (builtinType -> SHORT .)
    RBRACKET        reduce using rule 67 (builtinType -> SHORT .)
    ASSIGN          reduce using rule 67 (builtinType -> SHORT .)
    RPAREN          reduce using rule 67 (builtinType -> SHORT .)
    FINAL           reduce using rule 67 (builtinType -> SHORT .)
    AUTO            reduce using rule 67 (builtinType -> SHORT .)
    RETURN          reduce using rule 67 (builtinType -> SHORT .)
    CONST           reduce using rule 67 (builtinType -> SHORT .)
    IMMUTABLE       reduce using rule 67 (builtinType -> SHORT .)
    BOOL            reduce using rule 67 (builtinType -> SHORT .)
    SHORT           reduce using rule 67 (builtinType -> SHORT .)
    USHORT          reduce using rule 67 (builtinType -> SHORT .)
    INT             reduce using rule 67 (builtinType -> SHORT .)
    UINT            reduce using rule 67 (builtinType -> SHORT .)
    LONG            reduce using rule 67 (builtinType -> SHORT .)
    ULONG           reduce using rule 67 (builtinType -> SHORT .)
    CHAR            reduce using rule 67 (builtinType -> SHORT .)
    FLOAT           reduce using rule 67 (builtinType -> SHORT .)
    TYPEOF          reduce using rule 67 (builtinType -> SHORT .)
    PLUS_PLUS       reduce using rule 67 (builtinType -> SHORT .)
    CARET           reduce using rule 67 (builtinType -> SHORT .)
    DIV             reduce using rule 67 (builtinType -> SHORT .)
    MODULO          reduce using rule 67 (builtinType -> SHORT .)
    PLUS            reduce using rule 67 (builtinType -> SHORT .)
    MINUS           reduce using rule 67 (builtinType -> SHORT .)
    TILDE           reduce using rule 67 (builtinType -> SHORT .)
    $end            reduce using rule 67 (builtinType -> SHORT .)
    LEFT_SHIFT      reduce using rule 67 (builtinType -> SHORT .)
    RIGHT_SHIFT     reduce using rule 67 (builtinType -> SHORT .)
    IS_EQ           reduce using rule 67 (builtinType -> SHORT .)
    NOT_EQ          reduce using rule 67 (builtinType -> SHORT .)
    AMPERSAND       reduce using rule 67 (builtinType -> SHORT .)
    PIPE            reduce using rule 67 (builtinType -> SHORT .)
    DOUBLE_AMPERSAND reduce using rule 67 (builtinType -> SHORT .)
    QUESTION        reduce using rule 67 (builtinType -> SHORT .)
    DOUBLE_PIPE     reduce using rule 67 (builtinType -> SHORT .)
    EQ_LEFT         reduce using rule 67 (builtinType -> SHORT .)
    EQ_RIGHT        reduce using rule 67 (builtinType -> SHORT .)
    EQ_PLUS         reduce using rule 67 (builtinType -> SHORT .)
    EQ_MINUS        reduce using rule 67 (builtinType -> SHORT .)
    EQ_TIMES        reduce using rule 67 (builtinType -> SHORT .)
    EQ_MODULO       reduce using rule 67 (builtinType -> SHORT .)
    EQ_AND_BIT      reduce using rule 67 (builtinType -> SHORT .)
    EQ_DIV          reduce using rule 67 (builtinType -> SHORT .)
    EQ_OR_BIT       reduce using rule 67 (builtinType -> SHORT .)
    EQ_XOR_BIT      reduce using rule 67 (builtinType -> SHORT .)
    LESS            reduce using rule 67 (builtinType -> SHORT .)
    LESS_EQ         reduce using rule 67 (builtinType -> SHORT .)
    GREATER         reduce using rule 67 (builtinType -> SHORT .)
    GREATER_EQ      reduce using rule 67 (builtinType -> SHORT .)
    IS_EQ_DIFF      reduce using rule 67 (builtinType -> SHORT .)
    NOT_EQ_DIFF     reduce using rule 67 (builtinType -> SHORT .)
    LESS_EQ_DIFF    reduce using rule 67 (builtinType -> SHORT .)
    LESS_DIFF       reduce using rule 67 (builtinType -> SHORT .)
    GREATER_EQ_DIFF reduce using rule 67 (builtinType -> SHORT .)
    GREATER_DIFF    reduce using rule 67 (builtinType -> SHORT .)
    COLON           reduce using rule 67 (builtinType -> SHORT .)
    RANGE           reduce using rule 67 (builtinType -> SHORT .)
    TYPEDEF         reduce using rule 67 (builtinType -> SHORT .)
    RBRACE          reduce using rule 67 (builtinType -> SHORT .)
    DOUBLE_QUOTE    reduce using rule 67 (builtinType -> SHORT .)


state 18

    (72) builtinType -> ULONG .

    TIMES           reduce using rule 72 (builtinType -> ULONG .)
    LBRACKET        reduce using rule 72 (builtinType -> ULONG .)
    DELEGATE        reduce using rule 72 (builtinType -> ULONG .)
    FUNCTION        reduce using rule 72 (builtinType -> ULONG .)
    SEMICOLON       reduce using rule 72 (builtinType -> ULONG .)
    DOT             reduce using rule 72 (builtinType -> ULONG .)
    LPAREN          reduce using rule 72 (builtinType -> ULONG .)
    IDENTIFIER      reduce using rule 72 (builtinType -> ULONG .)
    ELLIPSIS        reduce using rule 72 (builtinType -> ULONG .)
    COMMA           reduce using rule 72 (builtinType -> ULONG .)
    LBRACE          reduce using rule 72 (builtinType -> ULONG .)
    RBRACKET        reduce using rule 72 (builtinType -> ULONG .)
    ASSIGN          reduce using rule 72 (builtinType -> ULONG .)
    RPAREN          reduce using rule 72 (builtinType -> ULONG .)
    FINAL           reduce using rule 72 (builtinType -> ULONG .)
    AUTO            reduce using rule 72 (builtinType -> ULONG .)
    RETURN          reduce using rule 72 (builtinType -> ULONG .)
    CONST           reduce using rule 72 (builtinType -> ULONG .)
    IMMUTABLE       reduce using rule 72 (builtinType -> ULONG .)
    BOOL            reduce using rule 72 (builtinType -> ULONG .)
    SHORT           reduce using rule 72 (builtinType -> ULONG .)
    USHORT          reduce using rule 72 (builtinType -> ULONG .)
    INT             reduce using rule 72 (builtinType -> ULONG .)
    UINT            reduce using rule 72 (builtinType -> ULONG .)
    LONG            reduce using rule 72 (builtinType -> ULONG .)
    ULONG           reduce using rule 72 (builtinType -> ULONG .)
    CHAR            reduce using rule 72 (builtinType -> ULONG .)
    FLOAT           reduce using rule 72 (builtinType -> ULONG .)
    TYPEOF          reduce using rule 72 (builtinType -> ULONG .)
    PLUS_PLUS       reduce using rule 72 (builtinType -> ULONG .)
    CARET           reduce using rule 72 (builtinType -> ULONG .)
    DIV             reduce using rule 72 (builtinType -> ULONG .)
    MODULO          reduce using rule 72 (builtinType -> ULONG .)
    PLUS            reduce using rule 72 (builtinType -> ULONG .)
    MINUS           reduce using rule 72 (builtinType -> ULONG .)
    TILDE           reduce using rule 72 (builtinType -> ULONG .)
    $end            reduce using rule 72 (builtinType -> ULONG .)
    LEFT_SHIFT      reduce using rule 72 (builtinType -> ULONG .)
    RIGHT_SHIFT     reduce using rule 72 (builtinType -> ULONG .)
    IS_EQ           reduce using rule 72 (builtinType -> ULONG .)
    NOT_EQ          reduce using rule 72 (builtinType -> ULONG .)
    AMPERSAND       reduce using rule 72 (builtinType -> ULONG .)
    PIPE            reduce using rule 72 (builtinType -> ULONG .)
    DOUBLE_AMPERSAND reduce using rule 72 (builtinType -> ULONG .)
    QUESTION        reduce using rule 72 (builtinType -> ULONG .)
    DOUBLE_PIPE     reduce using rule 72 (builtinType -> ULONG .)
    EQ_LEFT         reduce using rule 72 (builtinType -> ULONG .)
    EQ_RIGHT        reduce using rule 72 (builtinType -> ULONG .)
    EQ_PLUS         reduce using rule 72 (builtinType -> ULONG .)
    EQ_MINUS        reduce using rule 72 (builtinType -> ULONG .)
    EQ_TIMES        reduce using rule 72 (builtinType -> ULONG .)
    EQ_MODULO       reduce using rule 72 (builtinType -> ULONG .)
    EQ_AND_BIT      reduce using rule 72 (builtinType -> ULONG .)
    EQ_DIV          reduce using rule 72 (builtinType -> ULONG .)
    EQ_OR_BIT       reduce using rule 72 (builtinType -> ULONG .)
    EQ_XOR_BIT      reduce using rule 72 (builtinType -> ULONG .)
    LESS            reduce using rule 72 (builtinType -> ULONG .)
    LESS_EQ         reduce using rule 72 (builtinType -> ULONG .)
    GREATER         reduce using rule 72 (builtinType -> ULONG .)
    GREATER_EQ      reduce using rule 72 (builtinType -> ULONG .)
    IS_EQ_DIFF      reduce using rule 72 (builtinType -> ULONG .)
    NOT_EQ_DIFF     reduce using rule 72 (builtinType -> ULONG .)
    LESS_EQ_DIFF    reduce using rule 72 (builtinType -> ULONG .)
    LESS_DIFF       reduce using rule 72 (builtinType -> ULONG .)
    GREATER_EQ_DIFF reduce using rule 72 (builtinType -> ULONG .)
    GREATER_DIFF    reduce using rule 72 (builtinType -> ULONG .)
    COLON           reduce using rule 72 (builtinType -> ULONG .)
    RANGE           reduce using rule 72 (builtinType -> ULONG .)
    TYPEDEF         reduce using rule 72 (builtinType -> ULONG .)
    RBRACE          reduce using rule 72 (builtinType -> ULONG .)
    DOUBLE_QUOTE    reduce using rule 72 (builtinType -> ULONG .)


state 19

    (274) primaryExpression -> mixinExpression .

    DOT             reduce using rule 274 (primaryExpression -> mixinExpression .)
    PLUS_PLUS       reduce using rule 274 (primaryExpression -> mixinExpression .)
    LBRACKET        reduce using rule 274 (primaryExpression -> mixinExpression .)
    CARET           reduce using rule 274 (primaryExpression -> mixinExpression .)
    TIMES           reduce using rule 274 (primaryExpression -> mixinExpression .)
    DIV             reduce using rule 274 (primaryExpression -> mixinExpression .)
    MODULO          reduce using rule 274 (primaryExpression -> mixinExpression .)
    PLUS            reduce using rule 274 (primaryExpression -> mixinExpression .)
    MINUS           reduce using rule 274 (primaryExpression -> mixinExpression .)
    TILDE           reduce using rule 274 (primaryExpression -> mixinExpression .)
    LEFT_SHIFT      reduce using rule 274 (primaryExpression -> mixinExpression .)
    RIGHT_SHIFT     reduce using rule 274 (primaryExpression -> mixinExpression .)
    IS_EQ           reduce using rule 274 (primaryExpression -> mixinExpression .)
    NOT_EQ          reduce using rule 274 (primaryExpression -> mixinExpression .)
    AMPERSAND       reduce using rule 274 (primaryExpression -> mixinExpression .)
    PIPE            reduce using rule 274 (primaryExpression -> mixinExpression .)
    DOUBLE_AMPERSAND reduce using rule 274 (primaryExpression -> mixinExpression .)
    QUESTION        reduce using rule 274 (primaryExpression -> mixinExpression .)
    DOUBLE_PIPE     reduce using rule 274 (primaryExpression -> mixinExpression .)
    ASSIGN          reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_LEFT         reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_RIGHT        reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_PLUS         reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_MINUS        reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_TIMES        reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_MODULO       reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_AND_BIT      reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_DIV          reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_OR_BIT       reduce using rule 274 (primaryExpression -> mixinExpression .)
    EQ_XOR_BIT      reduce using rule 274 (primaryExpression -> mixinExpression .)
    RBRACKET        reduce using rule 274 (primaryExpression -> mixinExpression .)
    COMMA           reduce using rule 274 (primaryExpression -> mixinExpression .)
    LESS            reduce using rule 274 (primaryExpression -> mixinExpression .)
    LESS_EQ         reduce using rule 274 (primaryExpression -> mixinExpression .)
    GREATER         reduce using rule 274 (primaryExpression -> mixinExpression .)
    GREATER_EQ      reduce using rule 274 (primaryExpression -> mixinExpression .)
    IS_EQ_DIFF      reduce using rule 274 (primaryExpression -> mixinExpression .)
    NOT_EQ_DIFF     reduce using rule 274 (primaryExpression -> mixinExpression .)
    LESS_EQ_DIFF    reduce using rule 274 (primaryExpression -> mixinExpression .)
    LESS_DIFF       reduce using rule 274 (primaryExpression -> mixinExpression .)
    GREATER_EQ_DIFF reduce using rule 274 (primaryExpression -> mixinExpression .)
    GREATER_DIFF    reduce using rule 274 (primaryExpression -> mixinExpression .)
    RPAREN          reduce using rule 274 (primaryExpression -> mixinExpression .)
    $end            reduce using rule 274 (primaryExpression -> mixinExpression .)
    SEMICOLON       reduce using rule 274 (primaryExpression -> mixinExpression .)
    COLON           reduce using rule 274 (primaryExpression -> mixinExpression .)
    RANGE           reduce using rule 274 (primaryExpression -> mixinExpression .)
    TYPEDEF         reduce using rule 274 (primaryExpression -> mixinExpression .)
    IDENTIFIER      reduce using rule 274 (primaryExpression -> mixinExpression .)
    RBRACE          reduce using rule 274 (primaryExpression -> mixinExpression .)
    DOUBLE_QUOTE    reduce using rule 274 (primaryExpression -> mixinExpression .)
    LPAREN          reduce using rule 274 (primaryExpression -> mixinExpression .)


state 20

    (384) unaryExpression -> newExpression .

    DOT             reduce using rule 384 (unaryExpression -> newExpression .)
    PLUS_PLUS       reduce using rule 384 (unaryExpression -> newExpression .)
    LBRACKET        reduce using rule 384 (unaryExpression -> newExpression .)
    CARET           reduce using rule 384 (unaryExpression -> newExpression .)
    TIMES           reduce using rule 384 (unaryExpression -> newExpression .)
    DIV             reduce using rule 384 (unaryExpression -> newExpression .)
    MODULO          reduce using rule 384 (unaryExpression -> newExpression .)
    PLUS            reduce using rule 384 (unaryExpression -> newExpression .)
    MINUS           reduce using rule 384 (unaryExpression -> newExpression .)
    TILDE           reduce using rule 384 (unaryExpression -> newExpression .)
    LEFT_SHIFT      reduce using rule 384 (unaryExpression -> newExpression .)
    RIGHT_SHIFT     reduce using rule 384 (unaryExpression -> newExpression .)
    IS_EQ           reduce using rule 384 (unaryExpression -> newExpression .)
    NOT_EQ          reduce using rule 384 (unaryExpression -> newExpression .)
    AMPERSAND       reduce using rule 384 (unaryExpression -> newExpression .)
    PIPE            reduce using rule 384 (unaryExpression -> newExpression .)
    DOUBLE_AMPERSAND reduce using rule 384 (unaryExpression -> newExpression .)
    QUESTION        reduce using rule 384 (unaryExpression -> newExpression .)
    DOUBLE_PIPE     reduce using rule 384 (unaryExpression -> newExpression .)
    ASSIGN          reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_LEFT         reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_RIGHT        reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_PLUS         reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_MINUS        reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_TIMES        reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_MODULO       reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_AND_BIT      reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_DIV          reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_OR_BIT       reduce using rule 384 (unaryExpression -> newExpression .)
    EQ_XOR_BIT      reduce using rule 384 (unaryExpression -> newExpression .)
    SEMICOLON       reduce using rule 384 (unaryExpression -> newExpression .)
    COMMA           reduce using rule 384 (unaryExpression -> newExpression .)
    LESS            reduce using rule 384 (unaryExpression -> newExpression .)
    LESS_EQ         reduce using rule 384 (unaryExpression -> newExpression .)
    GREATER         reduce using rule 384 (unaryExpression -> newExpression .)
    GREATER_EQ      reduce using rule 384 (unaryExpression -> newExpression .)
    IS_EQ_DIFF      reduce using rule 384 (unaryExpression -> newExpression .)
    NOT_EQ_DIFF     reduce using rule 384 (unaryExpression -> newExpression .)
    LESS_EQ_DIFF    reduce using rule 384 (unaryExpression -> newExpression .)
    LESS_DIFF       reduce using rule 384 (unaryExpression -> newExpression .)
    GREATER_EQ_DIFF reduce using rule 384 (unaryExpression -> newExpression .)
    GREATER_DIFF    reduce using rule 384 (unaryExpression -> newExpression .)
    RPAREN          reduce using rule 384 (unaryExpression -> newExpression .)
    $end            reduce using rule 384 (unaryExpression -> newExpression .)
    RBRACKET        reduce using rule 384 (unaryExpression -> newExpression .)
    COLON           reduce using rule 384 (unaryExpression -> newExpression .)
    RANGE           reduce using rule 384 (unaryExpression -> newExpression .)
    TYPEDEF         reduce using rule 384 (unaryExpression -> newExpression .)
    IDENTIFIER      reduce using rule 384 (unaryExpression -> newExpression .)
    RBRACE          reduce using rule 384 (unaryExpression -> newExpression .)
    DOUBLE_QUOTE    reduce using rule 384 (unaryExpression -> newExpression .)
    LPAREN          reduce using rule 384 (unaryExpression -> newExpression .)


state 21

    (173) functionLiteralExpression -> FUNCTION . functionBody
    (174) functionLiteralExpression -> FUNCTION . TYPEDEF functionBody
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    TYPEDEF         shift and go to state 101
    LBRACE          shift and go to state 26

    functionBody                   shift and go to state 100
    blockStatement                 shift and go to state 3

state 22

    (388) unaryExpression -> indexExpression .

    DOT             reduce using rule 388 (unaryExpression -> indexExpression .)
    PLUS_PLUS       reduce using rule 388 (unaryExpression -> indexExpression .)
    LBRACKET        reduce using rule 388 (unaryExpression -> indexExpression .)
    CARET           reduce using rule 388 (unaryExpression -> indexExpression .)
    TIMES           reduce using rule 388 (unaryExpression -> indexExpression .)
    DIV             reduce using rule 388 (unaryExpression -> indexExpression .)
    MODULO          reduce using rule 388 (unaryExpression -> indexExpression .)
    PLUS            reduce using rule 388 (unaryExpression -> indexExpression .)
    MINUS           reduce using rule 388 (unaryExpression -> indexExpression .)
    TILDE           reduce using rule 388 (unaryExpression -> indexExpression .)
    LEFT_SHIFT      reduce using rule 388 (unaryExpression -> indexExpression .)
    RIGHT_SHIFT     reduce using rule 388 (unaryExpression -> indexExpression .)
    IS_EQ           reduce using rule 388 (unaryExpression -> indexExpression .)
    NOT_EQ          reduce using rule 388 (unaryExpression -> indexExpression .)
    AMPERSAND       reduce using rule 388 (unaryExpression -> indexExpression .)
    PIPE            reduce using rule 388 (unaryExpression -> indexExpression .)
    DOUBLE_AMPERSAND reduce using rule 388 (unaryExpression -> indexExpression .)
    QUESTION        reduce using rule 388 (unaryExpression -> indexExpression .)
    DOUBLE_PIPE     reduce using rule 388 (unaryExpression -> indexExpression .)
    ASSIGN          reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_LEFT         reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_RIGHT        reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_PLUS         reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_MINUS        reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_TIMES        reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_MODULO       reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_AND_BIT      reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_DIV          reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_OR_BIT       reduce using rule 388 (unaryExpression -> indexExpression .)
    EQ_XOR_BIT      reduce using rule 388 (unaryExpression -> indexExpression .)
    SEMICOLON       reduce using rule 388 (unaryExpression -> indexExpression .)
    COMMA           reduce using rule 388 (unaryExpression -> indexExpression .)
    LESS            reduce using rule 388 (unaryExpression -> indexExpression .)
    LESS_EQ         reduce using rule 388 (unaryExpression -> indexExpression .)
    GREATER         reduce using rule 388 (unaryExpression -> indexExpression .)
    GREATER_EQ      reduce using rule 388 (unaryExpression -> indexExpression .)
    IS_EQ_DIFF      reduce using rule 388 (unaryExpression -> indexExpression .)
    NOT_EQ_DIFF     reduce using rule 388 (unaryExpression -> indexExpression .)
    LESS_EQ_DIFF    reduce using rule 388 (unaryExpression -> indexExpression .)
    LESS_DIFF       reduce using rule 388 (unaryExpression -> indexExpression .)
    GREATER_EQ_DIFF reduce using rule 388 (unaryExpression -> indexExpression .)
    GREATER_DIFF    reduce using rule 388 (unaryExpression -> indexExpression .)
    RPAREN          reduce using rule 388 (unaryExpression -> indexExpression .)
    $end            reduce using rule 388 (unaryExpression -> indexExpression .)
    RBRACKET        reduce using rule 388 (unaryExpression -> indexExpression .)
    COLON           reduce using rule 388 (unaryExpression -> indexExpression .)
    RANGE           reduce using rule 388 (unaryExpression -> indexExpression .)
    TYPEDEF         reduce using rule 388 (unaryExpression -> indexExpression .)
    IDENTIFIER      reduce using rule 388 (unaryExpression -> indexExpression .)
    RBRACE          reduce using rule 388 (unaryExpression -> indexExpression .)
    DOUBLE_QUOTE    reduce using rule 388 (unaryExpression -> indexExpression .)
    LPAREN          reduce using rule 388 (unaryExpression -> indexExpression .)


state 23

    (393) unaryExpression -> RANGE .

    DOT             reduce using rule 393 (unaryExpression -> RANGE .)
    PLUS_PLUS       reduce using rule 393 (unaryExpression -> RANGE .)
    LBRACKET        reduce using rule 393 (unaryExpression -> RANGE .)
    CARET           reduce using rule 393 (unaryExpression -> RANGE .)
    TIMES           reduce using rule 393 (unaryExpression -> RANGE .)
    DIV             reduce using rule 393 (unaryExpression -> RANGE .)
    MODULO          reduce using rule 393 (unaryExpression -> RANGE .)
    PLUS            reduce using rule 393 (unaryExpression -> RANGE .)
    MINUS           reduce using rule 393 (unaryExpression -> RANGE .)
    TILDE           reduce using rule 393 (unaryExpression -> RANGE .)
    LEFT_SHIFT      reduce using rule 393 (unaryExpression -> RANGE .)
    RIGHT_SHIFT     reduce using rule 393 (unaryExpression -> RANGE .)
    IS_EQ           reduce using rule 393 (unaryExpression -> RANGE .)
    NOT_EQ          reduce using rule 393 (unaryExpression -> RANGE .)
    AMPERSAND       reduce using rule 393 (unaryExpression -> RANGE .)
    PIPE            reduce using rule 393 (unaryExpression -> RANGE .)
    DOUBLE_AMPERSAND reduce using rule 393 (unaryExpression -> RANGE .)
    QUESTION        reduce using rule 393 (unaryExpression -> RANGE .)
    DOUBLE_PIPE     reduce using rule 393 (unaryExpression -> RANGE .)
    ASSIGN          reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_LEFT         reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_RIGHT        reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_PLUS         reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_MINUS        reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_TIMES        reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_MODULO       reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_AND_BIT      reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_DIV          reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_OR_BIT       reduce using rule 393 (unaryExpression -> RANGE .)
    EQ_XOR_BIT      reduce using rule 393 (unaryExpression -> RANGE .)
    SEMICOLON       reduce using rule 393 (unaryExpression -> RANGE .)
    COMMA           reduce using rule 393 (unaryExpression -> RANGE .)
    LESS            reduce using rule 393 (unaryExpression -> RANGE .)
    LESS_EQ         reduce using rule 393 (unaryExpression -> RANGE .)
    GREATER         reduce using rule 393 (unaryExpression -> RANGE .)
    GREATER_EQ      reduce using rule 393 (unaryExpression -> RANGE .)
    IS_EQ_DIFF      reduce using rule 393 (unaryExpression -> RANGE .)
    NOT_EQ_DIFF     reduce using rule 393 (unaryExpression -> RANGE .)
    LESS_EQ_DIFF    reduce using rule 393 (unaryExpression -> RANGE .)
    LESS_DIFF       reduce using rule 393 (unaryExpression -> RANGE .)
    GREATER_EQ_DIFF reduce using rule 393 (unaryExpression -> RANGE .)
    GREATER_DIFF    reduce using rule 393 (unaryExpression -> RANGE .)
    RPAREN          reduce using rule 393 (unaryExpression -> RANGE .)
    $end            reduce using rule 393 (unaryExpression -> RANGE .)
    RBRACKET        reduce using rule 393 (unaryExpression -> RANGE .)
    COLON           reduce using rule 393 (unaryExpression -> RANGE .)
    RANGE           reduce using rule 393 (unaryExpression -> RANGE .)
    TYPEDEF         reduce using rule 393 (unaryExpression -> RANGE .)
    IDENTIFIER      reduce using rule 393 (unaryExpression -> RANGE .)
    RBRACE          reduce using rule 393 (unaryExpression -> RANGE .)
    DOUBLE_QUOTE    reduce using rule 393 (unaryExpression -> RANGE .)
    LPAREN          reduce using rule 393 (unaryExpression -> RANGE .)


state 24

    (376) unaryExpression -> AMPERSAND . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 102
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 25

    (232) newExpression -> newAnonClassExpression .

    DOT             reduce using rule 232 (newExpression -> newAnonClassExpression .)
    PLUS_PLUS       reduce using rule 232 (newExpression -> newAnonClassExpression .)
    LBRACKET        reduce using rule 232 (newExpression -> newAnonClassExpression .)
    CARET           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    TIMES           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    DIV             reduce using rule 232 (newExpression -> newAnonClassExpression .)
    MODULO          reduce using rule 232 (newExpression -> newAnonClassExpression .)
    PLUS            reduce using rule 232 (newExpression -> newAnonClassExpression .)
    MINUS           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    TILDE           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    LEFT_SHIFT      reduce using rule 232 (newExpression -> newAnonClassExpression .)
    RIGHT_SHIFT     reduce using rule 232 (newExpression -> newAnonClassExpression .)
    IS_EQ           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    NOT_EQ          reduce using rule 232 (newExpression -> newAnonClassExpression .)
    AMPERSAND       reduce using rule 232 (newExpression -> newAnonClassExpression .)
    PIPE            reduce using rule 232 (newExpression -> newAnonClassExpression .)
    DOUBLE_AMPERSAND reduce using rule 232 (newExpression -> newAnonClassExpression .)
    QUESTION        reduce using rule 232 (newExpression -> newAnonClassExpression .)
    DOUBLE_PIPE     reduce using rule 232 (newExpression -> newAnonClassExpression .)
    ASSIGN          reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_LEFT         reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_RIGHT        reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_PLUS         reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_MINUS        reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_TIMES        reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_MODULO       reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_AND_BIT      reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_DIV          reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_OR_BIT       reduce using rule 232 (newExpression -> newAnonClassExpression .)
    EQ_XOR_BIT      reduce using rule 232 (newExpression -> newAnonClassExpression .)
    SEMICOLON       reduce using rule 232 (newExpression -> newAnonClassExpression .)
    COMMA           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    LESS            reduce using rule 232 (newExpression -> newAnonClassExpression .)
    LESS_EQ         reduce using rule 232 (newExpression -> newAnonClassExpression .)
    GREATER         reduce using rule 232 (newExpression -> newAnonClassExpression .)
    GREATER_EQ      reduce using rule 232 (newExpression -> newAnonClassExpression .)
    IS_EQ_DIFF      reduce using rule 232 (newExpression -> newAnonClassExpression .)
    NOT_EQ_DIFF     reduce using rule 232 (newExpression -> newAnonClassExpression .)
    LESS_EQ_DIFF    reduce using rule 232 (newExpression -> newAnonClassExpression .)
    LESS_DIFF       reduce using rule 232 (newExpression -> newAnonClassExpression .)
    GREATER_EQ_DIFF reduce using rule 232 (newExpression -> newAnonClassExpression .)
    GREATER_DIFF    reduce using rule 232 (newExpression -> newAnonClassExpression .)
    $end            reduce using rule 232 (newExpression -> newAnonClassExpression .)
    RBRACKET        reduce using rule 232 (newExpression -> newAnonClassExpression .)
    RPAREN          reduce using rule 232 (newExpression -> newAnonClassExpression .)
    COLON           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    RANGE           reduce using rule 232 (newExpression -> newAnonClassExpression .)
    TYPEDEF         reduce using rule 232 (newExpression -> newAnonClassExpression .)
    IDENTIFIER      reduce using rule 232 (newExpression -> newAnonClassExpression .)
    RBRACE          reduce using rule 232 (newExpression -> newAnonClassExpression .)
    DOUBLE_QUOTE    reduce using rule 232 (newExpression -> newAnonClassExpression .)
    LPAREN          reduce using rule 232 (newExpression -> newAnonClassExpression .)


state 26

    (58) blockStatement -> LBRACE . RBRACE
    (59) blockStatement -> LBRACE . declarationsAndStatements RBRACE
    (116) declarationsAndStatements -> . declarationOrStatement
    (117) declarationsAndStatements -> . declarationOrStatement declarationsAndStatements
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    RBRACE          shift and go to state 149
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    declarationsAndStatements      shift and go to state 151
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 113
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 27

    (69) builtinType -> INT .

    TIMES           reduce using rule 69 (builtinType -> INT .)
    LBRACKET        reduce using rule 69 (builtinType -> INT .)
    DELEGATE        reduce using rule 69 (builtinType -> INT .)
    FUNCTION        reduce using rule 69 (builtinType -> INT .)
    SEMICOLON       reduce using rule 69 (builtinType -> INT .)
    DOT             reduce using rule 69 (builtinType -> INT .)
    LPAREN          reduce using rule 69 (builtinType -> INT .)
    IDENTIFIER      reduce using rule 69 (builtinType -> INT .)
    ELLIPSIS        reduce using rule 69 (builtinType -> INT .)
    COMMA           reduce using rule 69 (builtinType -> INT .)
    LBRACE          reduce using rule 69 (builtinType -> INT .)
    RBRACKET        reduce using rule 69 (builtinType -> INT .)
    ASSIGN          reduce using rule 69 (builtinType -> INT .)
    RPAREN          reduce using rule 69 (builtinType -> INT .)
    FINAL           reduce using rule 69 (builtinType -> INT .)
    AUTO            reduce using rule 69 (builtinType -> INT .)
    RETURN          reduce using rule 69 (builtinType -> INT .)
    CONST           reduce using rule 69 (builtinType -> INT .)
    IMMUTABLE       reduce using rule 69 (builtinType -> INT .)
    BOOL            reduce using rule 69 (builtinType -> INT .)
    SHORT           reduce using rule 69 (builtinType -> INT .)
    USHORT          reduce using rule 69 (builtinType -> INT .)
    INT             reduce using rule 69 (builtinType -> INT .)
    UINT            reduce using rule 69 (builtinType -> INT .)
    LONG            reduce using rule 69 (builtinType -> INT .)
    ULONG           reduce using rule 69 (builtinType -> INT .)
    CHAR            reduce using rule 69 (builtinType -> INT .)
    FLOAT           reduce using rule 69 (builtinType -> INT .)
    TYPEOF          reduce using rule 69 (builtinType -> INT .)
    PLUS_PLUS       reduce using rule 69 (builtinType -> INT .)
    CARET           reduce using rule 69 (builtinType -> INT .)
    DIV             reduce using rule 69 (builtinType -> INT .)
    MODULO          reduce using rule 69 (builtinType -> INT .)
    PLUS            reduce using rule 69 (builtinType -> INT .)
    MINUS           reduce using rule 69 (builtinType -> INT .)
    TILDE           reduce using rule 69 (builtinType -> INT .)
    $end            reduce using rule 69 (builtinType -> INT .)
    LEFT_SHIFT      reduce using rule 69 (builtinType -> INT .)
    RIGHT_SHIFT     reduce using rule 69 (builtinType -> INT .)
    IS_EQ           reduce using rule 69 (builtinType -> INT .)
    NOT_EQ          reduce using rule 69 (builtinType -> INT .)
    AMPERSAND       reduce using rule 69 (builtinType -> INT .)
    PIPE            reduce using rule 69 (builtinType -> INT .)
    DOUBLE_AMPERSAND reduce using rule 69 (builtinType -> INT .)
    QUESTION        reduce using rule 69 (builtinType -> INT .)
    DOUBLE_PIPE     reduce using rule 69 (builtinType -> INT .)
    EQ_LEFT         reduce using rule 69 (builtinType -> INT .)
    EQ_RIGHT        reduce using rule 69 (builtinType -> INT .)
    EQ_PLUS         reduce using rule 69 (builtinType -> INT .)
    EQ_MINUS        reduce using rule 69 (builtinType -> INT .)
    EQ_TIMES        reduce using rule 69 (builtinType -> INT .)
    EQ_MODULO       reduce using rule 69 (builtinType -> INT .)
    EQ_AND_BIT      reduce using rule 69 (builtinType -> INT .)
    EQ_DIV          reduce using rule 69 (builtinType -> INT .)
    EQ_OR_BIT       reduce using rule 69 (builtinType -> INT .)
    EQ_XOR_BIT      reduce using rule 69 (builtinType -> INT .)
    LESS            reduce using rule 69 (builtinType -> INT .)
    LESS_EQ         reduce using rule 69 (builtinType -> INT .)
    GREATER         reduce using rule 69 (builtinType -> INT .)
    GREATER_EQ      reduce using rule 69 (builtinType -> INT .)
    IS_EQ_DIFF      reduce using rule 69 (builtinType -> INT .)
    NOT_EQ_DIFF     reduce using rule 69 (builtinType -> INT .)
    LESS_EQ_DIFF    reduce using rule 69 (builtinType -> INT .)
    LESS_DIFF       reduce using rule 69 (builtinType -> INT .)
    GREATER_EQ_DIFF reduce using rule 69 (builtinType -> INT .)
    GREATER_DIFF    reduce using rule 69 (builtinType -> INT .)
    COLON           reduce using rule 69 (builtinType -> INT .)
    RANGE           reduce using rule 69 (builtinType -> INT .)
    TYPEDEF         reduce using rule 69 (builtinType -> INT .)
    RBRACE          reduce using rule 69 (builtinType -> INT .)
    DOUBLE_QUOTE    reduce using rule 69 (builtinType -> INT .)


state 28

    (281) primaryExpression -> INUMBER .

    DOT             reduce using rule 281 (primaryExpression -> INUMBER .)
    PLUS_PLUS       reduce using rule 281 (primaryExpression -> INUMBER .)
    LBRACKET        reduce using rule 281 (primaryExpression -> INUMBER .)
    CARET           reduce using rule 281 (primaryExpression -> INUMBER .)
    TIMES           reduce using rule 281 (primaryExpression -> INUMBER .)
    DIV             reduce using rule 281 (primaryExpression -> INUMBER .)
    MODULO          reduce using rule 281 (primaryExpression -> INUMBER .)
    PLUS            reduce using rule 281 (primaryExpression -> INUMBER .)
    MINUS           reduce using rule 281 (primaryExpression -> INUMBER .)
    TILDE           reduce using rule 281 (primaryExpression -> INUMBER .)
    LEFT_SHIFT      reduce using rule 281 (primaryExpression -> INUMBER .)
    RIGHT_SHIFT     reduce using rule 281 (primaryExpression -> INUMBER .)
    IS_EQ           reduce using rule 281 (primaryExpression -> INUMBER .)
    NOT_EQ          reduce using rule 281 (primaryExpression -> INUMBER .)
    AMPERSAND       reduce using rule 281 (primaryExpression -> INUMBER .)
    PIPE            reduce using rule 281 (primaryExpression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 281 (primaryExpression -> INUMBER .)
    QUESTION        reduce using rule 281 (primaryExpression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 281 (primaryExpression -> INUMBER .)
    ASSIGN          reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_LEFT         reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_RIGHT        reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_PLUS         reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_MINUS        reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_TIMES        reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_MODULO       reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_AND_BIT      reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_DIV          reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_OR_BIT       reduce using rule 281 (primaryExpression -> INUMBER .)
    EQ_XOR_BIT      reduce using rule 281 (primaryExpression -> INUMBER .)
    RBRACKET        reduce using rule 281 (primaryExpression -> INUMBER .)
    COMMA           reduce using rule 281 (primaryExpression -> INUMBER .)
    LESS            reduce using rule 281 (primaryExpression -> INUMBER .)
    LESS_EQ         reduce using rule 281 (primaryExpression -> INUMBER .)
    GREATER         reduce using rule 281 (primaryExpression -> INUMBER .)
    GREATER_EQ      reduce using rule 281 (primaryExpression -> INUMBER .)
    IS_EQ_DIFF      reduce using rule 281 (primaryExpression -> INUMBER .)
    NOT_EQ_DIFF     reduce using rule 281 (primaryExpression -> INUMBER .)
    LESS_EQ_DIFF    reduce using rule 281 (primaryExpression -> INUMBER .)
    LESS_DIFF       reduce using rule 281 (primaryExpression -> INUMBER .)
    GREATER_EQ_DIFF reduce using rule 281 (primaryExpression -> INUMBER .)
    GREATER_DIFF    reduce using rule 281 (primaryExpression -> INUMBER .)
    RPAREN          reduce using rule 281 (primaryExpression -> INUMBER .)
    $end            reduce using rule 281 (primaryExpression -> INUMBER .)
    SEMICOLON       reduce using rule 281 (primaryExpression -> INUMBER .)
    COLON           reduce using rule 281 (primaryExpression -> INUMBER .)
    RANGE           reduce using rule 281 (primaryExpression -> INUMBER .)
    TYPEDEF         reduce using rule 281 (primaryExpression -> INUMBER .)
    IDENTIFIER      reduce using rule 281 (primaryExpression -> INUMBER .)
    RBRACE          reduce using rule 281 (primaryExpression -> INUMBER .)
    DOUBLE_QUOTE    reduce using rule 281 (primaryExpression -> INUMBER .)
    LPAREN          reduce using rule 281 (primaryExpression -> INUMBER .)


state 29

    (216) mixinExpression -> MIXIN . LPAREN assignExpression RPAREN

    LPAREN          shift and go to state 155


state 30

    (377) unaryExpression -> EXCLAMATION . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 156
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 31

    (385) unaryExpression -> deleteExpression .

    DOT             reduce using rule 385 (unaryExpression -> deleteExpression .)
    PLUS_PLUS       reduce using rule 385 (unaryExpression -> deleteExpression .)
    LBRACKET        reduce using rule 385 (unaryExpression -> deleteExpression .)
    CARET           reduce using rule 385 (unaryExpression -> deleteExpression .)
    TIMES           reduce using rule 385 (unaryExpression -> deleteExpression .)
    DIV             reduce using rule 385 (unaryExpression -> deleteExpression .)
    MODULO          reduce using rule 385 (unaryExpression -> deleteExpression .)
    PLUS            reduce using rule 385 (unaryExpression -> deleteExpression .)
    MINUS           reduce using rule 385 (unaryExpression -> deleteExpression .)
    TILDE           reduce using rule 385 (unaryExpression -> deleteExpression .)
    LEFT_SHIFT      reduce using rule 385 (unaryExpression -> deleteExpression .)
    RIGHT_SHIFT     reduce using rule 385 (unaryExpression -> deleteExpression .)
    IS_EQ           reduce using rule 385 (unaryExpression -> deleteExpression .)
    NOT_EQ          reduce using rule 385 (unaryExpression -> deleteExpression .)
    AMPERSAND       reduce using rule 385 (unaryExpression -> deleteExpression .)
    PIPE            reduce using rule 385 (unaryExpression -> deleteExpression .)
    DOUBLE_AMPERSAND reduce using rule 385 (unaryExpression -> deleteExpression .)
    QUESTION        reduce using rule 385 (unaryExpression -> deleteExpression .)
    DOUBLE_PIPE     reduce using rule 385 (unaryExpression -> deleteExpression .)
    ASSIGN          reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_LEFT         reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_RIGHT        reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_PLUS         reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_MINUS        reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_TIMES        reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_MODULO       reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_AND_BIT      reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_DIV          reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_OR_BIT       reduce using rule 385 (unaryExpression -> deleteExpression .)
    EQ_XOR_BIT      reduce using rule 385 (unaryExpression -> deleteExpression .)
    SEMICOLON       reduce using rule 385 (unaryExpression -> deleteExpression .)
    COMMA           reduce using rule 385 (unaryExpression -> deleteExpression .)
    LESS            reduce using rule 385 (unaryExpression -> deleteExpression .)
    LESS_EQ         reduce using rule 385 (unaryExpression -> deleteExpression .)
    GREATER         reduce using rule 385 (unaryExpression -> deleteExpression .)
    GREATER_EQ      reduce using rule 385 (unaryExpression -> deleteExpression .)
    IS_EQ_DIFF      reduce using rule 385 (unaryExpression -> deleteExpression .)
    NOT_EQ_DIFF     reduce using rule 385 (unaryExpression -> deleteExpression .)
    LESS_EQ_DIFF    reduce using rule 385 (unaryExpression -> deleteExpression .)
    LESS_DIFF       reduce using rule 385 (unaryExpression -> deleteExpression .)
    GREATER_EQ_DIFF reduce using rule 385 (unaryExpression -> deleteExpression .)
    GREATER_DIFF    reduce using rule 385 (unaryExpression -> deleteExpression .)
    RPAREN          reduce using rule 385 (unaryExpression -> deleteExpression .)
    $end            reduce using rule 385 (unaryExpression -> deleteExpression .)
    RBRACKET        reduce using rule 385 (unaryExpression -> deleteExpression .)
    COLON           reduce using rule 385 (unaryExpression -> deleteExpression .)
    RANGE           reduce using rule 385 (unaryExpression -> deleteExpression .)
    TYPEDEF         reduce using rule 385 (unaryExpression -> deleteExpression .)
    IDENTIFIER      reduce using rule 385 (unaryExpression -> deleteExpression .)
    RBRACE          reduce using rule 385 (unaryExpression -> deleteExpression .)
    DOUBLE_QUOTE    reduce using rule 385 (unaryExpression -> deleteExpression .)
    LPAREN          reduce using rule 385 (unaryExpression -> deleteExpression .)


state 32

    (73) builtinType -> CHAR .

    TIMES           reduce using rule 73 (builtinType -> CHAR .)
    LBRACKET        reduce using rule 73 (builtinType -> CHAR .)
    DELEGATE        reduce using rule 73 (builtinType -> CHAR .)
    FUNCTION        reduce using rule 73 (builtinType -> CHAR .)
    SEMICOLON       reduce using rule 73 (builtinType -> CHAR .)
    DOT             reduce using rule 73 (builtinType -> CHAR .)
    LPAREN          reduce using rule 73 (builtinType -> CHAR .)
    IDENTIFIER      reduce using rule 73 (builtinType -> CHAR .)
    ELLIPSIS        reduce using rule 73 (builtinType -> CHAR .)
    COMMA           reduce using rule 73 (builtinType -> CHAR .)
    LBRACE          reduce using rule 73 (builtinType -> CHAR .)
    RBRACKET        reduce using rule 73 (builtinType -> CHAR .)
    ASSIGN          reduce using rule 73 (builtinType -> CHAR .)
    RPAREN          reduce using rule 73 (builtinType -> CHAR .)
    FINAL           reduce using rule 73 (builtinType -> CHAR .)
    AUTO            reduce using rule 73 (builtinType -> CHAR .)
    RETURN          reduce using rule 73 (builtinType -> CHAR .)
    CONST           reduce using rule 73 (builtinType -> CHAR .)
    IMMUTABLE       reduce using rule 73 (builtinType -> CHAR .)
    BOOL            reduce using rule 73 (builtinType -> CHAR .)
    SHORT           reduce using rule 73 (builtinType -> CHAR .)
    USHORT          reduce using rule 73 (builtinType -> CHAR .)
    INT             reduce using rule 73 (builtinType -> CHAR .)
    UINT            reduce using rule 73 (builtinType -> CHAR .)
    LONG            reduce using rule 73 (builtinType -> CHAR .)
    ULONG           reduce using rule 73 (builtinType -> CHAR .)
    CHAR            reduce using rule 73 (builtinType -> CHAR .)
    FLOAT           reduce using rule 73 (builtinType -> CHAR .)
    TYPEOF          reduce using rule 73 (builtinType -> CHAR .)
    PLUS_PLUS       reduce using rule 73 (builtinType -> CHAR .)
    CARET           reduce using rule 73 (builtinType -> CHAR .)
    DIV             reduce using rule 73 (builtinType -> CHAR .)
    MODULO          reduce using rule 73 (builtinType -> CHAR .)
    PLUS            reduce using rule 73 (builtinType -> CHAR .)
    MINUS           reduce using rule 73 (builtinType -> CHAR .)
    TILDE           reduce using rule 73 (builtinType -> CHAR .)
    $end            reduce using rule 73 (builtinType -> CHAR .)
    LEFT_SHIFT      reduce using rule 73 (builtinType -> CHAR .)
    RIGHT_SHIFT     reduce using rule 73 (builtinType -> CHAR .)
    IS_EQ           reduce using rule 73 (builtinType -> CHAR .)
    NOT_EQ          reduce using rule 73 (builtinType -> CHAR .)
    AMPERSAND       reduce using rule 73 (builtinType -> CHAR .)
    PIPE            reduce using rule 73 (builtinType -> CHAR .)
    DOUBLE_AMPERSAND reduce using rule 73 (builtinType -> CHAR .)
    QUESTION        reduce using rule 73 (builtinType -> CHAR .)
    DOUBLE_PIPE     reduce using rule 73 (builtinType -> CHAR .)
    EQ_LEFT         reduce using rule 73 (builtinType -> CHAR .)
    EQ_RIGHT        reduce using rule 73 (builtinType -> CHAR .)
    EQ_PLUS         reduce using rule 73 (builtinType -> CHAR .)
    EQ_MINUS        reduce using rule 73 (builtinType -> CHAR .)
    EQ_TIMES        reduce using rule 73 (builtinType -> CHAR .)
    EQ_MODULO       reduce using rule 73 (builtinType -> CHAR .)
    EQ_AND_BIT      reduce using rule 73 (builtinType -> CHAR .)
    EQ_DIV          reduce using rule 73 (builtinType -> CHAR .)
    EQ_OR_BIT       reduce using rule 73 (builtinType -> CHAR .)
    EQ_XOR_BIT      reduce using rule 73 (builtinType -> CHAR .)
    LESS            reduce using rule 73 (builtinType -> CHAR .)
    LESS_EQ         reduce using rule 73 (builtinType -> CHAR .)
    GREATER         reduce using rule 73 (builtinType -> CHAR .)
    GREATER_EQ      reduce using rule 73 (builtinType -> CHAR .)
    IS_EQ_DIFF      reduce using rule 73 (builtinType -> CHAR .)
    NOT_EQ_DIFF     reduce using rule 73 (builtinType -> CHAR .)
    LESS_EQ_DIFF    reduce using rule 73 (builtinType -> CHAR .)
    LESS_DIFF       reduce using rule 73 (builtinType -> CHAR .)
    GREATER_EQ_DIFF reduce using rule 73 (builtinType -> CHAR .)
    GREATER_DIFF    reduce using rule 73 (builtinType -> CHAR .)
    COLON           reduce using rule 73 (builtinType -> CHAR .)
    RANGE           reduce using rule 73 (builtinType -> CHAR .)
    TYPEDEF         reduce using rule 73 (builtinType -> CHAR .)
    RBRACE          reduce using rule 73 (builtinType -> CHAR .)
    DOUBLE_QUOTE    reduce using rule 73 (builtinType -> CHAR .)


state 33

    (229) newExpression -> NEW . type
    (230) newExpression -> NEW . type LBRACKET assignExpression RBRACKET
    (231) newExpression -> NEW . type arguments
    (221) newAnonClassExpression -> NEW . CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> NEW . CLASS arguments structBody
    (223) newAnonClassExpression -> NEW . CLASS baseClassList structBody
    (224) newAnonClassExpression -> NEW . CLASS structBody
    (225) newAnonClassExpression -> NEW . arguments CLASS structBody
    (226) newAnonClassExpression -> NEW . arguments CLASS arguments structBody
    (227) newAnonClassExpression -> NEW . arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> NEW . arguments CLASS arguments baseClassList structBody
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CLASS           shift and go to state 159
    LPAREN          shift and go to state 160
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    identifierOrTemplateInstance   shift and go to state 89
    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    typeofExpression               shift and go to state 2
    symbol                         shift and go to state 91
    arguments                      shift and go to state 157
    identifierOrTemplateChain      shift and go to state 14
    type2                          shift and go to state 53
    type                           shift and go to state 158
    typeConstructors               shift and go to state 10

state 34

    (381) unaryExpression -> DOT .
    (267) primaryExpression -> DOT . identifierOrTemplateInstance
    (334) symbol -> DOT . identifierOrTemplateChain
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    DOT             reduce using rule 381 (unaryExpression -> DOT .)
    PLUS_PLUS       reduce using rule 381 (unaryExpression -> DOT .)
    LBRACKET        reduce using rule 381 (unaryExpression -> DOT .)
    CARET           reduce using rule 381 (unaryExpression -> DOT .)
    TIMES           reduce using rule 381 (unaryExpression -> DOT .)
    DIV             reduce using rule 381 (unaryExpression -> DOT .)
    MODULO          reduce using rule 381 (unaryExpression -> DOT .)
    PLUS            reduce using rule 381 (unaryExpression -> DOT .)
    MINUS           reduce using rule 381 (unaryExpression -> DOT .)
    TILDE           reduce using rule 381 (unaryExpression -> DOT .)
    LEFT_SHIFT      reduce using rule 381 (unaryExpression -> DOT .)
    RIGHT_SHIFT     reduce using rule 381 (unaryExpression -> DOT .)
    IS_EQ           reduce using rule 381 (unaryExpression -> DOT .)
    NOT_EQ          reduce using rule 381 (unaryExpression -> DOT .)
    AMPERSAND       reduce using rule 381 (unaryExpression -> DOT .)
    PIPE            reduce using rule 381 (unaryExpression -> DOT .)
    DOUBLE_AMPERSAND reduce using rule 381 (unaryExpression -> DOT .)
    QUESTION        reduce using rule 381 (unaryExpression -> DOT .)
    DOUBLE_PIPE     reduce using rule 381 (unaryExpression -> DOT .)
    ASSIGN          reduce using rule 381 (unaryExpression -> DOT .)
    EQ_LEFT         reduce using rule 381 (unaryExpression -> DOT .)
    EQ_RIGHT        reduce using rule 381 (unaryExpression -> DOT .)
    EQ_PLUS         reduce using rule 381 (unaryExpression -> DOT .)
    EQ_MINUS        reduce using rule 381 (unaryExpression -> DOT .)
    EQ_TIMES        reduce using rule 381 (unaryExpression -> DOT .)
    EQ_MODULO       reduce using rule 381 (unaryExpression -> DOT .)
    EQ_AND_BIT      reduce using rule 381 (unaryExpression -> DOT .)
    EQ_DIV          reduce using rule 381 (unaryExpression -> DOT .)
    EQ_OR_BIT       reduce using rule 381 (unaryExpression -> DOT .)
    EQ_XOR_BIT      reduce using rule 381 (unaryExpression -> DOT .)
    SEMICOLON       reduce using rule 381 (unaryExpression -> DOT .)
    COMMA           reduce using rule 381 (unaryExpression -> DOT .)
    LESS            reduce using rule 381 (unaryExpression -> DOT .)
    LESS_EQ         reduce using rule 381 (unaryExpression -> DOT .)
    GREATER         reduce using rule 381 (unaryExpression -> DOT .)
    GREATER_EQ      reduce using rule 381 (unaryExpression -> DOT .)
    IS_EQ_DIFF      reduce using rule 381 (unaryExpression -> DOT .)
    NOT_EQ_DIFF     reduce using rule 381 (unaryExpression -> DOT .)
    LESS_EQ_DIFF    reduce using rule 381 (unaryExpression -> DOT .)
    LESS_DIFF       reduce using rule 381 (unaryExpression -> DOT .)
    GREATER_EQ_DIFF reduce using rule 381 (unaryExpression -> DOT .)
    GREATER_DIFF    reduce using rule 381 (unaryExpression -> DOT .)
    RPAREN          reduce using rule 381 (unaryExpression -> DOT .)
    $end            reduce using rule 381 (unaryExpression -> DOT .)
    RBRACKET        reduce using rule 381 (unaryExpression -> DOT .)
    COLON           reduce using rule 381 (unaryExpression -> DOT .)
    RANGE           reduce using rule 381 (unaryExpression -> DOT .)
    TYPEDEF         reduce using rule 381 (unaryExpression -> DOT .)
    RBRACE          reduce using rule 381 (unaryExpression -> DOT .)
    DOUBLE_QUOTE    reduce using rule 381 (unaryExpression -> DOT .)
    LPAREN          reduce using rule 381 (unaryExpression -> DOT .)
    IDENTIFIER      shift and go to state 90

  ! IDENTIFIER      [ reduce using rule 381 (unaryExpression -> DOT .) ]

    identifierOrTemplateInstance   shift and go to state 162
    identifierOrTemplateChain      shift and go to state 163

state 35

    (284) primaryExpression -> LIT_CHAR .

    DOT             reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    PLUS_PLUS       reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    LBRACKET        reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    CARET           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    TIMES           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    DIV             reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    MODULO          reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    PLUS            reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    MINUS           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    TILDE           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    LEFT_SHIFT      reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    RIGHT_SHIFT     reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    IS_EQ           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    NOT_EQ          reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    AMPERSAND       reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    PIPE            reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    DOUBLE_AMPERSAND reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    QUESTION        reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    DOUBLE_PIPE     reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    ASSIGN          reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_LEFT         reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_RIGHT        reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_PLUS         reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_MINUS        reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_TIMES        reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_MODULO       reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_AND_BIT      reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_DIV          reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_OR_BIT       reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    EQ_XOR_BIT      reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    RBRACKET        reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    COMMA           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    LESS            reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    LESS_EQ         reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    GREATER         reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    GREATER_EQ      reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    IS_EQ_DIFF      reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    NOT_EQ_DIFF     reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    LESS_EQ_DIFF    reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    LESS_DIFF       reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    GREATER_EQ_DIFF reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    GREATER_DIFF    reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    RPAREN          reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    $end            reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    SEMICOLON       reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    COLON           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    RANGE           reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    TYPEDEF         reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    IDENTIFIER      reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    RBRACE          reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    DOUBLE_QUOTE    reduce using rule 284 (primaryExpression -> LIT_CHAR .)
    LPAREN          reduce using rule 284 (primaryExpression -> LIT_CHAR .)


state 36

    (77) castExpression -> CAST . LPAREN RPAREN unaryExpression
    (78) castExpression -> CAST . LPAREN type RPAREN unaryExpression
    (79) castExpression -> CAST . LPAREN castQualifier RPAREN unaryExpression

    LPAREN          shift and go to state 164


state 37

    (392) unaryExpression -> identifierOrTemplateInstance .
    (266) primaryExpression -> identifierOrTemplateInstance .
    (185) identifierOrTemplateChain -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for CARET resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TIMES resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DIV resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for MODULO resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for PLUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for MINUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TILDE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for PIPE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for QUESTION resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for COMMA resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RPAREN resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for $end resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for COLON resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RANGE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RBRACE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DOUBLE_QUOTE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LPAREN resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DOT resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LPAREN resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TIMES resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    CARET           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DIV             reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    RPAREN          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS            reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    $end            reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    COLON           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    RANGE           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    TYPEDEF         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    RBRACE          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_QUOTE    reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DOT             reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DELEGATE        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    FUNCTION        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! PLUS_PLUS       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LBRACKET        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! CARET           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! TIMES           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DIV             [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! MODULO          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! PLUS            [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! MINUS           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! TILDE           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LEFT_SHIFT      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RIGHT_SHIFT     [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! IS_EQ           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! NOT_EQ          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! AMPERSAND       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! PIPE            [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! QUESTION        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DOUBLE_PIPE     [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! ASSIGN          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_LEFT         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_RIGHT        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_PLUS         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_MINUS        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_TIMES        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_MODULO       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_AND_BIT      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_DIV          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_OR_BIT       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_XOR_BIT      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! SEMICOLON       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! COMMA           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS            [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS_EQ         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER_EQ      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! IS_EQ_DIFF      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS_DIFF       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER_DIFF    [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RPAREN          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! $end            [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RBRACKET        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! COLON           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RANGE           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! TYPEDEF         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! IDENTIFIER      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RBRACE          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DOUBLE_QUOTE    [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LPAREN          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DOT             [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]
  ! LBRACKET        [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]
  ! TIMES           [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]
  ! SEMICOLON       [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]
  ! LPAREN          [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]


state 38

    (187) identifierOrTemplateInstance -> IDENTIFIER .
    (176) functionLiteralExpression -> IDENTIFIER . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    CARET           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RPAREN          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DELEGATE        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    SEMICOLON       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACKET        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    $end            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    COLON           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TYPEDEF         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACE          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_QUOTE    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! AMPERSAND       [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! FUNCTION        [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! RANGE           [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 165
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 39

    (269) primaryExpression -> type . DOT IDENTIFIER
    (270) primaryExpression -> type . arguments
    (168) functionCallExpression -> type . arguments
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN

    DOT             shift and go to state 167
    LPAREN          shift and go to state 160

    arguments                      shift and go to state 166

state 40

    (342) type2 -> builtinType .

    TIMES           reduce using rule 342 (type2 -> builtinType .)
    LBRACKET        reduce using rule 342 (type2 -> builtinType .)
    DELEGATE        reduce using rule 342 (type2 -> builtinType .)
    FUNCTION        reduce using rule 342 (type2 -> builtinType .)
    SEMICOLON       reduce using rule 342 (type2 -> builtinType .)
    DOT             reduce using rule 342 (type2 -> builtinType .)
    LPAREN          reduce using rule 342 (type2 -> builtinType .)
    PLUS_PLUS       reduce using rule 342 (type2 -> builtinType .)
    CARET           reduce using rule 342 (type2 -> builtinType .)
    DIV             reduce using rule 342 (type2 -> builtinType .)
    MODULO          reduce using rule 342 (type2 -> builtinType .)
    PLUS            reduce using rule 342 (type2 -> builtinType .)
    MINUS           reduce using rule 342 (type2 -> builtinType .)
    TILDE           reduce using rule 342 (type2 -> builtinType .)
    $end            reduce using rule 342 (type2 -> builtinType .)
    LEFT_SHIFT      reduce using rule 342 (type2 -> builtinType .)
    RIGHT_SHIFT     reduce using rule 342 (type2 -> builtinType .)
    IS_EQ           reduce using rule 342 (type2 -> builtinType .)
    NOT_EQ          reduce using rule 342 (type2 -> builtinType .)
    AMPERSAND       reduce using rule 342 (type2 -> builtinType .)
    PIPE            reduce using rule 342 (type2 -> builtinType .)
    DOUBLE_AMPERSAND reduce using rule 342 (type2 -> builtinType .)
    QUESTION        reduce using rule 342 (type2 -> builtinType .)
    DOUBLE_PIPE     reduce using rule 342 (type2 -> builtinType .)
    ASSIGN          reduce using rule 342 (type2 -> builtinType .)
    EQ_LEFT         reduce using rule 342 (type2 -> builtinType .)
    EQ_RIGHT        reduce using rule 342 (type2 -> builtinType .)
    EQ_PLUS         reduce using rule 342 (type2 -> builtinType .)
    EQ_MINUS        reduce using rule 342 (type2 -> builtinType .)
    EQ_TIMES        reduce using rule 342 (type2 -> builtinType .)
    EQ_MODULO       reduce using rule 342 (type2 -> builtinType .)
    EQ_AND_BIT      reduce using rule 342 (type2 -> builtinType .)
    EQ_DIV          reduce using rule 342 (type2 -> builtinType .)
    EQ_OR_BIT       reduce using rule 342 (type2 -> builtinType .)
    EQ_XOR_BIT      reduce using rule 342 (type2 -> builtinType .)
    RBRACKET        reduce using rule 342 (type2 -> builtinType .)
    COMMA           reduce using rule 342 (type2 -> builtinType .)
    LESS            reduce using rule 342 (type2 -> builtinType .)
    LESS_EQ         reduce using rule 342 (type2 -> builtinType .)
    GREATER         reduce using rule 342 (type2 -> builtinType .)
    GREATER_EQ      reduce using rule 342 (type2 -> builtinType .)
    IS_EQ_DIFF      reduce using rule 342 (type2 -> builtinType .)
    NOT_EQ_DIFF     reduce using rule 342 (type2 -> builtinType .)
    LESS_EQ_DIFF    reduce using rule 342 (type2 -> builtinType .)
    LESS_DIFF       reduce using rule 342 (type2 -> builtinType .)
    GREATER_EQ_DIFF reduce using rule 342 (type2 -> builtinType .)
    GREATER_DIFF    reduce using rule 342 (type2 -> builtinType .)
    RPAREN          reduce using rule 342 (type2 -> builtinType .)
    COLON           reduce using rule 342 (type2 -> builtinType .)
    RANGE           reduce using rule 342 (type2 -> builtinType .)
    TYPEDEF         reduce using rule 342 (type2 -> builtinType .)
    IDENTIFIER      reduce using rule 342 (type2 -> builtinType .)
    RBRACE          reduce using rule 342 (type2 -> builtinType .)
    DOUBLE_QUOTE    reduce using rule 342 (type2 -> builtinType .)
    LBRACE          reduce using rule 342 (type2 -> builtinType .)
    FINAL           reduce using rule 342 (type2 -> builtinType .)
    AUTO            reduce using rule 342 (type2 -> builtinType .)
    RETURN          reduce using rule 342 (type2 -> builtinType .)
    CONST           reduce using rule 342 (type2 -> builtinType .)
    IMMUTABLE       reduce using rule 342 (type2 -> builtinType .)
    BOOL            reduce using rule 342 (type2 -> builtinType .)
    SHORT           reduce using rule 342 (type2 -> builtinType .)
    USHORT          reduce using rule 342 (type2 -> builtinType .)
    INT             reduce using rule 342 (type2 -> builtinType .)
    UINT            reduce using rule 342 (type2 -> builtinType .)
    LONG            reduce using rule 342 (type2 -> builtinType .)
    ULONG           reduce using rule 342 (type2 -> builtinType .)
    CHAR            reduce using rule 342 (type2 -> builtinType .)
    FLOAT           reduce using rule 342 (type2 -> builtinType .)
    TYPEOF          reduce using rule 342 (type2 -> builtinType .)
    ELLIPSIS        reduce using rule 342 (type2 -> builtinType .)


state 41

    (383) unaryExpression -> ELLIPSIS .

    DOT             reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    PLUS_PLUS       reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    LBRACKET        reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    CARET           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    TIMES           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    DIV             reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    MODULO          reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    PLUS            reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    MINUS           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    TILDE           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    LEFT_SHIFT      reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    RIGHT_SHIFT     reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    IS_EQ           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    NOT_EQ          reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    AMPERSAND       reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    PIPE            reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    DOUBLE_AMPERSAND reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    QUESTION        reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    DOUBLE_PIPE     reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    ASSIGN          reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_LEFT         reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_RIGHT        reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_PLUS         reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_MINUS        reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_TIMES        reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_MODULO       reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_AND_BIT      reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_DIV          reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_OR_BIT       reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    EQ_XOR_BIT      reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    SEMICOLON       reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    COMMA           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    LESS            reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    LESS_EQ         reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    GREATER         reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    GREATER_EQ      reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    IS_EQ_DIFF      reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    NOT_EQ_DIFF     reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    LESS_EQ_DIFF    reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    LESS_DIFF       reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    GREATER_EQ_DIFF reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    GREATER_DIFF    reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    RPAREN          reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    $end            reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    RBRACKET        reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    COLON           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    RANGE           reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    TYPEDEF         reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    IDENTIFIER      reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    RBRACE          reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    DOUBLE_QUOTE    reduce using rule 383 (unaryExpression -> ELLIPSIS .)
    LPAREN          reduce using rule 383 (unaryExpression -> ELLIPSIS .)


state 42

    (175) functionLiteralExpression -> functionBody .

    DOT             reduce using rule 175 (functionLiteralExpression -> functionBody .)
    PLUS_PLUS       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LBRACKET        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    CARET           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    TIMES           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    DIV             reduce using rule 175 (functionLiteralExpression -> functionBody .)
    MODULO          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    PLUS            reduce using rule 175 (functionLiteralExpression -> functionBody .)
    MINUS           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    TILDE           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LEFT_SHIFT      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    RIGHT_SHIFT     reduce using rule 175 (functionLiteralExpression -> functionBody .)
    IS_EQ           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    NOT_EQ          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    AMPERSAND       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    PIPE            reduce using rule 175 (functionLiteralExpression -> functionBody .)
    DOUBLE_AMPERSAND reduce using rule 175 (functionLiteralExpression -> functionBody .)
    QUESTION        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    DOUBLE_PIPE     reduce using rule 175 (functionLiteralExpression -> functionBody .)
    ASSIGN          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_LEFT         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_RIGHT        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_PLUS         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_MINUS        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_TIMES        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_MODULO       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_AND_BIT      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_DIV          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_OR_BIT       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_XOR_BIT      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    RPAREN          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    COMMA           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS            reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS_EQ         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER_EQ      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    IS_EQ_DIFF      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    NOT_EQ_DIFF     reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS_EQ_DIFF    reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS_DIFF       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER_EQ_DIFF reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER_DIFF    reduce using rule 175 (functionLiteralExpression -> functionBody .)
    $end            reduce using rule 175 (functionLiteralExpression -> functionBody .)
    SEMICOLON       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    RBRACKET        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    COLON           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    RANGE           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    TYPEDEF         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    IDENTIFIER      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    RBRACE          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    DOUBLE_QUOTE    reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LPAREN          reduce using rule 175 (functionLiteralExpression -> functionBody .)


state 43

    (280) primaryExpression -> FALSE .

    DOT             reduce using rule 280 (primaryExpression -> FALSE .)
    PLUS_PLUS       reduce using rule 280 (primaryExpression -> FALSE .)
    LBRACKET        reduce using rule 280 (primaryExpression -> FALSE .)
    CARET           reduce using rule 280 (primaryExpression -> FALSE .)
    TIMES           reduce using rule 280 (primaryExpression -> FALSE .)
    DIV             reduce using rule 280 (primaryExpression -> FALSE .)
    MODULO          reduce using rule 280 (primaryExpression -> FALSE .)
    PLUS            reduce using rule 280 (primaryExpression -> FALSE .)
    MINUS           reduce using rule 280 (primaryExpression -> FALSE .)
    TILDE           reduce using rule 280 (primaryExpression -> FALSE .)
    LEFT_SHIFT      reduce using rule 280 (primaryExpression -> FALSE .)
    RIGHT_SHIFT     reduce using rule 280 (primaryExpression -> FALSE .)
    IS_EQ           reduce using rule 280 (primaryExpression -> FALSE .)
    NOT_EQ          reduce using rule 280 (primaryExpression -> FALSE .)
    AMPERSAND       reduce using rule 280 (primaryExpression -> FALSE .)
    PIPE            reduce using rule 280 (primaryExpression -> FALSE .)
    DOUBLE_AMPERSAND reduce using rule 280 (primaryExpression -> FALSE .)
    QUESTION        reduce using rule 280 (primaryExpression -> FALSE .)
    DOUBLE_PIPE     reduce using rule 280 (primaryExpression -> FALSE .)
    ASSIGN          reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_LEFT         reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_RIGHT        reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_PLUS         reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_MINUS        reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_TIMES        reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_MODULO       reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_AND_BIT      reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_DIV          reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_OR_BIT       reduce using rule 280 (primaryExpression -> FALSE .)
    EQ_XOR_BIT      reduce using rule 280 (primaryExpression -> FALSE .)
    RBRACKET        reduce using rule 280 (primaryExpression -> FALSE .)
    COMMA           reduce using rule 280 (primaryExpression -> FALSE .)
    LESS            reduce using rule 280 (primaryExpression -> FALSE .)
    LESS_EQ         reduce using rule 280 (primaryExpression -> FALSE .)
    GREATER         reduce using rule 280 (primaryExpression -> FALSE .)
    GREATER_EQ      reduce using rule 280 (primaryExpression -> FALSE .)
    IS_EQ_DIFF      reduce using rule 280 (primaryExpression -> FALSE .)
    NOT_EQ_DIFF     reduce using rule 280 (primaryExpression -> FALSE .)
    LESS_EQ_DIFF    reduce using rule 280 (primaryExpression -> FALSE .)
    LESS_DIFF       reduce using rule 280 (primaryExpression -> FALSE .)
    GREATER_EQ_DIFF reduce using rule 280 (primaryExpression -> FALSE .)
    GREATER_DIFF    reduce using rule 280 (primaryExpression -> FALSE .)
    RPAREN          reduce using rule 280 (primaryExpression -> FALSE .)
    $end            reduce using rule 280 (primaryExpression -> FALSE .)
    SEMICOLON       reduce using rule 280 (primaryExpression -> FALSE .)
    COLON           reduce using rule 280 (primaryExpression -> FALSE .)
    RANGE           reduce using rule 280 (primaryExpression -> FALSE .)
    TYPEDEF         reduce using rule 280 (primaryExpression -> FALSE .)
    IDENTIFIER      reduce using rule 280 (primaryExpression -> FALSE .)
    RBRACE          reduce using rule 280 (primaryExpression -> FALSE .)
    DOUBLE_QUOTE    reduce using rule 280 (primaryExpression -> FALSE .)
    LPAREN          reduce using rule 280 (primaryExpression -> FALSE .)


state 44

    (375) unaryExpression -> primaryExpression .

    DOT             reduce using rule 375 (unaryExpression -> primaryExpression .)
    PLUS_PLUS       reduce using rule 375 (unaryExpression -> primaryExpression .)
    LBRACKET        reduce using rule 375 (unaryExpression -> primaryExpression .)
    CARET           reduce using rule 375 (unaryExpression -> primaryExpression .)
    TIMES           reduce using rule 375 (unaryExpression -> primaryExpression .)
    DIV             reduce using rule 375 (unaryExpression -> primaryExpression .)
    MODULO          reduce using rule 375 (unaryExpression -> primaryExpression .)
    PLUS            reduce using rule 375 (unaryExpression -> primaryExpression .)
    MINUS           reduce using rule 375 (unaryExpression -> primaryExpression .)
    TILDE           reduce using rule 375 (unaryExpression -> primaryExpression .)
    LEFT_SHIFT      reduce using rule 375 (unaryExpression -> primaryExpression .)
    RIGHT_SHIFT     reduce using rule 375 (unaryExpression -> primaryExpression .)
    IS_EQ           reduce using rule 375 (unaryExpression -> primaryExpression .)
    NOT_EQ          reduce using rule 375 (unaryExpression -> primaryExpression .)
    AMPERSAND       reduce using rule 375 (unaryExpression -> primaryExpression .)
    PIPE            reduce using rule 375 (unaryExpression -> primaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 375 (unaryExpression -> primaryExpression .)
    QUESTION        reduce using rule 375 (unaryExpression -> primaryExpression .)
    DOUBLE_PIPE     reduce using rule 375 (unaryExpression -> primaryExpression .)
    ASSIGN          reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_LEFT         reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_RIGHT        reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_PLUS         reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_MINUS        reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_TIMES        reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_MODULO       reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_AND_BIT      reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_DIV          reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_OR_BIT       reduce using rule 375 (unaryExpression -> primaryExpression .)
    EQ_XOR_BIT      reduce using rule 375 (unaryExpression -> primaryExpression .)
    SEMICOLON       reduce using rule 375 (unaryExpression -> primaryExpression .)
    COMMA           reduce using rule 375 (unaryExpression -> primaryExpression .)
    LESS            reduce using rule 375 (unaryExpression -> primaryExpression .)
    LESS_EQ         reduce using rule 375 (unaryExpression -> primaryExpression .)
    GREATER         reduce using rule 375 (unaryExpression -> primaryExpression .)
    GREATER_EQ      reduce using rule 375 (unaryExpression -> primaryExpression .)
    IS_EQ_DIFF      reduce using rule 375 (unaryExpression -> primaryExpression .)
    NOT_EQ_DIFF     reduce using rule 375 (unaryExpression -> primaryExpression .)
    LESS_EQ_DIFF    reduce using rule 375 (unaryExpression -> primaryExpression .)
    LESS_DIFF       reduce using rule 375 (unaryExpression -> primaryExpression .)
    GREATER_EQ_DIFF reduce using rule 375 (unaryExpression -> primaryExpression .)
    GREATER_DIFF    reduce using rule 375 (unaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 375 (unaryExpression -> primaryExpression .)
    $end            reduce using rule 375 (unaryExpression -> primaryExpression .)
    RBRACKET        reduce using rule 375 (unaryExpression -> primaryExpression .)
    COLON           reduce using rule 375 (unaryExpression -> primaryExpression .)
    RANGE           reduce using rule 375 (unaryExpression -> primaryExpression .)
    TYPEDEF         reduce using rule 375 (unaryExpression -> primaryExpression .)
    IDENTIFIER      reduce using rule 375 (unaryExpression -> primaryExpression .)
    RBRACE          reduce using rule 375 (unaryExpression -> primaryExpression .)
    DOUBLE_QUOTE    reduce using rule 375 (unaryExpression -> primaryExpression .)
    LPAREN          reduce using rule 375 (unaryExpression -> primaryExpression .)


state 45

    (283) primaryExpression -> LIT_STRPlus .

    DOT             reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    LBRACKET        reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    CARET           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    TIMES           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    DIV             reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    MODULO          reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    PLUS            reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    MINUS           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    TILDE           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    IS_EQ           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    NOT_EQ          reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    AMPERSAND       reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    PIPE            reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    QUESTION        reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    ASSIGN          reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_LEFT         reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_PLUS         reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_MINUS        reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_TIMES        reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_MODULO       reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_DIV          reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    RBRACKET        reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    COMMA           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    LESS            reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    LESS_EQ         reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    GREATER         reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    GREATER_EQ      reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    IS_EQ_DIFF      reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    NOT_EQ_DIFF     reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    LESS_EQ_DIFF    reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    LESS_DIFF       reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    GREATER_EQ_DIFF reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    GREATER_DIFF    reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    RPAREN          reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    $end            reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    SEMICOLON       reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    COLON           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    RANGE           reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    TYPEDEF         reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    IDENTIFIER      reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    RBRACE          reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    DOUBLE_QUOTE    reduce using rule 283 (primaryExpression -> LIT_STRPlus .)
    LPAREN          reduce using rule 283 (primaryExpression -> LIT_STRPlus .)


state 46

    (68) builtinType -> USHORT .

    TIMES           reduce using rule 68 (builtinType -> USHORT .)
    LBRACKET        reduce using rule 68 (builtinType -> USHORT .)
    DELEGATE        reduce using rule 68 (builtinType -> USHORT .)
    FUNCTION        reduce using rule 68 (builtinType -> USHORT .)
    SEMICOLON       reduce using rule 68 (builtinType -> USHORT .)
    DOT             reduce using rule 68 (builtinType -> USHORT .)
    LPAREN          reduce using rule 68 (builtinType -> USHORT .)
    IDENTIFIER      reduce using rule 68 (builtinType -> USHORT .)
    ELLIPSIS        reduce using rule 68 (builtinType -> USHORT .)
    COMMA           reduce using rule 68 (builtinType -> USHORT .)
    LBRACE          reduce using rule 68 (builtinType -> USHORT .)
    RBRACKET        reduce using rule 68 (builtinType -> USHORT .)
    ASSIGN          reduce using rule 68 (builtinType -> USHORT .)
    RPAREN          reduce using rule 68 (builtinType -> USHORT .)
    FINAL           reduce using rule 68 (builtinType -> USHORT .)
    AUTO            reduce using rule 68 (builtinType -> USHORT .)
    RETURN          reduce using rule 68 (builtinType -> USHORT .)
    CONST           reduce using rule 68 (builtinType -> USHORT .)
    IMMUTABLE       reduce using rule 68 (builtinType -> USHORT .)
    BOOL            reduce using rule 68 (builtinType -> USHORT .)
    SHORT           reduce using rule 68 (builtinType -> USHORT .)
    USHORT          reduce using rule 68 (builtinType -> USHORT .)
    INT             reduce using rule 68 (builtinType -> USHORT .)
    UINT            reduce using rule 68 (builtinType -> USHORT .)
    LONG            reduce using rule 68 (builtinType -> USHORT .)
    ULONG           reduce using rule 68 (builtinType -> USHORT .)
    CHAR            reduce using rule 68 (builtinType -> USHORT .)
    FLOAT           reduce using rule 68 (builtinType -> USHORT .)
    TYPEOF          reduce using rule 68 (builtinType -> USHORT .)
    PLUS_PLUS       reduce using rule 68 (builtinType -> USHORT .)
    CARET           reduce using rule 68 (builtinType -> USHORT .)
    DIV             reduce using rule 68 (builtinType -> USHORT .)
    MODULO          reduce using rule 68 (builtinType -> USHORT .)
    PLUS            reduce using rule 68 (builtinType -> USHORT .)
    MINUS           reduce using rule 68 (builtinType -> USHORT .)
    TILDE           reduce using rule 68 (builtinType -> USHORT .)
    $end            reduce using rule 68 (builtinType -> USHORT .)
    LEFT_SHIFT      reduce using rule 68 (builtinType -> USHORT .)
    RIGHT_SHIFT     reduce using rule 68 (builtinType -> USHORT .)
    IS_EQ           reduce using rule 68 (builtinType -> USHORT .)
    NOT_EQ          reduce using rule 68 (builtinType -> USHORT .)
    AMPERSAND       reduce using rule 68 (builtinType -> USHORT .)
    PIPE            reduce using rule 68 (builtinType -> USHORT .)
    DOUBLE_AMPERSAND reduce using rule 68 (builtinType -> USHORT .)
    QUESTION        reduce using rule 68 (builtinType -> USHORT .)
    DOUBLE_PIPE     reduce using rule 68 (builtinType -> USHORT .)
    EQ_LEFT         reduce using rule 68 (builtinType -> USHORT .)
    EQ_RIGHT        reduce using rule 68 (builtinType -> USHORT .)
    EQ_PLUS         reduce using rule 68 (builtinType -> USHORT .)
    EQ_MINUS        reduce using rule 68 (builtinType -> USHORT .)
    EQ_TIMES        reduce using rule 68 (builtinType -> USHORT .)
    EQ_MODULO       reduce using rule 68 (builtinType -> USHORT .)
    EQ_AND_BIT      reduce using rule 68 (builtinType -> USHORT .)
    EQ_DIV          reduce using rule 68 (builtinType -> USHORT .)
    EQ_OR_BIT       reduce using rule 68 (builtinType -> USHORT .)
    EQ_XOR_BIT      reduce using rule 68 (builtinType -> USHORT .)
    LESS            reduce using rule 68 (builtinType -> USHORT .)
    LESS_EQ         reduce using rule 68 (builtinType -> USHORT .)
    GREATER         reduce using rule 68 (builtinType -> USHORT .)
    GREATER_EQ      reduce using rule 68 (builtinType -> USHORT .)
    IS_EQ_DIFF      reduce using rule 68 (builtinType -> USHORT .)
    NOT_EQ_DIFF     reduce using rule 68 (builtinType -> USHORT .)
    LESS_EQ_DIFF    reduce using rule 68 (builtinType -> USHORT .)
    LESS_DIFF       reduce using rule 68 (builtinType -> USHORT .)
    GREATER_EQ_DIFF reduce using rule 68 (builtinType -> USHORT .)
    GREATER_DIFF    reduce using rule 68 (builtinType -> USHORT .)
    COLON           reduce using rule 68 (builtinType -> USHORT .)
    RANGE           reduce using rule 68 (builtinType -> USHORT .)
    TYPEDEF         reduce using rule 68 (builtinType -> USHORT .)
    RBRACE          reduce using rule 68 (builtinType -> USHORT .)
    DOUBLE_QUOTE    reduce using rule 68 (builtinType -> USHORT .)


state 47

    (275) primaryExpression -> importExpression .

    DOT             reduce using rule 275 (primaryExpression -> importExpression .)
    PLUS_PLUS       reduce using rule 275 (primaryExpression -> importExpression .)
    LBRACKET        reduce using rule 275 (primaryExpression -> importExpression .)
    CARET           reduce using rule 275 (primaryExpression -> importExpression .)
    TIMES           reduce using rule 275 (primaryExpression -> importExpression .)
    DIV             reduce using rule 275 (primaryExpression -> importExpression .)
    MODULO          reduce using rule 275 (primaryExpression -> importExpression .)
    PLUS            reduce using rule 275 (primaryExpression -> importExpression .)
    MINUS           reduce using rule 275 (primaryExpression -> importExpression .)
    TILDE           reduce using rule 275 (primaryExpression -> importExpression .)
    LEFT_SHIFT      reduce using rule 275 (primaryExpression -> importExpression .)
    RIGHT_SHIFT     reduce using rule 275 (primaryExpression -> importExpression .)
    IS_EQ           reduce using rule 275 (primaryExpression -> importExpression .)
    NOT_EQ          reduce using rule 275 (primaryExpression -> importExpression .)
    AMPERSAND       reduce using rule 275 (primaryExpression -> importExpression .)
    PIPE            reduce using rule 275 (primaryExpression -> importExpression .)
    DOUBLE_AMPERSAND reduce using rule 275 (primaryExpression -> importExpression .)
    QUESTION        reduce using rule 275 (primaryExpression -> importExpression .)
    DOUBLE_PIPE     reduce using rule 275 (primaryExpression -> importExpression .)
    ASSIGN          reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_LEFT         reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_RIGHT        reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_PLUS         reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_MINUS        reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_TIMES        reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_MODULO       reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_AND_BIT      reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_DIV          reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_OR_BIT       reduce using rule 275 (primaryExpression -> importExpression .)
    EQ_XOR_BIT      reduce using rule 275 (primaryExpression -> importExpression .)
    RBRACKET        reduce using rule 275 (primaryExpression -> importExpression .)
    COMMA           reduce using rule 275 (primaryExpression -> importExpression .)
    LESS            reduce using rule 275 (primaryExpression -> importExpression .)
    LESS_EQ         reduce using rule 275 (primaryExpression -> importExpression .)
    GREATER         reduce using rule 275 (primaryExpression -> importExpression .)
    GREATER_EQ      reduce using rule 275 (primaryExpression -> importExpression .)
    IS_EQ_DIFF      reduce using rule 275 (primaryExpression -> importExpression .)
    NOT_EQ_DIFF     reduce using rule 275 (primaryExpression -> importExpression .)
    LESS_EQ_DIFF    reduce using rule 275 (primaryExpression -> importExpression .)
    LESS_DIFF       reduce using rule 275 (primaryExpression -> importExpression .)
    GREATER_EQ_DIFF reduce using rule 275 (primaryExpression -> importExpression .)
    GREATER_DIFF    reduce using rule 275 (primaryExpression -> importExpression .)
    RPAREN          reduce using rule 275 (primaryExpression -> importExpression .)
    $end            reduce using rule 275 (primaryExpression -> importExpression .)
    SEMICOLON       reduce using rule 275 (primaryExpression -> importExpression .)
    COLON           reduce using rule 275 (primaryExpression -> importExpression .)
    RANGE           reduce using rule 275 (primaryExpression -> importExpression .)
    TYPEDEF         reduce using rule 275 (primaryExpression -> importExpression .)
    IDENTIFIER      reduce using rule 275 (primaryExpression -> importExpression .)
    RBRACE          reduce using rule 275 (primaryExpression -> importExpression .)
    DOUBLE_QUOTE    reduce using rule 275 (primaryExpression -> importExpression .)
    LPAREN          reduce using rule 275 (primaryExpression -> importExpression .)


state 48

    (66) builtinType -> BOOL .

    TIMES           reduce using rule 66 (builtinType -> BOOL .)
    LBRACKET        reduce using rule 66 (builtinType -> BOOL .)
    DELEGATE        reduce using rule 66 (builtinType -> BOOL .)
    FUNCTION        reduce using rule 66 (builtinType -> BOOL .)
    SEMICOLON       reduce using rule 66 (builtinType -> BOOL .)
    DOT             reduce using rule 66 (builtinType -> BOOL .)
    LPAREN          reduce using rule 66 (builtinType -> BOOL .)
    IDENTIFIER      reduce using rule 66 (builtinType -> BOOL .)
    ELLIPSIS        reduce using rule 66 (builtinType -> BOOL .)
    COMMA           reduce using rule 66 (builtinType -> BOOL .)
    LBRACE          reduce using rule 66 (builtinType -> BOOL .)
    RBRACKET        reduce using rule 66 (builtinType -> BOOL .)
    ASSIGN          reduce using rule 66 (builtinType -> BOOL .)
    RPAREN          reduce using rule 66 (builtinType -> BOOL .)
    FINAL           reduce using rule 66 (builtinType -> BOOL .)
    AUTO            reduce using rule 66 (builtinType -> BOOL .)
    RETURN          reduce using rule 66 (builtinType -> BOOL .)
    CONST           reduce using rule 66 (builtinType -> BOOL .)
    IMMUTABLE       reduce using rule 66 (builtinType -> BOOL .)
    BOOL            reduce using rule 66 (builtinType -> BOOL .)
    SHORT           reduce using rule 66 (builtinType -> BOOL .)
    USHORT          reduce using rule 66 (builtinType -> BOOL .)
    INT             reduce using rule 66 (builtinType -> BOOL .)
    UINT            reduce using rule 66 (builtinType -> BOOL .)
    LONG            reduce using rule 66 (builtinType -> BOOL .)
    ULONG           reduce using rule 66 (builtinType -> BOOL .)
    CHAR            reduce using rule 66 (builtinType -> BOOL .)
    FLOAT           reduce using rule 66 (builtinType -> BOOL .)
    TYPEOF          reduce using rule 66 (builtinType -> BOOL .)
    PLUS_PLUS       reduce using rule 66 (builtinType -> BOOL .)
    CARET           reduce using rule 66 (builtinType -> BOOL .)
    DIV             reduce using rule 66 (builtinType -> BOOL .)
    MODULO          reduce using rule 66 (builtinType -> BOOL .)
    PLUS            reduce using rule 66 (builtinType -> BOOL .)
    MINUS           reduce using rule 66 (builtinType -> BOOL .)
    TILDE           reduce using rule 66 (builtinType -> BOOL .)
    $end            reduce using rule 66 (builtinType -> BOOL .)
    LEFT_SHIFT      reduce using rule 66 (builtinType -> BOOL .)
    RIGHT_SHIFT     reduce using rule 66 (builtinType -> BOOL .)
    IS_EQ           reduce using rule 66 (builtinType -> BOOL .)
    NOT_EQ          reduce using rule 66 (builtinType -> BOOL .)
    AMPERSAND       reduce using rule 66 (builtinType -> BOOL .)
    PIPE            reduce using rule 66 (builtinType -> BOOL .)
    DOUBLE_AMPERSAND reduce using rule 66 (builtinType -> BOOL .)
    QUESTION        reduce using rule 66 (builtinType -> BOOL .)
    DOUBLE_PIPE     reduce using rule 66 (builtinType -> BOOL .)
    EQ_LEFT         reduce using rule 66 (builtinType -> BOOL .)
    EQ_RIGHT        reduce using rule 66 (builtinType -> BOOL .)
    EQ_PLUS         reduce using rule 66 (builtinType -> BOOL .)
    EQ_MINUS        reduce using rule 66 (builtinType -> BOOL .)
    EQ_TIMES        reduce using rule 66 (builtinType -> BOOL .)
    EQ_MODULO       reduce using rule 66 (builtinType -> BOOL .)
    EQ_AND_BIT      reduce using rule 66 (builtinType -> BOOL .)
    EQ_DIV          reduce using rule 66 (builtinType -> BOOL .)
    EQ_OR_BIT       reduce using rule 66 (builtinType -> BOOL .)
    EQ_XOR_BIT      reduce using rule 66 (builtinType -> BOOL .)
    LESS            reduce using rule 66 (builtinType -> BOOL .)
    LESS_EQ         reduce using rule 66 (builtinType -> BOOL .)
    GREATER         reduce using rule 66 (builtinType -> BOOL .)
    GREATER_EQ      reduce using rule 66 (builtinType -> BOOL .)
    IS_EQ_DIFF      reduce using rule 66 (builtinType -> BOOL .)
    NOT_EQ_DIFF     reduce using rule 66 (builtinType -> BOOL .)
    LESS_EQ_DIFF    reduce using rule 66 (builtinType -> BOOL .)
    LESS_DIFF       reduce using rule 66 (builtinType -> BOOL .)
    GREATER_EQ_DIFF reduce using rule 66 (builtinType -> BOOL .)
    GREATER_DIFF    reduce using rule 66 (builtinType -> BOOL .)
    COLON           reduce using rule 66 (builtinType -> BOOL .)
    RANGE           reduce using rule 66 (builtinType -> BOOL .)
    TYPEDEF         reduce using rule 66 (builtinType -> BOOL .)
    RBRACE          reduce using rule 66 (builtinType -> BOOL .)
    DOUBLE_QUOTE    reduce using rule 66 (builtinType -> BOOL .)


state 49

    (217) mulExpression -> powExpression .
    (262) powExpression -> powExpression . CARET unaryExpression

  ! shift/reduce conflict for CARET resolved as shift
    TIMES           reduce using rule 217 (mulExpression -> powExpression .)
    DIV             reduce using rule 217 (mulExpression -> powExpression .)
    MODULO          reduce using rule 217 (mulExpression -> powExpression .)
    PLUS            reduce using rule 217 (mulExpression -> powExpression .)
    MINUS           reduce using rule 217 (mulExpression -> powExpression .)
    TILDE           reduce using rule 217 (mulExpression -> powExpression .)
    LEFT_SHIFT      reduce using rule 217 (mulExpression -> powExpression .)
    RIGHT_SHIFT     reduce using rule 217 (mulExpression -> powExpression .)
    IS_EQ           reduce using rule 217 (mulExpression -> powExpression .)
    NOT_EQ          reduce using rule 217 (mulExpression -> powExpression .)
    AMPERSAND       reduce using rule 217 (mulExpression -> powExpression .)
    PIPE            reduce using rule 217 (mulExpression -> powExpression .)
    DOUBLE_AMPERSAND reduce using rule 217 (mulExpression -> powExpression .)
    QUESTION        reduce using rule 217 (mulExpression -> powExpression .)
    DOUBLE_PIPE     reduce using rule 217 (mulExpression -> powExpression .)
    ASSIGN          reduce using rule 217 (mulExpression -> powExpression .)
    EQ_LEFT         reduce using rule 217 (mulExpression -> powExpression .)
    EQ_RIGHT        reduce using rule 217 (mulExpression -> powExpression .)
    EQ_PLUS         reduce using rule 217 (mulExpression -> powExpression .)
    EQ_MINUS        reduce using rule 217 (mulExpression -> powExpression .)
    EQ_TIMES        reduce using rule 217 (mulExpression -> powExpression .)
    EQ_MODULO       reduce using rule 217 (mulExpression -> powExpression .)
    EQ_AND_BIT      reduce using rule 217 (mulExpression -> powExpression .)
    EQ_DIV          reduce using rule 217 (mulExpression -> powExpression .)
    EQ_OR_BIT       reduce using rule 217 (mulExpression -> powExpression .)
    EQ_XOR_BIT      reduce using rule 217 (mulExpression -> powExpression .)
    TYPEDEF         reduce using rule 217 (mulExpression -> powExpression .)
    IDENTIFIER      reduce using rule 217 (mulExpression -> powExpression .)
    RBRACE          reduce using rule 217 (mulExpression -> powExpression .)
    LESS            reduce using rule 217 (mulExpression -> powExpression .)
    LESS_EQ         reduce using rule 217 (mulExpression -> powExpression .)
    GREATER         reduce using rule 217 (mulExpression -> powExpression .)
    GREATER_EQ      reduce using rule 217 (mulExpression -> powExpression .)
    IS_EQ_DIFF      reduce using rule 217 (mulExpression -> powExpression .)
    NOT_EQ_DIFF     reduce using rule 217 (mulExpression -> powExpression .)
    LESS_EQ_DIFF    reduce using rule 217 (mulExpression -> powExpression .)
    LESS_DIFF       reduce using rule 217 (mulExpression -> powExpression .)
    GREATER_EQ_DIFF reduce using rule 217 (mulExpression -> powExpression .)
    GREATER_DIFF    reduce using rule 217 (mulExpression -> powExpression .)
    COMMA           reduce using rule 217 (mulExpression -> powExpression .)
    RPAREN          reduce using rule 217 (mulExpression -> powExpression .)
    SEMICOLON       reduce using rule 217 (mulExpression -> powExpression .)
    DOT             reduce using rule 217 (mulExpression -> powExpression .)
    PLUS_PLUS       reduce using rule 217 (mulExpression -> powExpression .)
    LBRACKET        reduce using rule 217 (mulExpression -> powExpression .)
    $end            reduce using rule 217 (mulExpression -> powExpression .)
    RBRACKET        reduce using rule 217 (mulExpression -> powExpression .)
    COLON           reduce using rule 217 (mulExpression -> powExpression .)
    RANGE           reduce using rule 217 (mulExpression -> powExpression .)
    DOUBLE_QUOTE    reduce using rule 217 (mulExpression -> powExpression .)
    LPAREN          reduce using rule 217 (mulExpression -> powExpression .)
    CARET           shift and go to state 168

  ! CARET           [ reduce using rule 217 (mulExpression -> powExpression .) ]


state 50

    (347) typeConstructor -> CONST .

    LBRACKET        reduce using rule 347 (typeConstructor -> CONST .)
    CONST           reduce using rule 347 (typeConstructor -> CONST .)
    IMMUTABLE       reduce using rule 347 (typeConstructor -> CONST .)
    BOOL            reduce using rule 347 (typeConstructor -> CONST .)
    SHORT           reduce using rule 347 (typeConstructor -> CONST .)
    USHORT          reduce using rule 347 (typeConstructor -> CONST .)
    INT             reduce using rule 347 (typeConstructor -> CONST .)
    UINT            reduce using rule 347 (typeConstructor -> CONST .)
    LONG            reduce using rule 347 (typeConstructor -> CONST .)
    ULONG           reduce using rule 347 (typeConstructor -> CONST .)
    CHAR            reduce using rule 347 (typeConstructor -> CONST .)
    FLOAT           reduce using rule 347 (typeConstructor -> CONST .)
    DOT             reduce using rule 347 (typeConstructor -> CONST .)
    TYPEOF          reduce using rule 347 (typeConstructor -> CONST .)
    IDENTIFIER      reduce using rule 347 (typeConstructor -> CONST .)
    LPAREN          reduce using rule 347 (typeConstructor -> CONST .)
    AUTO            reduce using rule 347 (typeConstructor -> CONST .)
    ENUM            reduce using rule 347 (typeConstructor -> CONST .)
    EXTERN          reduce using rule 347 (typeConstructor -> CONST .)
    FINAL           reduce using rule 347 (typeConstructor -> CONST .)
    STATIC          reduce using rule 347 (typeConstructor -> CONST .)
    TYPEDEF         reduce using rule 347 (typeConstructor -> CONST .)
    RETURN          reduce using rule 347 (typeConstructor -> CONST .)


state 51

    (387) unaryExpression -> functionCallExpression .

    DOT             reduce using rule 387 (unaryExpression -> functionCallExpression .)
    PLUS_PLUS       reduce using rule 387 (unaryExpression -> functionCallExpression .)
    LBRACKET        reduce using rule 387 (unaryExpression -> functionCallExpression .)
    CARET           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    TIMES           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    DIV             reduce using rule 387 (unaryExpression -> functionCallExpression .)
    MODULO          reduce using rule 387 (unaryExpression -> functionCallExpression .)
    PLUS            reduce using rule 387 (unaryExpression -> functionCallExpression .)
    MINUS           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    TILDE           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    LEFT_SHIFT      reduce using rule 387 (unaryExpression -> functionCallExpression .)
    RIGHT_SHIFT     reduce using rule 387 (unaryExpression -> functionCallExpression .)
    IS_EQ           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    NOT_EQ          reduce using rule 387 (unaryExpression -> functionCallExpression .)
    AMPERSAND       reduce using rule 387 (unaryExpression -> functionCallExpression .)
    PIPE            reduce using rule 387 (unaryExpression -> functionCallExpression .)
    DOUBLE_AMPERSAND reduce using rule 387 (unaryExpression -> functionCallExpression .)
    QUESTION        reduce using rule 387 (unaryExpression -> functionCallExpression .)
    DOUBLE_PIPE     reduce using rule 387 (unaryExpression -> functionCallExpression .)
    ASSIGN          reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_LEFT         reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_RIGHT        reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_PLUS         reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_MINUS        reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_TIMES        reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_MODULO       reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_AND_BIT      reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_DIV          reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_OR_BIT       reduce using rule 387 (unaryExpression -> functionCallExpression .)
    EQ_XOR_BIT      reduce using rule 387 (unaryExpression -> functionCallExpression .)
    SEMICOLON       reduce using rule 387 (unaryExpression -> functionCallExpression .)
    COMMA           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    LESS            reduce using rule 387 (unaryExpression -> functionCallExpression .)
    LESS_EQ         reduce using rule 387 (unaryExpression -> functionCallExpression .)
    GREATER         reduce using rule 387 (unaryExpression -> functionCallExpression .)
    GREATER_EQ      reduce using rule 387 (unaryExpression -> functionCallExpression .)
    IS_EQ_DIFF      reduce using rule 387 (unaryExpression -> functionCallExpression .)
    NOT_EQ_DIFF     reduce using rule 387 (unaryExpression -> functionCallExpression .)
    LESS_EQ_DIFF    reduce using rule 387 (unaryExpression -> functionCallExpression .)
    LESS_DIFF       reduce using rule 387 (unaryExpression -> functionCallExpression .)
    GREATER_EQ_DIFF reduce using rule 387 (unaryExpression -> functionCallExpression .)
    GREATER_DIFF    reduce using rule 387 (unaryExpression -> functionCallExpression .)
    RPAREN          reduce using rule 387 (unaryExpression -> functionCallExpression .)
    $end            reduce using rule 387 (unaryExpression -> functionCallExpression .)
    RBRACKET        reduce using rule 387 (unaryExpression -> functionCallExpression .)
    COLON           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    RANGE           reduce using rule 387 (unaryExpression -> functionCallExpression .)
    TYPEDEF         reduce using rule 387 (unaryExpression -> functionCallExpression .)
    IDENTIFIER      reduce using rule 387 (unaryExpression -> functionCallExpression .)
    RBRACE          reduce using rule 387 (unaryExpression -> functionCallExpression .)
    DOUBLE_QUOTE    reduce using rule 387 (unaryExpression -> functionCallExpression .)
    LPAREN          reduce using rule 387 (unaryExpression -> functionCallExpression .)


state 52

    (278) primaryExpression -> NULL .

    DOT             reduce using rule 278 (primaryExpression -> NULL .)
    PLUS_PLUS       reduce using rule 278 (primaryExpression -> NULL .)
    LBRACKET        reduce using rule 278 (primaryExpression -> NULL .)
    CARET           reduce using rule 278 (primaryExpression -> NULL .)
    TIMES           reduce using rule 278 (primaryExpression -> NULL .)
    DIV             reduce using rule 278 (primaryExpression -> NULL .)
    MODULO          reduce using rule 278 (primaryExpression -> NULL .)
    PLUS            reduce using rule 278 (primaryExpression -> NULL .)
    MINUS           reduce using rule 278 (primaryExpression -> NULL .)
    TILDE           reduce using rule 278 (primaryExpression -> NULL .)
    LEFT_SHIFT      reduce using rule 278 (primaryExpression -> NULL .)
    RIGHT_SHIFT     reduce using rule 278 (primaryExpression -> NULL .)
    IS_EQ           reduce using rule 278 (primaryExpression -> NULL .)
    NOT_EQ          reduce using rule 278 (primaryExpression -> NULL .)
    AMPERSAND       reduce using rule 278 (primaryExpression -> NULL .)
    PIPE            reduce using rule 278 (primaryExpression -> NULL .)
    DOUBLE_AMPERSAND reduce using rule 278 (primaryExpression -> NULL .)
    QUESTION        reduce using rule 278 (primaryExpression -> NULL .)
    DOUBLE_PIPE     reduce using rule 278 (primaryExpression -> NULL .)
    ASSIGN          reduce using rule 278 (primaryExpression -> NULL .)
    EQ_LEFT         reduce using rule 278 (primaryExpression -> NULL .)
    EQ_RIGHT        reduce using rule 278 (primaryExpression -> NULL .)
    EQ_PLUS         reduce using rule 278 (primaryExpression -> NULL .)
    EQ_MINUS        reduce using rule 278 (primaryExpression -> NULL .)
    EQ_TIMES        reduce using rule 278 (primaryExpression -> NULL .)
    EQ_MODULO       reduce using rule 278 (primaryExpression -> NULL .)
    EQ_AND_BIT      reduce using rule 278 (primaryExpression -> NULL .)
    EQ_DIV          reduce using rule 278 (primaryExpression -> NULL .)
    EQ_OR_BIT       reduce using rule 278 (primaryExpression -> NULL .)
    EQ_XOR_BIT      reduce using rule 278 (primaryExpression -> NULL .)
    RBRACKET        reduce using rule 278 (primaryExpression -> NULL .)
    COMMA           reduce using rule 278 (primaryExpression -> NULL .)
    LESS            reduce using rule 278 (primaryExpression -> NULL .)
    LESS_EQ         reduce using rule 278 (primaryExpression -> NULL .)
    GREATER         reduce using rule 278 (primaryExpression -> NULL .)
    GREATER_EQ      reduce using rule 278 (primaryExpression -> NULL .)
    IS_EQ_DIFF      reduce using rule 278 (primaryExpression -> NULL .)
    NOT_EQ_DIFF     reduce using rule 278 (primaryExpression -> NULL .)
    LESS_EQ_DIFF    reduce using rule 278 (primaryExpression -> NULL .)
    LESS_DIFF       reduce using rule 278 (primaryExpression -> NULL .)
    GREATER_EQ_DIFF reduce using rule 278 (primaryExpression -> NULL .)
    GREATER_DIFF    reduce using rule 278 (primaryExpression -> NULL .)
    RPAREN          reduce using rule 278 (primaryExpression -> NULL .)
    $end            reduce using rule 278 (primaryExpression -> NULL .)
    SEMICOLON       reduce using rule 278 (primaryExpression -> NULL .)
    COLON           reduce using rule 278 (primaryExpression -> NULL .)
    RANGE           reduce using rule 278 (primaryExpression -> NULL .)
    TYPEDEF         reduce using rule 278 (primaryExpression -> NULL .)
    IDENTIFIER      reduce using rule 278 (primaryExpression -> NULL .)
    RBRACE          reduce using rule 278 (primaryExpression -> NULL .)
    DOUBLE_QUOTE    reduce using rule 278 (primaryExpression -> NULL .)
    LPAREN          reduce using rule 278 (primaryExpression -> NULL .)


state 53

    (341) type -> type2 . typeSuffixStar
    (338) typeSuffixStar -> . typeSuffix typeSuffixStar
    (339) typeSuffixStar -> . empty
    (364) typeSuffix -> . TIMES
    (365) typeSuffix -> . LBRACKET type RBRACKET
    (366) typeSuffix -> . LBRACKET RBRACKET
    (367) typeSuffix -> . LBRACKET assignExpression RBRACKET
    (368) typeSuffix -> . LBRACKET assignExpression RANGE assignExpression RBRACKET
    (369) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (371) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (373) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET
    (374) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET
    (407) empty -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    TIMES           shift and go to state 174
    LBRACKET        shift and go to state 169
    DELEGATE        shift and go to state 176
    FUNCTION        shift and go to state 173
    SEMICOLON       shift and go to state 171
    DOT             reduce using rule 407 (empty -> .)
    LPAREN          reduce using rule 407 (empty -> .)
    PLUS_PLUS       reduce using rule 407 (empty -> .)
    CARET           reduce using rule 407 (empty -> .)
    DIV             reduce using rule 407 (empty -> .)
    MODULO          reduce using rule 407 (empty -> .)
    PLUS            reduce using rule 407 (empty -> .)
    MINUS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    $end            reduce using rule 407 (empty -> .)
    LEFT_SHIFT      reduce using rule 407 (empty -> .)
    RIGHT_SHIFT     reduce using rule 407 (empty -> .)
    IS_EQ           reduce using rule 407 (empty -> .)
    NOT_EQ          reduce using rule 407 (empty -> .)
    AMPERSAND       reduce using rule 407 (empty -> .)
    PIPE            reduce using rule 407 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 407 (empty -> .)
    QUESTION        reduce using rule 407 (empty -> .)
    DOUBLE_PIPE     reduce using rule 407 (empty -> .)
    ASSIGN          reduce using rule 407 (empty -> .)
    EQ_LEFT         reduce using rule 407 (empty -> .)
    EQ_RIGHT        reduce using rule 407 (empty -> .)
    EQ_PLUS         reduce using rule 407 (empty -> .)
    EQ_MINUS        reduce using rule 407 (empty -> .)
    EQ_TIMES        reduce using rule 407 (empty -> .)
    EQ_MODULO       reduce using rule 407 (empty -> .)
    EQ_AND_BIT      reduce using rule 407 (empty -> .)
    EQ_DIV          reduce using rule 407 (empty -> .)
    EQ_OR_BIT       reduce using rule 407 (empty -> .)
    EQ_XOR_BIT      reduce using rule 407 (empty -> .)
    RBRACKET        reduce using rule 407 (empty -> .)
    COMMA           reduce using rule 407 (empty -> .)
    LESS            reduce using rule 407 (empty -> .)
    LESS_EQ         reduce using rule 407 (empty -> .)
    GREATER         reduce using rule 407 (empty -> .)
    GREATER_EQ      reduce using rule 407 (empty -> .)
    IS_EQ_DIFF      reduce using rule 407 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 407 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 407 (empty -> .)
    LESS_DIFF       reduce using rule 407 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 407 (empty -> .)
    GREATER_DIFF    reduce using rule 407 (empty -> .)
    RPAREN          reduce using rule 407 (empty -> .)
    COLON           reduce using rule 407 (empty -> .)
    RANGE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    RBRACE          reduce using rule 407 (empty -> .)
    DOUBLE_QUOTE    reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)
    FINAL           reduce using rule 407 (empty -> .)
    AUTO            reduce using rule 407 (empty -> .)
    RETURN          reduce using rule 407 (empty -> .)
    CONST           reduce using rule 407 (empty -> .)
    IMMUTABLE       reduce using rule 407 (empty -> .)
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    ELLIPSIS        reduce using rule 407 (empty -> .)

  ! LBRACKET        [ reduce using rule 407 (empty -> .) ]
  ! TIMES           [ reduce using rule 407 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 407 (empty -> .) ]

    typeSuffix                     shift and go to state 175
    typeSuffixStar                 shift and go to state 170
    empty                          shift and go to state 172

state 54

    (0) S' -> addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

    PLUS            shift and go to state 177
    MINUS           shift and go to state 178
    TILDE           shift and go to state 179


state 55

    (261) powExpression -> unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 261 (powExpression -> unaryExpression .)
    TIMES           reduce using rule 261 (powExpression -> unaryExpression .)
    DIV             reduce using rule 261 (powExpression -> unaryExpression .)
    MODULO          reduce using rule 261 (powExpression -> unaryExpression .)
    PLUS            reduce using rule 261 (powExpression -> unaryExpression .)
    MINUS           reduce using rule 261 (powExpression -> unaryExpression .)
    TILDE           reduce using rule 261 (powExpression -> unaryExpression .)
    LEFT_SHIFT      reduce using rule 261 (powExpression -> unaryExpression .)
    RIGHT_SHIFT     reduce using rule 261 (powExpression -> unaryExpression .)
    IS_EQ           reduce using rule 261 (powExpression -> unaryExpression .)
    NOT_EQ          reduce using rule 261 (powExpression -> unaryExpression .)
    AMPERSAND       reduce using rule 261 (powExpression -> unaryExpression .)
    PIPE            reduce using rule 261 (powExpression -> unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 261 (powExpression -> unaryExpression .)
    QUESTION        reduce using rule 261 (powExpression -> unaryExpression .)
    DOUBLE_PIPE     reduce using rule 261 (powExpression -> unaryExpression .)
    ASSIGN          reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_LEFT         reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_RIGHT        reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_PLUS         reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_MINUS        reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_TIMES        reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_MODULO       reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_AND_BIT      reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_DIV          reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_OR_BIT       reduce using rule 261 (powExpression -> unaryExpression .)
    EQ_XOR_BIT      reduce using rule 261 (powExpression -> unaryExpression .)
    COMMA           reduce using rule 261 (powExpression -> unaryExpression .)
    RPAREN          reduce using rule 261 (powExpression -> unaryExpression .)
    LESS            reduce using rule 261 (powExpression -> unaryExpression .)
    LESS_EQ         reduce using rule 261 (powExpression -> unaryExpression .)
    GREATER         reduce using rule 261 (powExpression -> unaryExpression .)
    GREATER_EQ      reduce using rule 261 (powExpression -> unaryExpression .)
    IS_EQ_DIFF      reduce using rule 261 (powExpression -> unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 261 (powExpression -> unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 261 (powExpression -> unaryExpression .)
    LESS_DIFF       reduce using rule 261 (powExpression -> unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 261 (powExpression -> unaryExpression .)
    GREATER_DIFF    reduce using rule 261 (powExpression -> unaryExpression .)
    $end            reduce using rule 261 (powExpression -> unaryExpression .)
    RBRACKET        reduce using rule 261 (powExpression -> unaryExpression .)
    SEMICOLON       reduce using rule 261 (powExpression -> unaryExpression .)
    COLON           reduce using rule 261 (powExpression -> unaryExpression .)
    RANGE           reduce using rule 261 (powExpression -> unaryExpression .)
    TYPEDEF         reduce using rule 261 (powExpression -> unaryExpression .)
    IDENTIFIER      reduce using rule 261 (powExpression -> unaryExpression .)
    RBRACE          reduce using rule 261 (powExpression -> unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 261 (powExpression -> unaryExpression .)
    LPAREN          reduce using rule 261 (powExpression -> unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 261 (powExpression -> unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 261 (powExpression -> unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 261 (powExpression -> unaryExpression .) ]


state 56

    (382) unaryExpression -> PLUS_PLUS . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 183
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 57

    (1) addExpression -> mulExpression .
    (218) mulExpression -> mulExpression . TIMES
    (219) mulExpression -> mulExpression . DIV
    (220) mulExpression -> mulExpression . MODULO

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 1 (addExpression -> mulExpression .)
    MINUS           reduce using rule 1 (addExpression -> mulExpression .)
    TILDE           reduce using rule 1 (addExpression -> mulExpression .)
    LEFT_SHIFT      reduce using rule 1 (addExpression -> mulExpression .)
    RIGHT_SHIFT     reduce using rule 1 (addExpression -> mulExpression .)
    IS_EQ           reduce using rule 1 (addExpression -> mulExpression .)
    NOT_EQ          reduce using rule 1 (addExpression -> mulExpression .)
    AMPERSAND       reduce using rule 1 (addExpression -> mulExpression .)
    CARET           reduce using rule 1 (addExpression -> mulExpression .)
    PIPE            reduce using rule 1 (addExpression -> mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 1 (addExpression -> mulExpression .)
    QUESTION        reduce using rule 1 (addExpression -> mulExpression .)
    DOUBLE_PIPE     reduce using rule 1 (addExpression -> mulExpression .)
    ASSIGN          reduce using rule 1 (addExpression -> mulExpression .)
    EQ_LEFT         reduce using rule 1 (addExpression -> mulExpression .)
    EQ_RIGHT        reduce using rule 1 (addExpression -> mulExpression .)
    EQ_PLUS         reduce using rule 1 (addExpression -> mulExpression .)
    EQ_MINUS        reduce using rule 1 (addExpression -> mulExpression .)
    EQ_TIMES        reduce using rule 1 (addExpression -> mulExpression .)
    EQ_MODULO       reduce using rule 1 (addExpression -> mulExpression .)
    EQ_AND_BIT      reduce using rule 1 (addExpression -> mulExpression .)
    EQ_DIV          reduce using rule 1 (addExpression -> mulExpression .)
    EQ_OR_BIT       reduce using rule 1 (addExpression -> mulExpression .)
    EQ_XOR_BIT      reduce using rule 1 (addExpression -> mulExpression .)
    SEMICOLON       reduce using rule 1 (addExpression -> mulExpression .)
    COMMA           reduce using rule 1 (addExpression -> mulExpression .)
    LESS            reduce using rule 1 (addExpression -> mulExpression .)
    LESS_EQ         reduce using rule 1 (addExpression -> mulExpression .)
    GREATER         reduce using rule 1 (addExpression -> mulExpression .)
    GREATER_EQ      reduce using rule 1 (addExpression -> mulExpression .)
    IS_EQ_DIFF      reduce using rule 1 (addExpression -> mulExpression .)
    NOT_EQ_DIFF     reduce using rule 1 (addExpression -> mulExpression .)
    LESS_EQ_DIFF    reduce using rule 1 (addExpression -> mulExpression .)
    LESS_DIFF       reduce using rule 1 (addExpression -> mulExpression .)
    GREATER_EQ_DIFF reduce using rule 1 (addExpression -> mulExpression .)
    GREATER_DIFF    reduce using rule 1 (addExpression -> mulExpression .)
    DOT             reduce using rule 1 (addExpression -> mulExpression .)
    PLUS_PLUS       reduce using rule 1 (addExpression -> mulExpression .)
    LBRACKET        reduce using rule 1 (addExpression -> mulExpression .)
    TYPEDEF         reduce using rule 1 (addExpression -> mulExpression .)
    IDENTIFIER      reduce using rule 1 (addExpression -> mulExpression .)
    RBRACE          reduce using rule 1 (addExpression -> mulExpression .)
    $end            reduce using rule 1 (addExpression -> mulExpression .)
    RBRACKET        reduce using rule 1 (addExpression -> mulExpression .)
    RPAREN          reduce using rule 1 (addExpression -> mulExpression .)
    COLON           reduce using rule 1 (addExpression -> mulExpression .)
    RANGE           reduce using rule 1 (addExpression -> mulExpression .)
    DOUBLE_QUOTE    reduce using rule 1 (addExpression -> mulExpression .)
    LPAREN          reduce using rule 1 (addExpression -> mulExpression .)
    TIMES           shift and go to state 186
    DIV             shift and go to state 184
    MODULO          shift and go to state 185

  ! TIMES           [ reduce using rule 1 (addExpression -> mulExpression .) ]
  ! DIV             [ reduce using rule 1 (addExpression -> mulExpression .) ]
  ! MODULO          [ reduce using rule 1 (addExpression -> mulExpression .) ]


state 58

    (167) functionCallExpression -> symbol . arguments unaryExpression arguments
    (343) type2 -> symbol .
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    TIMES           reduce using rule 343 (type2 -> symbol .)
    LBRACKET        reduce using rule 343 (type2 -> symbol .)
    DELEGATE        reduce using rule 343 (type2 -> symbol .)
    FUNCTION        reduce using rule 343 (type2 -> symbol .)
    SEMICOLON       reduce using rule 343 (type2 -> symbol .)
    DOT             reduce using rule 343 (type2 -> symbol .)
    LPAREN          shift and go to state 160

  ! LPAREN          [ reduce using rule 343 (type2 -> symbol .) ]

    arguments                      shift and go to state 187

state 59

    (276) primaryExpression -> DOLLAR .

    DOT             reduce using rule 276 (primaryExpression -> DOLLAR .)
    PLUS_PLUS       reduce using rule 276 (primaryExpression -> DOLLAR .)
    LBRACKET        reduce using rule 276 (primaryExpression -> DOLLAR .)
    CARET           reduce using rule 276 (primaryExpression -> DOLLAR .)
    TIMES           reduce using rule 276 (primaryExpression -> DOLLAR .)
    DIV             reduce using rule 276 (primaryExpression -> DOLLAR .)
    MODULO          reduce using rule 276 (primaryExpression -> DOLLAR .)
    PLUS            reduce using rule 276 (primaryExpression -> DOLLAR .)
    MINUS           reduce using rule 276 (primaryExpression -> DOLLAR .)
    TILDE           reduce using rule 276 (primaryExpression -> DOLLAR .)
    LEFT_SHIFT      reduce using rule 276 (primaryExpression -> DOLLAR .)
    RIGHT_SHIFT     reduce using rule 276 (primaryExpression -> DOLLAR .)
    IS_EQ           reduce using rule 276 (primaryExpression -> DOLLAR .)
    NOT_EQ          reduce using rule 276 (primaryExpression -> DOLLAR .)
    AMPERSAND       reduce using rule 276 (primaryExpression -> DOLLAR .)
    PIPE            reduce using rule 276 (primaryExpression -> DOLLAR .)
    DOUBLE_AMPERSAND reduce using rule 276 (primaryExpression -> DOLLAR .)
    QUESTION        reduce using rule 276 (primaryExpression -> DOLLAR .)
    DOUBLE_PIPE     reduce using rule 276 (primaryExpression -> DOLLAR .)
    ASSIGN          reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_LEFT         reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_RIGHT        reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_PLUS         reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_MINUS        reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_TIMES        reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_MODULO       reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_AND_BIT      reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_DIV          reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_OR_BIT       reduce using rule 276 (primaryExpression -> DOLLAR .)
    EQ_XOR_BIT      reduce using rule 276 (primaryExpression -> DOLLAR .)
    RBRACKET        reduce using rule 276 (primaryExpression -> DOLLAR .)
    COMMA           reduce using rule 276 (primaryExpression -> DOLLAR .)
    LESS            reduce using rule 276 (primaryExpression -> DOLLAR .)
    LESS_EQ         reduce using rule 276 (primaryExpression -> DOLLAR .)
    GREATER         reduce using rule 276 (primaryExpression -> DOLLAR .)
    GREATER_EQ      reduce using rule 276 (primaryExpression -> DOLLAR .)
    IS_EQ_DIFF      reduce using rule 276 (primaryExpression -> DOLLAR .)
    NOT_EQ_DIFF     reduce using rule 276 (primaryExpression -> DOLLAR .)
    LESS_EQ_DIFF    reduce using rule 276 (primaryExpression -> DOLLAR .)
    LESS_DIFF       reduce using rule 276 (primaryExpression -> DOLLAR .)
    GREATER_EQ_DIFF reduce using rule 276 (primaryExpression -> DOLLAR .)
    GREATER_DIFF    reduce using rule 276 (primaryExpression -> DOLLAR .)
    RPAREN          reduce using rule 276 (primaryExpression -> DOLLAR .)
    $end            reduce using rule 276 (primaryExpression -> DOLLAR .)
    SEMICOLON       reduce using rule 276 (primaryExpression -> DOLLAR .)
    COLON           reduce using rule 276 (primaryExpression -> DOLLAR .)
    RANGE           reduce using rule 276 (primaryExpression -> DOLLAR .)
    TYPEDEF         reduce using rule 276 (primaryExpression -> DOLLAR .)
    IDENTIFIER      reduce using rule 276 (primaryExpression -> DOLLAR .)
    RBRACE          reduce using rule 276 (primaryExpression -> DOLLAR .)
    DOUBLE_QUOTE    reduce using rule 276 (primaryExpression -> DOLLAR .)
    LPAREN          reduce using rule 276 (primaryExpression -> DOLLAR .)


state 60

    (378) unaryExpression -> TIMES . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 188
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 61

    (70) builtinType -> UINT .

    TIMES           reduce using rule 70 (builtinType -> UINT .)
    LBRACKET        reduce using rule 70 (builtinType -> UINT .)
    DELEGATE        reduce using rule 70 (builtinType -> UINT .)
    FUNCTION        reduce using rule 70 (builtinType -> UINT .)
    SEMICOLON       reduce using rule 70 (builtinType -> UINT .)
    DOT             reduce using rule 70 (builtinType -> UINT .)
    LPAREN          reduce using rule 70 (builtinType -> UINT .)
    IDENTIFIER      reduce using rule 70 (builtinType -> UINT .)
    ELLIPSIS        reduce using rule 70 (builtinType -> UINT .)
    COMMA           reduce using rule 70 (builtinType -> UINT .)
    LBRACE          reduce using rule 70 (builtinType -> UINT .)
    RBRACKET        reduce using rule 70 (builtinType -> UINT .)
    ASSIGN          reduce using rule 70 (builtinType -> UINT .)
    RPAREN          reduce using rule 70 (builtinType -> UINT .)
    FINAL           reduce using rule 70 (builtinType -> UINT .)
    AUTO            reduce using rule 70 (builtinType -> UINT .)
    RETURN          reduce using rule 70 (builtinType -> UINT .)
    CONST           reduce using rule 70 (builtinType -> UINT .)
    IMMUTABLE       reduce using rule 70 (builtinType -> UINT .)
    BOOL            reduce using rule 70 (builtinType -> UINT .)
    SHORT           reduce using rule 70 (builtinType -> UINT .)
    USHORT          reduce using rule 70 (builtinType -> UINT .)
    INT             reduce using rule 70 (builtinType -> UINT .)
    UINT            reduce using rule 70 (builtinType -> UINT .)
    LONG            reduce using rule 70 (builtinType -> UINT .)
    ULONG           reduce using rule 70 (builtinType -> UINT .)
    CHAR            reduce using rule 70 (builtinType -> UINT .)
    FLOAT           reduce using rule 70 (builtinType -> UINT .)
    TYPEOF          reduce using rule 70 (builtinType -> UINT .)
    PLUS_PLUS       reduce using rule 70 (builtinType -> UINT .)
    CARET           reduce using rule 70 (builtinType -> UINT .)
    DIV             reduce using rule 70 (builtinType -> UINT .)
    MODULO          reduce using rule 70 (builtinType -> UINT .)
    PLUS            reduce using rule 70 (builtinType -> UINT .)
    MINUS           reduce using rule 70 (builtinType -> UINT .)
    TILDE           reduce using rule 70 (builtinType -> UINT .)
    $end            reduce using rule 70 (builtinType -> UINT .)
    LEFT_SHIFT      reduce using rule 70 (builtinType -> UINT .)
    RIGHT_SHIFT     reduce using rule 70 (builtinType -> UINT .)
    IS_EQ           reduce using rule 70 (builtinType -> UINT .)
    NOT_EQ          reduce using rule 70 (builtinType -> UINT .)
    AMPERSAND       reduce using rule 70 (builtinType -> UINT .)
    PIPE            reduce using rule 70 (builtinType -> UINT .)
    DOUBLE_AMPERSAND reduce using rule 70 (builtinType -> UINT .)
    QUESTION        reduce using rule 70 (builtinType -> UINT .)
    DOUBLE_PIPE     reduce using rule 70 (builtinType -> UINT .)
    EQ_LEFT         reduce using rule 70 (builtinType -> UINT .)
    EQ_RIGHT        reduce using rule 70 (builtinType -> UINT .)
    EQ_PLUS         reduce using rule 70 (builtinType -> UINT .)
    EQ_MINUS        reduce using rule 70 (builtinType -> UINT .)
    EQ_TIMES        reduce using rule 70 (builtinType -> UINT .)
    EQ_MODULO       reduce using rule 70 (builtinType -> UINT .)
    EQ_AND_BIT      reduce using rule 70 (builtinType -> UINT .)
    EQ_DIV          reduce using rule 70 (builtinType -> UINT .)
    EQ_OR_BIT       reduce using rule 70 (builtinType -> UINT .)
    EQ_XOR_BIT      reduce using rule 70 (builtinType -> UINT .)
    LESS            reduce using rule 70 (builtinType -> UINT .)
    LESS_EQ         reduce using rule 70 (builtinType -> UINT .)
    GREATER         reduce using rule 70 (builtinType -> UINT .)
    GREATER_EQ      reduce using rule 70 (builtinType -> UINT .)
    IS_EQ_DIFF      reduce using rule 70 (builtinType -> UINT .)
    NOT_EQ_DIFF     reduce using rule 70 (builtinType -> UINT .)
    LESS_EQ_DIFF    reduce using rule 70 (builtinType -> UINT .)
    LESS_DIFF       reduce using rule 70 (builtinType -> UINT .)
    GREATER_EQ_DIFF reduce using rule 70 (builtinType -> UINT .)
    GREATER_DIFF    reduce using rule 70 (builtinType -> UINT .)
    COLON           reduce using rule 70 (builtinType -> UINT .)
    RANGE           reduce using rule 70 (builtinType -> UINT .)
    TYPEDEF         reduce using rule 70 (builtinType -> UINT .)
    RBRACE          reduce using rule 70 (builtinType -> UINT .)
    DOUBLE_QUOTE    reduce using rule 70 (builtinType -> UINT .)


state 62

    (272) primaryExpression -> LPAREN . expression RPAREN
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 189

state 63

    (348) typeConstructor -> IMMUTABLE .

    LBRACKET        reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    CONST           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    BOOL            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    SHORT           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    USHORT          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    INT             reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    UINT            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    LONG            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    ULONG           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    CHAR            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    FLOAT           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    DOT             reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    TYPEOF          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    LPAREN          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    AUTO            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    ENUM            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    EXTERN          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    FINAL           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    STATIC          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    TYPEDEF         reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    RETURN          reduce using rule 348 (typeConstructor -> IMMUTABLE .)


state 64

    (386) unaryExpression -> castExpression .

    DOT             reduce using rule 386 (unaryExpression -> castExpression .)
    PLUS_PLUS       reduce using rule 386 (unaryExpression -> castExpression .)
    LBRACKET        reduce using rule 386 (unaryExpression -> castExpression .)
    CARET           reduce using rule 386 (unaryExpression -> castExpression .)
    TIMES           reduce using rule 386 (unaryExpression -> castExpression .)
    DIV             reduce using rule 386 (unaryExpression -> castExpression .)
    MODULO          reduce using rule 386 (unaryExpression -> castExpression .)
    PLUS            reduce using rule 386 (unaryExpression -> castExpression .)
    MINUS           reduce using rule 386 (unaryExpression -> castExpression .)
    TILDE           reduce using rule 386 (unaryExpression -> castExpression .)
    LEFT_SHIFT      reduce using rule 386 (unaryExpression -> castExpression .)
    RIGHT_SHIFT     reduce using rule 386 (unaryExpression -> castExpression .)
    IS_EQ           reduce using rule 386 (unaryExpression -> castExpression .)
    NOT_EQ          reduce using rule 386 (unaryExpression -> castExpression .)
    AMPERSAND       reduce using rule 386 (unaryExpression -> castExpression .)
    PIPE            reduce using rule 386 (unaryExpression -> castExpression .)
    DOUBLE_AMPERSAND reduce using rule 386 (unaryExpression -> castExpression .)
    QUESTION        reduce using rule 386 (unaryExpression -> castExpression .)
    DOUBLE_PIPE     reduce using rule 386 (unaryExpression -> castExpression .)
    ASSIGN          reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_LEFT         reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_RIGHT        reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_PLUS         reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_MINUS        reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_TIMES        reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_MODULO       reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_AND_BIT      reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_DIV          reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_OR_BIT       reduce using rule 386 (unaryExpression -> castExpression .)
    EQ_XOR_BIT      reduce using rule 386 (unaryExpression -> castExpression .)
    SEMICOLON       reduce using rule 386 (unaryExpression -> castExpression .)
    COMMA           reduce using rule 386 (unaryExpression -> castExpression .)
    LESS            reduce using rule 386 (unaryExpression -> castExpression .)
    LESS_EQ         reduce using rule 386 (unaryExpression -> castExpression .)
    GREATER         reduce using rule 386 (unaryExpression -> castExpression .)
    GREATER_EQ      reduce using rule 386 (unaryExpression -> castExpression .)
    IS_EQ_DIFF      reduce using rule 386 (unaryExpression -> castExpression .)
    NOT_EQ_DIFF     reduce using rule 386 (unaryExpression -> castExpression .)
    LESS_EQ_DIFF    reduce using rule 386 (unaryExpression -> castExpression .)
    LESS_DIFF       reduce using rule 386 (unaryExpression -> castExpression .)
    GREATER_EQ_DIFF reduce using rule 386 (unaryExpression -> castExpression .)
    GREATER_DIFF    reduce using rule 386 (unaryExpression -> castExpression .)
    RPAREN          reduce using rule 386 (unaryExpression -> castExpression .)
    $end            reduce using rule 386 (unaryExpression -> castExpression .)
    RBRACKET        reduce using rule 386 (unaryExpression -> castExpression .)
    COLON           reduce using rule 386 (unaryExpression -> castExpression .)
    RANGE           reduce using rule 386 (unaryExpression -> castExpression .)
    TYPEDEF         reduce using rule 386 (unaryExpression -> castExpression .)
    IDENTIFIER      reduce using rule 386 (unaryExpression -> castExpression .)
    RBRACE          reduce using rule 386 (unaryExpression -> castExpression .)
    DOUBLE_QUOTE    reduce using rule 386 (unaryExpression -> castExpression .)
    LPAREN          reduce using rule 386 (unaryExpression -> castExpression .)


state 65

    (273) primaryExpression -> functionLiteralExpression .

    DOT             reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    PLUS_PLUS       reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    LBRACKET        reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    CARET           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    TIMES           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    DIV             reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    MODULO          reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    PLUS            reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    MINUS           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    TILDE           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    LEFT_SHIFT      reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    RIGHT_SHIFT     reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    IS_EQ           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    NOT_EQ          reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    AMPERSAND       reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    PIPE            reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    DOUBLE_AMPERSAND reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    QUESTION        reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    DOUBLE_PIPE     reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    ASSIGN          reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_LEFT         reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_RIGHT        reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_PLUS         reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_MINUS        reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_TIMES        reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_MODULO       reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_AND_BIT      reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_DIV          reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_OR_BIT       reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    EQ_XOR_BIT      reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    RBRACKET        reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    COMMA           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    LESS            reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    LESS_EQ         reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    GREATER         reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    GREATER_EQ      reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    IS_EQ_DIFF      reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    NOT_EQ_DIFF     reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    LESS_EQ_DIFF    reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    LESS_DIFF       reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    GREATER_EQ_DIFF reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    GREATER_DIFF    reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    RPAREN          reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    $end            reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    SEMICOLON       reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    COLON           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    RANGE           reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    TYPEDEF         reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    IDENTIFIER      reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    RBRACE          reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    DOUBLE_QUOTE    reduce using rule 273 (primaryExpression -> functionLiteralExpression .)
    LPAREN          reduce using rule 273 (primaryExpression -> functionLiteralExpression .)


state 66

    (74) builtinType -> FLOAT .

    TIMES           reduce using rule 74 (builtinType -> FLOAT .)
    LBRACKET        reduce using rule 74 (builtinType -> FLOAT .)
    DELEGATE        reduce using rule 74 (builtinType -> FLOAT .)
    FUNCTION        reduce using rule 74 (builtinType -> FLOAT .)
    SEMICOLON       reduce using rule 74 (builtinType -> FLOAT .)
    DOT             reduce using rule 74 (builtinType -> FLOAT .)
    LPAREN          reduce using rule 74 (builtinType -> FLOAT .)
    IDENTIFIER      reduce using rule 74 (builtinType -> FLOAT .)
    ELLIPSIS        reduce using rule 74 (builtinType -> FLOAT .)
    COMMA           reduce using rule 74 (builtinType -> FLOAT .)
    LBRACE          reduce using rule 74 (builtinType -> FLOAT .)
    RBRACKET        reduce using rule 74 (builtinType -> FLOAT .)
    ASSIGN          reduce using rule 74 (builtinType -> FLOAT .)
    RPAREN          reduce using rule 74 (builtinType -> FLOAT .)
    FINAL           reduce using rule 74 (builtinType -> FLOAT .)
    AUTO            reduce using rule 74 (builtinType -> FLOAT .)
    RETURN          reduce using rule 74 (builtinType -> FLOAT .)
    CONST           reduce using rule 74 (builtinType -> FLOAT .)
    IMMUTABLE       reduce using rule 74 (builtinType -> FLOAT .)
    BOOL            reduce using rule 74 (builtinType -> FLOAT .)
    SHORT           reduce using rule 74 (builtinType -> FLOAT .)
    USHORT          reduce using rule 74 (builtinType -> FLOAT .)
    INT             reduce using rule 74 (builtinType -> FLOAT .)
    UINT            reduce using rule 74 (builtinType -> FLOAT .)
    LONG            reduce using rule 74 (builtinType -> FLOAT .)
    ULONG           reduce using rule 74 (builtinType -> FLOAT .)
    CHAR            reduce using rule 74 (builtinType -> FLOAT .)
    FLOAT           reduce using rule 74 (builtinType -> FLOAT .)
    TYPEOF          reduce using rule 74 (builtinType -> FLOAT .)
    PLUS_PLUS       reduce using rule 74 (builtinType -> FLOAT .)
    CARET           reduce using rule 74 (builtinType -> FLOAT .)
    DIV             reduce using rule 74 (builtinType -> FLOAT .)
    MODULO          reduce using rule 74 (builtinType -> FLOAT .)
    PLUS            reduce using rule 74 (builtinType -> FLOAT .)
    MINUS           reduce using rule 74 (builtinType -> FLOAT .)
    TILDE           reduce using rule 74 (builtinType -> FLOAT .)
    $end            reduce using rule 74 (builtinType -> FLOAT .)
    LEFT_SHIFT      reduce using rule 74 (builtinType -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 74 (builtinType -> FLOAT .)
    IS_EQ           reduce using rule 74 (builtinType -> FLOAT .)
    NOT_EQ          reduce using rule 74 (builtinType -> FLOAT .)
    AMPERSAND       reduce using rule 74 (builtinType -> FLOAT .)
    PIPE            reduce using rule 74 (builtinType -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 74 (builtinType -> FLOAT .)
    QUESTION        reduce using rule 74 (builtinType -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 74 (builtinType -> FLOAT .)
    EQ_LEFT         reduce using rule 74 (builtinType -> FLOAT .)
    EQ_RIGHT        reduce using rule 74 (builtinType -> FLOAT .)
    EQ_PLUS         reduce using rule 74 (builtinType -> FLOAT .)
    EQ_MINUS        reduce using rule 74 (builtinType -> FLOAT .)
    EQ_TIMES        reduce using rule 74 (builtinType -> FLOAT .)
    EQ_MODULO       reduce using rule 74 (builtinType -> FLOAT .)
    EQ_AND_BIT      reduce using rule 74 (builtinType -> FLOAT .)
    EQ_DIV          reduce using rule 74 (builtinType -> FLOAT .)
    EQ_OR_BIT       reduce using rule 74 (builtinType -> FLOAT .)
    EQ_XOR_BIT      reduce using rule 74 (builtinType -> FLOAT .)
    LESS            reduce using rule 74 (builtinType -> FLOAT .)
    LESS_EQ         reduce using rule 74 (builtinType -> FLOAT .)
    GREATER         reduce using rule 74 (builtinType -> FLOAT .)
    GREATER_EQ      reduce using rule 74 (builtinType -> FLOAT .)
    IS_EQ_DIFF      reduce using rule 74 (builtinType -> FLOAT .)
    NOT_EQ_DIFF     reduce using rule 74 (builtinType -> FLOAT .)
    LESS_EQ_DIFF    reduce using rule 74 (builtinType -> FLOAT .)
    LESS_DIFF       reduce using rule 74 (builtinType -> FLOAT .)
    GREATER_EQ_DIFF reduce using rule 74 (builtinType -> FLOAT .)
    GREATER_DIFF    reduce using rule 74 (builtinType -> FLOAT .)
    COLON           reduce using rule 74 (builtinType -> FLOAT .)
    RANGE           reduce using rule 74 (builtinType -> FLOAT .)
    TYPEDEF         reduce using rule 74 (builtinType -> FLOAT .)
    RBRACE          reduce using rule 74 (builtinType -> FLOAT .)
    DOUBLE_QUOTE    reduce using rule 74 (builtinType -> FLOAT .)


state 67

    (263) LIT_STRPlus -> LIT_STR . LIT_STRPlus
    (264) LIT_STRPlus -> LIT_STR .
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR

    DOT             reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    PLUS_PLUS       reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LBRACKET        reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    CARET           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    TIMES           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    DIV             reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    MODULO          reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    PLUS            reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    MINUS           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    TILDE           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LEFT_SHIFT      reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    RIGHT_SHIFT     reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    IS_EQ           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ          reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    AMPERSAND       reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    PIPE            reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_AMPERSAND reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    QUESTION        reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_PIPE     reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    ASSIGN          reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_LEFT         reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_RIGHT        reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_PLUS         reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_MINUS        reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_TIMES        reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_MODULO       reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_AND_BIT      reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_DIV          reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_OR_BIT       reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    EQ_XOR_BIT      reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    SEMICOLON       reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    COMMA           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LESS            reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ         reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    GREATER         reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ      reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    IS_EQ_DIFF      reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ_DIFF     reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ_DIFF    reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LESS_DIFF       reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ_DIFF reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    GREATER_DIFF    reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    RBRACKET        reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    RPAREN          reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    $end            reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    COLON           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    RANGE           reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    TYPEDEF         reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    IDENTIFIER      reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    RBRACE          reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_QUOTE    reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LPAREN          reduce using rule 264 (LIT_STRPlus -> LIT_STR .)
    LIT_STR         shift and go to state 67

    LIT_STRPlus                    shift and go to state 190

state 68

    (235) orExpression -> xorExpression .
    (406) xorExpression -> xorExpression . CARET andExpression

  ! shift/reduce conflict for CARET resolved as shift
    PIPE            reduce using rule 235 (orExpression -> xorExpression .)
    DOUBLE_AMPERSAND reduce using rule 235 (orExpression -> xorExpression .)
    QUESTION        reduce using rule 235 (orExpression -> xorExpression .)
    DOUBLE_PIPE     reduce using rule 235 (orExpression -> xorExpression .)
    ASSIGN          reduce using rule 235 (orExpression -> xorExpression .)
    EQ_LEFT         reduce using rule 235 (orExpression -> xorExpression .)
    EQ_RIGHT        reduce using rule 235 (orExpression -> xorExpression .)
    EQ_PLUS         reduce using rule 235 (orExpression -> xorExpression .)
    EQ_MINUS        reduce using rule 235 (orExpression -> xorExpression .)
    EQ_TIMES        reduce using rule 235 (orExpression -> xorExpression .)
    EQ_MODULO       reduce using rule 235 (orExpression -> xorExpression .)
    EQ_AND_BIT      reduce using rule 235 (orExpression -> xorExpression .)
    EQ_DIV          reduce using rule 235 (orExpression -> xorExpression .)
    EQ_OR_BIT       reduce using rule 235 (orExpression -> xorExpression .)
    EQ_XOR_BIT      reduce using rule 235 (orExpression -> xorExpression .)
    SEMICOLON       reduce using rule 235 (orExpression -> xorExpression .)
    COMMA           reduce using rule 235 (orExpression -> xorExpression .)
    DOT             reduce using rule 235 (orExpression -> xorExpression .)
    PLUS_PLUS       reduce using rule 235 (orExpression -> xorExpression .)
    LBRACKET        reduce using rule 235 (orExpression -> xorExpression .)
    TIMES           reduce using rule 235 (orExpression -> xorExpression .)
    DIV             reduce using rule 235 (orExpression -> xorExpression .)
    MODULO          reduce using rule 235 (orExpression -> xorExpression .)
    PLUS            reduce using rule 235 (orExpression -> xorExpression .)
    MINUS           reduce using rule 235 (orExpression -> xorExpression .)
    TILDE           reduce using rule 235 (orExpression -> xorExpression .)
    LEFT_SHIFT      reduce using rule 235 (orExpression -> xorExpression .)
    RIGHT_SHIFT     reduce using rule 235 (orExpression -> xorExpression .)
    IS_EQ           reduce using rule 235 (orExpression -> xorExpression .)
    NOT_EQ          reduce using rule 235 (orExpression -> xorExpression .)
    AMPERSAND       reduce using rule 235 (orExpression -> xorExpression .)
    LESS            reduce using rule 235 (orExpression -> xorExpression .)
    LESS_EQ         reduce using rule 235 (orExpression -> xorExpression .)
    GREATER         reduce using rule 235 (orExpression -> xorExpression .)
    GREATER_EQ      reduce using rule 235 (orExpression -> xorExpression .)
    IS_EQ_DIFF      reduce using rule 235 (orExpression -> xorExpression .)
    NOT_EQ_DIFF     reduce using rule 235 (orExpression -> xorExpression .)
    LESS_EQ_DIFF    reduce using rule 235 (orExpression -> xorExpression .)
    LESS_DIFF       reduce using rule 235 (orExpression -> xorExpression .)
    GREATER_EQ_DIFF reduce using rule 235 (orExpression -> xorExpression .)
    GREATER_DIFF    reduce using rule 235 (orExpression -> xorExpression .)
    COLON           reduce using rule 235 (orExpression -> xorExpression .)
    RPAREN          reduce using rule 235 (orExpression -> xorExpression .)
    $end            reduce using rule 235 (orExpression -> xorExpression .)
    RBRACKET        reduce using rule 235 (orExpression -> xorExpression .)
    RANGE           reduce using rule 235 (orExpression -> xorExpression .)
    TYPEDEF         reduce using rule 235 (orExpression -> xorExpression .)
    IDENTIFIER      reduce using rule 235 (orExpression -> xorExpression .)
    RBRACE          reduce using rule 235 (orExpression -> xorExpression .)
    DOUBLE_QUOTE    reduce using rule 235 (orExpression -> xorExpression .)
    LPAREN          reduce using rule 235 (orExpression -> xorExpression .)
    CARET           shift and go to state 191

  ! CARET           [ reduce using rule 235 (orExpression -> xorExpression .) ]


state 69

    (87) cmpExpression -> relExpression .
    (288) relExpression -> relExpression . relOperator shiftExpression
    (289) relOperator -> . LESS
    (290) relOperator -> . LESS_EQ
    (291) relOperator -> . GREATER
    (292) relOperator -> . GREATER_EQ
    (293) relOperator -> . IS_EQ_DIFF
    (294) relOperator -> . NOT_EQ_DIFF
    (295) relOperator -> . LESS_EQ_DIFF
    (296) relOperator -> . LESS_DIFF
    (297) relOperator -> . GREATER_EQ_DIFF
    (298) relOperator -> . GREATER_DIFF

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
  ! shift/reduce conflict for IS_EQ_DIFF resolved as shift
  ! shift/reduce conflict for NOT_EQ_DIFF resolved as shift
  ! shift/reduce conflict for LESS_EQ_DIFF resolved as shift
  ! shift/reduce conflict for LESS_DIFF resolved as shift
  ! shift/reduce conflict for GREATER_EQ_DIFF resolved as shift
  ! shift/reduce conflict for GREATER_DIFF resolved as shift
    AMPERSAND       reduce using rule 87 (cmpExpression -> relExpression .)
    CARET           reduce using rule 87 (cmpExpression -> relExpression .)
    PIPE            reduce using rule 87 (cmpExpression -> relExpression .)
    DOUBLE_AMPERSAND reduce using rule 87 (cmpExpression -> relExpression .)
    QUESTION        reduce using rule 87 (cmpExpression -> relExpression .)
    DOUBLE_PIPE     reduce using rule 87 (cmpExpression -> relExpression .)
    ASSIGN          reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_LEFT         reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_RIGHT        reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_PLUS         reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_MINUS        reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_TIMES        reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_MODULO       reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_AND_BIT      reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_DIV          reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_OR_BIT       reduce using rule 87 (cmpExpression -> relExpression .)
    EQ_XOR_BIT      reduce using rule 87 (cmpExpression -> relExpression .)
    RPAREN          reduce using rule 87 (cmpExpression -> relExpression .)
    COMMA           reduce using rule 87 (cmpExpression -> relExpression .)
    SEMICOLON       reduce using rule 87 (cmpExpression -> relExpression .)
    COLON           reduce using rule 87 (cmpExpression -> relExpression .)
    RBRACKET        reduce using rule 87 (cmpExpression -> relExpression .)
    DOUBLE_QUOTE    reduce using rule 87 (cmpExpression -> relExpression .)
    DOT             reduce using rule 87 (cmpExpression -> relExpression .)
    PLUS_PLUS       reduce using rule 87 (cmpExpression -> relExpression .)
    LBRACKET        reduce using rule 87 (cmpExpression -> relExpression .)
    TIMES           reduce using rule 87 (cmpExpression -> relExpression .)
    DIV             reduce using rule 87 (cmpExpression -> relExpression .)
    MODULO          reduce using rule 87 (cmpExpression -> relExpression .)
    PLUS            reduce using rule 87 (cmpExpression -> relExpression .)
    MINUS           reduce using rule 87 (cmpExpression -> relExpression .)
    TILDE           reduce using rule 87 (cmpExpression -> relExpression .)
    $end            reduce using rule 87 (cmpExpression -> relExpression .)
    LEFT_SHIFT      reduce using rule 87 (cmpExpression -> relExpression .)
    RIGHT_SHIFT     reduce using rule 87 (cmpExpression -> relExpression .)
    IS_EQ           reduce using rule 87 (cmpExpression -> relExpression .)
    NOT_EQ          reduce using rule 87 (cmpExpression -> relExpression .)
    RANGE           reduce using rule 87 (cmpExpression -> relExpression .)
    TYPEDEF         reduce using rule 87 (cmpExpression -> relExpression .)
    IDENTIFIER      reduce using rule 87 (cmpExpression -> relExpression .)
    RBRACE          reduce using rule 87 (cmpExpression -> relExpression .)
    LPAREN          reduce using rule 87 (cmpExpression -> relExpression .)
    LESS            shift and go to state 195
    LESS_EQ         shift and go to state 192
    GREATER         shift and go to state 194
    GREATER_EQ      shift and go to state 198
    IS_EQ_DIFF      shift and go to state 197
    NOT_EQ_DIFF     shift and go to state 199
    LESS_EQ_DIFF    shift and go to state 201
    LESS_DIFF       shift and go to state 196
    GREATER_EQ_DIFF shift and go to state 193
    GREATER_DIFF    shift and go to state 200

  ! LESS            [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! LESS_EQ         [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! GREATER         [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! GREATER_EQ      [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! IS_EQ_DIFF      [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! LESS_DIFF       [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 87 (cmpExpression -> relExpression .) ]
  ! GREATER_DIFF    [ reduce using rule 87 (cmpExpression -> relExpression .) ]

    relOperator                    shift and go to state 202

state 70

    (237) orOrExpression -> andAndExpression .
    (15) andAndExpression -> andAndExpression . DOUBLE_AMPERSAND orExpression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
    QUESTION        reduce using rule 237 (orOrExpression -> andAndExpression .)
    DOUBLE_PIPE     reduce using rule 237 (orOrExpression -> andAndExpression .)
    ASSIGN          reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_LEFT         reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_RIGHT        reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_PLUS         reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_MINUS        reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_TIMES        reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_MODULO       reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_AND_BIT      reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_DIV          reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_OR_BIT       reduce using rule 237 (orOrExpression -> andAndExpression .)
    EQ_XOR_BIT      reduce using rule 237 (orOrExpression -> andAndExpression .)
    SEMICOLON       reduce using rule 237 (orOrExpression -> andAndExpression .)
    COMMA           reduce using rule 237 (orOrExpression -> andAndExpression .)
    RPAREN          reduce using rule 237 (orOrExpression -> andAndExpression .)
    RBRACKET        reduce using rule 237 (orOrExpression -> andAndExpression .)
    DOUBLE_QUOTE    reduce using rule 237 (orOrExpression -> andAndExpression .)
    RANGE           reduce using rule 237 (orOrExpression -> andAndExpression .)
    DOT             reduce using rule 237 (orOrExpression -> andAndExpression .)
    PLUS_PLUS       reduce using rule 237 (orOrExpression -> andAndExpression .)
    LBRACKET        reduce using rule 237 (orOrExpression -> andAndExpression .)
    CARET           reduce using rule 237 (orOrExpression -> andAndExpression .)
    TIMES           reduce using rule 237 (orOrExpression -> andAndExpression .)
    DIV             reduce using rule 237 (orOrExpression -> andAndExpression .)
    MODULO          reduce using rule 237 (orOrExpression -> andAndExpression .)
    PLUS            reduce using rule 237 (orOrExpression -> andAndExpression .)
    MINUS           reduce using rule 237 (orOrExpression -> andAndExpression .)
    TILDE           reduce using rule 237 (orOrExpression -> andAndExpression .)
    LEFT_SHIFT      reduce using rule 237 (orOrExpression -> andAndExpression .)
    RIGHT_SHIFT     reduce using rule 237 (orOrExpression -> andAndExpression .)
    IS_EQ           reduce using rule 237 (orOrExpression -> andAndExpression .)
    NOT_EQ          reduce using rule 237 (orOrExpression -> andAndExpression .)
    AMPERSAND       reduce using rule 237 (orOrExpression -> andAndExpression .)
    PIPE            reduce using rule 237 (orOrExpression -> andAndExpression .)
    LESS            reduce using rule 237 (orOrExpression -> andAndExpression .)
    LESS_EQ         reduce using rule 237 (orOrExpression -> andAndExpression .)
    GREATER         reduce using rule 237 (orOrExpression -> andAndExpression .)
    GREATER_EQ      reduce using rule 237 (orOrExpression -> andAndExpression .)
    IS_EQ_DIFF      reduce using rule 237 (orOrExpression -> andAndExpression .)
    NOT_EQ_DIFF     reduce using rule 237 (orOrExpression -> andAndExpression .)
    LESS_EQ_DIFF    reduce using rule 237 (orOrExpression -> andAndExpression .)
    LESS_DIFF       reduce using rule 237 (orOrExpression -> andAndExpression .)
    GREATER_EQ_DIFF reduce using rule 237 (orOrExpression -> andAndExpression .)
    GREATER_DIFF    reduce using rule 237 (orOrExpression -> andAndExpression .)
    TYPEDEF         reduce using rule 237 (orOrExpression -> andAndExpression .)
    IDENTIFIER      reduce using rule 237 (orOrExpression -> andAndExpression .)
    RBRACE          reduce using rule 237 (orOrExpression -> andAndExpression .)
    $end            reduce using rule 237 (orOrExpression -> andAndExpression .)
    COLON           reduce using rule 237 (orOrExpression -> andAndExpression .)
    LPAREN          reduce using rule 237 (orOrExpression -> andAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 203

  ! DOUBLE_AMPERSAND [ reduce using rule 237 (orOrExpression -> andAndExpression .) ]


state 71

    (18) argumentList -> assignExpression .

    RBRACKET        reduce using rule 18 (argumentList -> assignExpression .)
    COMMA           reduce using rule 18 (argumentList -> assignExpression .)
    RPAREN          reduce using rule 18 (argumentList -> assignExpression .)


state 72

    (405) xorExpression -> andExpression .
    (17) andExpression -> andExpression . AMPERSAND cmpExpression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    CARET           reduce using rule 405 (xorExpression -> andExpression .)
    PIPE            reduce using rule 405 (xorExpression -> andExpression .)
    DOUBLE_AMPERSAND reduce using rule 405 (xorExpression -> andExpression .)
    QUESTION        reduce using rule 405 (xorExpression -> andExpression .)
    DOUBLE_PIPE     reduce using rule 405 (xorExpression -> andExpression .)
    ASSIGN          reduce using rule 405 (xorExpression -> andExpression .)
    EQ_LEFT         reduce using rule 405 (xorExpression -> andExpression .)
    EQ_RIGHT        reduce using rule 405 (xorExpression -> andExpression .)
    EQ_PLUS         reduce using rule 405 (xorExpression -> andExpression .)
    EQ_MINUS        reduce using rule 405 (xorExpression -> andExpression .)
    EQ_TIMES        reduce using rule 405 (xorExpression -> andExpression .)
    EQ_MODULO       reduce using rule 405 (xorExpression -> andExpression .)
    EQ_AND_BIT      reduce using rule 405 (xorExpression -> andExpression .)
    EQ_DIV          reduce using rule 405 (xorExpression -> andExpression .)
    EQ_OR_BIT       reduce using rule 405 (xorExpression -> andExpression .)
    EQ_XOR_BIT      reduce using rule 405 (xorExpression -> andExpression .)
    RBRACKET        reduce using rule 405 (xorExpression -> andExpression .)
    COMMA           reduce using rule 405 (xorExpression -> andExpression .)
    RPAREN          reduce using rule 405 (xorExpression -> andExpression .)
    SEMICOLON       reduce using rule 405 (xorExpression -> andExpression .)
    DOT             reduce using rule 405 (xorExpression -> andExpression .)
    PLUS_PLUS       reduce using rule 405 (xorExpression -> andExpression .)
    LBRACKET        reduce using rule 405 (xorExpression -> andExpression .)
    TIMES           reduce using rule 405 (xorExpression -> andExpression .)
    DIV             reduce using rule 405 (xorExpression -> andExpression .)
    MODULO          reduce using rule 405 (xorExpression -> andExpression .)
    PLUS            reduce using rule 405 (xorExpression -> andExpression .)
    MINUS           reduce using rule 405 (xorExpression -> andExpression .)
    TILDE           reduce using rule 405 (xorExpression -> andExpression .)
    $end            reduce using rule 405 (xorExpression -> andExpression .)
    LEFT_SHIFT      reduce using rule 405 (xorExpression -> andExpression .)
    RIGHT_SHIFT     reduce using rule 405 (xorExpression -> andExpression .)
    IS_EQ           reduce using rule 405 (xorExpression -> andExpression .)
    NOT_EQ          reduce using rule 405 (xorExpression -> andExpression .)
    LESS            reduce using rule 405 (xorExpression -> andExpression .)
    LESS_EQ         reduce using rule 405 (xorExpression -> andExpression .)
    GREATER         reduce using rule 405 (xorExpression -> andExpression .)
    GREATER_EQ      reduce using rule 405 (xorExpression -> andExpression .)
    IS_EQ_DIFF      reduce using rule 405 (xorExpression -> andExpression .)
    NOT_EQ_DIFF     reduce using rule 405 (xorExpression -> andExpression .)
    LESS_EQ_DIFF    reduce using rule 405 (xorExpression -> andExpression .)
    LESS_DIFF       reduce using rule 405 (xorExpression -> andExpression .)
    GREATER_EQ_DIFF reduce using rule 405 (xorExpression -> andExpression .)
    GREATER_DIFF    reduce using rule 405 (xorExpression -> andExpression .)
    COLON           reduce using rule 405 (xorExpression -> andExpression .)
    RANGE           reduce using rule 405 (xorExpression -> andExpression .)
    TYPEDEF         reduce using rule 405 (xorExpression -> andExpression .)
    IDENTIFIER      reduce using rule 405 (xorExpression -> andExpression .)
    RBRACE          reduce using rule 405 (xorExpression -> andExpression .)
    DOUBLE_QUOTE    reduce using rule 405 (xorExpression -> andExpression .)
    LPAREN          reduce using rule 405 (xorExpression -> andExpression .)
    AMPERSAND       shift and go to state 204

  ! AMPERSAND       [ reduce using rule 405 (xorExpression -> andExpression .) ]


state 73

    (336) ternaryExpression -> orOrExpression . QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> orOrExpression .
    (238) orOrExpression -> orOrExpression . DOUBLE_PIPE andAndExpression

  ! shift/reduce conflict for QUESTION resolved as shift
  ! shift/reduce conflict for DOUBLE_PIPE resolved as shift
    QUESTION        shift and go to state 205
    ASSIGN          reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_LEFT         reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_RIGHT        reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_PLUS         reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_MINUS        reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_TIMES        reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_MODULO       reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_AND_BIT      reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_DIV          reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_OR_BIT       reduce using rule 337 (ternaryExpression -> orOrExpression .)
    EQ_XOR_BIT      reduce using rule 337 (ternaryExpression -> orOrExpression .)
    RBRACKET        reduce using rule 337 (ternaryExpression -> orOrExpression .)
    COMMA           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    SEMICOLON       reduce using rule 337 (ternaryExpression -> orOrExpression .)
    RPAREN          reduce using rule 337 (ternaryExpression -> orOrExpression .)
    COLON           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    DOT             reduce using rule 337 (ternaryExpression -> orOrExpression .)
    PLUS_PLUS       reduce using rule 337 (ternaryExpression -> orOrExpression .)
    LBRACKET        reduce using rule 337 (ternaryExpression -> orOrExpression .)
    CARET           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    TIMES           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    DIV             reduce using rule 337 (ternaryExpression -> orOrExpression .)
    MODULO          reduce using rule 337 (ternaryExpression -> orOrExpression .)
    PLUS            reduce using rule 337 (ternaryExpression -> orOrExpression .)
    MINUS           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    TILDE           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    $end            reduce using rule 337 (ternaryExpression -> orOrExpression .)
    LEFT_SHIFT      reduce using rule 337 (ternaryExpression -> orOrExpression .)
    RIGHT_SHIFT     reduce using rule 337 (ternaryExpression -> orOrExpression .)
    IS_EQ           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    NOT_EQ          reduce using rule 337 (ternaryExpression -> orOrExpression .)
    AMPERSAND       reduce using rule 337 (ternaryExpression -> orOrExpression .)
    PIPE            reduce using rule 337 (ternaryExpression -> orOrExpression .)
    DOUBLE_AMPERSAND reduce using rule 337 (ternaryExpression -> orOrExpression .)
    LESS            reduce using rule 337 (ternaryExpression -> orOrExpression .)
    LESS_EQ         reduce using rule 337 (ternaryExpression -> orOrExpression .)
    GREATER         reduce using rule 337 (ternaryExpression -> orOrExpression .)
    GREATER_EQ      reduce using rule 337 (ternaryExpression -> orOrExpression .)
    IS_EQ_DIFF      reduce using rule 337 (ternaryExpression -> orOrExpression .)
    NOT_EQ_DIFF     reduce using rule 337 (ternaryExpression -> orOrExpression .)
    LESS_EQ_DIFF    reduce using rule 337 (ternaryExpression -> orOrExpression .)
    LESS_DIFF       reduce using rule 337 (ternaryExpression -> orOrExpression .)
    GREATER_EQ_DIFF reduce using rule 337 (ternaryExpression -> orOrExpression .)
    GREATER_DIFF    reduce using rule 337 (ternaryExpression -> orOrExpression .)
    RANGE           reduce using rule 337 (ternaryExpression -> orOrExpression .)
    TYPEDEF         reduce using rule 337 (ternaryExpression -> orOrExpression .)
    IDENTIFIER      reduce using rule 337 (ternaryExpression -> orOrExpression .)
    RBRACE          reduce using rule 337 (ternaryExpression -> orOrExpression .)
    DOUBLE_QUOTE    reduce using rule 337 (ternaryExpression -> orOrExpression .)
    LPAREN          reduce using rule 337 (ternaryExpression -> orOrExpression .)
    DOUBLE_PIPE     shift and go to state 206

  ! QUESTION        [ reduce using rule 337 (ternaryExpression -> orOrExpression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 337 (ternaryExpression -> orOrExpression .) ]


state 74

    (16) andExpression -> cmpExpression .

    AMPERSAND       reduce using rule 16 (andExpression -> cmpExpression .)
    CARET           reduce using rule 16 (andExpression -> cmpExpression .)
    PIPE            reduce using rule 16 (andExpression -> cmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 16 (andExpression -> cmpExpression .)
    QUESTION        reduce using rule 16 (andExpression -> cmpExpression .)
    DOUBLE_PIPE     reduce using rule 16 (andExpression -> cmpExpression .)
    ASSIGN          reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_LEFT         reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_RIGHT        reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_PLUS         reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_MINUS        reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_TIMES        reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_MODULO       reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_AND_BIT      reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_DIV          reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_OR_BIT       reduce using rule 16 (andExpression -> cmpExpression .)
    EQ_XOR_BIT      reduce using rule 16 (andExpression -> cmpExpression .)
    RANGE           reduce using rule 16 (andExpression -> cmpExpression .)
    COMMA           reduce using rule 16 (andExpression -> cmpExpression .)
    RBRACKET        reduce using rule 16 (andExpression -> cmpExpression .)
    SEMICOLON       reduce using rule 16 (andExpression -> cmpExpression .)
    DOT             reduce using rule 16 (andExpression -> cmpExpression .)
    PLUS_PLUS       reduce using rule 16 (andExpression -> cmpExpression .)
    LBRACKET        reduce using rule 16 (andExpression -> cmpExpression .)
    TIMES           reduce using rule 16 (andExpression -> cmpExpression .)
    DIV             reduce using rule 16 (andExpression -> cmpExpression .)
    MODULO          reduce using rule 16 (andExpression -> cmpExpression .)
    PLUS            reduce using rule 16 (andExpression -> cmpExpression .)
    MINUS           reduce using rule 16 (andExpression -> cmpExpression .)
    TILDE           reduce using rule 16 (andExpression -> cmpExpression .)
    $end            reduce using rule 16 (andExpression -> cmpExpression .)
    LEFT_SHIFT      reduce using rule 16 (andExpression -> cmpExpression .)
    RIGHT_SHIFT     reduce using rule 16 (andExpression -> cmpExpression .)
    IS_EQ           reduce using rule 16 (andExpression -> cmpExpression .)
    NOT_EQ          reduce using rule 16 (andExpression -> cmpExpression .)
    LESS            reduce using rule 16 (andExpression -> cmpExpression .)
    LESS_EQ         reduce using rule 16 (andExpression -> cmpExpression .)
    GREATER         reduce using rule 16 (andExpression -> cmpExpression .)
    GREATER_EQ      reduce using rule 16 (andExpression -> cmpExpression .)
    IS_EQ_DIFF      reduce using rule 16 (andExpression -> cmpExpression .)
    NOT_EQ_DIFF     reduce using rule 16 (andExpression -> cmpExpression .)
    LESS_EQ_DIFF    reduce using rule 16 (andExpression -> cmpExpression .)
    LESS_DIFF       reduce using rule 16 (andExpression -> cmpExpression .)
    GREATER_EQ_DIFF reduce using rule 16 (andExpression -> cmpExpression .)
    GREATER_DIFF    reduce using rule 16 (andExpression -> cmpExpression .)
    RPAREN          reduce using rule 16 (andExpression -> cmpExpression .)
    COLON           reduce using rule 16 (andExpression -> cmpExpression .)
    TYPEDEF         reduce using rule 16 (andExpression -> cmpExpression .)
    IDENTIFIER      reduce using rule 16 (andExpression -> cmpExpression .)
    RBRACE          reduce using rule 16 (andExpression -> cmpExpression .)
    DOUBLE_QUOTE    reduce using rule 16 (andExpression -> cmpExpression .)
    LPAREN          reduce using rule 16 (andExpression -> cmpExpression .)


state 75

    (32) assignExpression -> ternaryExpression .
    (33) assignExpression -> ternaryExpression . assignOperator expression
    (34) assignOperator -> . ASSIGN
    (35) assignOperator -> . EQ_LEFT
    (36) assignOperator -> . EQ_RIGHT
    (37) assignOperator -> . EQ_PLUS
    (38) assignOperator -> . EQ_MINUS
    (39) assignOperator -> . EQ_TIMES
    (40) assignOperator -> . EQ_MODULO
    (41) assignOperator -> . EQ_AND_BIT
    (42) assignOperator -> . EQ_DIV
    (43) assignOperator -> . EQ_OR_BIT
    (44) assignOperator -> . EQ_XOR_BIT

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for EQ_LEFT resolved as shift
  ! shift/reduce conflict for EQ_RIGHT resolved as shift
  ! shift/reduce conflict for EQ_PLUS resolved as shift
  ! shift/reduce conflict for EQ_MINUS resolved as shift
  ! shift/reduce conflict for EQ_TIMES resolved as shift
  ! shift/reduce conflict for EQ_MODULO resolved as shift
  ! shift/reduce conflict for EQ_AND_BIT resolved as shift
  ! shift/reduce conflict for EQ_DIV resolved as shift
  ! shift/reduce conflict for EQ_OR_BIT resolved as shift
  ! shift/reduce conflict for EQ_XOR_BIT resolved as shift
    SEMICOLON       reduce using rule 32 (assignExpression -> ternaryExpression .)
    COMMA           reduce using rule 32 (assignExpression -> ternaryExpression .)
    RPAREN          reduce using rule 32 (assignExpression -> ternaryExpression .)
    RBRACKET        reduce using rule 32 (assignExpression -> ternaryExpression .)
    RANGE           reduce using rule 32 (assignExpression -> ternaryExpression .)
    COLON           reduce using rule 32 (assignExpression -> ternaryExpression .)
    TYPEDEF         reduce using rule 32 (assignExpression -> ternaryExpression .)
    IDENTIFIER      reduce using rule 32 (assignExpression -> ternaryExpression .)
    RBRACE          reduce using rule 32 (assignExpression -> ternaryExpression .)
    DOT             reduce using rule 32 (assignExpression -> ternaryExpression .)
    PLUS_PLUS       reduce using rule 32 (assignExpression -> ternaryExpression .)
    LBRACKET        reduce using rule 32 (assignExpression -> ternaryExpression .)
    CARET           reduce using rule 32 (assignExpression -> ternaryExpression .)
    TIMES           reduce using rule 32 (assignExpression -> ternaryExpression .)
    DIV             reduce using rule 32 (assignExpression -> ternaryExpression .)
    MODULO          reduce using rule 32 (assignExpression -> ternaryExpression .)
    PLUS            reduce using rule 32 (assignExpression -> ternaryExpression .)
    MINUS           reduce using rule 32 (assignExpression -> ternaryExpression .)
    TILDE           reduce using rule 32 (assignExpression -> ternaryExpression .)
    LEFT_SHIFT      reduce using rule 32 (assignExpression -> ternaryExpression .)
    RIGHT_SHIFT     reduce using rule 32 (assignExpression -> ternaryExpression .)
    IS_EQ           reduce using rule 32 (assignExpression -> ternaryExpression .)
    NOT_EQ          reduce using rule 32 (assignExpression -> ternaryExpression .)
    AMPERSAND       reduce using rule 32 (assignExpression -> ternaryExpression .)
    PIPE            reduce using rule 32 (assignExpression -> ternaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 32 (assignExpression -> ternaryExpression .)
    QUESTION        reduce using rule 32 (assignExpression -> ternaryExpression .)
    DOUBLE_PIPE     reduce using rule 32 (assignExpression -> ternaryExpression .)
    LESS            reduce using rule 32 (assignExpression -> ternaryExpression .)
    LESS_EQ         reduce using rule 32 (assignExpression -> ternaryExpression .)
    GREATER         reduce using rule 32 (assignExpression -> ternaryExpression .)
    GREATER_EQ      reduce using rule 32 (assignExpression -> ternaryExpression .)
    IS_EQ_DIFF      reduce using rule 32 (assignExpression -> ternaryExpression .)
    NOT_EQ_DIFF     reduce using rule 32 (assignExpression -> ternaryExpression .)
    LESS_EQ_DIFF    reduce using rule 32 (assignExpression -> ternaryExpression .)
    LESS_DIFF       reduce using rule 32 (assignExpression -> ternaryExpression .)
    GREATER_EQ_DIFF reduce using rule 32 (assignExpression -> ternaryExpression .)
    GREATER_DIFF    reduce using rule 32 (assignExpression -> ternaryExpression .)
    $end            reduce using rule 32 (assignExpression -> ternaryExpression .)
    DOUBLE_QUOTE    reduce using rule 32 (assignExpression -> ternaryExpression .)
    LPAREN          reduce using rule 32 (assignExpression -> ternaryExpression .)
    ASSIGN          shift and go to state 213
    EQ_LEFT         shift and go to state 214
    EQ_RIGHT        shift and go to state 207
    EQ_PLUS         shift and go to state 210
    EQ_MINUS        shift and go to state 216
    EQ_TIMES        shift and go to state 218
    EQ_MODULO       shift and go to state 215
    EQ_AND_BIT      shift and go to state 208
    EQ_DIV          shift and go to state 211
    EQ_OR_BIT       shift and go to state 209
    EQ_XOR_BIT      shift and go to state 212

  ! ASSIGN          [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_LEFT         [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_RIGHT        [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_PLUS         [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_MINUS        [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_TIMES        [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_MODULO       [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_AND_BIT      [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_DIV          [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_OR_BIT       [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]
  ! EQ_XOR_BIT      [ reduce using rule 32 (assignExpression -> ternaryExpression .) ]

    assignOperator                 shift and go to state 217

state 76

    (29) arrayLiteral -> LBRACKET argumentList . RBRACKET
    (19) argumentList -> argumentList . comma_assign
    (20) comma_assign -> . COMMA assignExpression comma_assign
    (21) comma_assign -> . empty
    (407) empty -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RBRACKET        shift and go to state 220
    COMMA           shift and go to state 219

  ! RBRACKET        [ reduce using rule 407 (empty -> .) ]
  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    comma_assign                   shift and go to state 221
    empty                          shift and go to state 222

state 77

    (85) cmpExpression -> shiftExpression .
    (302) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression
    (303) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (143) equalExpression -> shiftExpression . IS_EQ shiftExpression
    (144) equalExpression -> shiftExpression . NOT_EQ shiftExpression
    (287) relExpression -> shiftExpression .

  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for IS_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for CARET resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PIPE resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for QUESTION resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for COLON resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOT resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TIMES resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DIV resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MODULO resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TILDE resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for $end resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for IS_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! reduce/reduce conflict for RANGE resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOUBLE_QUOTE resolved using rule 85 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 85 (cmpExpression -> shiftExpression .)
    AMPERSAND       reduce using rule 85 (cmpExpression -> shiftExpression .)
    CARET           reduce using rule 85 (cmpExpression -> shiftExpression .)
    PIPE            reduce using rule 85 (cmpExpression -> shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 85 (cmpExpression -> shiftExpression .)
    QUESTION        reduce using rule 85 (cmpExpression -> shiftExpression .)
    DOUBLE_PIPE     reduce using rule 85 (cmpExpression -> shiftExpression .)
    ASSIGN          reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_LEFT         reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_RIGHT        reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_PLUS         reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_MINUS        reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_TIMES        reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_MODULO       reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_AND_BIT      reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_DIV          reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_OR_BIT       reduce using rule 85 (cmpExpression -> shiftExpression .)
    EQ_XOR_BIT      reduce using rule 85 (cmpExpression -> shiftExpression .)
    RPAREN          reduce using rule 85 (cmpExpression -> shiftExpression .)
    COMMA           reduce using rule 85 (cmpExpression -> shiftExpression .)
    SEMICOLON       reduce using rule 85 (cmpExpression -> shiftExpression .)
    COLON           reduce using rule 85 (cmpExpression -> shiftExpression .)
    RBRACKET        reduce using rule 85 (cmpExpression -> shiftExpression .)
    DOUBLE_QUOTE    reduce using rule 85 (cmpExpression -> shiftExpression .)
    DOT             reduce using rule 85 (cmpExpression -> shiftExpression .)
    PLUS_PLUS       reduce using rule 85 (cmpExpression -> shiftExpression .)
    LBRACKET        reduce using rule 85 (cmpExpression -> shiftExpression .)
    TIMES           reduce using rule 85 (cmpExpression -> shiftExpression .)
    DIV             reduce using rule 85 (cmpExpression -> shiftExpression .)
    MODULO          reduce using rule 85 (cmpExpression -> shiftExpression .)
    PLUS            reduce using rule 85 (cmpExpression -> shiftExpression .)
    MINUS           reduce using rule 85 (cmpExpression -> shiftExpression .)
    TILDE           reduce using rule 85 (cmpExpression -> shiftExpression .)
    $end            reduce using rule 85 (cmpExpression -> shiftExpression .)
    LESS            reduce using rule 85 (cmpExpression -> shiftExpression .)
    LESS_EQ         reduce using rule 85 (cmpExpression -> shiftExpression .)
    GREATER         reduce using rule 85 (cmpExpression -> shiftExpression .)
    GREATER_EQ      reduce using rule 85 (cmpExpression -> shiftExpression .)
    IS_EQ_DIFF      reduce using rule 85 (cmpExpression -> shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 85 (cmpExpression -> shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 85 (cmpExpression -> shiftExpression .)
    LESS_DIFF       reduce using rule 85 (cmpExpression -> shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 85 (cmpExpression -> shiftExpression .)
    GREATER_DIFF    reduce using rule 85 (cmpExpression -> shiftExpression .)
    RANGE           reduce using rule 85 (cmpExpression -> shiftExpression .)
    TYPEDEF         reduce using rule 85 (cmpExpression -> shiftExpression .)
    IDENTIFIER      reduce using rule 85 (cmpExpression -> shiftExpression .)
    RBRACE          reduce using rule 85 (cmpExpression -> shiftExpression .)
    LPAREN          reduce using rule 85 (cmpExpression -> shiftExpression .)
    LEFT_SHIFT      shift and go to state 224
    RIGHT_SHIFT     shift and go to state 225
    IS_EQ           shift and go to state 223
    NOT_EQ          shift and go to state 226

  ! LEFT_SHIFT      [ reduce using rule 85 (cmpExpression -> shiftExpression .) ]
  ! RIGHT_SHIFT     [ reduce using rule 85 (cmpExpression -> shiftExpression .) ]
  ! IS_EQ           [ reduce using rule 85 (cmpExpression -> shiftExpression .) ]
  ! NOT_EQ          [ reduce using rule 85 (cmpExpression -> shiftExpression .) ]
  ! LESS            [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! LESS_EQ         [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! GREATER         [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! GREATER_EQ      [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! IS_EQ_DIFF      [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! LESS_DIFF       [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! GREATER_DIFF    [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! AMPERSAND       [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! CARET           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! PIPE            [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! QUESTION        [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! ASSIGN          [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_LEFT         [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_RIGHT        [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_PLUS         [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_MINUS        [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_TIMES        [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_MODULO       [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_AND_BIT      [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_DIV          [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_OR_BIT       [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! EQ_XOR_BIT      [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! COLON           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! RBRACKET        [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! COMMA           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! SEMICOLON       [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! TYPEDEF         [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! IDENTIFIER      [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! RBRACE          [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! RPAREN          [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! DOT             [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! LBRACKET        [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! TIMES           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! DIV             [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! MODULO          [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! PLUS            [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! MINUS           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! TILDE           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! $end            [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! RIGHT_SHIFT     [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! IS_EQ           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! NOT_EQ          [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! RANGE           [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! DOUBLE_QUOTE    [ reduce using rule 287 (relExpression -> shiftExpression .) ]
  ! LPAREN          [ reduce using rule 287 (relExpression -> shiftExpression .) ]


state 78

    (14) andAndExpression -> orExpression .
    (236) orExpression -> orExpression . PIPE xorExpression

  ! shift/reduce conflict for PIPE resolved as shift
    DOUBLE_AMPERSAND reduce using rule 14 (andAndExpression -> orExpression .)
    QUESTION        reduce using rule 14 (andAndExpression -> orExpression .)
    DOUBLE_PIPE     reduce using rule 14 (andAndExpression -> orExpression .)
    ASSIGN          reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_LEFT         reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_RIGHT        reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_PLUS         reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_MINUS        reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_TIMES        reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_MODULO       reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_AND_BIT      reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_DIV          reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_OR_BIT       reduce using rule 14 (andAndExpression -> orExpression .)
    EQ_XOR_BIT      reduce using rule 14 (andAndExpression -> orExpression .)
    SEMICOLON       reduce using rule 14 (andAndExpression -> orExpression .)
    COMMA           reduce using rule 14 (andAndExpression -> orExpression .)
    DOT             reduce using rule 14 (andAndExpression -> orExpression .)
    PLUS_PLUS       reduce using rule 14 (andAndExpression -> orExpression .)
    LBRACKET        reduce using rule 14 (andAndExpression -> orExpression .)
    CARET           reduce using rule 14 (andAndExpression -> orExpression .)
    TIMES           reduce using rule 14 (andAndExpression -> orExpression .)
    DIV             reduce using rule 14 (andAndExpression -> orExpression .)
    MODULO          reduce using rule 14 (andAndExpression -> orExpression .)
    PLUS            reduce using rule 14 (andAndExpression -> orExpression .)
    MINUS           reduce using rule 14 (andAndExpression -> orExpression .)
    TILDE           reduce using rule 14 (andAndExpression -> orExpression .)
    LEFT_SHIFT      reduce using rule 14 (andAndExpression -> orExpression .)
    RIGHT_SHIFT     reduce using rule 14 (andAndExpression -> orExpression .)
    IS_EQ           reduce using rule 14 (andAndExpression -> orExpression .)
    NOT_EQ          reduce using rule 14 (andAndExpression -> orExpression .)
    AMPERSAND       reduce using rule 14 (andAndExpression -> orExpression .)
    LESS            reduce using rule 14 (andAndExpression -> orExpression .)
    LESS_EQ         reduce using rule 14 (andAndExpression -> orExpression .)
    GREATER         reduce using rule 14 (andAndExpression -> orExpression .)
    GREATER_EQ      reduce using rule 14 (andAndExpression -> orExpression .)
    IS_EQ_DIFF      reduce using rule 14 (andAndExpression -> orExpression .)
    NOT_EQ_DIFF     reduce using rule 14 (andAndExpression -> orExpression .)
    LESS_EQ_DIFF    reduce using rule 14 (andAndExpression -> orExpression .)
    LESS_DIFF       reduce using rule 14 (andAndExpression -> orExpression .)
    GREATER_EQ_DIFF reduce using rule 14 (andAndExpression -> orExpression .)
    GREATER_DIFF    reduce using rule 14 (andAndExpression -> orExpression .)
    $end            reduce using rule 14 (andAndExpression -> orExpression .)
    RBRACKET        reduce using rule 14 (andAndExpression -> orExpression .)
    RPAREN          reduce using rule 14 (andAndExpression -> orExpression .)
    COLON           reduce using rule 14 (andAndExpression -> orExpression .)
    RANGE           reduce using rule 14 (andAndExpression -> orExpression .)
    TYPEDEF         reduce using rule 14 (andAndExpression -> orExpression .)
    IDENTIFIER      reduce using rule 14 (andAndExpression -> orExpression .)
    RBRACE          reduce using rule 14 (andAndExpression -> orExpression .)
    DOUBLE_QUOTE    reduce using rule 14 (andAndExpression -> orExpression .)
    LPAREN          reduce using rule 14 (andAndExpression -> orExpression .)
    PIPE            shift and go to state 227

  ! PIPE            [ reduce using rule 14 (andAndExpression -> orExpression .) ]


state 79

    (86) cmpExpression -> equalExpression .

    AMPERSAND       reduce using rule 86 (cmpExpression -> equalExpression .)
    CARET           reduce using rule 86 (cmpExpression -> equalExpression .)
    PIPE            reduce using rule 86 (cmpExpression -> equalExpression .)
    DOUBLE_AMPERSAND reduce using rule 86 (cmpExpression -> equalExpression .)
    QUESTION        reduce using rule 86 (cmpExpression -> equalExpression .)
    DOUBLE_PIPE     reduce using rule 86 (cmpExpression -> equalExpression .)
    ASSIGN          reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_LEFT         reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_RIGHT        reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_PLUS         reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_MINUS        reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_TIMES        reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_MODULO       reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_AND_BIT      reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_DIV          reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_OR_BIT       reduce using rule 86 (cmpExpression -> equalExpression .)
    EQ_XOR_BIT      reduce using rule 86 (cmpExpression -> equalExpression .)
    RPAREN          reduce using rule 86 (cmpExpression -> equalExpression .)
    COMMA           reduce using rule 86 (cmpExpression -> equalExpression .)
    SEMICOLON       reduce using rule 86 (cmpExpression -> equalExpression .)
    COLON           reduce using rule 86 (cmpExpression -> equalExpression .)
    RBRACKET        reduce using rule 86 (cmpExpression -> equalExpression .)
    DOUBLE_QUOTE    reduce using rule 86 (cmpExpression -> equalExpression .)
    DOT             reduce using rule 86 (cmpExpression -> equalExpression .)
    PLUS_PLUS       reduce using rule 86 (cmpExpression -> equalExpression .)
    LBRACKET        reduce using rule 86 (cmpExpression -> equalExpression .)
    TIMES           reduce using rule 86 (cmpExpression -> equalExpression .)
    DIV             reduce using rule 86 (cmpExpression -> equalExpression .)
    MODULO          reduce using rule 86 (cmpExpression -> equalExpression .)
    PLUS            reduce using rule 86 (cmpExpression -> equalExpression .)
    MINUS           reduce using rule 86 (cmpExpression -> equalExpression .)
    TILDE           reduce using rule 86 (cmpExpression -> equalExpression .)
    $end            reduce using rule 86 (cmpExpression -> equalExpression .)
    LEFT_SHIFT      reduce using rule 86 (cmpExpression -> equalExpression .)
    RIGHT_SHIFT     reduce using rule 86 (cmpExpression -> equalExpression .)
    IS_EQ           reduce using rule 86 (cmpExpression -> equalExpression .)
    NOT_EQ          reduce using rule 86 (cmpExpression -> equalExpression .)
    LESS            reduce using rule 86 (cmpExpression -> equalExpression .)
    LESS_EQ         reduce using rule 86 (cmpExpression -> equalExpression .)
    GREATER         reduce using rule 86 (cmpExpression -> equalExpression .)
    GREATER_EQ      reduce using rule 86 (cmpExpression -> equalExpression .)
    IS_EQ_DIFF      reduce using rule 86 (cmpExpression -> equalExpression .)
    NOT_EQ_DIFF     reduce using rule 86 (cmpExpression -> equalExpression .)
    LESS_EQ_DIFF    reduce using rule 86 (cmpExpression -> equalExpression .)
    LESS_DIFF       reduce using rule 86 (cmpExpression -> equalExpression .)
    GREATER_EQ_DIFF reduce using rule 86 (cmpExpression -> equalExpression .)
    GREATER_DIFF    reduce using rule 86 (cmpExpression -> equalExpression .)
    RANGE           reduce using rule 86 (cmpExpression -> equalExpression .)
    TYPEDEF         reduce using rule 86 (cmpExpression -> equalExpression .)
    IDENTIFIER      reduce using rule 86 (cmpExpression -> equalExpression .)
    RBRACE          reduce using rule 86 (cmpExpression -> equalExpression .)
    LPAREN          reduce using rule 86 (cmpExpression -> equalExpression .)


state 80

    (301) shiftExpression -> addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
    LEFT_SHIFT      reduce using rule 301 (shiftExpression -> addExpression .)
    RIGHT_SHIFT     reduce using rule 301 (shiftExpression -> addExpression .)
    IS_EQ           reduce using rule 301 (shiftExpression -> addExpression .)
    NOT_EQ          reduce using rule 301 (shiftExpression -> addExpression .)
    AMPERSAND       reduce using rule 301 (shiftExpression -> addExpression .)
    CARET           reduce using rule 301 (shiftExpression -> addExpression .)
    PIPE            reduce using rule 301 (shiftExpression -> addExpression .)
    DOUBLE_AMPERSAND reduce using rule 301 (shiftExpression -> addExpression .)
    QUESTION        reduce using rule 301 (shiftExpression -> addExpression .)
    DOUBLE_PIPE     reduce using rule 301 (shiftExpression -> addExpression .)
    ASSIGN          reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_LEFT         reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_RIGHT        reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_PLUS         reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_MINUS        reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_TIMES        reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_MODULO       reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_AND_BIT      reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_DIV          reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_OR_BIT       reduce using rule 301 (shiftExpression -> addExpression .)
    EQ_XOR_BIT      reduce using rule 301 (shiftExpression -> addExpression .)
    SEMICOLON       reduce using rule 301 (shiftExpression -> addExpression .)
    COMMA           reduce using rule 301 (shiftExpression -> addExpression .)
    LESS            reduce using rule 301 (shiftExpression -> addExpression .)
    LESS_EQ         reduce using rule 301 (shiftExpression -> addExpression .)
    GREATER         reduce using rule 301 (shiftExpression -> addExpression .)
    GREATER_EQ      reduce using rule 301 (shiftExpression -> addExpression .)
    IS_EQ_DIFF      reduce using rule 301 (shiftExpression -> addExpression .)
    NOT_EQ_DIFF     reduce using rule 301 (shiftExpression -> addExpression .)
    LESS_EQ_DIFF    reduce using rule 301 (shiftExpression -> addExpression .)
    LESS_DIFF       reduce using rule 301 (shiftExpression -> addExpression .)
    GREATER_EQ_DIFF reduce using rule 301 (shiftExpression -> addExpression .)
    GREATER_DIFF    reduce using rule 301 (shiftExpression -> addExpression .)
    RPAREN          reduce using rule 301 (shiftExpression -> addExpression .)
    RBRACKET        reduce using rule 301 (shiftExpression -> addExpression .)
    RANGE           reduce using rule 301 (shiftExpression -> addExpression .)
    DOT             reduce using rule 301 (shiftExpression -> addExpression .)
    PLUS_PLUS       reduce using rule 301 (shiftExpression -> addExpression .)
    LBRACKET        reduce using rule 301 (shiftExpression -> addExpression .)
    TIMES           reduce using rule 301 (shiftExpression -> addExpression .)
    DIV             reduce using rule 301 (shiftExpression -> addExpression .)
    MODULO          reduce using rule 301 (shiftExpression -> addExpression .)
    $end            reduce using rule 301 (shiftExpression -> addExpression .)
    COLON           reduce using rule 301 (shiftExpression -> addExpression .)
    TYPEDEF         reduce using rule 301 (shiftExpression -> addExpression .)
    IDENTIFIER      reduce using rule 301 (shiftExpression -> addExpression .)
    RBRACE          reduce using rule 301 (shiftExpression -> addExpression .)
    DOUBLE_QUOTE    reduce using rule 301 (shiftExpression -> addExpression .)
    LPAREN          reduce using rule 301 (shiftExpression -> addExpression .)
    PLUS            shift and go to state 177
    MINUS           shift and go to state 178
    TILDE           shift and go to state 179

  ! PLUS            [ reduce using rule 301 (shiftExpression -> addExpression .) ]
  ! MINUS           [ reduce using rule 301 (shiftExpression -> addExpression .) ]
  ! TILDE           [ reduce using rule 301 (shiftExpression -> addExpression .) ]


state 81

    (389) unaryExpression -> LBRACKET TYPEDEF . RBRACKET DOT identifierOrTemplateInstance

    RBRACKET        shift and go to state 228


state 82

    (28) arrayLiteral -> LBRACKET RBRACKET .

    DOT             reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    CARET           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    DIV             reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    MODULO          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    TILDE           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    PIPE            reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    QUESTION        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS            reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    IS_EQ_DIFF      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS_DIFF       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER_DIFF    reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    $end            reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    COLON           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    RANGE           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    TYPEDEF         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)


state 83

    (344) type2 -> typeofExpression DOT . identifierOrTemplateChain
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 90

    identifierOrTemplateInstance   shift and go to state 89
    identifierOrTemplateChain      shift and go to state 229

state 84

    (380) unaryExpression -> MINUS unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    TIMES           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    DIV             reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    MODULO          reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    PLUS            reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    MINUS           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    TILDE           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    IS_EQ           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    NOT_EQ          reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    AMPERSAND       reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    PIPE            reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    QUESTION        reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    ASSIGN          reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_LEFT         reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_RIGHT        reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_PLUS         reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_MINUS        reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_TIMES        reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_MODULO       reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_DIV          reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    SEMICOLON       reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    COMMA           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    LESS            reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    LESS_EQ         reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    GREATER         reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    GREATER_EQ      reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    LESS_DIFF       reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    GREATER_DIFF    reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    RPAREN          reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    $end            reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    RBRACKET        reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    COLON           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    RANGE           reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    TYPEDEF         reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    IDENTIFIER      reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    RBRACE          reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    LPAREN          reduce using rule 380 (unaryExpression -> MINUS unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 380 (unaryExpression -> MINUS unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 380 (unaryExpression -> MINUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 380 (unaryExpression -> MINUS unaryExpression .) ]


state 85

    (379) unaryExpression -> PLUS unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    TIMES           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    DIV             reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    MODULO          reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    PLUS            reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    MINUS           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    TILDE           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    IS_EQ           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    NOT_EQ          reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    AMPERSAND       reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    PIPE            reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    QUESTION        reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    ASSIGN          reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_LEFT         reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_RIGHT        reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_PLUS         reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_MINUS        reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_TIMES        reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_MODULO       reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_DIV          reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    SEMICOLON       reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    COMMA           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    LESS            reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    LESS_EQ         reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    GREATER         reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    GREATER_EQ      reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    LESS_DIFF       reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    GREATER_DIFF    reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    RPAREN          reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    $end            reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    RBRACKET        reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    COLON           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    RANGE           reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    TYPEDEF         reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    IDENTIFIER      reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    RBRACE          reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    LPAREN          reduce using rule 379 (unaryExpression -> PLUS unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 379 (unaryExpression -> PLUS unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 379 (unaryExpression -> PLUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 379 (unaryExpression -> PLUS unaryExpression .) ]


state 86

    (265) importExpression -> IMPORT LBRACKET . assignExpression RBRACKET
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 230
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 87

    (334) symbol -> DOT . identifierOrTemplateChain
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 90

    identifierOrTemplateInstance   shift and go to state 89
    identifierOrTemplateChain      shift and go to state 163

state 88

    (340) type -> typeConstructors type2 . typeSuffixStar
    (338) typeSuffixStar -> . typeSuffix typeSuffixStar
    (339) typeSuffixStar -> . empty
    (364) typeSuffix -> . TIMES
    (365) typeSuffix -> . LBRACKET type RBRACKET
    (366) typeSuffix -> . LBRACKET RBRACKET
    (367) typeSuffix -> . LBRACKET assignExpression RBRACKET
    (368) typeSuffix -> . LBRACKET assignExpression RANGE assignExpression RBRACKET
    (369) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (371) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (373) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET
    (374) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET
    (407) empty -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    TIMES           shift and go to state 174
    LBRACKET        shift and go to state 169
    DELEGATE        shift and go to state 176
    FUNCTION        shift and go to state 173
    SEMICOLON       shift and go to state 171
    DOT             reduce using rule 407 (empty -> .)
    LPAREN          reduce using rule 407 (empty -> .)
    PLUS_PLUS       reduce using rule 407 (empty -> .)
    CARET           reduce using rule 407 (empty -> .)
    DIV             reduce using rule 407 (empty -> .)
    MODULO          reduce using rule 407 (empty -> .)
    PLUS            reduce using rule 407 (empty -> .)
    MINUS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    $end            reduce using rule 407 (empty -> .)
    LEFT_SHIFT      reduce using rule 407 (empty -> .)
    RIGHT_SHIFT     reduce using rule 407 (empty -> .)
    IS_EQ           reduce using rule 407 (empty -> .)
    NOT_EQ          reduce using rule 407 (empty -> .)
    AMPERSAND       reduce using rule 407 (empty -> .)
    PIPE            reduce using rule 407 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 407 (empty -> .)
    QUESTION        reduce using rule 407 (empty -> .)
    DOUBLE_PIPE     reduce using rule 407 (empty -> .)
    ASSIGN          reduce using rule 407 (empty -> .)
    EQ_LEFT         reduce using rule 407 (empty -> .)
    EQ_RIGHT        reduce using rule 407 (empty -> .)
    EQ_PLUS         reduce using rule 407 (empty -> .)
    EQ_MINUS        reduce using rule 407 (empty -> .)
    EQ_TIMES        reduce using rule 407 (empty -> .)
    EQ_MODULO       reduce using rule 407 (empty -> .)
    EQ_AND_BIT      reduce using rule 407 (empty -> .)
    EQ_DIV          reduce using rule 407 (empty -> .)
    EQ_OR_BIT       reduce using rule 407 (empty -> .)
    EQ_XOR_BIT      reduce using rule 407 (empty -> .)
    RBRACKET        reduce using rule 407 (empty -> .)
    COMMA           reduce using rule 407 (empty -> .)
    LESS            reduce using rule 407 (empty -> .)
    LESS_EQ         reduce using rule 407 (empty -> .)
    GREATER         reduce using rule 407 (empty -> .)
    GREATER_EQ      reduce using rule 407 (empty -> .)
    IS_EQ_DIFF      reduce using rule 407 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 407 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 407 (empty -> .)
    LESS_DIFF       reduce using rule 407 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 407 (empty -> .)
    GREATER_DIFF    reduce using rule 407 (empty -> .)
    RPAREN          reduce using rule 407 (empty -> .)
    COLON           reduce using rule 407 (empty -> .)
    RANGE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    RBRACE          reduce using rule 407 (empty -> .)
    DOUBLE_QUOTE    reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)
    FINAL           reduce using rule 407 (empty -> .)
    AUTO            reduce using rule 407 (empty -> .)
    RETURN          reduce using rule 407 (empty -> .)
    CONST           reduce using rule 407 (empty -> .)
    IMMUTABLE       reduce using rule 407 (empty -> .)
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    ELLIPSIS        reduce using rule 407 (empty -> .)

  ! LBRACKET        [ reduce using rule 407 (empty -> .) ]
  ! TIMES           [ reduce using rule 407 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 407 (empty -> .) ]

    typeSuffix                     shift and go to state 175
    typeSuffixStar                 shift and go to state 231
    empty                          shift and go to state 172

state 89

    (185) identifierOrTemplateChain -> identifierOrTemplateInstance .

    DOT             reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DELEGATE        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    FUNCTION        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    FINAL           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    AUTO            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RETURN          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    CONST           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    IMMUTABLE       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    BOOL            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    SHORT           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    USHORT          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    INT             reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    UINT            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LONG            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    ULONG           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    CHAR            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    FLOAT           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TYPEOF          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LBRACE          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    CARET           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DIV             reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    $end            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS            reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RPAREN          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    COLON           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RANGE           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TYPEDEF         reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RBRACE          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DOUBLE_QUOTE    reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    ELLIPSIS        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)


state 90

    (187) identifierOrTemplateInstance -> IDENTIFIER .

    DOT             reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LBRACE          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TIMES           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LBRACKET        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DELEGATE        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    FUNCTION        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    SEMICOLON       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    FINAL           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    AUTO            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RETURN          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    CONST           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IMMUTABLE       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    BOOL            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    SHORT           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    USHORT          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    INT             reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    UINT            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LONG            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    ULONG           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    CHAR            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    FLOAT           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TYPEOF          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    CARET           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    MINUS           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    $end            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACKET        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RPAREN          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    COLON           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RANGE           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TYPEDEF         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACE          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_QUOTE    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LPAREN          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)


state 91

    (343) type2 -> symbol .

    TIMES           reduce using rule 343 (type2 -> symbol .)
    LBRACKET        reduce using rule 343 (type2 -> symbol .)
    DELEGATE        reduce using rule 343 (type2 -> symbol .)
    FUNCTION        reduce using rule 343 (type2 -> symbol .)
    SEMICOLON       reduce using rule 343 (type2 -> symbol .)
    DOT             reduce using rule 343 (type2 -> symbol .)
    LPAREN          reduce using rule 343 (type2 -> symbol .)
    PLUS_PLUS       reduce using rule 343 (type2 -> symbol .)
    CARET           reduce using rule 343 (type2 -> symbol .)
    DIV             reduce using rule 343 (type2 -> symbol .)
    MODULO          reduce using rule 343 (type2 -> symbol .)
    PLUS            reduce using rule 343 (type2 -> symbol .)
    MINUS           reduce using rule 343 (type2 -> symbol .)
    TILDE           reduce using rule 343 (type2 -> symbol .)
    $end            reduce using rule 343 (type2 -> symbol .)
    LEFT_SHIFT      reduce using rule 343 (type2 -> symbol .)
    RIGHT_SHIFT     reduce using rule 343 (type2 -> symbol .)
    IS_EQ           reduce using rule 343 (type2 -> symbol .)
    NOT_EQ          reduce using rule 343 (type2 -> symbol .)
    AMPERSAND       reduce using rule 343 (type2 -> symbol .)
    PIPE            reduce using rule 343 (type2 -> symbol .)
    DOUBLE_AMPERSAND reduce using rule 343 (type2 -> symbol .)
    QUESTION        reduce using rule 343 (type2 -> symbol .)
    DOUBLE_PIPE     reduce using rule 343 (type2 -> symbol .)
    ASSIGN          reduce using rule 343 (type2 -> symbol .)
    EQ_LEFT         reduce using rule 343 (type2 -> symbol .)
    EQ_RIGHT        reduce using rule 343 (type2 -> symbol .)
    EQ_PLUS         reduce using rule 343 (type2 -> symbol .)
    EQ_MINUS        reduce using rule 343 (type2 -> symbol .)
    EQ_TIMES        reduce using rule 343 (type2 -> symbol .)
    EQ_MODULO       reduce using rule 343 (type2 -> symbol .)
    EQ_AND_BIT      reduce using rule 343 (type2 -> symbol .)
    EQ_DIV          reduce using rule 343 (type2 -> symbol .)
    EQ_OR_BIT       reduce using rule 343 (type2 -> symbol .)
    EQ_XOR_BIT      reduce using rule 343 (type2 -> symbol .)
    RBRACKET        reduce using rule 343 (type2 -> symbol .)
    COMMA           reduce using rule 343 (type2 -> symbol .)
    LESS            reduce using rule 343 (type2 -> symbol .)
    LESS_EQ         reduce using rule 343 (type2 -> symbol .)
    GREATER         reduce using rule 343 (type2 -> symbol .)
    GREATER_EQ      reduce using rule 343 (type2 -> symbol .)
    IS_EQ_DIFF      reduce using rule 343 (type2 -> symbol .)
    NOT_EQ_DIFF     reduce using rule 343 (type2 -> symbol .)
    LESS_EQ_DIFF    reduce using rule 343 (type2 -> symbol .)
    LESS_DIFF       reduce using rule 343 (type2 -> symbol .)
    GREATER_EQ_DIFF reduce using rule 343 (type2 -> symbol .)
    GREATER_DIFF    reduce using rule 343 (type2 -> symbol .)
    RPAREN          reduce using rule 343 (type2 -> symbol .)
    COLON           reduce using rule 343 (type2 -> symbol .)
    RANGE           reduce using rule 343 (type2 -> symbol .)
    TYPEDEF         reduce using rule 343 (type2 -> symbol .)
    IDENTIFIER      reduce using rule 343 (type2 -> symbol .)
    RBRACE          reduce using rule 343 (type2 -> symbol .)
    DOUBLE_QUOTE    reduce using rule 343 (type2 -> symbol .)
    LBRACE          reduce using rule 343 (type2 -> symbol .)
    FINAL           reduce using rule 343 (type2 -> symbol .)
    AUTO            reduce using rule 343 (type2 -> symbol .)
    RETURN          reduce using rule 343 (type2 -> symbol .)
    CONST           reduce using rule 343 (type2 -> symbol .)
    IMMUTABLE       reduce using rule 343 (type2 -> symbol .)
    BOOL            reduce using rule 343 (type2 -> symbol .)
    SHORT           reduce using rule 343 (type2 -> symbol .)
    USHORT          reduce using rule 343 (type2 -> symbol .)
    INT             reduce using rule 343 (type2 -> symbol .)
    UINT            reduce using rule 343 (type2 -> symbol .)
    LONG            reduce using rule 343 (type2 -> symbol .)
    ULONG           reduce using rule 343 (type2 -> symbol .)
    CHAR            reduce using rule 343 (type2 -> symbol .)
    FLOAT           reduce using rule 343 (type2 -> symbol .)
    TYPEOF          reduce using rule 343 (type2 -> symbol .)
    ELLIPSIS        reduce using rule 343 (type2 -> symbol .)


state 92

    (346) type2 -> typeConstructor . LBRACKET TYPEDEF RBRACKET

    LBRACKET        shift and go to state 96


state 93

    (362) typeofExpression -> TYPEOF LBRACKET . expression RBRACKET
    (363) typeofExpression -> TYPEOF LBRACKET . RETURN RBRACKET
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RETURN          shift and go to state 232
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 233

state 94

    (186) identifierOrTemplateChain -> identifierOrTemplateChain DOT . identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 90

    identifierOrTemplateInstance   shift and go to state 234

state 95

    (349) typeConstructors -> typeConstructor .
    (350) typeConstructors -> typeConstructor . typeConstructors
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    BOOL            reduce using rule 349 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 349 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 349 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 349 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 349 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 349 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 349 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 349 (typeConstructors -> typeConstructor .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 95
    typeConstructors               shift and go to state 98

state 96

    (346) type2 -> typeConstructor LBRACKET . TYPEDEF RBRACKET

    TYPEDEF         shift and go to state 235


state 97

    (268) primaryExpression -> typeConstructor LPAREN . type RPAREN DOT IDENTIFIER
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    builtinType                    shift and go to state 40
    typeConstructors               shift and go to state 10
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructor                shift and go to state 161
    type                           shift and go to state 236
    type2                          shift and go to state 53

state 98

    (350) typeConstructors -> typeConstructor typeConstructors .

    BOOL            reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    SHORT           reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    USHORT          reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    INT             reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    UINT            reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    LONG            reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    ULONG           reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    CHAR            reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    FLOAT           reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    DOT             reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    TYPEOF          reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    CONST           reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    IMMUTABLE       reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)
    IDENTIFIER      reduce using rule 350 (typeConstructors -> typeConstructor typeConstructors .)


state 99

    (123) deleteExpression -> DELETE unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    TIMES           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    DIV             reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    MODULO          reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    PLUS            reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    MINUS           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    TILDE           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    LEFT_SHIFT      reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    RIGHT_SHIFT     reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    IS_EQ           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    NOT_EQ          reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    AMPERSAND       reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    PIPE            reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    QUESTION        reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    DOUBLE_PIPE     reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    ASSIGN          reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_LEFT         reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_RIGHT        reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_PLUS         reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_MINUS        reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_TIMES        reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_MODULO       reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_AND_BIT      reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_DIV          reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_OR_BIT       reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    EQ_XOR_BIT      reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    RBRACKET        reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    COMMA           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    LESS            reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    LESS_EQ         reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    GREATER         reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    GREATER_EQ      reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    IS_EQ_DIFF      reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    LESS_DIFF       reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    GREATER_DIFF    reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    $end            reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    SEMICOLON       reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    RPAREN          reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    COLON           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    RANGE           reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    TYPEDEF         reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    IDENTIFIER      reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    RBRACE          reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    LPAREN          reduce using rule 123 (deleteExpression -> DELETE unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 123 (deleteExpression -> DELETE unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 123 (deleteExpression -> DELETE unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 123 (deleteExpression -> DELETE unaryExpression .) ]


state 100

    (173) functionLiteralExpression -> FUNCTION functionBody .

    DOT             reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    PLUS_PLUS       reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    LBRACKET        reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    CARET           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    TIMES           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    DIV             reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    MODULO          reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    PLUS            reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    MINUS           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    TILDE           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    LEFT_SHIFT      reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    RIGHT_SHIFT     reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    IS_EQ           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    NOT_EQ          reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    AMPERSAND       reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    PIPE            reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    DOUBLE_AMPERSAND reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    QUESTION        reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    DOUBLE_PIPE     reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    ASSIGN          reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_LEFT         reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_RIGHT        reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_PLUS         reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_MINUS        reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_TIMES        reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_MODULO       reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_AND_BIT      reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_DIV          reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_OR_BIT       reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_XOR_BIT      reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    RPAREN          reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    COMMA           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS            reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_EQ         reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER         reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_EQ      reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    IS_EQ_DIFF      reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    NOT_EQ_DIFF     reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_EQ_DIFF    reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_DIFF       reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_EQ_DIFF reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_DIFF    reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    $end            reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    SEMICOLON       reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    RBRACKET        reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    COLON           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    RANGE           reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    TYPEDEF         reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    IDENTIFIER      reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    RBRACE          reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    DOUBLE_QUOTE    reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)
    LPAREN          reduce using rule 173 (functionLiteralExpression -> FUNCTION functionBody .)


state 101

    (174) functionLiteralExpression -> FUNCTION TYPEDEF . functionBody
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    LBRACE          shift and go to state 26

    functionBody                   shift and go to state 237
    blockStatement                 shift and go to state 3

state 102

    (376) unaryExpression -> AMPERSAND unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    TIMES           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    DIV             reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    MODULO          reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    PLUS            reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    MINUS           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    TILDE           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    LEFT_SHIFT      reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    RIGHT_SHIFT     reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    IS_EQ           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    NOT_EQ          reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    AMPERSAND       reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    PIPE            reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    QUESTION        reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    DOUBLE_PIPE     reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    ASSIGN          reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_LEFT         reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_RIGHT        reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_PLUS         reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_MINUS        reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_TIMES        reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_MODULO       reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_AND_BIT      reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_DIV          reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_OR_BIT       reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_XOR_BIT      reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    SEMICOLON       reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    COMMA           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS            reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS_EQ         reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER         reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER_EQ      reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    IS_EQ_DIFF      reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS_DIFF       reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER_DIFF    reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    RPAREN          reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    $end            reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    RBRACKET        reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    COLON           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    RANGE           reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    TYPEDEF         reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    IDENTIFIER      reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    RBRACE          reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    LPAREN          reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 376 (unaryExpression -> AMPERSAND unaryExpression .) ]


state 103

    (311) statementNoCaseNoDefault -> forStatement .

    RBRACE          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    PRIVATE         reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    PROTECTED       reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    PUBLIC          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    STATIC          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    EXTERN          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    FINAL           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    AUTO            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    CONST           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    IMMUTABLE       reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    CASE            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    DEFAULT         reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    IDENTIFIER      reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    LBRACE          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    IF              reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    WHILE           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    DO              reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    FOR             reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    FOREACH         reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    FOREACH_REVERSE reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    SWITCH          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    CONTINUE        reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    BREAK           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    RETURN          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    GOTO            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    WITH            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    AMPERSAND       reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    EXCLAMATION     reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    TIMES           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    PLUS            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    MINUS           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    DOT             reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    PLUS_PLUS       reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    ELLIPSIS        reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    LBRACKET        reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    RANGE           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    LPAREN          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    DOLLAR          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    THIS            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    NULL            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    TRUE            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    FALSE           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    INUMBER         reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    DNUMBER         reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    LIT_CHAR        reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    NEW             reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    DELETE          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    CAST            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    FUNCTION        reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    MIXIN           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    IMPORT          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    LIT_STR         reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    BOOL            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    SHORT           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    USHORT          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    INT             reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    UINT            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    LONG            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    ULONG           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    CHAR            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    FLOAT           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    TYPEOF          reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    ALIAS           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    ENUM            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    CLASS           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    TILDE           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    TYPEDEF         reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    UNION           reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    SEMICOLON       reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)
    ELSE            reduce using rule 311 (statementNoCaseNoDefault -> forStatement .)


state 104

    (313) statementNoCaseNoDefault -> switchStatement .

    RBRACE          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    PRIVATE         reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    PROTECTED       reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    PUBLIC          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    STATIC          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    EXTERN          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    FINAL           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    AUTO            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    CONST           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    IMMUTABLE       reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    CASE            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    DEFAULT         reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    IDENTIFIER      reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    LBRACE          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    IF              reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    WHILE           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    DO              reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    FOR             reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    FOREACH         reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    FOREACH_REVERSE reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    SWITCH          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    CONTINUE        reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    BREAK           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    RETURN          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    GOTO            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    WITH            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    AMPERSAND       reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    EXCLAMATION     reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    TIMES           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    PLUS            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    MINUS           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    DOT             reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    PLUS_PLUS       reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    ELLIPSIS        reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    LBRACKET        reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    RANGE           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    LPAREN          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    DOLLAR          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    THIS            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    NULL            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    TRUE            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    FALSE           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    INUMBER         reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    DNUMBER         reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    LIT_CHAR        reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    NEW             reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    DELETE          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    CAST            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    FUNCTION        reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    MIXIN           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    IMPORT          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    LIT_STR         reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    BOOL            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    SHORT           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    USHORT          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    INT             reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    UINT            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    LONG            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    ULONG           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    CHAR            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    FLOAT           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    TYPEOF          reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    ALIAS           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    ENUM            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    CLASS           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    TILDE           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    TYPEDEF         reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    UNION           reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    SEMICOLON       reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)
    ELSE            reduce using rule 313 (statementNoCaseNoDefault -> switchStatement .)


state 105

    (46) attribute -> PROTECTED .

    PRIVATE         reduce using rule 46 (attribute -> PROTECTED .)
    PROTECTED       reduce using rule 46 (attribute -> PROTECTED .)
    PUBLIC          reduce using rule 46 (attribute -> PROTECTED .)
    STATIC          reduce using rule 46 (attribute -> PROTECTED .)
    EXTERN          reduce using rule 46 (attribute -> PROTECTED .)
    FINAL           reduce using rule 46 (attribute -> PROTECTED .)
    AUTO            reduce using rule 46 (attribute -> PROTECTED .)
    CONST           reduce using rule 46 (attribute -> PROTECTED .)
    IMMUTABLE       reduce using rule 46 (attribute -> PROTECTED .)
    LBRACE          reduce using rule 46 (attribute -> PROTECTED .)
    ALIAS           reduce using rule 46 (attribute -> PROTECTED .)
    ENUM            reduce using rule 46 (attribute -> PROTECTED .)
    CLASS           reduce using rule 46 (attribute -> PROTECTED .)
    THIS            reduce using rule 46 (attribute -> PROTECTED .)
    TILDE           reduce using rule 46 (attribute -> PROTECTED .)
    TYPEDEF         reduce using rule 46 (attribute -> PROTECTED .)
    IMPORT          reduce using rule 46 (attribute -> PROTECTED .)
    UNION           reduce using rule 46 (attribute -> PROTECTED .)
    MIXIN           reduce using rule 46 (attribute -> PROTECTED .)
    COLON           reduce using rule 46 (attribute -> PROTECTED .)


state 106

    (307) statementNoCaseNoDefault -> blockStatement .
    (166) functionBody -> blockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for PLUS resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for MINUS resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for TILDE resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 166 (functionBody -> blockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 166 (functionBody -> blockStatement .)
    RBRACE          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    PRIVATE         reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    PROTECTED       reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    PUBLIC          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    STATIC          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    EXTERN          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    FINAL           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    AUTO            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    CONST           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    IMMUTABLE       reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    CASE            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    DEFAULT         reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    IDENTIFIER      reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    LBRACE          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    IF              reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    WHILE           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    DO              reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    FOR             reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    FOREACH         reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    FOREACH_REVERSE reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    SWITCH          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    CONTINUE        reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    BREAK           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    RETURN          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    GOTO            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    WITH            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    EXCLAMATION     reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    ELLIPSIS        reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    RANGE           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    LPAREN          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    DOLLAR          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    THIS            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    NULL            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    TRUE            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    FALSE           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    INUMBER         reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    DNUMBER         reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    LIT_CHAR        reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    NEW             reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    DELETE          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    CAST            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    FUNCTION        reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    MIXIN           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    IMPORT          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    LIT_STR         reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    BOOL            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    SHORT           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    USHORT          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    INT             reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    UINT            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    LONG            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    ULONG           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    CHAR            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    FLOAT           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    TYPEOF          reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    ALIAS           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    ENUM            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    CLASS           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    TYPEDEF         reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    UNION           reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    ELSE            reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .)
    DOT             reduce using rule 166 (functionBody -> blockStatement .)
    PLUS_PLUS       reduce using rule 166 (functionBody -> blockStatement .)
    LBRACKET        reduce using rule 166 (functionBody -> blockStatement .)
    CARET           reduce using rule 166 (functionBody -> blockStatement .)
    TIMES           reduce using rule 166 (functionBody -> blockStatement .)
    DIV             reduce using rule 166 (functionBody -> blockStatement .)
    MODULO          reduce using rule 166 (functionBody -> blockStatement .)
    PLUS            reduce using rule 166 (functionBody -> blockStatement .)
    MINUS           reduce using rule 166 (functionBody -> blockStatement .)
    TILDE           reduce using rule 166 (functionBody -> blockStatement .)
    LEFT_SHIFT      reduce using rule 166 (functionBody -> blockStatement .)
    RIGHT_SHIFT     reduce using rule 166 (functionBody -> blockStatement .)
    IS_EQ           reduce using rule 166 (functionBody -> blockStatement .)
    NOT_EQ          reduce using rule 166 (functionBody -> blockStatement .)
    AMPERSAND       reduce using rule 166 (functionBody -> blockStatement .)
    PIPE            reduce using rule 166 (functionBody -> blockStatement .)
    DOUBLE_AMPERSAND reduce using rule 166 (functionBody -> blockStatement .)
    QUESTION        reduce using rule 166 (functionBody -> blockStatement .)
    DOUBLE_PIPE     reduce using rule 166 (functionBody -> blockStatement .)
    ASSIGN          reduce using rule 166 (functionBody -> blockStatement .)
    EQ_LEFT         reduce using rule 166 (functionBody -> blockStatement .)
    EQ_RIGHT        reduce using rule 166 (functionBody -> blockStatement .)
    EQ_PLUS         reduce using rule 166 (functionBody -> blockStatement .)
    EQ_MINUS        reduce using rule 166 (functionBody -> blockStatement .)
    EQ_TIMES        reduce using rule 166 (functionBody -> blockStatement .)
    EQ_MODULO       reduce using rule 166 (functionBody -> blockStatement .)
    EQ_AND_BIT      reduce using rule 166 (functionBody -> blockStatement .)
    EQ_DIV          reduce using rule 166 (functionBody -> blockStatement .)
    EQ_OR_BIT       reduce using rule 166 (functionBody -> blockStatement .)
    EQ_XOR_BIT      reduce using rule 166 (functionBody -> blockStatement .)
    SEMICOLON       reduce using rule 166 (functionBody -> blockStatement .)
    COMMA           reduce using rule 166 (functionBody -> blockStatement .)
    LESS            reduce using rule 166 (functionBody -> blockStatement .)
    LESS_EQ         reduce using rule 166 (functionBody -> blockStatement .)
    GREATER         reduce using rule 166 (functionBody -> blockStatement .)
    GREATER_EQ      reduce using rule 166 (functionBody -> blockStatement .)
    IS_EQ_DIFF      reduce using rule 166 (functionBody -> blockStatement .)
    NOT_EQ_DIFF     reduce using rule 166 (functionBody -> blockStatement .)
    LESS_EQ_DIFF    reduce using rule 166 (functionBody -> blockStatement .)
    LESS_DIFF       reduce using rule 166 (functionBody -> blockStatement .)
    GREATER_EQ_DIFF reduce using rule 166 (functionBody -> blockStatement .)
    GREATER_DIFF    reduce using rule 166 (functionBody -> blockStatement .)

  ! AMPERSAND       [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! TIMES           [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! PLUS            [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! MINUS           [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! DOT             [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! LBRACKET        [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! TILDE           [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]
  ! SEMICOLON       [ reduce using rule 307 (statementNoCaseNoDefault -> blockStatement .) ]


state 107

    (404) withStatement -> WITH . LBRACKET expression RBRACKET statementNoCaseNoDefault

    LBRACKET        shift and go to state 238


state 108

    (312) statementNoCaseNoDefault -> foreachStatement .

    RBRACE          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    PRIVATE         reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    PROTECTED       reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    PUBLIC          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    STATIC          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    EXTERN          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    FINAL           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    AUTO            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    CONST           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    IMMUTABLE       reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    CASE            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    DEFAULT         reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    IDENTIFIER      reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    LBRACE          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    IF              reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    WHILE           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    DO              reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    FOR             reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    FOREACH         reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    FOREACH_REVERSE reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    SWITCH          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    CONTINUE        reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    BREAK           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    RETURN          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    GOTO            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    WITH            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    AMPERSAND       reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    EXCLAMATION     reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    TIMES           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    PLUS            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    MINUS           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    DOT             reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    PLUS_PLUS       reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    ELLIPSIS        reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    LBRACKET        reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    RANGE           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    LPAREN          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    DOLLAR          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    THIS            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    NULL            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    TRUE            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    FALSE           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    INUMBER         reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    DNUMBER         reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    LIT_CHAR        reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    NEW             reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    DELETE          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    CAST            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    FUNCTION        reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    MIXIN           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    IMPORT          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    LIT_STR         reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    BOOL            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    SHORT           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    USHORT          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    INT             reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    UINT            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    LONG            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    ULONG           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    CHAR            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    FLOAT           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    TYPEOF          reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    ALIAS           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    ENUM            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    CLASS           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    TILDE           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    TYPEDEF         reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    UNION           reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    SEMICOLON       reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)
    ELSE            reduce using rule 312 (statementNoCaseNoDefault -> foreachStatement .)


state 109

    (320) statement -> statementNoCaseNoDefault .

    RBRACE          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    PRIVATE         reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    PROTECTED       reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    PUBLIC          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    STATIC          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    EXTERN          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    FINAL           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    AUTO            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    CONST           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    CASE            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    DEFAULT         reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    LBRACE          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    IF              reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    WHILE           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    DO              reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    FOR             reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    FOREACH         reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    SWITCH          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    CONTINUE        reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    BREAK           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    RETURN          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    GOTO            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    WITH            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    AMPERSAND       reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    TIMES           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    PLUS            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    MINUS           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    DOT             reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    ELLIPSIS        reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    LBRACKET        reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    RANGE           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    LPAREN          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    DOLLAR          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    THIS            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    NULL            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    TRUE            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    FALSE           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    INUMBER         reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    DNUMBER         reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    NEW             reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    DELETE          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    CAST            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    FUNCTION        reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    MIXIN           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    IMPORT          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    LIT_STR         reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    BOOL            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    SHORT           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    USHORT          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    INT             reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    UINT            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    LONG            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    ULONG           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    CHAR            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    FLOAT           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    TYPEOF          reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    ALIAS           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    ENUM            reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    CLASS           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    TILDE           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    TYPEDEF         reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    UNION           reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    SEMICOLON       reduce using rule 320 (statement -> statementNoCaseNoDefault .)
    ELSE            reduce using rule 320 (statement -> statementNoCaseNoDefault .)


state 110

    (177) gotoStatement -> GOTO . IDENTIFIER SEMICOLON
    (178) gotoStatement -> GOTO . DEFAULT SEMICOLON
    (179) gotoStatement -> GOTO . CASE SEMICOLON
    (180) gotoStatement -> GOTO . CASE expression SEMICOLON

    IDENTIFIER      shift and go to state 241
    DEFAULT         shift and go to state 240
    CASE            shift and go to state 239


state 111

    (309) statementNoCaseNoDefault -> whileStatement .

    RBRACE          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    PRIVATE         reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    PROTECTED       reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    PUBLIC          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    STATIC          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    EXTERN          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    FINAL           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    AUTO            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    CONST           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    IMMUTABLE       reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    CASE            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    DEFAULT         reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    IDENTIFIER      reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    LBRACE          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    IF              reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    WHILE           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    DO              reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    FOR             reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    FOREACH         reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    FOREACH_REVERSE reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    SWITCH          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    CONTINUE        reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    BREAK           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    RETURN          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    GOTO            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    WITH            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    AMPERSAND       reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    EXCLAMATION     reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    TIMES           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    PLUS            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    MINUS           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    DOT             reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    PLUS_PLUS       reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    ELLIPSIS        reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    LBRACKET        reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    RANGE           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    LPAREN          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    DOLLAR          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    THIS            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    NULL            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    TRUE            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    FALSE           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    INUMBER         reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    DNUMBER         reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    LIT_CHAR        reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    NEW             reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    DELETE          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    CAST            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    FUNCTION        reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    MIXIN           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    IMPORT          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    LIT_STR         reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    BOOL            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    SHORT           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    USHORT          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    INT             reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    UINT            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    LONG            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    ULONG           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    CHAR            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    FLOAT           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    TYPEOF          reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    ALIAS           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    ENUM            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    CLASS           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    TILDE           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    TYPEDEF         reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    UNION           reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    SEMICOLON       reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)
    ELSE            reduce using rule 309 (statementNoCaseNoDefault -> whileStatement .)


state 112

    (156) foreachStatement -> FOREACH . LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> FOREACH . LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement

    LPAREN          shift and go to state 242


state 113

    (116) declarationsAndStatements -> declarationOrStatement .
    (117) declarationsAndStatements -> declarationOrStatement . declarationsAndStatements
    (116) declarationsAndStatements -> . declarationOrStatement
    (117) declarationsAndStatements -> . declarationOrStatement declarationsAndStatements
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! reduce/reduce conflict for ALIAS resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! reduce/reduce conflict for ENUM resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! reduce/reduce conflict for CLASS resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! reduce/reduce conflict for THIS resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! reduce/reduce conflict for TILDE resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! reduce/reduce conflict for IMPORT resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! reduce/reduce conflict for UNION resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! reduce/reduce conflict for MIXIN resolved using rule 116 (declarationsAndStatements -> declarationOrStatement .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACE          reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    ALIAS           reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    ENUM            reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    CLASS           reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    TILDE           reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    TYPEDEF         reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    UNION           reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    SEMICOLON       reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    ELSE            reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .)
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! PRIVATE         [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! PROTECTED       [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! PUBLIC          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! STATIC          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! EXTERN          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! FINAL           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! AUTO            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! CONST           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! IMMUTABLE       [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! CASE            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! DEFAULT         [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! IDENTIFIER      [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! LBRACE          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! IF              [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! WHILE           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! DO              [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! FOR             [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! FOREACH         [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! FOREACH_REVERSE [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! SWITCH          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! CONTINUE        [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! BREAK           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! RETURN          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! GOTO            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! WITH            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! AMPERSAND       [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! EXCLAMATION     [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! TIMES           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! PLUS            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! MINUS           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! DOT             [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! ELLIPSIS        [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! LBRACKET        [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! RANGE           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! LPAREN          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! DOLLAR          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! THIS            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! NULL            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! TRUE            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! FALSE           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! INUMBER         [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! DNUMBER         [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! LIT_CHAR        [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! NEW             [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! DELETE          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! CAST            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! FUNCTION        [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! MIXIN           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! IMPORT          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! LIT_STR         [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! BOOL            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! SHORT           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! USHORT          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! INT             [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! UINT            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! LONG            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! ULONG           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! CHAR            [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! FLOAT           [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! TYPEOF          [ reduce using rule 116 (declarationsAndStatements -> declarationOrStatement .) ]
  ! ALIAS           [ reduce using rule 407 (empty -> .) ]
  ! ENUM            [ reduce using rule 407 (empty -> .) ]
  ! CLASS           [ reduce using rule 407 (empty -> .) ]
  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! TILDE           [ reduce using rule 407 (empty -> .) ]
  ! TYPEDEF         [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! UNION           [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    declarationsAndStatements      shift and go to state 243
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 113
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 114

    (316) statementNoCaseNoDefault -> returnStatement .

    RBRACE          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    PRIVATE         reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    PROTECTED       reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    PUBLIC          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    STATIC          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    EXTERN          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    FINAL           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    AUTO            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    CONST           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    IMMUTABLE       reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    CASE            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    DEFAULT         reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    IDENTIFIER      reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    LBRACE          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    IF              reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    WHILE           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    DO              reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    FOR             reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    FOREACH         reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    FOREACH_REVERSE reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    SWITCH          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    CONTINUE        reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    BREAK           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    RETURN          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    GOTO            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    WITH            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    AMPERSAND       reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    EXCLAMATION     reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    TIMES           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    PLUS            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    MINUS           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    DOT             reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    PLUS_PLUS       reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    ELLIPSIS        reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    LBRACKET        reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    RANGE           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    LPAREN          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    DOLLAR          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    THIS            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    NULL            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    TRUE            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    FALSE           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    INUMBER         reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    DNUMBER         reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    LIT_CHAR        reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    NEW             reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    DELETE          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    CAST            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    FUNCTION        reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    MIXIN           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    IMPORT          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    LIT_STR         reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    BOOL            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    SHORT           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    USHORT          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    INT             reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    UINT            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    LONG            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    ULONG           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    CHAR            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    FLOAT           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    TYPEOF          reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    ALIAS           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    ENUM            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    CLASS           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    TILDE           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    TYPEDEF         reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    UNION           reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    SEMICOLON       reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)
    ELSE            reduce using rule 316 (statementNoCaseNoDefault -> returnStatement .)


state 115

    (319) statementNoCaseNoDefault -> expressionStatement .

    RBRACE          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    PRIVATE         reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    PROTECTED       reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    PUBLIC          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    STATIC          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    EXTERN          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    FINAL           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    AUTO            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    CONST           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    IMMUTABLE       reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    CASE            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    DEFAULT         reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    IDENTIFIER      reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    LBRACE          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    IF              reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    WHILE           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    DO              reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    FOR             reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    FOREACH         reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    FOREACH_REVERSE reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    SWITCH          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    CONTINUE        reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    BREAK           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    RETURN          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    GOTO            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    WITH            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    AMPERSAND       reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    EXCLAMATION     reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    TIMES           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    PLUS            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    MINUS           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    DOT             reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    PLUS_PLUS       reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    ELLIPSIS        reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    LBRACKET        reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    RANGE           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    LPAREN          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    DOLLAR          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    THIS            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    NULL            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    TRUE            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    FALSE           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    INUMBER         reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    DNUMBER         reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    LIT_CHAR        reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    NEW             reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    DELETE          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    CAST            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    FUNCTION        reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    MIXIN           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    IMPORT          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    LIT_STR         reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    BOOL            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    SHORT           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    USHORT          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    INT             reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    UINT            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    LONG            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    ULONG           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    CHAR            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    FLOAT           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    TYPEOF          reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    ALIAS           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    ENUM            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    CLASS           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    TILDE           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    TYPEDEF         reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    UNION           reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    SEMICOLON       reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)
    ELSE            reduce using rule 319 (statementNoCaseNoDefault -> expressionStatement .)


state 116

    (322) statement -> caseRangeStatement .

    RBRACE          reduce using rule 322 (statement -> caseRangeStatement .)
    PRIVATE         reduce using rule 322 (statement -> caseRangeStatement .)
    PROTECTED       reduce using rule 322 (statement -> caseRangeStatement .)
    PUBLIC          reduce using rule 322 (statement -> caseRangeStatement .)
    STATIC          reduce using rule 322 (statement -> caseRangeStatement .)
    EXTERN          reduce using rule 322 (statement -> caseRangeStatement .)
    FINAL           reduce using rule 322 (statement -> caseRangeStatement .)
    AUTO            reduce using rule 322 (statement -> caseRangeStatement .)
    CONST           reduce using rule 322 (statement -> caseRangeStatement .)
    IMMUTABLE       reduce using rule 322 (statement -> caseRangeStatement .)
    CASE            reduce using rule 322 (statement -> caseRangeStatement .)
    DEFAULT         reduce using rule 322 (statement -> caseRangeStatement .)
    IDENTIFIER      reduce using rule 322 (statement -> caseRangeStatement .)
    LBRACE          reduce using rule 322 (statement -> caseRangeStatement .)
    IF              reduce using rule 322 (statement -> caseRangeStatement .)
    WHILE           reduce using rule 322 (statement -> caseRangeStatement .)
    DO              reduce using rule 322 (statement -> caseRangeStatement .)
    FOR             reduce using rule 322 (statement -> caseRangeStatement .)
    FOREACH         reduce using rule 322 (statement -> caseRangeStatement .)
    FOREACH_REVERSE reduce using rule 322 (statement -> caseRangeStatement .)
    SWITCH          reduce using rule 322 (statement -> caseRangeStatement .)
    CONTINUE        reduce using rule 322 (statement -> caseRangeStatement .)
    BREAK           reduce using rule 322 (statement -> caseRangeStatement .)
    RETURN          reduce using rule 322 (statement -> caseRangeStatement .)
    GOTO            reduce using rule 322 (statement -> caseRangeStatement .)
    WITH            reduce using rule 322 (statement -> caseRangeStatement .)
    AMPERSAND       reduce using rule 322 (statement -> caseRangeStatement .)
    EXCLAMATION     reduce using rule 322 (statement -> caseRangeStatement .)
    TIMES           reduce using rule 322 (statement -> caseRangeStatement .)
    PLUS            reduce using rule 322 (statement -> caseRangeStatement .)
    MINUS           reduce using rule 322 (statement -> caseRangeStatement .)
    DOT             reduce using rule 322 (statement -> caseRangeStatement .)
    PLUS_PLUS       reduce using rule 322 (statement -> caseRangeStatement .)
    ELLIPSIS        reduce using rule 322 (statement -> caseRangeStatement .)
    LBRACKET        reduce using rule 322 (statement -> caseRangeStatement .)
    RANGE           reduce using rule 322 (statement -> caseRangeStatement .)
    LPAREN          reduce using rule 322 (statement -> caseRangeStatement .)
    DOLLAR          reduce using rule 322 (statement -> caseRangeStatement .)
    THIS            reduce using rule 322 (statement -> caseRangeStatement .)
    NULL            reduce using rule 322 (statement -> caseRangeStatement .)
    TRUE            reduce using rule 322 (statement -> caseRangeStatement .)
    FALSE           reduce using rule 322 (statement -> caseRangeStatement .)
    INUMBER         reduce using rule 322 (statement -> caseRangeStatement .)
    DNUMBER         reduce using rule 322 (statement -> caseRangeStatement .)
    LIT_CHAR        reduce using rule 322 (statement -> caseRangeStatement .)
    NEW             reduce using rule 322 (statement -> caseRangeStatement .)
    DELETE          reduce using rule 322 (statement -> caseRangeStatement .)
    CAST            reduce using rule 322 (statement -> caseRangeStatement .)
    FUNCTION        reduce using rule 322 (statement -> caseRangeStatement .)
    MIXIN           reduce using rule 322 (statement -> caseRangeStatement .)
    IMPORT          reduce using rule 322 (statement -> caseRangeStatement .)
    LIT_STR         reduce using rule 322 (statement -> caseRangeStatement .)
    BOOL            reduce using rule 322 (statement -> caseRangeStatement .)
    SHORT           reduce using rule 322 (statement -> caseRangeStatement .)
    USHORT          reduce using rule 322 (statement -> caseRangeStatement .)
    INT             reduce using rule 322 (statement -> caseRangeStatement .)
    UINT            reduce using rule 322 (statement -> caseRangeStatement .)
    LONG            reduce using rule 322 (statement -> caseRangeStatement .)
    ULONG           reduce using rule 322 (statement -> caseRangeStatement .)
    CHAR            reduce using rule 322 (statement -> caseRangeStatement .)
    FLOAT           reduce using rule 322 (statement -> caseRangeStatement .)
    TYPEOF          reduce using rule 322 (statement -> caseRangeStatement .)
    ALIAS           reduce using rule 322 (statement -> caseRangeStatement .)
    ENUM            reduce using rule 322 (statement -> caseRangeStatement .)
    CLASS           reduce using rule 322 (statement -> caseRangeStatement .)
    TILDE           reduce using rule 322 (statement -> caseRangeStatement .)
    TYPEDEF         reduce using rule 322 (statement -> caseRangeStatement .)
    UNION           reduce using rule 322 (statement -> caseRangeStatement .)
    SEMICOLON       reduce using rule 322 (statement -> caseRangeStatement .)
    ELSE            reduce using rule 322 (statement -> caseRangeStatement .)


state 117

    (299) returnStatement -> RETURN . expression SEMICOLON
    (300) returnStatement -> RETURN . SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 245
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 244

state 118

    (314) statementNoCaseNoDefault -> continueStatement .

    RBRACE          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    PRIVATE         reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    PROTECTED       reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    PUBLIC          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    STATIC          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    EXTERN          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    FINAL           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    AUTO            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    CONST           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    IMMUTABLE       reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    CASE            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    DEFAULT         reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    IDENTIFIER      reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    LBRACE          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    IF              reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    WHILE           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    DO              reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    FOR             reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    FOREACH         reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    FOREACH_REVERSE reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    SWITCH          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    CONTINUE        reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    BREAK           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    RETURN          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    GOTO            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    WITH            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    AMPERSAND       reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    EXCLAMATION     reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    TIMES           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    PLUS            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    MINUS           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    DOT             reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    PLUS_PLUS       reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    ELLIPSIS        reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    LBRACKET        reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    RANGE           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    LPAREN          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    DOLLAR          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    THIS            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    NULL            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    TRUE            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    FALSE           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    INUMBER         reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    DNUMBER         reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    LIT_CHAR        reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    NEW             reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    DELETE          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    CAST            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    FUNCTION        reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    MIXIN           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    IMPORT          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    LIT_STR         reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    BOOL            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    SHORT           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    USHORT          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    INT             reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    UINT            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    LONG            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    ULONG           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    CHAR            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    FLOAT           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    TYPEOF          reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    ALIAS           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    ENUM            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    CLASS           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    TILDE           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    TYPEDEF         reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    UNION           reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    SEMICOLON       reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)
    ELSE            reduce using rule 314 (statementNoCaseNoDefault -> continueStatement .)


state 119

    (48) attribute -> STATIC .

    PRIVATE         reduce using rule 48 (attribute -> STATIC .)
    PROTECTED       reduce using rule 48 (attribute -> STATIC .)
    PUBLIC          reduce using rule 48 (attribute -> STATIC .)
    STATIC          reduce using rule 48 (attribute -> STATIC .)
    EXTERN          reduce using rule 48 (attribute -> STATIC .)
    FINAL           reduce using rule 48 (attribute -> STATIC .)
    AUTO            reduce using rule 48 (attribute -> STATIC .)
    CONST           reduce using rule 48 (attribute -> STATIC .)
    IMMUTABLE       reduce using rule 48 (attribute -> STATIC .)
    LBRACE          reduce using rule 48 (attribute -> STATIC .)
    ALIAS           reduce using rule 48 (attribute -> STATIC .)
    ENUM            reduce using rule 48 (attribute -> STATIC .)
    CLASS           reduce using rule 48 (attribute -> STATIC .)
    THIS            reduce using rule 48 (attribute -> STATIC .)
    TILDE           reduce using rule 48 (attribute -> STATIC .)
    TYPEDEF         reduce using rule 48 (attribute -> STATIC .)
    IMPORT          reduce using rule 48 (attribute -> STATIC .)
    UNION           reduce using rule 48 (attribute -> STATIC .)
    MIXIN           reduce using rule 48 (attribute -> STATIC .)


state 120

    (50) attribute -> FINAL .

    PRIVATE         reduce using rule 50 (attribute -> FINAL .)
    PROTECTED       reduce using rule 50 (attribute -> FINAL .)
    PUBLIC          reduce using rule 50 (attribute -> FINAL .)
    STATIC          reduce using rule 50 (attribute -> FINAL .)
    EXTERN          reduce using rule 50 (attribute -> FINAL .)
    FINAL           reduce using rule 50 (attribute -> FINAL .)
    AUTO            reduce using rule 50 (attribute -> FINAL .)
    CONST           reduce using rule 50 (attribute -> FINAL .)
    IMMUTABLE       reduce using rule 50 (attribute -> FINAL .)
    LBRACE          reduce using rule 50 (attribute -> FINAL .)
    ALIAS           reduce using rule 50 (attribute -> FINAL .)
    ENUM            reduce using rule 50 (attribute -> FINAL .)
    CLASS           reduce using rule 50 (attribute -> FINAL .)
    THIS            reduce using rule 50 (attribute -> FINAL .)
    TILDE           reduce using rule 50 (attribute -> FINAL .)
    TYPEDEF         reduce using rule 50 (attribute -> FINAL .)
    IMPORT          reduce using rule 50 (attribute -> FINAL .)
    UNION           reduce using rule 50 (attribute -> FINAL .)
    MIXIN           reduce using rule 50 (attribute -> FINAL .)


state 121

    (321) statement -> caseStatement .

    RBRACE          reduce using rule 321 (statement -> caseStatement .)
    PRIVATE         reduce using rule 321 (statement -> caseStatement .)
    PROTECTED       reduce using rule 321 (statement -> caseStatement .)
    PUBLIC          reduce using rule 321 (statement -> caseStatement .)
    STATIC          reduce using rule 321 (statement -> caseStatement .)
    EXTERN          reduce using rule 321 (statement -> caseStatement .)
    FINAL           reduce using rule 321 (statement -> caseStatement .)
    AUTO            reduce using rule 321 (statement -> caseStatement .)
    CONST           reduce using rule 321 (statement -> caseStatement .)
    IMMUTABLE       reduce using rule 321 (statement -> caseStatement .)
    CASE            reduce using rule 321 (statement -> caseStatement .)
    DEFAULT         reduce using rule 321 (statement -> caseStatement .)
    IDENTIFIER      reduce using rule 321 (statement -> caseStatement .)
    LBRACE          reduce using rule 321 (statement -> caseStatement .)
    IF              reduce using rule 321 (statement -> caseStatement .)
    WHILE           reduce using rule 321 (statement -> caseStatement .)
    DO              reduce using rule 321 (statement -> caseStatement .)
    FOR             reduce using rule 321 (statement -> caseStatement .)
    FOREACH         reduce using rule 321 (statement -> caseStatement .)
    FOREACH_REVERSE reduce using rule 321 (statement -> caseStatement .)
    SWITCH          reduce using rule 321 (statement -> caseStatement .)
    CONTINUE        reduce using rule 321 (statement -> caseStatement .)
    BREAK           reduce using rule 321 (statement -> caseStatement .)
    RETURN          reduce using rule 321 (statement -> caseStatement .)
    GOTO            reduce using rule 321 (statement -> caseStatement .)
    WITH            reduce using rule 321 (statement -> caseStatement .)
    AMPERSAND       reduce using rule 321 (statement -> caseStatement .)
    EXCLAMATION     reduce using rule 321 (statement -> caseStatement .)
    TIMES           reduce using rule 321 (statement -> caseStatement .)
    PLUS            reduce using rule 321 (statement -> caseStatement .)
    MINUS           reduce using rule 321 (statement -> caseStatement .)
    DOT             reduce using rule 321 (statement -> caseStatement .)
    PLUS_PLUS       reduce using rule 321 (statement -> caseStatement .)
    ELLIPSIS        reduce using rule 321 (statement -> caseStatement .)
    LBRACKET        reduce using rule 321 (statement -> caseStatement .)
    RANGE           reduce using rule 321 (statement -> caseStatement .)
    LPAREN          reduce using rule 321 (statement -> caseStatement .)
    DOLLAR          reduce using rule 321 (statement -> caseStatement .)
    THIS            reduce using rule 321 (statement -> caseStatement .)
    NULL            reduce using rule 321 (statement -> caseStatement .)
    TRUE            reduce using rule 321 (statement -> caseStatement .)
    FALSE           reduce using rule 321 (statement -> caseStatement .)
    INUMBER         reduce using rule 321 (statement -> caseStatement .)
    DNUMBER         reduce using rule 321 (statement -> caseStatement .)
    LIT_CHAR        reduce using rule 321 (statement -> caseStatement .)
    NEW             reduce using rule 321 (statement -> caseStatement .)
    DELETE          reduce using rule 321 (statement -> caseStatement .)
    CAST            reduce using rule 321 (statement -> caseStatement .)
    FUNCTION        reduce using rule 321 (statement -> caseStatement .)
    MIXIN           reduce using rule 321 (statement -> caseStatement .)
    IMPORT          reduce using rule 321 (statement -> caseStatement .)
    LIT_STR         reduce using rule 321 (statement -> caseStatement .)
    BOOL            reduce using rule 321 (statement -> caseStatement .)
    SHORT           reduce using rule 321 (statement -> caseStatement .)
    USHORT          reduce using rule 321 (statement -> caseStatement .)
    INT             reduce using rule 321 (statement -> caseStatement .)
    UINT            reduce using rule 321 (statement -> caseStatement .)
    LONG            reduce using rule 321 (statement -> caseStatement .)
    ULONG           reduce using rule 321 (statement -> caseStatement .)
    CHAR            reduce using rule 321 (statement -> caseStatement .)
    FLOAT           reduce using rule 321 (statement -> caseStatement .)
    TYPEOF          reduce using rule 321 (statement -> caseStatement .)
    ALIAS           reduce using rule 321 (statement -> caseStatement .)
    ENUM            reduce using rule 321 (statement -> caseStatement .)
    CLASS           reduce using rule 321 (statement -> caseStatement .)
    TILDE           reduce using rule 321 (statement -> caseStatement .)
    TYPEDEF         reduce using rule 321 (statement -> caseStatement .)
    UNION           reduce using rule 321 (statement -> caseStatement .)
    SEMICOLON       reduce using rule 321 (statement -> caseStatement .)
    ELSE            reduce using rule 321 (statement -> caseStatement .)


state 122

    (158) foreachStatement -> FOREACH_REVERSE . LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> FOREACH_REVERSE . LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement

    LPAREN          shift and go to state 246


state 123

    (308) statementNoCaseNoDefault -> ifStatement .

    RBRACE          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    PRIVATE         reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    PROTECTED       reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    PUBLIC          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    STATIC          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    EXTERN          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    FINAL           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    AUTO            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    CONST           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    IMMUTABLE       reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    CASE            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    DEFAULT         reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    IDENTIFIER      reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    LBRACE          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    IF              reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    WHILE           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    DO              reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    FOR             reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    FOREACH         reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    FOREACH_REVERSE reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    SWITCH          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    CONTINUE        reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    BREAK           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    RETURN          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    GOTO            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    WITH            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    AMPERSAND       reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    EXCLAMATION     reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    TIMES           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    PLUS            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    MINUS           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    DOT             reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    PLUS_PLUS       reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    ELLIPSIS        reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    LBRACKET        reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    RANGE           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    LPAREN          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    DOLLAR          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    THIS            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    NULL            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    TRUE            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    FALSE           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    INUMBER         reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    DNUMBER         reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    LIT_CHAR        reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    NEW             reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    DELETE          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    CAST            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    FUNCTION        reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    MIXIN           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    IMPORT          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    LIT_STR         reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    BOOL            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    SHORT           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    USHORT          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    INT             reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    UINT            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    LONG            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    ULONG           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    CHAR            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    FLOAT           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    TYPEOF          reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    ALIAS           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    ENUM            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    CLASS           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    TILDE           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    TYPEDEF         reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    UNION           reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    SEMICOLON       reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)
    ELSE            reduce using rule 308 (statementNoCaseNoDefault -> ifStatement .)


state 124

    (148) forStatement -> FOR . LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> FOR . LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> FOR . LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> FOR . LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> FOR . LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> FOR . LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> FOR . LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> FOR . LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement

    LPAREN          shift and go to state 247


state 125

    (318) statementNoCaseNoDefault -> withStatement .

    RBRACE          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    PRIVATE         reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    PROTECTED       reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    PUBLIC          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    STATIC          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    EXTERN          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    FINAL           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    AUTO            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    CONST           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    IMMUTABLE       reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    CASE            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    DEFAULT         reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    IDENTIFIER      reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    LBRACE          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    IF              reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    WHILE           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    DO              reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    FOR             reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    FOREACH         reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    FOREACH_REVERSE reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    SWITCH          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    CONTINUE        reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    BREAK           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    RETURN          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    GOTO            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    WITH            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    AMPERSAND       reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    EXCLAMATION     reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    TIMES           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    PLUS            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    MINUS           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    DOT             reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    PLUS_PLUS       reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    ELLIPSIS        reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    LBRACKET        reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    RANGE           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    LPAREN          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    DOLLAR          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    THIS            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    NULL            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    TRUE            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    FALSE           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    INUMBER         reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    DNUMBER         reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    LIT_CHAR        reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    NEW             reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    DELETE          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    CAST            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    FUNCTION        reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    MIXIN           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    IMPORT          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    LIT_STR         reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    BOOL            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    SHORT           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    USHORT          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    INT             reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    UINT            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    LONG            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    ULONG           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    CHAR            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    FLOAT           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    TYPEOF          reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    ALIAS           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    ENUM            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    CLASS           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    TILDE           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    TYPEDEF         reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    UNION           reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    SEMICOLON       reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)
    ELSE            reduce using rule 318 (statementNoCaseNoDefault -> withStatement .)


state 126

    (145) expression -> assignExpression .

    SEMICOLON       reduce using rule 145 (expression -> assignExpression .)
    COMMA           reduce using rule 145 (expression -> assignExpression .)
    RANGE           reduce using rule 145 (expression -> assignExpression .)
    RPAREN          reduce using rule 145 (expression -> assignExpression .)
    RBRACKET        reduce using rule 145 (expression -> assignExpression .)
    COLON           reduce using rule 145 (expression -> assignExpression .)
    DOT             reduce using rule 145 (expression -> assignExpression .)
    PLUS_PLUS       reduce using rule 145 (expression -> assignExpression .)
    LBRACKET        reduce using rule 145 (expression -> assignExpression .)
    CARET           reduce using rule 145 (expression -> assignExpression .)
    TIMES           reduce using rule 145 (expression -> assignExpression .)
    DIV             reduce using rule 145 (expression -> assignExpression .)
    MODULO          reduce using rule 145 (expression -> assignExpression .)
    PLUS            reduce using rule 145 (expression -> assignExpression .)
    MINUS           reduce using rule 145 (expression -> assignExpression .)
    TILDE           reduce using rule 145 (expression -> assignExpression .)
    $end            reduce using rule 145 (expression -> assignExpression .)
    LEFT_SHIFT      reduce using rule 145 (expression -> assignExpression .)
    RIGHT_SHIFT     reduce using rule 145 (expression -> assignExpression .)
    IS_EQ           reduce using rule 145 (expression -> assignExpression .)
    NOT_EQ          reduce using rule 145 (expression -> assignExpression .)
    AMPERSAND       reduce using rule 145 (expression -> assignExpression .)
    PIPE            reduce using rule 145 (expression -> assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 145 (expression -> assignExpression .)
    QUESTION        reduce using rule 145 (expression -> assignExpression .)
    DOUBLE_PIPE     reduce using rule 145 (expression -> assignExpression .)
    ASSIGN          reduce using rule 145 (expression -> assignExpression .)
    EQ_LEFT         reduce using rule 145 (expression -> assignExpression .)
    EQ_RIGHT        reduce using rule 145 (expression -> assignExpression .)
    EQ_PLUS         reduce using rule 145 (expression -> assignExpression .)
    EQ_MINUS        reduce using rule 145 (expression -> assignExpression .)
    EQ_TIMES        reduce using rule 145 (expression -> assignExpression .)
    EQ_MODULO       reduce using rule 145 (expression -> assignExpression .)
    EQ_AND_BIT      reduce using rule 145 (expression -> assignExpression .)
    EQ_DIV          reduce using rule 145 (expression -> assignExpression .)
    EQ_OR_BIT       reduce using rule 145 (expression -> assignExpression .)
    EQ_XOR_BIT      reduce using rule 145 (expression -> assignExpression .)
    LESS            reduce using rule 145 (expression -> assignExpression .)
    LESS_EQ         reduce using rule 145 (expression -> assignExpression .)
    GREATER         reduce using rule 145 (expression -> assignExpression .)
    GREATER_EQ      reduce using rule 145 (expression -> assignExpression .)
    IS_EQ_DIFF      reduce using rule 145 (expression -> assignExpression .)
    NOT_EQ_DIFF     reduce using rule 145 (expression -> assignExpression .)
    LESS_EQ_DIFF    reduce using rule 145 (expression -> assignExpression .)
    LESS_DIFF       reduce using rule 145 (expression -> assignExpression .)
    GREATER_EQ_DIFF reduce using rule 145 (expression -> assignExpression .)
    GREATER_DIFF    reduce using rule 145 (expression -> assignExpression .)
    TYPEDEF         reduce using rule 145 (expression -> assignExpression .)
    IDENTIFIER      reduce using rule 145 (expression -> assignExpression .)
    RBRACE          reduce using rule 145 (expression -> assignExpression .)
    DOUBLE_QUOTE    reduce using rule 145 (expression -> assignExpression .)
    LPAREN          reduce using rule 145 (expression -> assignExpression .)


state 127

    (306) statementNoCaseNoDefault -> labeledStatement .

    RBRACE          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    PRIVATE         reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    PROTECTED       reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    PUBLIC          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    STATIC          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    EXTERN          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    FINAL           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    AUTO            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    CONST           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    IMMUTABLE       reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    CASE            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    DEFAULT         reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    IDENTIFIER      reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    LBRACE          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    IF              reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    WHILE           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    DO              reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    FOR             reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    FOREACH         reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    FOREACH_REVERSE reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    SWITCH          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    CONTINUE        reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    BREAK           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    RETURN          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    GOTO            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    WITH            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    AMPERSAND       reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    EXCLAMATION     reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    TIMES           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    PLUS            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    MINUS           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    DOT             reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    PLUS_PLUS       reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    ELLIPSIS        reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    LBRACKET        reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    RANGE           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    LPAREN          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    DOLLAR          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    THIS            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    NULL            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    TRUE            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    FALSE           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    INUMBER         reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    DNUMBER         reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    LIT_CHAR        reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    NEW             reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    DELETE          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    CAST            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    FUNCTION        reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    MIXIN           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    IMPORT          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    LIT_STR         reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    BOOL            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    SHORT           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    USHORT          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    INT             reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    UINT            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    LONG            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    ULONG           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    CHAR            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    FLOAT           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    TYPEOF          reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    ALIAS           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    ENUM            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    CLASS           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    TILDE           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    TYPEDEF         reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    UNION           reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    SEMICOLON       reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)
    ELSE            reduce using rule 306 (statementNoCaseNoDefault -> labeledStatement .)


state 128

    (95) continueStatement -> CONTINUE . SEMICOLON
    (96) continueStatement -> CONTINUE . IDENTIFIER SEMICOLON

    SEMICOLON       shift and go to state 249
    IDENTIFIER      shift and go to state 248


state 129

    (147) expressionStatement -> expression . SEMICOLON
    (146) expression -> expression . COMMA assignExpression

    SEMICOLON       shift and go to state 251
    COMMA           shift and go to state 250


state 130

    (97) declaration -> multipleattributes . declaration2
    (103) declaration2 -> . aliasDeclaration
    (104) declaration2 -> . aliasThisDeclaration
    (105) declaration2 -> . anonymousEnumDeclaration
    (106) declaration2 -> . attributeDeclaration
    (107) declaration2 -> . classDeclaration
    (108) declaration2 -> . constructor
    (109) declaration2 -> . destructor
    (110) declaration2 -> . enumDeclaration
    (111) declaration2 -> . functionDeclaration
    (112) declaration2 -> . importDeclaration
    (113) declaration2 -> . mixinDeclaration
    (114) declaration2 -> . unionDeclaration
    (115) declaration2 -> . variableDeclaration
    (5) aliasDeclaration -> . ALIAS aliasInitializer comma_aliasInitializer SEMICOLON
    (6) aliasDeclaration -> . ALIAS multiplestorageClass type identifierList SEMICOLON
    (13) aliasThisDeclaration -> . ALIAS IDENTIFIER THIS SEMICOLON
    (134) anonymousEnumDeclaration -> . ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
    (135) anonymousEnumDeclaration -> . ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
    (54) attributeDeclaration -> . attribute COLON
    (82) classDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (83) classDeclaration -> . CLASS IDENTIFIER COLON baseClassList structBody
    (84) classDeclaration -> . CLASS IDENTIFIER structBody
    (89) constructor -> . THIS parameters multiple_memberFunctionAttribute functionBody
    (90) constructor -> . THIS parameters multiple_memberFunctionAttribute SEMICOLON
    (91) constructor -> . THIS parameters multiple_memberFunctionAttribute constraint functionBody
    (92) constructor -> . THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON
    (124) destructor -> . TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody
    (125) destructor -> . TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON
    (138) enumDeclaration -> . ENUM IDENTIFIER SEMICOLON
    (139) enumDeclaration -> . ENUM IDENTIFIER COLON TYPEDEF SEMICOLON
    (140) enumDeclaration -> . ENUM IDENTIFIER COLON TYPEDEF enumBody
    (169) functionDeclaration -> . storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (170) functionDeclaration -> . storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (171) functionDeclaration -> . TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (172) functionDeclaration -> . TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (197) importDeclaration -> . IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON
    (198) importDeclaration -> . IMPORT singleImport comma_singleImport SEMICOLON
    (199) importDeclaration -> . IMPORT importBindings SEMICOLON
    (215) mixinDeclaration -> . mixinExpression SEMICOLON
    (395) unionDeclaration -> . UNION IDENTIFIER structBody
    (396) unionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (397) unionDeclaration -> . UNION structBody
    (400) variableDeclaration -> . multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON
    (401) variableDeclaration -> . multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON
    (402) variableDeclaration -> . autoDeclaration
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (324) storageClass -> . typeConstructor
    (325) storageClass -> . AUTO
    (326) storageClass -> . ENUM
    (327) storageClass -> . EXTERN
    (328) storageClass -> . FINAL
    (329) storageClass -> . STATIC
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (9) multiplestorageClass -> . storageClass multiplestorageClass
    (10) multiplestorageClass -> . empty
    (55) autoDeclaration -> . storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (407) empty -> .

  ! shift/reduce conflict for TYPEDEF resolved as shift
    ALIAS           shift and go to state 276
    ENUM            shift and go to state 270
    CLASS           shift and go to state 266
    THIS            shift and go to state 280
    TILDE           shift and go to state 264
    TYPEDEF         shift and go to state 269
    IMPORT          shift and go to state 265
    UNION           shift and go to state 273
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 257
    EXTERN          shift and go to state 255
    FINAL           shift and go to state 268
    AUTO            shift and go to state 279
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    MIXIN           shift and go to state 29

  ! TYPEDEF         [ reduce using rule 407 (empty -> .) ]

    importDeclaration              shift and go to state 252
    attribute                      shift and go to state 253
    aliasThisDeclaration           shift and go to state 254
    aliasDeclaration               shift and go to state 258
    mixinDeclaration               shift and go to state 260
    attributeDeclaration           shift and go to state 261
    declaration2                   shift and go to state 262
    destructor                     shift and go to state 263
    autoDeclaration                shift and go to state 256
    empty                          shift and go to state 267
    enumDeclaration                shift and go to state 271
    functionDeclaration            shift and go to state 272
    multiplestorageClass           shift and go to state 274
    unionDeclaration               shift and go to state 275
    classDeclaration               shift and go to state 277
    mixinExpression                shift and go to state 278
    constructor                    shift and go to state 281
    storageClass                   shift and go to state 282
    typeConstructor                shift and go to state 259
    anonymousEnumDeclaration       shift and go to state 283
    variableDeclaration            shift and go to state 284

state 131

    (126) doStatement -> DO . statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

    forStatement                   shift and go to state 103
    continueStatement              shift and go to state 118
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    newExpression                  shift and go to state 20
    statementNoCaseNoDefault       shift and go to state 285
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 132

    (122) defaultStatement -> DEFAULT . COLON declarationsAndStatements

    COLON           shift and go to state 286


state 133

    (403) whileStatement -> WHILE . LBRACKET expression RBRACKET declarationOrStatement

    LBRACKET        shift and go to state 287


state 134

    (49) attribute -> EXTERN .

    PRIVATE         reduce using rule 49 (attribute -> EXTERN .)
    PROTECTED       reduce using rule 49 (attribute -> EXTERN .)
    PUBLIC          reduce using rule 49 (attribute -> EXTERN .)
    STATIC          reduce using rule 49 (attribute -> EXTERN .)
    EXTERN          reduce using rule 49 (attribute -> EXTERN .)
    FINAL           reduce using rule 49 (attribute -> EXTERN .)
    AUTO            reduce using rule 49 (attribute -> EXTERN .)
    CONST           reduce using rule 49 (attribute -> EXTERN .)
    IMMUTABLE       reduce using rule 49 (attribute -> EXTERN .)
    LBRACE          reduce using rule 49 (attribute -> EXTERN .)
    ALIAS           reduce using rule 49 (attribute -> EXTERN .)
    ENUM            reduce using rule 49 (attribute -> EXTERN .)
    CLASS           reduce using rule 49 (attribute -> EXTERN .)
    THIS            reduce using rule 49 (attribute -> EXTERN .)
    TILDE           reduce using rule 49 (attribute -> EXTERN .)
    TYPEDEF         reduce using rule 49 (attribute -> EXTERN .)
    IMPORT          reduce using rule 49 (attribute -> EXTERN .)
    UNION           reduce using rule 49 (attribute -> EXTERN .)
    MIXIN           reduce using rule 49 (attribute -> EXTERN .)


state 135

    (76) caseStatement -> CASE . argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> CASE . assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (18) argumentList -> . assignExpression
    (19) argumentList -> . argumentList comma_assign
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    argumentList                   shift and go to state 289
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    indexExpression                shift and go to state 22
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type2                          shift and go to state 53
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 288
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    typeConstructor                shift and go to state 15
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49

state 136

    (310) statementNoCaseNoDefault -> doStatement .

    RBRACE          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    PRIVATE         reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    PROTECTED       reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    PUBLIC          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    STATIC          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    EXTERN          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    FINAL           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    AUTO            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    CONST           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    IMMUTABLE       reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    CASE            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    DEFAULT         reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    IDENTIFIER      reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    LBRACE          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    IF              reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    WHILE           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    DO              reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    FOR             reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    FOREACH         reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    FOREACH_REVERSE reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    SWITCH          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    CONTINUE        reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    BREAK           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    RETURN          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    GOTO            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    WITH            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    AMPERSAND       reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    EXCLAMATION     reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    TIMES           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    PLUS            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    MINUS           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    DOT             reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    PLUS_PLUS       reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    ELLIPSIS        reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    LBRACKET        reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    RANGE           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    LPAREN          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    DOLLAR          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    THIS            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    NULL            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    TRUE            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    FALSE           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    INUMBER         reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    DNUMBER         reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    LIT_CHAR        reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    NEW             reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    DELETE          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    CAST            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    FUNCTION        reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    MIXIN           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    IMPORT          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    LIT_STR         reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    BOOL            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    SHORT           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    USHORT          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    INT             reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    UINT            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    LONG            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    ULONG           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    CHAR            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    FLOAT           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    TYPEOF          reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    ALIAS           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    ENUM            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    CLASS           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    TILDE           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    TYPEDEF         reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    UNION           reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    SEMICOLON       reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)
    ELSE            reduce using rule 310 (statementNoCaseNoDefault -> doStatement .)


state 137

    (333) switchStatement -> SWITCH . LBRACKET expression RBRACKET statement

    LBRACKET        shift and go to state 290


state 138

    (119) declarationOrStatement -> statement .

    RBRACE          reduce using rule 119 (declarationOrStatement -> statement .)
    PRIVATE         reduce using rule 119 (declarationOrStatement -> statement .)
    PROTECTED       reduce using rule 119 (declarationOrStatement -> statement .)
    PUBLIC          reduce using rule 119 (declarationOrStatement -> statement .)
    STATIC          reduce using rule 119 (declarationOrStatement -> statement .)
    EXTERN          reduce using rule 119 (declarationOrStatement -> statement .)
    FINAL           reduce using rule 119 (declarationOrStatement -> statement .)
    AUTO            reduce using rule 119 (declarationOrStatement -> statement .)
    CONST           reduce using rule 119 (declarationOrStatement -> statement .)
    IMMUTABLE       reduce using rule 119 (declarationOrStatement -> statement .)
    CASE            reduce using rule 119 (declarationOrStatement -> statement .)
    DEFAULT         reduce using rule 119 (declarationOrStatement -> statement .)
    IDENTIFIER      reduce using rule 119 (declarationOrStatement -> statement .)
    LBRACE          reduce using rule 119 (declarationOrStatement -> statement .)
    IF              reduce using rule 119 (declarationOrStatement -> statement .)
    WHILE           reduce using rule 119 (declarationOrStatement -> statement .)
    DO              reduce using rule 119 (declarationOrStatement -> statement .)
    FOR             reduce using rule 119 (declarationOrStatement -> statement .)
    FOREACH         reduce using rule 119 (declarationOrStatement -> statement .)
    FOREACH_REVERSE reduce using rule 119 (declarationOrStatement -> statement .)
    SWITCH          reduce using rule 119 (declarationOrStatement -> statement .)
    CONTINUE        reduce using rule 119 (declarationOrStatement -> statement .)
    BREAK           reduce using rule 119 (declarationOrStatement -> statement .)
    RETURN          reduce using rule 119 (declarationOrStatement -> statement .)
    GOTO            reduce using rule 119 (declarationOrStatement -> statement .)
    WITH            reduce using rule 119 (declarationOrStatement -> statement .)
    AMPERSAND       reduce using rule 119 (declarationOrStatement -> statement .)
    EXCLAMATION     reduce using rule 119 (declarationOrStatement -> statement .)
    TIMES           reduce using rule 119 (declarationOrStatement -> statement .)
    PLUS            reduce using rule 119 (declarationOrStatement -> statement .)
    MINUS           reduce using rule 119 (declarationOrStatement -> statement .)
    DOT             reduce using rule 119 (declarationOrStatement -> statement .)
    PLUS_PLUS       reduce using rule 119 (declarationOrStatement -> statement .)
    ELLIPSIS        reduce using rule 119 (declarationOrStatement -> statement .)
    LBRACKET        reduce using rule 119 (declarationOrStatement -> statement .)
    RANGE           reduce using rule 119 (declarationOrStatement -> statement .)
    LPAREN          reduce using rule 119 (declarationOrStatement -> statement .)
    DOLLAR          reduce using rule 119 (declarationOrStatement -> statement .)
    THIS            reduce using rule 119 (declarationOrStatement -> statement .)
    NULL            reduce using rule 119 (declarationOrStatement -> statement .)
    TRUE            reduce using rule 119 (declarationOrStatement -> statement .)
    FALSE           reduce using rule 119 (declarationOrStatement -> statement .)
    INUMBER         reduce using rule 119 (declarationOrStatement -> statement .)
    DNUMBER         reduce using rule 119 (declarationOrStatement -> statement .)
    LIT_CHAR        reduce using rule 119 (declarationOrStatement -> statement .)
    NEW             reduce using rule 119 (declarationOrStatement -> statement .)
    DELETE          reduce using rule 119 (declarationOrStatement -> statement .)
    CAST            reduce using rule 119 (declarationOrStatement -> statement .)
    FUNCTION        reduce using rule 119 (declarationOrStatement -> statement .)
    MIXIN           reduce using rule 119 (declarationOrStatement -> statement .)
    IMPORT          reduce using rule 119 (declarationOrStatement -> statement .)
    LIT_STR         reduce using rule 119 (declarationOrStatement -> statement .)
    BOOL            reduce using rule 119 (declarationOrStatement -> statement .)
    SHORT           reduce using rule 119 (declarationOrStatement -> statement .)
    USHORT          reduce using rule 119 (declarationOrStatement -> statement .)
    INT             reduce using rule 119 (declarationOrStatement -> statement .)
    UINT            reduce using rule 119 (declarationOrStatement -> statement .)
    LONG            reduce using rule 119 (declarationOrStatement -> statement .)
    ULONG           reduce using rule 119 (declarationOrStatement -> statement .)
    CHAR            reduce using rule 119 (declarationOrStatement -> statement .)
    FLOAT           reduce using rule 119 (declarationOrStatement -> statement .)
    TYPEOF          reduce using rule 119 (declarationOrStatement -> statement .)
    ALIAS           reduce using rule 119 (declarationOrStatement -> statement .)
    ENUM            reduce using rule 119 (declarationOrStatement -> statement .)
    CLASS           reduce using rule 119 (declarationOrStatement -> statement .)
    TILDE           reduce using rule 119 (declarationOrStatement -> statement .)
    TYPEDEF         reduce using rule 119 (declarationOrStatement -> statement .)
    UNION           reduce using rule 119 (declarationOrStatement -> statement .)
    SEMICOLON       reduce using rule 119 (declarationOrStatement -> statement .)
    ELSE            reduce using rule 119 (declarationOrStatement -> statement .)


state 139

    (210) labeledStatement -> IDENTIFIER . COLON
    (211) labeledStatement -> IDENTIFIER . COLON declarationOrStatement
    (187) identifierOrTemplateInstance -> IDENTIFIER .
    (176) functionLiteralExpression -> IDENTIFIER . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    COLON           shift and go to state 291
    CARET           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    SEMICOLON       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DELEGATE        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! AMPERSAND       [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! FUNCTION        [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 165
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 140

    (102) multipleattributes -> empty .

    ALIAS           reduce using rule 102 (multipleattributes -> empty .)
    ENUM            reduce using rule 102 (multipleattributes -> empty .)
    CLASS           reduce using rule 102 (multipleattributes -> empty .)
    THIS            reduce using rule 102 (multipleattributes -> empty .)
    TILDE           reduce using rule 102 (multipleattributes -> empty .)
    TYPEDEF         reduce using rule 102 (multipleattributes -> empty .)
    IMPORT          reduce using rule 102 (multipleattributes -> empty .)
    UNION           reduce using rule 102 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 102 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 102 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 102 (multipleattributes -> empty .)
    STATIC          reduce using rule 102 (multipleattributes -> empty .)
    EXTERN          reduce using rule 102 (multipleattributes -> empty .)
    FINAL           reduce using rule 102 (multipleattributes -> empty .)
    AUTO            reduce using rule 102 (multipleattributes -> empty .)
    CONST           reduce using rule 102 (multipleattributes -> empty .)
    IMMUTABLE       reduce using rule 102 (multipleattributes -> empty .)
    MIXIN           reduce using rule 102 (multipleattributes -> empty .)
    LBRACE          reduce using rule 102 (multipleattributes -> empty .)


state 141

    (118) declarationOrStatement -> declaration .

    RBRACE          reduce using rule 118 (declarationOrStatement -> declaration .)
    PRIVATE         reduce using rule 118 (declarationOrStatement -> declaration .)
    PROTECTED       reduce using rule 118 (declarationOrStatement -> declaration .)
    PUBLIC          reduce using rule 118 (declarationOrStatement -> declaration .)
    STATIC          reduce using rule 118 (declarationOrStatement -> declaration .)
    EXTERN          reduce using rule 118 (declarationOrStatement -> declaration .)
    FINAL           reduce using rule 118 (declarationOrStatement -> declaration .)
    AUTO            reduce using rule 118 (declarationOrStatement -> declaration .)
    CONST           reduce using rule 118 (declarationOrStatement -> declaration .)
    IMMUTABLE       reduce using rule 118 (declarationOrStatement -> declaration .)
    CASE            reduce using rule 118 (declarationOrStatement -> declaration .)
    DEFAULT         reduce using rule 118 (declarationOrStatement -> declaration .)
    IDENTIFIER      reduce using rule 118 (declarationOrStatement -> declaration .)
    LBRACE          reduce using rule 118 (declarationOrStatement -> declaration .)
    IF              reduce using rule 118 (declarationOrStatement -> declaration .)
    WHILE           reduce using rule 118 (declarationOrStatement -> declaration .)
    DO              reduce using rule 118 (declarationOrStatement -> declaration .)
    FOR             reduce using rule 118 (declarationOrStatement -> declaration .)
    FOREACH         reduce using rule 118 (declarationOrStatement -> declaration .)
    FOREACH_REVERSE reduce using rule 118 (declarationOrStatement -> declaration .)
    SWITCH          reduce using rule 118 (declarationOrStatement -> declaration .)
    CONTINUE        reduce using rule 118 (declarationOrStatement -> declaration .)
    BREAK           reduce using rule 118 (declarationOrStatement -> declaration .)
    RETURN          reduce using rule 118 (declarationOrStatement -> declaration .)
    GOTO            reduce using rule 118 (declarationOrStatement -> declaration .)
    WITH            reduce using rule 118 (declarationOrStatement -> declaration .)
    AMPERSAND       reduce using rule 118 (declarationOrStatement -> declaration .)
    EXCLAMATION     reduce using rule 118 (declarationOrStatement -> declaration .)
    TIMES           reduce using rule 118 (declarationOrStatement -> declaration .)
    PLUS            reduce using rule 118 (declarationOrStatement -> declaration .)
    MINUS           reduce using rule 118 (declarationOrStatement -> declaration .)
    DOT             reduce using rule 118 (declarationOrStatement -> declaration .)
    PLUS_PLUS       reduce using rule 118 (declarationOrStatement -> declaration .)
    ELLIPSIS        reduce using rule 118 (declarationOrStatement -> declaration .)
    LBRACKET        reduce using rule 118 (declarationOrStatement -> declaration .)
    RANGE           reduce using rule 118 (declarationOrStatement -> declaration .)
    LPAREN          reduce using rule 118 (declarationOrStatement -> declaration .)
    DOLLAR          reduce using rule 118 (declarationOrStatement -> declaration .)
    THIS            reduce using rule 118 (declarationOrStatement -> declaration .)
    NULL            reduce using rule 118 (declarationOrStatement -> declaration .)
    TRUE            reduce using rule 118 (declarationOrStatement -> declaration .)
    FALSE           reduce using rule 118 (declarationOrStatement -> declaration .)
    INUMBER         reduce using rule 118 (declarationOrStatement -> declaration .)
    DNUMBER         reduce using rule 118 (declarationOrStatement -> declaration .)
    LIT_CHAR        reduce using rule 118 (declarationOrStatement -> declaration .)
    NEW             reduce using rule 118 (declarationOrStatement -> declaration .)
    DELETE          reduce using rule 118 (declarationOrStatement -> declaration .)
    CAST            reduce using rule 118 (declarationOrStatement -> declaration .)
    FUNCTION        reduce using rule 118 (declarationOrStatement -> declaration .)
    MIXIN           reduce using rule 118 (declarationOrStatement -> declaration .)
    IMPORT          reduce using rule 118 (declarationOrStatement -> declaration .)
    LIT_STR         reduce using rule 118 (declarationOrStatement -> declaration .)
    BOOL            reduce using rule 118 (declarationOrStatement -> declaration .)
    SHORT           reduce using rule 118 (declarationOrStatement -> declaration .)
    USHORT          reduce using rule 118 (declarationOrStatement -> declaration .)
    INT             reduce using rule 118 (declarationOrStatement -> declaration .)
    UINT            reduce using rule 118 (declarationOrStatement -> declaration .)
    LONG            reduce using rule 118 (declarationOrStatement -> declaration .)
    ULONG           reduce using rule 118 (declarationOrStatement -> declaration .)
    CHAR            reduce using rule 118 (declarationOrStatement -> declaration .)
    FLOAT           reduce using rule 118 (declarationOrStatement -> declaration .)
    TYPEOF          reduce using rule 118 (declarationOrStatement -> declaration .)
    ALIAS           reduce using rule 118 (declarationOrStatement -> declaration .)
    ENUM            reduce using rule 118 (declarationOrStatement -> declaration .)
    CLASS           reduce using rule 118 (declarationOrStatement -> declaration .)
    TILDE           reduce using rule 118 (declarationOrStatement -> declaration .)
    TYPEDEF         reduce using rule 118 (declarationOrStatement -> declaration .)
    UNION           reduce using rule 118 (declarationOrStatement -> declaration .)
    SEMICOLON       reduce using rule 118 (declarationOrStatement -> declaration .)
    ELSE            reduce using rule 118 (declarationOrStatement -> declaration .)


state 142

    (61) breakStatement -> BREAK . SEMICOLON
    (62) breakStatement -> BREAK . IDENTIFIER SEMICOLON

    SEMICOLON       shift and go to state 293
    IDENTIFIER      shift and go to state 292


state 143

    (47) attribute -> PUBLIC .

    PRIVATE         reduce using rule 47 (attribute -> PUBLIC .)
    PROTECTED       reduce using rule 47 (attribute -> PUBLIC .)
    PUBLIC          reduce using rule 47 (attribute -> PUBLIC .)
    STATIC          reduce using rule 47 (attribute -> PUBLIC .)
    EXTERN          reduce using rule 47 (attribute -> PUBLIC .)
    FINAL           reduce using rule 47 (attribute -> PUBLIC .)
    AUTO            reduce using rule 47 (attribute -> PUBLIC .)
    CONST           reduce using rule 47 (attribute -> PUBLIC .)
    IMMUTABLE       reduce using rule 47 (attribute -> PUBLIC .)
    LBRACE          reduce using rule 47 (attribute -> PUBLIC .)
    ALIAS           reduce using rule 47 (attribute -> PUBLIC .)
    ENUM            reduce using rule 47 (attribute -> PUBLIC .)
    CLASS           reduce using rule 47 (attribute -> PUBLIC .)
    THIS            reduce using rule 47 (attribute -> PUBLIC .)
    TILDE           reduce using rule 47 (attribute -> PUBLIC .)
    TYPEDEF         reduce using rule 47 (attribute -> PUBLIC .)
    IMPORT          reduce using rule 47 (attribute -> PUBLIC .)
    UNION           reduce using rule 47 (attribute -> PUBLIC .)
    MIXIN           reduce using rule 47 (attribute -> PUBLIC .)
    COLON           reduce using rule 47 (attribute -> PUBLIC .)


state 144

    (52) attribute -> CONST .
    (347) typeConstructor -> CONST .

  ! reduce/reduce conflict for CONST resolved using rule 52 (attribute -> CONST .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 52 (attribute -> CONST .)
  ! reduce/reduce conflict for AUTO resolved using rule 52 (attribute -> CONST .)
  ! reduce/reduce conflict for ENUM resolved using rule 52 (attribute -> CONST .)
  ! reduce/reduce conflict for EXTERN resolved using rule 52 (attribute -> CONST .)
  ! reduce/reduce conflict for FINAL resolved using rule 52 (attribute -> CONST .)
  ! reduce/reduce conflict for STATIC resolved using rule 52 (attribute -> CONST .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 52 (attribute -> CONST .)
    PRIVATE         reduce using rule 52 (attribute -> CONST .)
    PROTECTED       reduce using rule 52 (attribute -> CONST .)
    PUBLIC          reduce using rule 52 (attribute -> CONST .)
    STATIC          reduce using rule 52 (attribute -> CONST .)
    EXTERN          reduce using rule 52 (attribute -> CONST .)
    FINAL           reduce using rule 52 (attribute -> CONST .)
    AUTO            reduce using rule 52 (attribute -> CONST .)
    CONST           reduce using rule 52 (attribute -> CONST .)
    IMMUTABLE       reduce using rule 52 (attribute -> CONST .)
    LBRACE          reduce using rule 52 (attribute -> CONST .)
    ALIAS           reduce using rule 52 (attribute -> CONST .)
    ENUM            reduce using rule 52 (attribute -> CONST .)
    CLASS           reduce using rule 52 (attribute -> CONST .)
    THIS            reduce using rule 52 (attribute -> CONST .)
    TILDE           reduce using rule 52 (attribute -> CONST .)
    TYPEDEF         reduce using rule 52 (attribute -> CONST .)
    IMPORT          reduce using rule 52 (attribute -> CONST .)
    UNION           reduce using rule 52 (attribute -> CONST .)
    MIXIN           reduce using rule 52 (attribute -> CONST .)
    COLON           reduce using rule 52 (attribute -> CONST .)
    LPAREN          reduce using rule 347 (typeConstructor -> CONST .)
    LBRACKET        reduce using rule 347 (typeConstructor -> CONST .)
    BOOL            reduce using rule 347 (typeConstructor -> CONST .)
    SHORT           reduce using rule 347 (typeConstructor -> CONST .)
    USHORT          reduce using rule 347 (typeConstructor -> CONST .)
    INT             reduce using rule 347 (typeConstructor -> CONST .)
    UINT            reduce using rule 347 (typeConstructor -> CONST .)
    LONG            reduce using rule 347 (typeConstructor -> CONST .)
    ULONG           reduce using rule 347 (typeConstructor -> CONST .)
    CHAR            reduce using rule 347 (typeConstructor -> CONST .)
    FLOAT           reduce using rule 347 (typeConstructor -> CONST .)
    DOT             reduce using rule 347 (typeConstructor -> CONST .)
    TYPEOF          reduce using rule 347 (typeConstructor -> CONST .)
    IDENTIFIER      reduce using rule 347 (typeConstructor -> CONST .)

  ! CONST           [ reduce using rule 347 (typeConstructor -> CONST .) ]
  ! IMMUTABLE       [ reduce using rule 347 (typeConstructor -> CONST .) ]
  ! AUTO            [ reduce using rule 347 (typeConstructor -> CONST .) ]
  ! ENUM            [ reduce using rule 347 (typeConstructor -> CONST .) ]
  ! EXTERN          [ reduce using rule 347 (typeConstructor -> CONST .) ]
  ! FINAL           [ reduce using rule 347 (typeConstructor -> CONST .) ]
  ! STATIC          [ reduce using rule 347 (typeConstructor -> CONST .) ]
  ! TYPEDEF         [ reduce using rule 347 (typeConstructor -> CONST .) ]


state 145

    (98) declaration -> attribute . multipleattributes LBRACE multiple_declaration RBRACE
    (101) multipleattributes -> attribute . multipleattributes
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (407) empty -> .

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 294
    IMMUTABLE       shift and go to state 297
    LBRACE          reduce using rule 407 (empty -> .)
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    THIS            reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IMPORT          reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    MIXIN           reduce using rule 407 (empty -> .)

  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    attribute                      shift and go to state 296
    multipleattributes             shift and go to state 295
    empty                          shift and go to state 140

state 146

    (315) statementNoCaseNoDefault -> breakStatement .

    RBRACE          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    PRIVATE         reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    PROTECTED       reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    PUBLIC          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    STATIC          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    EXTERN          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    FINAL           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    AUTO            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    CONST           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    IMMUTABLE       reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    CASE            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    DEFAULT         reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    IDENTIFIER      reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    LBRACE          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    IF              reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    WHILE           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    DO              reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    FOR             reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    FOREACH         reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    FOREACH_REVERSE reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    SWITCH          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    CONTINUE        reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    BREAK           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    RETURN          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    GOTO            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    WITH            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    AMPERSAND       reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    EXCLAMATION     reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    TIMES           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    PLUS            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    MINUS           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    DOT             reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    PLUS_PLUS       reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    ELLIPSIS        reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    LBRACKET        reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    RANGE           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    LPAREN          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    DOLLAR          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    THIS            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    NULL            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    TRUE            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    FALSE           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    INUMBER         reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    DNUMBER         reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    LIT_CHAR        reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    NEW             reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    DELETE          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    CAST            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    FUNCTION        reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    MIXIN           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    IMPORT          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    LIT_STR         reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    BOOL            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    SHORT           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    USHORT          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    INT             reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    UINT            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    LONG            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    ULONG           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    CHAR            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    FLOAT           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    TYPEOF          reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    ALIAS           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    ENUM            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    CLASS           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    TILDE           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    TYPEDEF         reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    UNION           reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    SEMICOLON       reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)
    ELSE            reduce using rule 315 (statementNoCaseNoDefault -> breakStatement .)


state 147

    (317) statementNoCaseNoDefault -> gotoStatement .

    RBRACE          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    PRIVATE         reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    PROTECTED       reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    PUBLIC          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    STATIC          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    EXTERN          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    FINAL           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    AUTO            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    CONST           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    IMMUTABLE       reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    CASE            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    DEFAULT         reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    IDENTIFIER      reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    LBRACE          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    IF              reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    WHILE           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    DO              reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    FOR             reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    FOREACH         reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    FOREACH_REVERSE reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    SWITCH          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    CONTINUE        reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    BREAK           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    RETURN          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    GOTO            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    WITH            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    AMPERSAND       reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    EXCLAMATION     reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    TIMES           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    PLUS            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    MINUS           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    DOT             reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    PLUS_PLUS       reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    ELLIPSIS        reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    LBRACKET        reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    RANGE           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    LPAREN          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    DOLLAR          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    THIS            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    NULL            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    TRUE            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    FALSE           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    INUMBER         reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    DNUMBER         reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    LIT_CHAR        reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    NEW             reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    DELETE          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    CAST            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    FUNCTION        reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    MIXIN           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    IMPORT          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    LIT_STR         reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    BOOL            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    SHORT           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    USHORT          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    INT             reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    UINT            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    LONG            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    ULONG           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    CHAR            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    FLOAT           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    TYPEOF          reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    ALIAS           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    ENUM            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    CLASS           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    TILDE           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    TYPEDEF         reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    UNION           reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    SEMICOLON       reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)
    ELSE            reduce using rule 317 (statementNoCaseNoDefault -> gotoStatement .)


state 148

    (323) statement -> defaultStatement .

    RBRACE          reduce using rule 323 (statement -> defaultStatement .)
    PRIVATE         reduce using rule 323 (statement -> defaultStatement .)
    PROTECTED       reduce using rule 323 (statement -> defaultStatement .)
    PUBLIC          reduce using rule 323 (statement -> defaultStatement .)
    STATIC          reduce using rule 323 (statement -> defaultStatement .)
    EXTERN          reduce using rule 323 (statement -> defaultStatement .)
    FINAL           reduce using rule 323 (statement -> defaultStatement .)
    AUTO            reduce using rule 323 (statement -> defaultStatement .)
    CONST           reduce using rule 323 (statement -> defaultStatement .)
    IMMUTABLE       reduce using rule 323 (statement -> defaultStatement .)
    CASE            reduce using rule 323 (statement -> defaultStatement .)
    DEFAULT         reduce using rule 323 (statement -> defaultStatement .)
    IDENTIFIER      reduce using rule 323 (statement -> defaultStatement .)
    LBRACE          reduce using rule 323 (statement -> defaultStatement .)
    IF              reduce using rule 323 (statement -> defaultStatement .)
    WHILE           reduce using rule 323 (statement -> defaultStatement .)
    DO              reduce using rule 323 (statement -> defaultStatement .)
    FOR             reduce using rule 323 (statement -> defaultStatement .)
    FOREACH         reduce using rule 323 (statement -> defaultStatement .)
    FOREACH_REVERSE reduce using rule 323 (statement -> defaultStatement .)
    SWITCH          reduce using rule 323 (statement -> defaultStatement .)
    CONTINUE        reduce using rule 323 (statement -> defaultStatement .)
    BREAK           reduce using rule 323 (statement -> defaultStatement .)
    RETURN          reduce using rule 323 (statement -> defaultStatement .)
    GOTO            reduce using rule 323 (statement -> defaultStatement .)
    WITH            reduce using rule 323 (statement -> defaultStatement .)
    AMPERSAND       reduce using rule 323 (statement -> defaultStatement .)
    EXCLAMATION     reduce using rule 323 (statement -> defaultStatement .)
    TIMES           reduce using rule 323 (statement -> defaultStatement .)
    PLUS            reduce using rule 323 (statement -> defaultStatement .)
    MINUS           reduce using rule 323 (statement -> defaultStatement .)
    DOT             reduce using rule 323 (statement -> defaultStatement .)
    PLUS_PLUS       reduce using rule 323 (statement -> defaultStatement .)
    ELLIPSIS        reduce using rule 323 (statement -> defaultStatement .)
    LBRACKET        reduce using rule 323 (statement -> defaultStatement .)
    RANGE           reduce using rule 323 (statement -> defaultStatement .)
    LPAREN          reduce using rule 323 (statement -> defaultStatement .)
    DOLLAR          reduce using rule 323 (statement -> defaultStatement .)
    THIS            reduce using rule 323 (statement -> defaultStatement .)
    NULL            reduce using rule 323 (statement -> defaultStatement .)
    TRUE            reduce using rule 323 (statement -> defaultStatement .)
    FALSE           reduce using rule 323 (statement -> defaultStatement .)
    INUMBER         reduce using rule 323 (statement -> defaultStatement .)
    DNUMBER         reduce using rule 323 (statement -> defaultStatement .)
    LIT_CHAR        reduce using rule 323 (statement -> defaultStatement .)
    NEW             reduce using rule 323 (statement -> defaultStatement .)
    DELETE          reduce using rule 323 (statement -> defaultStatement .)
    CAST            reduce using rule 323 (statement -> defaultStatement .)
    FUNCTION        reduce using rule 323 (statement -> defaultStatement .)
    MIXIN           reduce using rule 323 (statement -> defaultStatement .)
    IMPORT          reduce using rule 323 (statement -> defaultStatement .)
    LIT_STR         reduce using rule 323 (statement -> defaultStatement .)
    BOOL            reduce using rule 323 (statement -> defaultStatement .)
    SHORT           reduce using rule 323 (statement -> defaultStatement .)
    USHORT          reduce using rule 323 (statement -> defaultStatement .)
    INT             reduce using rule 323 (statement -> defaultStatement .)
    UINT            reduce using rule 323 (statement -> defaultStatement .)
    LONG            reduce using rule 323 (statement -> defaultStatement .)
    ULONG           reduce using rule 323 (statement -> defaultStatement .)
    CHAR            reduce using rule 323 (statement -> defaultStatement .)
    FLOAT           reduce using rule 323 (statement -> defaultStatement .)
    TYPEOF          reduce using rule 323 (statement -> defaultStatement .)
    ALIAS           reduce using rule 323 (statement -> defaultStatement .)
    ENUM            reduce using rule 323 (statement -> defaultStatement .)
    CLASS           reduce using rule 323 (statement -> defaultStatement .)
    TILDE           reduce using rule 323 (statement -> defaultStatement .)
    TYPEDEF         reduce using rule 323 (statement -> defaultStatement .)
    UNION           reduce using rule 323 (statement -> defaultStatement .)
    SEMICOLON       reduce using rule 323 (statement -> defaultStatement .)
    ELSE            reduce using rule 323 (statement -> defaultStatement .)


state 149

    (58) blockStatement -> LBRACE RBRACE .

    DOT             reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    PLUS_PLUS       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    CARET           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    TIMES           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DIV             reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    MODULO          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    PLUS            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    MINUS           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    TILDE           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LEFT_SHIFT      reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    RIGHT_SHIFT     reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    IS_EQ           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    NOT_EQ          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    AMPERSAND       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    PIPE            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    QUESTION        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DOUBLE_PIPE     reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    ASSIGN          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_LEFT         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_RIGHT        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_PLUS         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_MINUS        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_TIMES        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_MODULO       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_AND_BIT      reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_DIV          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_OR_BIT       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EQ_XOR_BIT      reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    RANGE           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    COMMA           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LESS            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LESS_EQ         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    GREATER         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    GREATER_EQ      reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    IS_EQ_DIFF      reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    NOT_EQ_DIFF     reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LESS_EQ_DIFF    reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LESS_DIFF       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    GREATER_EQ_DIFF reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    GREATER_DIFF    reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    COLON           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    STATIC          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    FINAL           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    AUTO            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    CONST           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    IMMUTABLE       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    CASE            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    IF              reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    WHILE           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DO              reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    FOR             reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    FOREACH         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    FOREACH_REVERSE reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    BREAK           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    RETURN          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    GOTO            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    WITH            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    EXCLAMATION     reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    ELLIPSIS        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DOLLAR          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    THIS            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    NULL            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    TRUE            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    FALSE           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    INUMBER         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DNUMBER         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LIT_CHAR        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    NEW             reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DELETE          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    CAST            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    MIXIN           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    IMPORT          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LIT_STR         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    BOOL            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    SHORT           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    USHORT          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    INT             reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    UINT            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    LONG            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    ULONG           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    CHAR            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    TYPEOF          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    ALIAS           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    ENUM            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    CLASS           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    UNION           reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    ELSE            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    $end            reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    RPAREN          reduce using rule 58 (blockStatement -> LBRACE RBRACE .)
    DOUBLE_QUOTE    reduce using rule 58 (blockStatement -> LBRACE RBRACE .)


state 150

    (45) attribute -> PRIVATE .

    PRIVATE         reduce using rule 45 (attribute -> PRIVATE .)
    PROTECTED       reduce using rule 45 (attribute -> PRIVATE .)
    PUBLIC          reduce using rule 45 (attribute -> PRIVATE .)
    STATIC          reduce using rule 45 (attribute -> PRIVATE .)
    EXTERN          reduce using rule 45 (attribute -> PRIVATE .)
    FINAL           reduce using rule 45 (attribute -> PRIVATE .)
    AUTO            reduce using rule 45 (attribute -> PRIVATE .)
    CONST           reduce using rule 45 (attribute -> PRIVATE .)
    IMMUTABLE       reduce using rule 45 (attribute -> PRIVATE .)
    LBRACE          reduce using rule 45 (attribute -> PRIVATE .)
    ALIAS           reduce using rule 45 (attribute -> PRIVATE .)
    ENUM            reduce using rule 45 (attribute -> PRIVATE .)
    CLASS           reduce using rule 45 (attribute -> PRIVATE .)
    THIS            reduce using rule 45 (attribute -> PRIVATE .)
    TILDE           reduce using rule 45 (attribute -> PRIVATE .)
    TYPEDEF         reduce using rule 45 (attribute -> PRIVATE .)
    IMPORT          reduce using rule 45 (attribute -> PRIVATE .)
    UNION           reduce using rule 45 (attribute -> PRIVATE .)
    MIXIN           reduce using rule 45 (attribute -> PRIVATE .)
    COLON           reduce using rule 45 (attribute -> PRIVATE .)


state 151

    (59) blockStatement -> LBRACE declarationsAndStatements . RBRACE

    RBRACE          shift and go to state 298


state 152

    (51) attribute -> AUTO .

    PRIVATE         reduce using rule 51 (attribute -> AUTO .)
    PROTECTED       reduce using rule 51 (attribute -> AUTO .)
    PUBLIC          reduce using rule 51 (attribute -> AUTO .)
    STATIC          reduce using rule 51 (attribute -> AUTO .)
    EXTERN          reduce using rule 51 (attribute -> AUTO .)
    FINAL           reduce using rule 51 (attribute -> AUTO .)
    AUTO            reduce using rule 51 (attribute -> AUTO .)
    CONST           reduce using rule 51 (attribute -> AUTO .)
    IMMUTABLE       reduce using rule 51 (attribute -> AUTO .)
    LBRACE          reduce using rule 51 (attribute -> AUTO .)
    ALIAS           reduce using rule 51 (attribute -> AUTO .)
    ENUM            reduce using rule 51 (attribute -> AUTO .)
    CLASS           reduce using rule 51 (attribute -> AUTO .)
    THIS            reduce using rule 51 (attribute -> AUTO .)
    TILDE           reduce using rule 51 (attribute -> AUTO .)
    TYPEDEF         reduce using rule 51 (attribute -> AUTO .)
    IMPORT          reduce using rule 51 (attribute -> AUTO .)
    UNION           reduce using rule 51 (attribute -> AUTO .)
    MIXIN           reduce using rule 51 (attribute -> AUTO .)


state 153

    (53) attribute -> IMMUTABLE .
    (348) typeConstructor -> IMMUTABLE .

  ! reduce/reduce conflict for CONST resolved using rule 53 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 53 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for AUTO resolved using rule 53 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for ENUM resolved using rule 53 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for EXTERN resolved using rule 53 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for FINAL resolved using rule 53 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for STATIC resolved using rule 53 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 53 (attribute -> IMMUTABLE .)
    PRIVATE         reduce using rule 53 (attribute -> IMMUTABLE .)
    PROTECTED       reduce using rule 53 (attribute -> IMMUTABLE .)
    PUBLIC          reduce using rule 53 (attribute -> IMMUTABLE .)
    STATIC          reduce using rule 53 (attribute -> IMMUTABLE .)
    EXTERN          reduce using rule 53 (attribute -> IMMUTABLE .)
    FINAL           reduce using rule 53 (attribute -> IMMUTABLE .)
    AUTO            reduce using rule 53 (attribute -> IMMUTABLE .)
    CONST           reduce using rule 53 (attribute -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 53 (attribute -> IMMUTABLE .)
    LBRACE          reduce using rule 53 (attribute -> IMMUTABLE .)
    ALIAS           reduce using rule 53 (attribute -> IMMUTABLE .)
    ENUM            reduce using rule 53 (attribute -> IMMUTABLE .)
    CLASS           reduce using rule 53 (attribute -> IMMUTABLE .)
    THIS            reduce using rule 53 (attribute -> IMMUTABLE .)
    TILDE           reduce using rule 53 (attribute -> IMMUTABLE .)
    TYPEDEF         reduce using rule 53 (attribute -> IMMUTABLE .)
    IMPORT          reduce using rule 53 (attribute -> IMMUTABLE .)
    UNION           reduce using rule 53 (attribute -> IMMUTABLE .)
    MIXIN           reduce using rule 53 (attribute -> IMMUTABLE .)
    COLON           reduce using rule 53 (attribute -> IMMUTABLE .)
    LPAREN          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    LBRACKET        reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    BOOL            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    SHORT           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    USHORT          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    INT             reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    UINT            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    LONG            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    ULONG           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    CHAR            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    FLOAT           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    DOT             reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    TYPEOF          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 348 (typeConstructor -> IMMUTABLE .)

  ! CONST           [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]
  ! IMMUTABLE       [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]
  ! AUTO            [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]
  ! ENUM            [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]
  ! EXTERN          [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]
  ! FINAL           [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]
  ! STATIC          [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]
  ! TYPEDEF         [ reduce using rule 348 (typeConstructor -> IMMUTABLE .) ]


state 154

    (188) ifStatement -> IF . LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> IF . LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement

    LPAREN          shift and go to state 299


state 155

    (216) mixinExpression -> MIXIN LPAREN . assignExpression RPAREN
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 300
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 156

    (377) unaryExpression -> EXCLAMATION unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    TIMES           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    DIV             reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    MODULO          reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    PLUS            reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    MINUS           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    TILDE           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    LEFT_SHIFT      reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    RIGHT_SHIFT     reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    IS_EQ           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    NOT_EQ          reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    AMPERSAND       reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    PIPE            reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    QUESTION        reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOUBLE_PIPE     reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    ASSIGN          reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_LEFT         reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_RIGHT        reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_PLUS         reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_MINUS        reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_TIMES        reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_MODULO       reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_AND_BIT      reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_DIV          reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_OR_BIT       reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_XOR_BIT      reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    SEMICOLON       reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    COMMA           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS            reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_EQ         reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER         reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_EQ      reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    IS_EQ_DIFF      reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_DIFF       reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_DIFF    reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    RPAREN          reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    $end            reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    RBRACKET        reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    COLON           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    RANGE           reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    TYPEDEF         reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    IDENTIFIER      reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    RBRACE          reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    LPAREN          reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 377 (unaryExpression -> EXCLAMATION unaryExpression .) ]


state 157

    (225) newAnonClassExpression -> NEW arguments . CLASS structBody
    (226) newAnonClassExpression -> NEW arguments . CLASS arguments structBody
    (227) newAnonClassExpression -> NEW arguments . CLASS baseClassList structBody
    (228) newAnonClassExpression -> NEW arguments . CLASS arguments baseClassList structBody

    CLASS           shift and go to state 301


state 158

    (229) newExpression -> NEW type .
    (230) newExpression -> NEW type . LBRACKET assignExpression RBRACKET
    (231) newExpression -> NEW type . arguments
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 229 (newExpression -> NEW type .)
    PLUS_PLUS       reduce using rule 229 (newExpression -> NEW type .)
    CARET           reduce using rule 229 (newExpression -> NEW type .)
    TIMES           reduce using rule 229 (newExpression -> NEW type .)
    DIV             reduce using rule 229 (newExpression -> NEW type .)
    MODULO          reduce using rule 229 (newExpression -> NEW type .)
    PLUS            reduce using rule 229 (newExpression -> NEW type .)
    MINUS           reduce using rule 229 (newExpression -> NEW type .)
    TILDE           reduce using rule 229 (newExpression -> NEW type .)
    LEFT_SHIFT      reduce using rule 229 (newExpression -> NEW type .)
    RIGHT_SHIFT     reduce using rule 229 (newExpression -> NEW type .)
    IS_EQ           reduce using rule 229 (newExpression -> NEW type .)
    NOT_EQ          reduce using rule 229 (newExpression -> NEW type .)
    AMPERSAND       reduce using rule 229 (newExpression -> NEW type .)
    PIPE            reduce using rule 229 (newExpression -> NEW type .)
    DOUBLE_AMPERSAND reduce using rule 229 (newExpression -> NEW type .)
    QUESTION        reduce using rule 229 (newExpression -> NEW type .)
    DOUBLE_PIPE     reduce using rule 229 (newExpression -> NEW type .)
    ASSIGN          reduce using rule 229 (newExpression -> NEW type .)
    EQ_LEFT         reduce using rule 229 (newExpression -> NEW type .)
    EQ_RIGHT        reduce using rule 229 (newExpression -> NEW type .)
    EQ_PLUS         reduce using rule 229 (newExpression -> NEW type .)
    EQ_MINUS        reduce using rule 229 (newExpression -> NEW type .)
    EQ_TIMES        reduce using rule 229 (newExpression -> NEW type .)
    EQ_MODULO       reduce using rule 229 (newExpression -> NEW type .)
    EQ_AND_BIT      reduce using rule 229 (newExpression -> NEW type .)
    EQ_DIV          reduce using rule 229 (newExpression -> NEW type .)
    EQ_OR_BIT       reduce using rule 229 (newExpression -> NEW type .)
    EQ_XOR_BIT      reduce using rule 229 (newExpression -> NEW type .)
    SEMICOLON       reduce using rule 229 (newExpression -> NEW type .)
    COMMA           reduce using rule 229 (newExpression -> NEW type .)
    LESS            reduce using rule 229 (newExpression -> NEW type .)
    LESS_EQ         reduce using rule 229 (newExpression -> NEW type .)
    GREATER         reduce using rule 229 (newExpression -> NEW type .)
    GREATER_EQ      reduce using rule 229 (newExpression -> NEW type .)
    IS_EQ_DIFF      reduce using rule 229 (newExpression -> NEW type .)
    NOT_EQ_DIFF     reduce using rule 229 (newExpression -> NEW type .)
    LESS_EQ_DIFF    reduce using rule 229 (newExpression -> NEW type .)
    LESS_DIFF       reduce using rule 229 (newExpression -> NEW type .)
    GREATER_EQ_DIFF reduce using rule 229 (newExpression -> NEW type .)
    GREATER_DIFF    reduce using rule 229 (newExpression -> NEW type .)
    $end            reduce using rule 229 (newExpression -> NEW type .)
    RBRACKET        reduce using rule 229 (newExpression -> NEW type .)
    RPAREN          reduce using rule 229 (newExpression -> NEW type .)
    COLON           reduce using rule 229 (newExpression -> NEW type .)
    RANGE           reduce using rule 229 (newExpression -> NEW type .)
    TYPEDEF         reduce using rule 229 (newExpression -> NEW type .)
    IDENTIFIER      reduce using rule 229 (newExpression -> NEW type .)
    RBRACE          reduce using rule 229 (newExpression -> NEW type .)
    DOUBLE_QUOTE    reduce using rule 229 (newExpression -> NEW type .)
    LBRACKET        shift and go to state 302
    LPAREN          shift and go to state 160

  ! LBRACKET        [ reduce using rule 229 (newExpression -> NEW type .) ]
  ! LPAREN          [ reduce using rule 229 (newExpression -> NEW type .) ]

    arguments                      shift and go to state 303

state 159

    (221) newAnonClassExpression -> NEW CLASS . arguments baseClassList structBody
    (222) newAnonClassExpression -> NEW CLASS . arguments structBody
    (223) newAnonClassExpression -> NEW CLASS . baseClassList structBody
    (224) newAnonClassExpression -> NEW CLASS . structBody
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN
    (64) baseClassList -> . baseClass
    (65) baseClassList -> . baseClassList COMMA baseClass
    (332) structBody -> . LBRACE declarationStar RBRACE
    (63) baseClass -> . type2
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    LPAREN          shift and go to state 160
    LBRACE          shift and go to state 308
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 92
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    baseClassList                  shift and go to state 306
    arguments                      shift and go to state 305
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    structBody                     shift and go to state 309
    baseClass                      shift and go to state 307
    typeofExpression               shift and go to state 2
    type2                          shift and go to state 304

state 160

    (22) arguments -> LPAREN . RPAREN
    (23) arguments -> LPAREN . argumentList RPAREN
    (18) argumentList -> . assignExpression
    (19) argumentList -> . argumentList comma_assign
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RPAREN          shift and go to state 310
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    argumentList                   shift and go to state 311
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 71
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    typeConstructor                shift and go to state 15
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49

state 161

    (349) typeConstructors -> typeConstructor .
    (350) typeConstructors -> typeConstructor . typeConstructors
    (346) type2 -> typeConstructor . LBRACKET TYPEDEF RBRACKET
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    BOOL            reduce using rule 349 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 349 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 349 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 349 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 349 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 349 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 349 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 349 (typeConstructors -> typeConstructor .)
    LBRACKET        shift and go to state 96
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 95
    typeConstructors               shift and go to state 98

state 162

    (267) primaryExpression -> DOT identifierOrTemplateInstance .
    (185) identifierOrTemplateChain -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LPAREN resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TIMES resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    $end            reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    TYPEDEF         reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RBRACE          reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOUBLE_QUOTE    reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOT             reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DELEGATE        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    FUNCTION        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .) ]
  ! LBRACKET        [ reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .) ]
  ! TIMES           [ reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .) ]
  ! RBRACKET        [ reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .) ]
  ! SEMICOLON       [ reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .) ]
  ! LPAREN          [ reduce using rule 267 (primaryExpression -> DOT identifierOrTemplateInstance .) ]


state 163

    (334) symbol -> DOT identifierOrTemplateChain .
    (186) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

  ! shift/reduce conflict for DOT resolved as shift
    LPAREN          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    TIMES           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LBRACKET        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    DELEGATE        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    FUNCTION        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    SEMICOLON       reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    IDENTIFIER      reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    PLUS_PLUS       reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    CARET           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    DIV             reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    MODULO          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    PLUS            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    MINUS           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    TILDE           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    $end            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LEFT_SHIFT      reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    RIGHT_SHIFT     reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    IS_EQ           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    NOT_EQ          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    AMPERSAND       reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    PIPE            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    DOUBLE_AMPERSAND reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    QUESTION        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    DOUBLE_PIPE     reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    ASSIGN          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_LEFT         reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_RIGHT        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_PLUS         reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_MINUS        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_TIMES        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_MODULO       reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_AND_BIT      reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_DIV          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_OR_BIT       reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    EQ_XOR_BIT      reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    RBRACKET        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    COMMA           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LESS            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LESS_EQ         reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    GREATER         reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    GREATER_EQ      reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    IS_EQ_DIFF      reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    NOT_EQ_DIFF     reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LESS_EQ_DIFF    reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LESS_DIFF       reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    GREATER_EQ_DIFF reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    GREATER_DIFF    reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    RPAREN          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    COLON           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    RANGE           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    TYPEDEF         reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    RBRACE          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    DOUBLE_QUOTE    reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LBRACE          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    FINAL           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    AUTO            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    RETURN          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    CONST           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    IMMUTABLE       reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    BOOL            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    SHORT           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    USHORT          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    INT             reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    UINT            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    LONG            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    ULONG           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    CHAR            reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    FLOAT           reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    TYPEOF          reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    ELLIPSIS        reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .)
    DOT             shift and go to state 94

  ! DOT             [ reduce using rule 334 (symbol -> DOT identifierOrTemplateChain .) ]


state 164

    (77) castExpression -> CAST LPAREN . RPAREN unaryExpression
    (78) castExpression -> CAST LPAREN . type RPAREN unaryExpression
    (79) castExpression -> CAST LPAREN . castQualifier RPAREN unaryExpression
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (80) castQualifier -> . CONST
    (81) castQualifier -> . IMMUTABLE
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    RPAREN          shift and go to state 313
    CONST           shift and go to state 312
    IMMUTABLE       shift and go to state 316
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    castQualifier                  shift and go to state 314
    typeConstructors               shift and go to state 10
    type                           shift and go to state 315
    type2                          shift and go to state 53

state 165

    (176) functionLiteralExpression -> IDENTIFIER assignExpression .

    DOT             reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PLUS_PLUS       reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LBRACKET        reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    CARET           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TIMES           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DIV             reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MODULO          reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PLUS            reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MINUS           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TILDE           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LEFT_SHIFT      reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RIGHT_SHIFT     reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IS_EQ           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    NOT_EQ          reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    AMPERSAND       reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PIPE            reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    QUESTION        reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DOUBLE_PIPE     reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    ASSIGN          reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_LEFT         reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_RIGHT        reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_PLUS         reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_MINUS        reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_TIMES        reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_MODULO       reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_AND_BIT      reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_DIV          reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_OR_BIT       reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_XOR_BIT      reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RPAREN          reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    COMMA           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS            reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_EQ         reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER         reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_EQ      reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IS_EQ_DIFF      reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    NOT_EQ_DIFF     reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_EQ_DIFF    reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_DIFF       reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_EQ_DIFF reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_DIFF    reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    $end            reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    SEMICOLON       reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RBRACKET        reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    COLON           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RANGE           reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TYPEDEF         reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IDENTIFIER      reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RBRACE          reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DOUBLE_QUOTE    reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LPAREN          reduce using rule 176 (functionLiteralExpression -> IDENTIFIER assignExpression .)


state 166

    (270) primaryExpression -> type arguments .
    (168) functionCallExpression -> type arguments .

  ! reduce/reduce conflict for DOT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for CARET resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for TIMES resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for DIV resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for MODULO resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for PLUS resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for MINUS resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for TILDE resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for PIPE resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for QUESTION resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for COMMA resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for LESS resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for RPAREN resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for $end resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for COLON resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for RANGE resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for RBRACE resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for DOUBLE_QUOTE resolved using rule 168 (functionCallExpression -> type arguments .)
  ! reduce/reduce conflict for LPAREN resolved using rule 168 (functionCallExpression -> type arguments .)
    DOT             reduce using rule 168 (functionCallExpression -> type arguments .)
    PLUS_PLUS       reduce using rule 168 (functionCallExpression -> type arguments .)
    LBRACKET        reduce using rule 168 (functionCallExpression -> type arguments .)
    CARET           reduce using rule 168 (functionCallExpression -> type arguments .)
    TIMES           reduce using rule 168 (functionCallExpression -> type arguments .)
    DIV             reduce using rule 168 (functionCallExpression -> type arguments .)
    MODULO          reduce using rule 168 (functionCallExpression -> type arguments .)
    PLUS            reduce using rule 168 (functionCallExpression -> type arguments .)
    MINUS           reduce using rule 168 (functionCallExpression -> type arguments .)
    TILDE           reduce using rule 168 (functionCallExpression -> type arguments .)
    LEFT_SHIFT      reduce using rule 168 (functionCallExpression -> type arguments .)
    RIGHT_SHIFT     reduce using rule 168 (functionCallExpression -> type arguments .)
    IS_EQ           reduce using rule 168 (functionCallExpression -> type arguments .)
    NOT_EQ          reduce using rule 168 (functionCallExpression -> type arguments .)
    AMPERSAND       reduce using rule 168 (functionCallExpression -> type arguments .)
    PIPE            reduce using rule 168 (functionCallExpression -> type arguments .)
    DOUBLE_AMPERSAND reduce using rule 168 (functionCallExpression -> type arguments .)
    QUESTION        reduce using rule 168 (functionCallExpression -> type arguments .)
    DOUBLE_PIPE     reduce using rule 168 (functionCallExpression -> type arguments .)
    ASSIGN          reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_LEFT         reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_RIGHT        reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_PLUS         reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_MINUS        reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_TIMES        reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_MODULO       reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_AND_BIT      reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_DIV          reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_OR_BIT       reduce using rule 168 (functionCallExpression -> type arguments .)
    EQ_XOR_BIT      reduce using rule 168 (functionCallExpression -> type arguments .)
    SEMICOLON       reduce using rule 168 (functionCallExpression -> type arguments .)
    COMMA           reduce using rule 168 (functionCallExpression -> type arguments .)
    LESS            reduce using rule 168 (functionCallExpression -> type arguments .)
    LESS_EQ         reduce using rule 168 (functionCallExpression -> type arguments .)
    GREATER         reduce using rule 168 (functionCallExpression -> type arguments .)
    GREATER_EQ      reduce using rule 168 (functionCallExpression -> type arguments .)
    IS_EQ_DIFF      reduce using rule 168 (functionCallExpression -> type arguments .)
    NOT_EQ_DIFF     reduce using rule 168 (functionCallExpression -> type arguments .)
    LESS_EQ_DIFF    reduce using rule 168 (functionCallExpression -> type arguments .)
    LESS_DIFF       reduce using rule 168 (functionCallExpression -> type arguments .)
    GREATER_EQ_DIFF reduce using rule 168 (functionCallExpression -> type arguments .)
    GREATER_DIFF    reduce using rule 168 (functionCallExpression -> type arguments .)
    RPAREN          reduce using rule 168 (functionCallExpression -> type arguments .)
    $end            reduce using rule 168 (functionCallExpression -> type arguments .)
    RBRACKET        reduce using rule 168 (functionCallExpression -> type arguments .)
    COLON           reduce using rule 168 (functionCallExpression -> type arguments .)
    RANGE           reduce using rule 168 (functionCallExpression -> type arguments .)
    TYPEDEF         reduce using rule 168 (functionCallExpression -> type arguments .)
    IDENTIFIER      reduce using rule 168 (functionCallExpression -> type arguments .)
    RBRACE          reduce using rule 168 (functionCallExpression -> type arguments .)
    DOUBLE_QUOTE    reduce using rule 168 (functionCallExpression -> type arguments .)
    LPAREN          reduce using rule 168 (functionCallExpression -> type arguments .)

  ! DOT             [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! PLUS_PLUS       [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! LBRACKET        [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! CARET           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! TIMES           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! DIV             [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! MODULO          [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! PLUS            [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! MINUS           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! TILDE           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! LEFT_SHIFT      [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! RIGHT_SHIFT     [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! IS_EQ           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! NOT_EQ          [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! AMPERSAND       [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! PIPE            [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! QUESTION        [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! DOUBLE_PIPE     [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! ASSIGN          [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_LEFT         [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_RIGHT        [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_PLUS         [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_MINUS        [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_TIMES        [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_MODULO       [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_AND_BIT      [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_DIV          [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_OR_BIT       [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! EQ_XOR_BIT      [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! RBRACKET        [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! COMMA           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! LESS            [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! LESS_EQ         [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! GREATER         [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! GREATER_EQ      [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! IS_EQ_DIFF      [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! LESS_DIFF       [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! GREATER_DIFF    [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! RPAREN          [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! $end            [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! SEMICOLON       [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! COLON           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! RANGE           [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! TYPEDEF         [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! IDENTIFIER      [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! RBRACE          [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! DOUBLE_QUOTE    [ reduce using rule 270 (primaryExpression -> type arguments .) ]
  ! LPAREN          [ reduce using rule 270 (primaryExpression -> type arguments .) ]


state 167

    (269) primaryExpression -> type DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 317


state 168

    (262) powExpression -> powExpression CARET . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 318
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 169

    (365) typeSuffix -> LBRACKET . type RBRACKET
    (366) typeSuffix -> LBRACKET . RBRACKET
    (367) typeSuffix -> LBRACKET . assignExpression RBRACKET
    (368) typeSuffix -> LBRACKET . assignExpression RANGE assignExpression RBRACKET
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RBRACKET        shift and go to state 325
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 321
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 38
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 322
    addExpression                  shift and go to state 80
    type                           shift and go to state 323
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 324
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 320
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 319

state 170

    (341) type -> type2 typeSuffixStar .

    DOT             reduce using rule 341 (type -> type2 typeSuffixStar .)
    LPAREN          reduce using rule 341 (type -> type2 typeSuffixStar .)
    IDENTIFIER      reduce using rule 341 (type -> type2 typeSuffixStar .)
    LBRACKET        reduce using rule 341 (type -> type2 typeSuffixStar .)
    PLUS_PLUS       reduce using rule 341 (type -> type2 typeSuffixStar .)
    CARET           reduce using rule 341 (type -> type2 typeSuffixStar .)
    TIMES           reduce using rule 341 (type -> type2 typeSuffixStar .)
    DIV             reduce using rule 341 (type -> type2 typeSuffixStar .)
    MODULO          reduce using rule 341 (type -> type2 typeSuffixStar .)
    PLUS            reduce using rule 341 (type -> type2 typeSuffixStar .)
    MINUS           reduce using rule 341 (type -> type2 typeSuffixStar .)
    TILDE           reduce using rule 341 (type -> type2 typeSuffixStar .)
    $end            reduce using rule 341 (type -> type2 typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 341 (type -> type2 typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 341 (type -> type2 typeSuffixStar .)
    IS_EQ           reduce using rule 341 (type -> type2 typeSuffixStar .)
    NOT_EQ          reduce using rule 341 (type -> type2 typeSuffixStar .)
    AMPERSAND       reduce using rule 341 (type -> type2 typeSuffixStar .)
    PIPE            reduce using rule 341 (type -> type2 typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 341 (type -> type2 typeSuffixStar .)
    QUESTION        reduce using rule 341 (type -> type2 typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 341 (type -> type2 typeSuffixStar .)
    ASSIGN          reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_LEFT         reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_RIGHT        reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_PLUS         reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_MINUS        reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_TIMES        reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_MODULO       reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_DIV          reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 341 (type -> type2 typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 341 (type -> type2 typeSuffixStar .)
    RBRACKET        reduce using rule 341 (type -> type2 typeSuffixStar .)
    COMMA           reduce using rule 341 (type -> type2 typeSuffixStar .)
    LESS            reduce using rule 341 (type -> type2 typeSuffixStar .)
    LESS_EQ         reduce using rule 341 (type -> type2 typeSuffixStar .)
    GREATER         reduce using rule 341 (type -> type2 typeSuffixStar .)
    GREATER_EQ      reduce using rule 341 (type -> type2 typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 341 (type -> type2 typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 341 (type -> type2 typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 341 (type -> type2 typeSuffixStar .)
    LESS_DIFF       reduce using rule 341 (type -> type2 typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 341 (type -> type2 typeSuffixStar .)
    GREATER_DIFF    reduce using rule 341 (type -> type2 typeSuffixStar .)
    SEMICOLON       reduce using rule 341 (type -> type2 typeSuffixStar .)
    RPAREN          reduce using rule 341 (type -> type2 typeSuffixStar .)
    COLON           reduce using rule 341 (type -> type2 typeSuffixStar .)
    RANGE           reduce using rule 341 (type -> type2 typeSuffixStar .)
    TYPEDEF         reduce using rule 341 (type -> type2 typeSuffixStar .)
    RBRACE          reduce using rule 341 (type -> type2 typeSuffixStar .)
    DOUBLE_QUOTE    reduce using rule 341 (type -> type2 typeSuffixStar .)
    ELLIPSIS        reduce using rule 341 (type -> type2 typeSuffixStar .)
    FINAL           reduce using rule 341 (type -> type2 typeSuffixStar .)
    AUTO            reduce using rule 341 (type -> type2 typeSuffixStar .)
    RETURN          reduce using rule 341 (type -> type2 typeSuffixStar .)
    CONST           reduce using rule 341 (type -> type2 typeSuffixStar .)
    IMMUTABLE       reduce using rule 341 (type -> type2 typeSuffixStar .)
    BOOL            reduce using rule 341 (type -> type2 typeSuffixStar .)
    SHORT           reduce using rule 341 (type -> type2 typeSuffixStar .)
    USHORT          reduce using rule 341 (type -> type2 typeSuffixStar .)
    INT             reduce using rule 341 (type -> type2 typeSuffixStar .)
    UINT            reduce using rule 341 (type -> type2 typeSuffixStar .)
    LONG            reduce using rule 341 (type -> type2 typeSuffixStar .)
    ULONG           reduce using rule 341 (type -> type2 typeSuffixStar .)
    CHAR            reduce using rule 341 (type -> type2 typeSuffixStar .)
    FLOAT           reduce using rule 341 (type -> type2 typeSuffixStar .)
    TYPEOF          reduce using rule 341 (type -> type2 typeSuffixStar .)
    LBRACE          reduce using rule 341 (type -> type2 typeSuffixStar .)


state 171

    (373) typeSuffix -> SEMICOLON . typeofExpression COLON TYPEOF LBRACKET expression RBRACKET
    (374) typeSuffix -> SEMICOLON . typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

    TYPEOF          shift and go to state 13

    typeofExpression               shift and go to state 326

state 172

    (339) typeSuffixStar -> empty .

    DOT             reduce using rule 339 (typeSuffixStar -> empty .)
    LPAREN          reduce using rule 339 (typeSuffixStar -> empty .)
    LBRACKET        reduce using rule 339 (typeSuffixStar -> empty .)
    PLUS_PLUS       reduce using rule 339 (typeSuffixStar -> empty .)
    CARET           reduce using rule 339 (typeSuffixStar -> empty .)
    TIMES           reduce using rule 339 (typeSuffixStar -> empty .)
    DIV             reduce using rule 339 (typeSuffixStar -> empty .)
    MODULO          reduce using rule 339 (typeSuffixStar -> empty .)
    PLUS            reduce using rule 339 (typeSuffixStar -> empty .)
    MINUS           reduce using rule 339 (typeSuffixStar -> empty .)
    TILDE           reduce using rule 339 (typeSuffixStar -> empty .)
    $end            reduce using rule 339 (typeSuffixStar -> empty .)
    LEFT_SHIFT      reduce using rule 339 (typeSuffixStar -> empty .)
    RIGHT_SHIFT     reduce using rule 339 (typeSuffixStar -> empty .)
    IS_EQ           reduce using rule 339 (typeSuffixStar -> empty .)
    NOT_EQ          reduce using rule 339 (typeSuffixStar -> empty .)
    AMPERSAND       reduce using rule 339 (typeSuffixStar -> empty .)
    PIPE            reduce using rule 339 (typeSuffixStar -> empty .)
    DOUBLE_AMPERSAND reduce using rule 339 (typeSuffixStar -> empty .)
    QUESTION        reduce using rule 339 (typeSuffixStar -> empty .)
    DOUBLE_PIPE     reduce using rule 339 (typeSuffixStar -> empty .)
    ASSIGN          reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_LEFT         reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_RIGHT        reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_PLUS         reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_MINUS        reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_TIMES        reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_MODULO       reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_AND_BIT      reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_DIV          reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_OR_BIT       reduce using rule 339 (typeSuffixStar -> empty .)
    EQ_XOR_BIT      reduce using rule 339 (typeSuffixStar -> empty .)
    RBRACKET        reduce using rule 339 (typeSuffixStar -> empty .)
    COMMA           reduce using rule 339 (typeSuffixStar -> empty .)
    LESS            reduce using rule 339 (typeSuffixStar -> empty .)
    LESS_EQ         reduce using rule 339 (typeSuffixStar -> empty .)
    GREATER         reduce using rule 339 (typeSuffixStar -> empty .)
    GREATER_EQ      reduce using rule 339 (typeSuffixStar -> empty .)
    IS_EQ_DIFF      reduce using rule 339 (typeSuffixStar -> empty .)
    NOT_EQ_DIFF     reduce using rule 339 (typeSuffixStar -> empty .)
    LESS_EQ_DIFF    reduce using rule 339 (typeSuffixStar -> empty .)
    LESS_DIFF       reduce using rule 339 (typeSuffixStar -> empty .)
    GREATER_EQ_DIFF reduce using rule 339 (typeSuffixStar -> empty .)
    GREATER_DIFF    reduce using rule 339 (typeSuffixStar -> empty .)
    SEMICOLON       reduce using rule 339 (typeSuffixStar -> empty .)
    RPAREN          reduce using rule 339 (typeSuffixStar -> empty .)
    COLON           reduce using rule 339 (typeSuffixStar -> empty .)
    RANGE           reduce using rule 339 (typeSuffixStar -> empty .)
    TYPEDEF         reduce using rule 339 (typeSuffixStar -> empty .)
    IDENTIFIER      reduce using rule 339 (typeSuffixStar -> empty .)
    RBRACE          reduce using rule 339 (typeSuffixStar -> empty .)
    DOUBLE_QUOTE    reduce using rule 339 (typeSuffixStar -> empty .)
    LBRACE          reduce using rule 339 (typeSuffixStar -> empty .)
    FINAL           reduce using rule 339 (typeSuffixStar -> empty .)
    AUTO            reduce using rule 339 (typeSuffixStar -> empty .)
    RETURN          reduce using rule 339 (typeSuffixStar -> empty .)
    CONST           reduce using rule 339 (typeSuffixStar -> empty .)
    IMMUTABLE       reduce using rule 339 (typeSuffixStar -> empty .)
    BOOL            reduce using rule 339 (typeSuffixStar -> empty .)
    SHORT           reduce using rule 339 (typeSuffixStar -> empty .)
    USHORT          reduce using rule 339 (typeSuffixStar -> empty .)
    INT             reduce using rule 339 (typeSuffixStar -> empty .)
    UINT            reduce using rule 339 (typeSuffixStar -> empty .)
    LONG            reduce using rule 339 (typeSuffixStar -> empty .)
    ULONG           reduce using rule 339 (typeSuffixStar -> empty .)
    CHAR            reduce using rule 339 (typeSuffixStar -> empty .)
    FLOAT           reduce using rule 339 (typeSuffixStar -> empty .)
    TYPEOF          reduce using rule 339 (typeSuffixStar -> empty .)
    ELLIPSIS        reduce using rule 339 (typeSuffixStar -> empty .)


state 173

    (371) typeSuffix -> FUNCTION . parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION . parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (255) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (256) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (257) parameters -> . LPAREN ELLIPSIS RPAREN
    (258) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 328

    parameters                     shift and go to state 327

state 174

    (364) typeSuffix -> TIMES .

    TIMES           reduce using rule 364 (typeSuffix -> TIMES .)
    LBRACKET        reduce using rule 364 (typeSuffix -> TIMES .)
    DELEGATE        reduce using rule 364 (typeSuffix -> TIMES .)
    FUNCTION        reduce using rule 364 (typeSuffix -> TIMES .)
    SEMICOLON       reduce using rule 364 (typeSuffix -> TIMES .)
    DOT             reduce using rule 364 (typeSuffix -> TIMES .)
    LPAREN          reduce using rule 364 (typeSuffix -> TIMES .)
    PLUS_PLUS       reduce using rule 364 (typeSuffix -> TIMES .)
    CARET           reduce using rule 364 (typeSuffix -> TIMES .)
    DIV             reduce using rule 364 (typeSuffix -> TIMES .)
    MODULO          reduce using rule 364 (typeSuffix -> TIMES .)
    PLUS            reduce using rule 364 (typeSuffix -> TIMES .)
    MINUS           reduce using rule 364 (typeSuffix -> TIMES .)
    TILDE           reduce using rule 364 (typeSuffix -> TIMES .)
    $end            reduce using rule 364 (typeSuffix -> TIMES .)
    LEFT_SHIFT      reduce using rule 364 (typeSuffix -> TIMES .)
    RIGHT_SHIFT     reduce using rule 364 (typeSuffix -> TIMES .)
    IS_EQ           reduce using rule 364 (typeSuffix -> TIMES .)
    NOT_EQ          reduce using rule 364 (typeSuffix -> TIMES .)
    AMPERSAND       reduce using rule 364 (typeSuffix -> TIMES .)
    PIPE            reduce using rule 364 (typeSuffix -> TIMES .)
    DOUBLE_AMPERSAND reduce using rule 364 (typeSuffix -> TIMES .)
    QUESTION        reduce using rule 364 (typeSuffix -> TIMES .)
    DOUBLE_PIPE     reduce using rule 364 (typeSuffix -> TIMES .)
    ASSIGN          reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_LEFT         reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_RIGHT        reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_PLUS         reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_MINUS        reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_TIMES        reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_MODULO       reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_AND_BIT      reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_DIV          reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_OR_BIT       reduce using rule 364 (typeSuffix -> TIMES .)
    EQ_XOR_BIT      reduce using rule 364 (typeSuffix -> TIMES .)
    RBRACKET        reduce using rule 364 (typeSuffix -> TIMES .)
    COMMA           reduce using rule 364 (typeSuffix -> TIMES .)
    LESS            reduce using rule 364 (typeSuffix -> TIMES .)
    LESS_EQ         reduce using rule 364 (typeSuffix -> TIMES .)
    GREATER         reduce using rule 364 (typeSuffix -> TIMES .)
    GREATER_EQ      reduce using rule 364 (typeSuffix -> TIMES .)
    IS_EQ_DIFF      reduce using rule 364 (typeSuffix -> TIMES .)
    NOT_EQ_DIFF     reduce using rule 364 (typeSuffix -> TIMES .)
    LESS_EQ_DIFF    reduce using rule 364 (typeSuffix -> TIMES .)
    LESS_DIFF       reduce using rule 364 (typeSuffix -> TIMES .)
    GREATER_EQ_DIFF reduce using rule 364 (typeSuffix -> TIMES .)
    GREATER_DIFF    reduce using rule 364 (typeSuffix -> TIMES .)
    RPAREN          reduce using rule 364 (typeSuffix -> TIMES .)
    COLON           reduce using rule 364 (typeSuffix -> TIMES .)
    RANGE           reduce using rule 364 (typeSuffix -> TIMES .)
    TYPEDEF         reduce using rule 364 (typeSuffix -> TIMES .)
    IDENTIFIER      reduce using rule 364 (typeSuffix -> TIMES .)
    RBRACE          reduce using rule 364 (typeSuffix -> TIMES .)
    DOUBLE_QUOTE    reduce using rule 364 (typeSuffix -> TIMES .)
    LBRACE          reduce using rule 364 (typeSuffix -> TIMES .)
    FINAL           reduce using rule 364 (typeSuffix -> TIMES .)
    AUTO            reduce using rule 364 (typeSuffix -> TIMES .)
    RETURN          reduce using rule 364 (typeSuffix -> TIMES .)
    CONST           reduce using rule 364 (typeSuffix -> TIMES .)
    IMMUTABLE       reduce using rule 364 (typeSuffix -> TIMES .)
    BOOL            reduce using rule 364 (typeSuffix -> TIMES .)
    SHORT           reduce using rule 364 (typeSuffix -> TIMES .)
    USHORT          reduce using rule 364 (typeSuffix -> TIMES .)
    INT             reduce using rule 364 (typeSuffix -> TIMES .)
    UINT            reduce using rule 364 (typeSuffix -> TIMES .)
    LONG            reduce using rule 364 (typeSuffix -> TIMES .)
    ULONG           reduce using rule 364 (typeSuffix -> TIMES .)
    CHAR            reduce using rule 364 (typeSuffix -> TIMES .)
    FLOAT           reduce using rule 364 (typeSuffix -> TIMES .)
    TYPEOF          reduce using rule 364 (typeSuffix -> TIMES .)
    ELLIPSIS        reduce using rule 364 (typeSuffix -> TIMES .)


state 175

    (338) typeSuffixStar -> typeSuffix . typeSuffixStar
    (338) typeSuffixStar -> . typeSuffix typeSuffixStar
    (339) typeSuffixStar -> . empty
    (364) typeSuffix -> . TIMES
    (365) typeSuffix -> . LBRACKET type RBRACKET
    (366) typeSuffix -> . LBRACKET RBRACKET
    (367) typeSuffix -> . LBRACKET assignExpression RBRACKET
    (368) typeSuffix -> . LBRACKET assignExpression RANGE assignExpression RBRACKET
    (369) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (371) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (373) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET
    (374) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET
    (407) empty -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    TIMES           shift and go to state 174
    LBRACKET        shift and go to state 169
    DELEGATE        shift and go to state 176
    FUNCTION        shift and go to state 173
    SEMICOLON       shift and go to state 171
    DOT             reduce using rule 407 (empty -> .)
    LPAREN          reduce using rule 407 (empty -> .)
    PLUS_PLUS       reduce using rule 407 (empty -> .)
    CARET           reduce using rule 407 (empty -> .)
    DIV             reduce using rule 407 (empty -> .)
    MODULO          reduce using rule 407 (empty -> .)
    PLUS            reduce using rule 407 (empty -> .)
    MINUS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    $end            reduce using rule 407 (empty -> .)
    LEFT_SHIFT      reduce using rule 407 (empty -> .)
    RIGHT_SHIFT     reduce using rule 407 (empty -> .)
    IS_EQ           reduce using rule 407 (empty -> .)
    NOT_EQ          reduce using rule 407 (empty -> .)
    AMPERSAND       reduce using rule 407 (empty -> .)
    PIPE            reduce using rule 407 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 407 (empty -> .)
    QUESTION        reduce using rule 407 (empty -> .)
    DOUBLE_PIPE     reduce using rule 407 (empty -> .)
    ASSIGN          reduce using rule 407 (empty -> .)
    EQ_LEFT         reduce using rule 407 (empty -> .)
    EQ_RIGHT        reduce using rule 407 (empty -> .)
    EQ_PLUS         reduce using rule 407 (empty -> .)
    EQ_MINUS        reduce using rule 407 (empty -> .)
    EQ_TIMES        reduce using rule 407 (empty -> .)
    EQ_MODULO       reduce using rule 407 (empty -> .)
    EQ_AND_BIT      reduce using rule 407 (empty -> .)
    EQ_DIV          reduce using rule 407 (empty -> .)
    EQ_OR_BIT       reduce using rule 407 (empty -> .)
    EQ_XOR_BIT      reduce using rule 407 (empty -> .)
    RBRACKET        reduce using rule 407 (empty -> .)
    COMMA           reduce using rule 407 (empty -> .)
    LESS            reduce using rule 407 (empty -> .)
    LESS_EQ         reduce using rule 407 (empty -> .)
    GREATER         reduce using rule 407 (empty -> .)
    GREATER_EQ      reduce using rule 407 (empty -> .)
    IS_EQ_DIFF      reduce using rule 407 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 407 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 407 (empty -> .)
    LESS_DIFF       reduce using rule 407 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 407 (empty -> .)
    GREATER_DIFF    reduce using rule 407 (empty -> .)
    RPAREN          reduce using rule 407 (empty -> .)
    COLON           reduce using rule 407 (empty -> .)
    RANGE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    RBRACE          reduce using rule 407 (empty -> .)
    DOUBLE_QUOTE    reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)
    FINAL           reduce using rule 407 (empty -> .)
    AUTO            reduce using rule 407 (empty -> .)
    RETURN          reduce using rule 407 (empty -> .)
    CONST           reduce using rule 407 (empty -> .)
    IMMUTABLE       reduce using rule 407 (empty -> .)
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    ELLIPSIS        reduce using rule 407 (empty -> .)

  ! LBRACKET        [ reduce using rule 407 (empty -> .) ]
  ! TIMES           [ reduce using rule 407 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 407 (empty -> .) ]

    typeSuffix                     shift and go to state 175
    typeSuffixStar                 shift and go to state 329
    empty                          shift and go to state 172

state 176

    (369) typeSuffix -> DELEGATE . parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE . parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (255) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (256) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (257) parameters -> . LPAREN ELLIPSIS RPAREN
    (258) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 328

    parameters                     shift and go to state 330

state 177

    (2) addExpression -> addExpression PLUS . mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 331
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 178

    (3) addExpression -> addExpression MINUS . mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 332
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 179

    (4) addExpression -> addExpression TILDE . mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 333
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 180

    (204) indexExpression -> unaryExpression LBRACKET . RBRACKET
    (205) indexExpression -> unaryExpression LBRACKET . index comma_index RBRACKET
    (202) index -> . assignExpression
    (203) index -> . assignExpression RANGE assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RBRACKET        shift and go to state 336
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    orOrExpression                 shift and go to state 73
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    index                          shift and go to state 334
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 335
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 181

    (394) unaryExpression -> unaryExpression PLUS_PLUS .

    DOT             reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LBRACKET        reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    CARET           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TIMES           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DIV             reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MODULO          reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PLUS            reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MINUS           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TILDE           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LEFT_SHIFT      reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RIGHT_SHIFT     reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IS_EQ           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    NOT_EQ          reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    AMPERSAND       reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PIPE            reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    QUESTION        reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DOUBLE_PIPE     reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    ASSIGN          reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_LEFT         reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_RIGHT        reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_PLUS         reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_MINUS        reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_TIMES        reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_MODULO       reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_AND_BIT      reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_DIV          reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_OR_BIT       reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_XOR_BIT      reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    SEMICOLON       reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    COMMA           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS            reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_EQ         reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER         reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_EQ      reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IS_EQ_DIFF      reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    NOT_EQ_DIFF     reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_EQ_DIFF    reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_DIFF       reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_EQ_DIFF reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_DIFF    reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RPAREN          reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    $end            reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RBRACKET        reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    COLON           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RANGE           reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TYPEDEF         reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IDENTIFIER      reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RBRACE          reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DOUBLE_QUOTE    reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LPAREN          reduce using rule 394 (unaryExpression -> unaryExpression PLUS_PLUS .)


state 182

    (390) unaryExpression -> unaryExpression DOT . newExpression
    (391) unaryExpression -> unaryExpression DOT .
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody

    DOT             reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    PLUS_PLUS       reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    LBRACKET        reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    CARET           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    TIMES           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    DIV             reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    MODULO          reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    PLUS            reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    MINUS           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    TILDE           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    LEFT_SHIFT      reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    RIGHT_SHIFT     reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    IS_EQ           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    NOT_EQ          reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    AMPERSAND       reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    PIPE            reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    DOUBLE_AMPERSAND reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    QUESTION        reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    DOUBLE_PIPE     reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    ASSIGN          reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_LEFT         reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_RIGHT        reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_PLUS         reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_MINUS        reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_TIMES        reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_MODULO       reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_AND_BIT      reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_DIV          reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_OR_BIT       reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    EQ_XOR_BIT      reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    SEMICOLON       reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    COMMA           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    LESS            reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    LESS_EQ         reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    GREATER         reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    GREATER_EQ      reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    IS_EQ_DIFF      reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    NOT_EQ_DIFF     reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    LESS_EQ_DIFF    reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    LESS_DIFF       reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    GREATER_EQ_DIFF reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    GREATER_DIFF    reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    RPAREN          reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    $end            reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    RBRACKET        reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    COLON           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    RANGE           reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    TYPEDEF         reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    IDENTIFIER      reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    RBRACE          reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    DOUBLE_QUOTE    reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    LPAREN          reduce using rule 391 (unaryExpression -> unaryExpression DOT .)
    NEW             shift and go to state 33

    newExpression                  shift and go to state 337
    newAnonClassExpression         shift and go to state 25

state 183

    (382) unaryExpression -> PLUS_PLUS unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TIMES           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DIV             reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    MODULO          reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    PLUS            reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    MINUS           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TILDE           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IS_EQ           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    NOT_EQ          reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    AMPERSAND       reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    PIPE            reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    QUESTION        reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    ASSIGN          reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_LEFT         reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_RIGHT        reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_PLUS         reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_MINUS        reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_TIMES        reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_MODULO       reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_DIV          reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    SEMICOLON       reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    COMMA           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS            reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_EQ         reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER         reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_EQ      reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_DIFF       reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_DIFF    reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RPAREN          reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    $end            reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RBRACKET        reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    COLON           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RANGE           reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TYPEDEF         reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IDENTIFIER      reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RBRACE          reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LPAREN          reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 382 (unaryExpression -> PLUS_PLUS unaryExpression .) ]


state 184

    (219) mulExpression -> mulExpression DIV .

    TIMES           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    DIV             reduce using rule 219 (mulExpression -> mulExpression DIV .)
    MODULO          reduce using rule 219 (mulExpression -> mulExpression DIV .)
    PLUS            reduce using rule 219 (mulExpression -> mulExpression DIV .)
    MINUS           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    TILDE           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    LEFT_SHIFT      reduce using rule 219 (mulExpression -> mulExpression DIV .)
    RIGHT_SHIFT     reduce using rule 219 (mulExpression -> mulExpression DIV .)
    IS_EQ           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    NOT_EQ          reduce using rule 219 (mulExpression -> mulExpression DIV .)
    AMPERSAND       reduce using rule 219 (mulExpression -> mulExpression DIV .)
    CARET           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    PIPE            reduce using rule 219 (mulExpression -> mulExpression DIV .)
    DOUBLE_AMPERSAND reduce using rule 219 (mulExpression -> mulExpression DIV .)
    QUESTION        reduce using rule 219 (mulExpression -> mulExpression DIV .)
    DOUBLE_PIPE     reduce using rule 219 (mulExpression -> mulExpression DIV .)
    ASSIGN          reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_LEFT         reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_RIGHT        reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_PLUS         reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_MINUS        reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_TIMES        reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_MODULO       reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_AND_BIT      reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_DIV          reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_OR_BIT       reduce using rule 219 (mulExpression -> mulExpression DIV .)
    EQ_XOR_BIT      reduce using rule 219 (mulExpression -> mulExpression DIV .)
    TYPEDEF         reduce using rule 219 (mulExpression -> mulExpression DIV .)
    IDENTIFIER      reduce using rule 219 (mulExpression -> mulExpression DIV .)
    RBRACE          reduce using rule 219 (mulExpression -> mulExpression DIV .)
    LESS            reduce using rule 219 (mulExpression -> mulExpression DIV .)
    LESS_EQ         reduce using rule 219 (mulExpression -> mulExpression DIV .)
    GREATER         reduce using rule 219 (mulExpression -> mulExpression DIV .)
    GREATER_EQ      reduce using rule 219 (mulExpression -> mulExpression DIV .)
    IS_EQ_DIFF      reduce using rule 219 (mulExpression -> mulExpression DIV .)
    NOT_EQ_DIFF     reduce using rule 219 (mulExpression -> mulExpression DIV .)
    LESS_EQ_DIFF    reduce using rule 219 (mulExpression -> mulExpression DIV .)
    LESS_DIFF       reduce using rule 219 (mulExpression -> mulExpression DIV .)
    GREATER_EQ_DIFF reduce using rule 219 (mulExpression -> mulExpression DIV .)
    GREATER_DIFF    reduce using rule 219 (mulExpression -> mulExpression DIV .)
    COMMA           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    RPAREN          reduce using rule 219 (mulExpression -> mulExpression DIV .)
    SEMICOLON       reduce using rule 219 (mulExpression -> mulExpression DIV .)
    DOT             reduce using rule 219 (mulExpression -> mulExpression DIV .)
    PLUS_PLUS       reduce using rule 219 (mulExpression -> mulExpression DIV .)
    LBRACKET        reduce using rule 219 (mulExpression -> mulExpression DIV .)
    $end            reduce using rule 219 (mulExpression -> mulExpression DIV .)
    RBRACKET        reduce using rule 219 (mulExpression -> mulExpression DIV .)
    COLON           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    RANGE           reduce using rule 219 (mulExpression -> mulExpression DIV .)
    DOUBLE_QUOTE    reduce using rule 219 (mulExpression -> mulExpression DIV .)
    LPAREN          reduce using rule 219 (mulExpression -> mulExpression DIV .)


state 185

    (220) mulExpression -> mulExpression MODULO .

    TIMES           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    DIV             reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    MODULO          reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    PLUS            reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    MINUS           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    TILDE           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    LEFT_SHIFT      reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    RIGHT_SHIFT     reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    IS_EQ           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    NOT_EQ          reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    AMPERSAND       reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    CARET           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    PIPE            reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    DOUBLE_AMPERSAND reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    QUESTION        reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    DOUBLE_PIPE     reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    ASSIGN          reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_LEFT         reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_RIGHT        reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_PLUS         reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_MINUS        reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_TIMES        reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_MODULO       reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_AND_BIT      reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_DIV          reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_OR_BIT       reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    EQ_XOR_BIT      reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    TYPEDEF         reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    IDENTIFIER      reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    RBRACE          reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    LESS            reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    LESS_EQ         reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    GREATER         reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    GREATER_EQ      reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    IS_EQ_DIFF      reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    NOT_EQ_DIFF     reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    LESS_EQ_DIFF    reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    LESS_DIFF       reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    GREATER_EQ_DIFF reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    GREATER_DIFF    reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    COMMA           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    RPAREN          reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    SEMICOLON       reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    DOT             reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    PLUS_PLUS       reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    LBRACKET        reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    $end            reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    RBRACKET        reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    COLON           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    RANGE           reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    DOUBLE_QUOTE    reduce using rule 220 (mulExpression -> mulExpression MODULO .)
    LPAREN          reduce using rule 220 (mulExpression -> mulExpression MODULO .)


state 186

    (218) mulExpression -> mulExpression TIMES .

    TIMES           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    DIV             reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    MODULO          reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    PLUS            reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    MINUS           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    TILDE           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    LEFT_SHIFT      reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    RIGHT_SHIFT     reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    IS_EQ           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    NOT_EQ          reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    AMPERSAND       reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    CARET           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    PIPE            reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    DOUBLE_AMPERSAND reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    QUESTION        reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    DOUBLE_PIPE     reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    ASSIGN          reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_LEFT         reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_RIGHT        reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_PLUS         reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_MINUS        reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_TIMES        reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_MODULO       reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_AND_BIT      reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_DIV          reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_OR_BIT       reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    EQ_XOR_BIT      reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    TYPEDEF         reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    IDENTIFIER      reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    RBRACE          reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    LESS            reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    LESS_EQ         reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    GREATER         reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    GREATER_EQ      reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    IS_EQ_DIFF      reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    NOT_EQ_DIFF     reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    LESS_EQ_DIFF    reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    LESS_DIFF       reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    GREATER_EQ_DIFF reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    GREATER_DIFF    reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    COMMA           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    RPAREN          reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    SEMICOLON       reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    DOT             reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    PLUS_PLUS       reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    LBRACKET        reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    $end            reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    RBRACKET        reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    COLON           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    RANGE           reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    DOUBLE_QUOTE    reduce using rule 218 (mulExpression -> mulExpression TIMES .)
    LPAREN          reduce using rule 218 (mulExpression -> mulExpression TIMES .)


state 187

    (167) functionCallExpression -> symbol arguments . unaryExpression arguments
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 338
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 188

    (378) unaryExpression -> TIMES unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    TIMES           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    DIV             reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    MODULO          reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    PLUS            reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    MINUS           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    TILDE           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    LEFT_SHIFT      reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    RIGHT_SHIFT     reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    IS_EQ           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    NOT_EQ          reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    AMPERSAND       reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    PIPE            reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    QUESTION        reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    DOUBLE_PIPE     reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    ASSIGN          reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_LEFT         reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_RIGHT        reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_PLUS         reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_MINUS        reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_TIMES        reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_MODULO       reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_AND_BIT      reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_DIV          reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_OR_BIT       reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    EQ_XOR_BIT      reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    SEMICOLON       reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    COMMA           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    LESS            reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    LESS_EQ         reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    GREATER         reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    GREATER_EQ      reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    IS_EQ_DIFF      reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    LESS_DIFF       reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    GREATER_DIFF    reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    RPAREN          reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    $end            reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    RBRACKET        reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    COLON           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    RANGE           reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    TYPEDEF         reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    IDENTIFIER      reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    RBRACE          reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    LPAREN          reduce using rule 378 (unaryExpression -> TIMES unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 378 (unaryExpression -> TIMES unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 378 (unaryExpression -> TIMES unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 378 (unaryExpression -> TIMES unaryExpression .) ]


state 189

    (272) primaryExpression -> LPAREN expression . RPAREN
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 339
    COMMA           shift and go to state 250


state 190

    (263) LIT_STRPlus -> LIT_STR LIT_STRPlus .

    DOT             reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LBRACKET        reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    CARET           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TIMES           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DIV             reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MODULO          reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS            reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TILDE           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ          reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    AMPERSAND       reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PIPE            reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    QUESTION        reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    ASSIGN          reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_LEFT         reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_PLUS         reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MINUS        reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_TIMES        reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MODULO       reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_DIV          reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    SEMICOLON       reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COMMA           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS            reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ         reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER         reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ      reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ_DIFF      reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ_DIFF     reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ_DIFF    reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_DIFF       reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ_DIFF reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_DIFF    reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACKET        reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RPAREN          reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    $end            reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COLON           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RANGE           reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TYPEDEF         reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IDENTIFIER      reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACE          reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_QUOTE    reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LPAREN          reduce using rule 263 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)


state 191

    (406) xorExpression -> xorExpression CARET . andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 340
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 192

    (290) relOperator -> LESS_EQ .

    AMPERSAND       reduce using rule 290 (relOperator -> LESS_EQ .)
    EXCLAMATION     reduce using rule 290 (relOperator -> LESS_EQ .)
    TIMES           reduce using rule 290 (relOperator -> LESS_EQ .)
    PLUS            reduce using rule 290 (relOperator -> LESS_EQ .)
    MINUS           reduce using rule 290 (relOperator -> LESS_EQ .)
    DOT             reduce using rule 290 (relOperator -> LESS_EQ .)
    PLUS_PLUS       reduce using rule 290 (relOperator -> LESS_EQ .)
    ELLIPSIS        reduce using rule 290 (relOperator -> LESS_EQ .)
    LBRACKET        reduce using rule 290 (relOperator -> LESS_EQ .)
    RANGE           reduce using rule 290 (relOperator -> LESS_EQ .)
    LPAREN          reduce using rule 290 (relOperator -> LESS_EQ .)
    DOLLAR          reduce using rule 290 (relOperator -> LESS_EQ .)
    THIS            reduce using rule 290 (relOperator -> LESS_EQ .)
    NULL            reduce using rule 290 (relOperator -> LESS_EQ .)
    TRUE            reduce using rule 290 (relOperator -> LESS_EQ .)
    FALSE           reduce using rule 290 (relOperator -> LESS_EQ .)
    INUMBER         reduce using rule 290 (relOperator -> LESS_EQ .)
    DNUMBER         reduce using rule 290 (relOperator -> LESS_EQ .)
    LIT_CHAR        reduce using rule 290 (relOperator -> LESS_EQ .)
    NEW             reduce using rule 290 (relOperator -> LESS_EQ .)
    DELETE          reduce using rule 290 (relOperator -> LESS_EQ .)
    CAST            reduce using rule 290 (relOperator -> LESS_EQ .)
    IDENTIFIER      reduce using rule 290 (relOperator -> LESS_EQ .)
    CONST           reduce using rule 290 (relOperator -> LESS_EQ .)
    IMMUTABLE       reduce using rule 290 (relOperator -> LESS_EQ .)
    FUNCTION        reduce using rule 290 (relOperator -> LESS_EQ .)
    MIXIN           reduce using rule 290 (relOperator -> LESS_EQ .)
    IMPORT          reduce using rule 290 (relOperator -> LESS_EQ .)
    LIT_STR         reduce using rule 290 (relOperator -> LESS_EQ .)
    BOOL            reduce using rule 290 (relOperator -> LESS_EQ .)
    SHORT           reduce using rule 290 (relOperator -> LESS_EQ .)
    USHORT          reduce using rule 290 (relOperator -> LESS_EQ .)
    INT             reduce using rule 290 (relOperator -> LESS_EQ .)
    UINT            reduce using rule 290 (relOperator -> LESS_EQ .)
    LONG            reduce using rule 290 (relOperator -> LESS_EQ .)
    ULONG           reduce using rule 290 (relOperator -> LESS_EQ .)
    CHAR            reduce using rule 290 (relOperator -> LESS_EQ .)
    FLOAT           reduce using rule 290 (relOperator -> LESS_EQ .)
    TYPEOF          reduce using rule 290 (relOperator -> LESS_EQ .)
    LBRACE          reduce using rule 290 (relOperator -> LESS_EQ .)


state 193

    (297) relOperator -> GREATER_EQ_DIFF .

    AMPERSAND       reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    EXCLAMATION     reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    TIMES           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    PLUS            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    MINUS           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    DOT             reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    ELLIPSIS        reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    LBRACKET        reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    RANGE           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    LPAREN          reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    DOLLAR          reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    THIS            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    NULL            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    TRUE            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    FALSE           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    INUMBER         reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    DNUMBER         reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    LIT_CHAR        reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    NEW             reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    DELETE          reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    CAST            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    IDENTIFIER      reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    CONST           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    IMMUTABLE       reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    FUNCTION        reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    MIXIN           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    IMPORT          reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    LIT_STR         reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    BOOL            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    SHORT           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    USHORT          reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    INT             reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    UINT            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    LONG            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    ULONG           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    CHAR            reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    FLOAT           reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    TYPEOF          reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)
    LBRACE          reduce using rule 297 (relOperator -> GREATER_EQ_DIFF .)


state 194

    (291) relOperator -> GREATER .

    AMPERSAND       reduce using rule 291 (relOperator -> GREATER .)
    EXCLAMATION     reduce using rule 291 (relOperator -> GREATER .)
    TIMES           reduce using rule 291 (relOperator -> GREATER .)
    PLUS            reduce using rule 291 (relOperator -> GREATER .)
    MINUS           reduce using rule 291 (relOperator -> GREATER .)
    DOT             reduce using rule 291 (relOperator -> GREATER .)
    PLUS_PLUS       reduce using rule 291 (relOperator -> GREATER .)
    ELLIPSIS        reduce using rule 291 (relOperator -> GREATER .)
    LBRACKET        reduce using rule 291 (relOperator -> GREATER .)
    RANGE           reduce using rule 291 (relOperator -> GREATER .)
    LPAREN          reduce using rule 291 (relOperator -> GREATER .)
    DOLLAR          reduce using rule 291 (relOperator -> GREATER .)
    THIS            reduce using rule 291 (relOperator -> GREATER .)
    NULL            reduce using rule 291 (relOperator -> GREATER .)
    TRUE            reduce using rule 291 (relOperator -> GREATER .)
    FALSE           reduce using rule 291 (relOperator -> GREATER .)
    INUMBER         reduce using rule 291 (relOperator -> GREATER .)
    DNUMBER         reduce using rule 291 (relOperator -> GREATER .)
    LIT_CHAR        reduce using rule 291 (relOperator -> GREATER .)
    NEW             reduce using rule 291 (relOperator -> GREATER .)
    DELETE          reduce using rule 291 (relOperator -> GREATER .)
    CAST            reduce using rule 291 (relOperator -> GREATER .)
    IDENTIFIER      reduce using rule 291 (relOperator -> GREATER .)
    CONST           reduce using rule 291 (relOperator -> GREATER .)
    IMMUTABLE       reduce using rule 291 (relOperator -> GREATER .)
    FUNCTION        reduce using rule 291 (relOperator -> GREATER .)
    MIXIN           reduce using rule 291 (relOperator -> GREATER .)
    IMPORT          reduce using rule 291 (relOperator -> GREATER .)
    LIT_STR         reduce using rule 291 (relOperator -> GREATER .)
    BOOL            reduce using rule 291 (relOperator -> GREATER .)
    SHORT           reduce using rule 291 (relOperator -> GREATER .)
    USHORT          reduce using rule 291 (relOperator -> GREATER .)
    INT             reduce using rule 291 (relOperator -> GREATER .)
    UINT            reduce using rule 291 (relOperator -> GREATER .)
    LONG            reduce using rule 291 (relOperator -> GREATER .)
    ULONG           reduce using rule 291 (relOperator -> GREATER .)
    CHAR            reduce using rule 291 (relOperator -> GREATER .)
    FLOAT           reduce using rule 291 (relOperator -> GREATER .)
    TYPEOF          reduce using rule 291 (relOperator -> GREATER .)
    LBRACE          reduce using rule 291 (relOperator -> GREATER .)


state 195

    (289) relOperator -> LESS .

    AMPERSAND       reduce using rule 289 (relOperator -> LESS .)
    EXCLAMATION     reduce using rule 289 (relOperator -> LESS .)
    TIMES           reduce using rule 289 (relOperator -> LESS .)
    PLUS            reduce using rule 289 (relOperator -> LESS .)
    MINUS           reduce using rule 289 (relOperator -> LESS .)
    DOT             reduce using rule 289 (relOperator -> LESS .)
    PLUS_PLUS       reduce using rule 289 (relOperator -> LESS .)
    ELLIPSIS        reduce using rule 289 (relOperator -> LESS .)
    LBRACKET        reduce using rule 289 (relOperator -> LESS .)
    RANGE           reduce using rule 289 (relOperator -> LESS .)
    LPAREN          reduce using rule 289 (relOperator -> LESS .)
    DOLLAR          reduce using rule 289 (relOperator -> LESS .)
    THIS            reduce using rule 289 (relOperator -> LESS .)
    NULL            reduce using rule 289 (relOperator -> LESS .)
    TRUE            reduce using rule 289 (relOperator -> LESS .)
    FALSE           reduce using rule 289 (relOperator -> LESS .)
    INUMBER         reduce using rule 289 (relOperator -> LESS .)
    DNUMBER         reduce using rule 289 (relOperator -> LESS .)
    LIT_CHAR        reduce using rule 289 (relOperator -> LESS .)
    NEW             reduce using rule 289 (relOperator -> LESS .)
    DELETE          reduce using rule 289 (relOperator -> LESS .)
    CAST            reduce using rule 289 (relOperator -> LESS .)
    IDENTIFIER      reduce using rule 289 (relOperator -> LESS .)
    CONST           reduce using rule 289 (relOperator -> LESS .)
    IMMUTABLE       reduce using rule 289 (relOperator -> LESS .)
    FUNCTION        reduce using rule 289 (relOperator -> LESS .)
    MIXIN           reduce using rule 289 (relOperator -> LESS .)
    IMPORT          reduce using rule 289 (relOperator -> LESS .)
    LIT_STR         reduce using rule 289 (relOperator -> LESS .)
    BOOL            reduce using rule 289 (relOperator -> LESS .)
    SHORT           reduce using rule 289 (relOperator -> LESS .)
    USHORT          reduce using rule 289 (relOperator -> LESS .)
    INT             reduce using rule 289 (relOperator -> LESS .)
    UINT            reduce using rule 289 (relOperator -> LESS .)
    LONG            reduce using rule 289 (relOperator -> LESS .)
    ULONG           reduce using rule 289 (relOperator -> LESS .)
    CHAR            reduce using rule 289 (relOperator -> LESS .)
    FLOAT           reduce using rule 289 (relOperator -> LESS .)
    TYPEOF          reduce using rule 289 (relOperator -> LESS .)
    LBRACE          reduce using rule 289 (relOperator -> LESS .)


state 196

    (296) relOperator -> LESS_DIFF .

    AMPERSAND       reduce using rule 296 (relOperator -> LESS_DIFF .)
    EXCLAMATION     reduce using rule 296 (relOperator -> LESS_DIFF .)
    TIMES           reduce using rule 296 (relOperator -> LESS_DIFF .)
    PLUS            reduce using rule 296 (relOperator -> LESS_DIFF .)
    MINUS           reduce using rule 296 (relOperator -> LESS_DIFF .)
    DOT             reduce using rule 296 (relOperator -> LESS_DIFF .)
    PLUS_PLUS       reduce using rule 296 (relOperator -> LESS_DIFF .)
    ELLIPSIS        reduce using rule 296 (relOperator -> LESS_DIFF .)
    LBRACKET        reduce using rule 296 (relOperator -> LESS_DIFF .)
    RANGE           reduce using rule 296 (relOperator -> LESS_DIFF .)
    LPAREN          reduce using rule 296 (relOperator -> LESS_DIFF .)
    DOLLAR          reduce using rule 296 (relOperator -> LESS_DIFF .)
    THIS            reduce using rule 296 (relOperator -> LESS_DIFF .)
    NULL            reduce using rule 296 (relOperator -> LESS_DIFF .)
    TRUE            reduce using rule 296 (relOperator -> LESS_DIFF .)
    FALSE           reduce using rule 296 (relOperator -> LESS_DIFF .)
    INUMBER         reduce using rule 296 (relOperator -> LESS_DIFF .)
    DNUMBER         reduce using rule 296 (relOperator -> LESS_DIFF .)
    LIT_CHAR        reduce using rule 296 (relOperator -> LESS_DIFF .)
    NEW             reduce using rule 296 (relOperator -> LESS_DIFF .)
    DELETE          reduce using rule 296 (relOperator -> LESS_DIFF .)
    CAST            reduce using rule 296 (relOperator -> LESS_DIFF .)
    IDENTIFIER      reduce using rule 296 (relOperator -> LESS_DIFF .)
    CONST           reduce using rule 296 (relOperator -> LESS_DIFF .)
    IMMUTABLE       reduce using rule 296 (relOperator -> LESS_DIFF .)
    FUNCTION        reduce using rule 296 (relOperator -> LESS_DIFF .)
    MIXIN           reduce using rule 296 (relOperator -> LESS_DIFF .)
    IMPORT          reduce using rule 296 (relOperator -> LESS_DIFF .)
    LIT_STR         reduce using rule 296 (relOperator -> LESS_DIFF .)
    BOOL            reduce using rule 296 (relOperator -> LESS_DIFF .)
    SHORT           reduce using rule 296 (relOperator -> LESS_DIFF .)
    USHORT          reduce using rule 296 (relOperator -> LESS_DIFF .)
    INT             reduce using rule 296 (relOperator -> LESS_DIFF .)
    UINT            reduce using rule 296 (relOperator -> LESS_DIFF .)
    LONG            reduce using rule 296 (relOperator -> LESS_DIFF .)
    ULONG           reduce using rule 296 (relOperator -> LESS_DIFF .)
    CHAR            reduce using rule 296 (relOperator -> LESS_DIFF .)
    FLOAT           reduce using rule 296 (relOperator -> LESS_DIFF .)
    TYPEOF          reduce using rule 296 (relOperator -> LESS_DIFF .)
    LBRACE          reduce using rule 296 (relOperator -> LESS_DIFF .)


state 197

    (293) relOperator -> IS_EQ_DIFF .

    AMPERSAND       reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    EXCLAMATION     reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    TIMES           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    PLUS            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    MINUS           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    DOT             reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    ELLIPSIS        reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    LBRACKET        reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    RANGE           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    LPAREN          reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    DOLLAR          reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    THIS            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    NULL            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    TRUE            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    FALSE           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    INUMBER         reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    DNUMBER         reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    LIT_CHAR        reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    NEW             reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    DELETE          reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    CAST            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    IDENTIFIER      reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    CONST           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    IMMUTABLE       reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    FUNCTION        reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    MIXIN           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    IMPORT          reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    LIT_STR         reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    BOOL            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    SHORT           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    USHORT          reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    INT             reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    UINT            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    LONG            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    ULONG           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    CHAR            reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    FLOAT           reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    TYPEOF          reduce using rule 293 (relOperator -> IS_EQ_DIFF .)
    LBRACE          reduce using rule 293 (relOperator -> IS_EQ_DIFF .)


state 198

    (292) relOperator -> GREATER_EQ .

    AMPERSAND       reduce using rule 292 (relOperator -> GREATER_EQ .)
    EXCLAMATION     reduce using rule 292 (relOperator -> GREATER_EQ .)
    TIMES           reduce using rule 292 (relOperator -> GREATER_EQ .)
    PLUS            reduce using rule 292 (relOperator -> GREATER_EQ .)
    MINUS           reduce using rule 292 (relOperator -> GREATER_EQ .)
    DOT             reduce using rule 292 (relOperator -> GREATER_EQ .)
    PLUS_PLUS       reduce using rule 292 (relOperator -> GREATER_EQ .)
    ELLIPSIS        reduce using rule 292 (relOperator -> GREATER_EQ .)
    LBRACKET        reduce using rule 292 (relOperator -> GREATER_EQ .)
    RANGE           reduce using rule 292 (relOperator -> GREATER_EQ .)
    LPAREN          reduce using rule 292 (relOperator -> GREATER_EQ .)
    DOLLAR          reduce using rule 292 (relOperator -> GREATER_EQ .)
    THIS            reduce using rule 292 (relOperator -> GREATER_EQ .)
    NULL            reduce using rule 292 (relOperator -> GREATER_EQ .)
    TRUE            reduce using rule 292 (relOperator -> GREATER_EQ .)
    FALSE           reduce using rule 292 (relOperator -> GREATER_EQ .)
    INUMBER         reduce using rule 292 (relOperator -> GREATER_EQ .)
    DNUMBER         reduce using rule 292 (relOperator -> GREATER_EQ .)
    LIT_CHAR        reduce using rule 292 (relOperator -> GREATER_EQ .)
    NEW             reduce using rule 292 (relOperator -> GREATER_EQ .)
    DELETE          reduce using rule 292 (relOperator -> GREATER_EQ .)
    CAST            reduce using rule 292 (relOperator -> GREATER_EQ .)
    IDENTIFIER      reduce using rule 292 (relOperator -> GREATER_EQ .)
    CONST           reduce using rule 292 (relOperator -> GREATER_EQ .)
    IMMUTABLE       reduce using rule 292 (relOperator -> GREATER_EQ .)
    FUNCTION        reduce using rule 292 (relOperator -> GREATER_EQ .)
    MIXIN           reduce using rule 292 (relOperator -> GREATER_EQ .)
    IMPORT          reduce using rule 292 (relOperator -> GREATER_EQ .)
    LIT_STR         reduce using rule 292 (relOperator -> GREATER_EQ .)
    BOOL            reduce using rule 292 (relOperator -> GREATER_EQ .)
    SHORT           reduce using rule 292 (relOperator -> GREATER_EQ .)
    USHORT          reduce using rule 292 (relOperator -> GREATER_EQ .)
    INT             reduce using rule 292 (relOperator -> GREATER_EQ .)
    UINT            reduce using rule 292 (relOperator -> GREATER_EQ .)
    LONG            reduce using rule 292 (relOperator -> GREATER_EQ .)
    ULONG           reduce using rule 292 (relOperator -> GREATER_EQ .)
    CHAR            reduce using rule 292 (relOperator -> GREATER_EQ .)
    FLOAT           reduce using rule 292 (relOperator -> GREATER_EQ .)
    TYPEOF          reduce using rule 292 (relOperator -> GREATER_EQ .)
    LBRACE          reduce using rule 292 (relOperator -> GREATER_EQ .)


state 199

    (294) relOperator -> NOT_EQ_DIFF .

    AMPERSAND       reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    EXCLAMATION     reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    TIMES           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    PLUS            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    MINUS           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    DOT             reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    ELLIPSIS        reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    LBRACKET        reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    RANGE           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    LPAREN          reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    DOLLAR          reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    THIS            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    NULL            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    TRUE            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    FALSE           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    INUMBER         reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    DNUMBER         reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    LIT_CHAR        reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    NEW             reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    DELETE          reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    CAST            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    IDENTIFIER      reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    CONST           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    IMMUTABLE       reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    FUNCTION        reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    MIXIN           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    IMPORT          reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    LIT_STR         reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    BOOL            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    SHORT           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    USHORT          reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    INT             reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    UINT            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    LONG            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    ULONG           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    CHAR            reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    FLOAT           reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    TYPEOF          reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)
    LBRACE          reduce using rule 294 (relOperator -> NOT_EQ_DIFF .)


state 200

    (298) relOperator -> GREATER_DIFF .

    AMPERSAND       reduce using rule 298 (relOperator -> GREATER_DIFF .)
    EXCLAMATION     reduce using rule 298 (relOperator -> GREATER_DIFF .)
    TIMES           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    PLUS            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    MINUS           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    DOT             reduce using rule 298 (relOperator -> GREATER_DIFF .)
    PLUS_PLUS       reduce using rule 298 (relOperator -> GREATER_DIFF .)
    ELLIPSIS        reduce using rule 298 (relOperator -> GREATER_DIFF .)
    LBRACKET        reduce using rule 298 (relOperator -> GREATER_DIFF .)
    RANGE           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    LPAREN          reduce using rule 298 (relOperator -> GREATER_DIFF .)
    DOLLAR          reduce using rule 298 (relOperator -> GREATER_DIFF .)
    THIS            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    NULL            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    TRUE            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    FALSE           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    INUMBER         reduce using rule 298 (relOperator -> GREATER_DIFF .)
    DNUMBER         reduce using rule 298 (relOperator -> GREATER_DIFF .)
    LIT_CHAR        reduce using rule 298 (relOperator -> GREATER_DIFF .)
    NEW             reduce using rule 298 (relOperator -> GREATER_DIFF .)
    DELETE          reduce using rule 298 (relOperator -> GREATER_DIFF .)
    CAST            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    IDENTIFIER      reduce using rule 298 (relOperator -> GREATER_DIFF .)
    CONST           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    IMMUTABLE       reduce using rule 298 (relOperator -> GREATER_DIFF .)
    FUNCTION        reduce using rule 298 (relOperator -> GREATER_DIFF .)
    MIXIN           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    IMPORT          reduce using rule 298 (relOperator -> GREATER_DIFF .)
    LIT_STR         reduce using rule 298 (relOperator -> GREATER_DIFF .)
    BOOL            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    SHORT           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    USHORT          reduce using rule 298 (relOperator -> GREATER_DIFF .)
    INT             reduce using rule 298 (relOperator -> GREATER_DIFF .)
    UINT            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    LONG            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    ULONG           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    CHAR            reduce using rule 298 (relOperator -> GREATER_DIFF .)
    FLOAT           reduce using rule 298 (relOperator -> GREATER_DIFF .)
    TYPEOF          reduce using rule 298 (relOperator -> GREATER_DIFF .)
    LBRACE          reduce using rule 298 (relOperator -> GREATER_DIFF .)


state 201

    (295) relOperator -> LESS_EQ_DIFF .

    AMPERSAND       reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    EXCLAMATION     reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    TIMES           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    PLUS            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    MINUS           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    DOT             reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    ELLIPSIS        reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    LBRACKET        reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    RANGE           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    LPAREN          reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    DOLLAR          reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    THIS            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    NULL            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    TRUE            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    FALSE           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    INUMBER         reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    DNUMBER         reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    LIT_CHAR        reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    NEW             reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    DELETE          reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    CAST            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    IDENTIFIER      reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    CONST           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    IMMUTABLE       reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    FUNCTION        reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    MIXIN           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    IMPORT          reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    LIT_STR         reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    BOOL            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    SHORT           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    USHORT          reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    INT             reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    UINT            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    LONG            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    ULONG           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    CHAR            reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    FLOAT           reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    TYPEOF          reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)
    LBRACE          reduce using rule 295 (relOperator -> LESS_EQ_DIFF .)


state 202

    (288) relExpression -> relExpression relOperator . shiftExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    shiftExpression                shift and go to state 341
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 203

    (15) andAndExpression -> andAndExpression DOUBLE_AMPERSAND . orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 342
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 204

    (17) andExpression -> andExpression AMPERSAND . cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 343
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 205

    (336) ternaryExpression -> orOrExpression QUESTION . expression COLON ternaryExpression
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 344

state 206

    (238) orOrExpression -> orOrExpression DOUBLE_PIPE . andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 345
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 207

    (36) assignOperator -> EQ_RIGHT .

    AMPERSAND       reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    EXCLAMATION     reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    TIMES           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    PLUS            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    MINUS           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    DOT             reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    PLUS_PLUS       reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    ELLIPSIS        reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    LBRACKET        reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    RANGE           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    LPAREN          reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    DOLLAR          reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    THIS            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    NULL            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    TRUE            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    FALSE           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    INUMBER         reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    DNUMBER         reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    LIT_CHAR        reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    NEW             reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    DELETE          reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    CAST            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    IDENTIFIER      reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    CONST           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    IMMUTABLE       reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    FUNCTION        reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    MIXIN           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    IMPORT          reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    LIT_STR         reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    BOOL            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    SHORT           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    USHORT          reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    INT             reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    UINT            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    LONG            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    ULONG           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    CHAR            reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    FLOAT           reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    TYPEOF          reduce using rule 36 (assignOperator -> EQ_RIGHT .)
    LBRACE          reduce using rule 36 (assignOperator -> EQ_RIGHT .)


state 208

    (41) assignOperator -> EQ_AND_BIT .

    AMPERSAND       reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    EXCLAMATION     reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    TIMES           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    PLUS            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    MINUS           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    DOT             reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    PLUS_PLUS       reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    ELLIPSIS        reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    LBRACKET        reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    RANGE           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    LPAREN          reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    DOLLAR          reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    THIS            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    NULL            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    TRUE            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    FALSE           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    INUMBER         reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    DNUMBER         reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    LIT_CHAR        reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    NEW             reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    DELETE          reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    CAST            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    IDENTIFIER      reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    CONST           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    IMMUTABLE       reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    FUNCTION        reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    MIXIN           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    IMPORT          reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    LIT_STR         reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    BOOL            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    SHORT           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    USHORT          reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    INT             reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    UINT            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    LONG            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    ULONG           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    CHAR            reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    FLOAT           reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    TYPEOF          reduce using rule 41 (assignOperator -> EQ_AND_BIT .)
    LBRACE          reduce using rule 41 (assignOperator -> EQ_AND_BIT .)


state 209

    (43) assignOperator -> EQ_OR_BIT .

    AMPERSAND       reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    EXCLAMATION     reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    TIMES           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    PLUS            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    MINUS           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    DOT             reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    PLUS_PLUS       reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    ELLIPSIS        reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    LBRACKET        reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    RANGE           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    LPAREN          reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    DOLLAR          reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    THIS            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    NULL            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    TRUE            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    FALSE           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    INUMBER         reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    DNUMBER         reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    LIT_CHAR        reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    NEW             reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    DELETE          reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    CAST            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    IDENTIFIER      reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    CONST           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    IMMUTABLE       reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    FUNCTION        reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    MIXIN           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    IMPORT          reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    LIT_STR         reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    BOOL            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    SHORT           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    USHORT          reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    INT             reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    UINT            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    LONG            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    ULONG           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    CHAR            reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    FLOAT           reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    TYPEOF          reduce using rule 43 (assignOperator -> EQ_OR_BIT .)
    LBRACE          reduce using rule 43 (assignOperator -> EQ_OR_BIT .)


state 210

    (37) assignOperator -> EQ_PLUS .

    AMPERSAND       reduce using rule 37 (assignOperator -> EQ_PLUS .)
    EXCLAMATION     reduce using rule 37 (assignOperator -> EQ_PLUS .)
    TIMES           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    PLUS            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    MINUS           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    DOT             reduce using rule 37 (assignOperator -> EQ_PLUS .)
    PLUS_PLUS       reduce using rule 37 (assignOperator -> EQ_PLUS .)
    ELLIPSIS        reduce using rule 37 (assignOperator -> EQ_PLUS .)
    LBRACKET        reduce using rule 37 (assignOperator -> EQ_PLUS .)
    RANGE           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    LPAREN          reduce using rule 37 (assignOperator -> EQ_PLUS .)
    DOLLAR          reduce using rule 37 (assignOperator -> EQ_PLUS .)
    THIS            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    NULL            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    TRUE            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    FALSE           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    INUMBER         reduce using rule 37 (assignOperator -> EQ_PLUS .)
    DNUMBER         reduce using rule 37 (assignOperator -> EQ_PLUS .)
    LIT_CHAR        reduce using rule 37 (assignOperator -> EQ_PLUS .)
    NEW             reduce using rule 37 (assignOperator -> EQ_PLUS .)
    DELETE          reduce using rule 37 (assignOperator -> EQ_PLUS .)
    CAST            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    IDENTIFIER      reduce using rule 37 (assignOperator -> EQ_PLUS .)
    CONST           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    IMMUTABLE       reduce using rule 37 (assignOperator -> EQ_PLUS .)
    FUNCTION        reduce using rule 37 (assignOperator -> EQ_PLUS .)
    MIXIN           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    IMPORT          reduce using rule 37 (assignOperator -> EQ_PLUS .)
    LIT_STR         reduce using rule 37 (assignOperator -> EQ_PLUS .)
    BOOL            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    SHORT           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    USHORT          reduce using rule 37 (assignOperator -> EQ_PLUS .)
    INT             reduce using rule 37 (assignOperator -> EQ_PLUS .)
    UINT            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    LONG            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    ULONG           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    CHAR            reduce using rule 37 (assignOperator -> EQ_PLUS .)
    FLOAT           reduce using rule 37 (assignOperator -> EQ_PLUS .)
    TYPEOF          reduce using rule 37 (assignOperator -> EQ_PLUS .)
    LBRACE          reduce using rule 37 (assignOperator -> EQ_PLUS .)


state 211

    (42) assignOperator -> EQ_DIV .

    AMPERSAND       reduce using rule 42 (assignOperator -> EQ_DIV .)
    EXCLAMATION     reduce using rule 42 (assignOperator -> EQ_DIV .)
    TIMES           reduce using rule 42 (assignOperator -> EQ_DIV .)
    PLUS            reduce using rule 42 (assignOperator -> EQ_DIV .)
    MINUS           reduce using rule 42 (assignOperator -> EQ_DIV .)
    DOT             reduce using rule 42 (assignOperator -> EQ_DIV .)
    PLUS_PLUS       reduce using rule 42 (assignOperator -> EQ_DIV .)
    ELLIPSIS        reduce using rule 42 (assignOperator -> EQ_DIV .)
    LBRACKET        reduce using rule 42 (assignOperator -> EQ_DIV .)
    RANGE           reduce using rule 42 (assignOperator -> EQ_DIV .)
    LPAREN          reduce using rule 42 (assignOperator -> EQ_DIV .)
    DOLLAR          reduce using rule 42 (assignOperator -> EQ_DIV .)
    THIS            reduce using rule 42 (assignOperator -> EQ_DIV .)
    NULL            reduce using rule 42 (assignOperator -> EQ_DIV .)
    TRUE            reduce using rule 42 (assignOperator -> EQ_DIV .)
    FALSE           reduce using rule 42 (assignOperator -> EQ_DIV .)
    INUMBER         reduce using rule 42 (assignOperator -> EQ_DIV .)
    DNUMBER         reduce using rule 42 (assignOperator -> EQ_DIV .)
    LIT_CHAR        reduce using rule 42 (assignOperator -> EQ_DIV .)
    NEW             reduce using rule 42 (assignOperator -> EQ_DIV .)
    DELETE          reduce using rule 42 (assignOperator -> EQ_DIV .)
    CAST            reduce using rule 42 (assignOperator -> EQ_DIV .)
    IDENTIFIER      reduce using rule 42 (assignOperator -> EQ_DIV .)
    CONST           reduce using rule 42 (assignOperator -> EQ_DIV .)
    IMMUTABLE       reduce using rule 42 (assignOperator -> EQ_DIV .)
    FUNCTION        reduce using rule 42 (assignOperator -> EQ_DIV .)
    MIXIN           reduce using rule 42 (assignOperator -> EQ_DIV .)
    IMPORT          reduce using rule 42 (assignOperator -> EQ_DIV .)
    LIT_STR         reduce using rule 42 (assignOperator -> EQ_DIV .)
    BOOL            reduce using rule 42 (assignOperator -> EQ_DIV .)
    SHORT           reduce using rule 42 (assignOperator -> EQ_DIV .)
    USHORT          reduce using rule 42 (assignOperator -> EQ_DIV .)
    INT             reduce using rule 42 (assignOperator -> EQ_DIV .)
    UINT            reduce using rule 42 (assignOperator -> EQ_DIV .)
    LONG            reduce using rule 42 (assignOperator -> EQ_DIV .)
    ULONG           reduce using rule 42 (assignOperator -> EQ_DIV .)
    CHAR            reduce using rule 42 (assignOperator -> EQ_DIV .)
    FLOAT           reduce using rule 42 (assignOperator -> EQ_DIV .)
    TYPEOF          reduce using rule 42 (assignOperator -> EQ_DIV .)
    LBRACE          reduce using rule 42 (assignOperator -> EQ_DIV .)


state 212

    (44) assignOperator -> EQ_XOR_BIT .

    AMPERSAND       reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    EXCLAMATION     reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    TIMES           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    PLUS            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    MINUS           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    DOT             reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    PLUS_PLUS       reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    ELLIPSIS        reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    LBRACKET        reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    RANGE           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    LPAREN          reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    DOLLAR          reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    THIS            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    NULL            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    TRUE            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    FALSE           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    INUMBER         reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    DNUMBER         reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    LIT_CHAR        reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    NEW             reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    DELETE          reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    CAST            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    IDENTIFIER      reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    CONST           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    IMMUTABLE       reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    FUNCTION        reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    MIXIN           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    IMPORT          reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    LIT_STR         reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    BOOL            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    SHORT           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    USHORT          reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    INT             reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    UINT            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    LONG            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    ULONG           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    CHAR            reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    FLOAT           reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    TYPEOF          reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)
    LBRACE          reduce using rule 44 (assignOperator -> EQ_XOR_BIT .)


state 213

    (34) assignOperator -> ASSIGN .

    AMPERSAND       reduce using rule 34 (assignOperator -> ASSIGN .)
    EXCLAMATION     reduce using rule 34 (assignOperator -> ASSIGN .)
    TIMES           reduce using rule 34 (assignOperator -> ASSIGN .)
    PLUS            reduce using rule 34 (assignOperator -> ASSIGN .)
    MINUS           reduce using rule 34 (assignOperator -> ASSIGN .)
    DOT             reduce using rule 34 (assignOperator -> ASSIGN .)
    PLUS_PLUS       reduce using rule 34 (assignOperator -> ASSIGN .)
    ELLIPSIS        reduce using rule 34 (assignOperator -> ASSIGN .)
    LBRACKET        reduce using rule 34 (assignOperator -> ASSIGN .)
    RANGE           reduce using rule 34 (assignOperator -> ASSIGN .)
    LPAREN          reduce using rule 34 (assignOperator -> ASSIGN .)
    DOLLAR          reduce using rule 34 (assignOperator -> ASSIGN .)
    THIS            reduce using rule 34 (assignOperator -> ASSIGN .)
    NULL            reduce using rule 34 (assignOperator -> ASSIGN .)
    TRUE            reduce using rule 34 (assignOperator -> ASSIGN .)
    FALSE           reduce using rule 34 (assignOperator -> ASSIGN .)
    INUMBER         reduce using rule 34 (assignOperator -> ASSIGN .)
    DNUMBER         reduce using rule 34 (assignOperator -> ASSIGN .)
    LIT_CHAR        reduce using rule 34 (assignOperator -> ASSIGN .)
    NEW             reduce using rule 34 (assignOperator -> ASSIGN .)
    DELETE          reduce using rule 34 (assignOperator -> ASSIGN .)
    CAST            reduce using rule 34 (assignOperator -> ASSIGN .)
    IDENTIFIER      reduce using rule 34 (assignOperator -> ASSIGN .)
    CONST           reduce using rule 34 (assignOperator -> ASSIGN .)
    IMMUTABLE       reduce using rule 34 (assignOperator -> ASSIGN .)
    FUNCTION        reduce using rule 34 (assignOperator -> ASSIGN .)
    MIXIN           reduce using rule 34 (assignOperator -> ASSIGN .)
    IMPORT          reduce using rule 34 (assignOperator -> ASSIGN .)
    LIT_STR         reduce using rule 34 (assignOperator -> ASSIGN .)
    BOOL            reduce using rule 34 (assignOperator -> ASSIGN .)
    SHORT           reduce using rule 34 (assignOperator -> ASSIGN .)
    USHORT          reduce using rule 34 (assignOperator -> ASSIGN .)
    INT             reduce using rule 34 (assignOperator -> ASSIGN .)
    UINT            reduce using rule 34 (assignOperator -> ASSIGN .)
    LONG            reduce using rule 34 (assignOperator -> ASSIGN .)
    ULONG           reduce using rule 34 (assignOperator -> ASSIGN .)
    CHAR            reduce using rule 34 (assignOperator -> ASSIGN .)
    FLOAT           reduce using rule 34 (assignOperator -> ASSIGN .)
    TYPEOF          reduce using rule 34 (assignOperator -> ASSIGN .)
    LBRACE          reduce using rule 34 (assignOperator -> ASSIGN .)


state 214

    (35) assignOperator -> EQ_LEFT .

    AMPERSAND       reduce using rule 35 (assignOperator -> EQ_LEFT .)
    EXCLAMATION     reduce using rule 35 (assignOperator -> EQ_LEFT .)
    TIMES           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    PLUS            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    MINUS           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    DOT             reduce using rule 35 (assignOperator -> EQ_LEFT .)
    PLUS_PLUS       reduce using rule 35 (assignOperator -> EQ_LEFT .)
    ELLIPSIS        reduce using rule 35 (assignOperator -> EQ_LEFT .)
    LBRACKET        reduce using rule 35 (assignOperator -> EQ_LEFT .)
    RANGE           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    LPAREN          reduce using rule 35 (assignOperator -> EQ_LEFT .)
    DOLLAR          reduce using rule 35 (assignOperator -> EQ_LEFT .)
    THIS            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    NULL            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    TRUE            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    FALSE           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    INUMBER         reduce using rule 35 (assignOperator -> EQ_LEFT .)
    DNUMBER         reduce using rule 35 (assignOperator -> EQ_LEFT .)
    LIT_CHAR        reduce using rule 35 (assignOperator -> EQ_LEFT .)
    NEW             reduce using rule 35 (assignOperator -> EQ_LEFT .)
    DELETE          reduce using rule 35 (assignOperator -> EQ_LEFT .)
    CAST            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    IDENTIFIER      reduce using rule 35 (assignOperator -> EQ_LEFT .)
    CONST           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    IMMUTABLE       reduce using rule 35 (assignOperator -> EQ_LEFT .)
    FUNCTION        reduce using rule 35 (assignOperator -> EQ_LEFT .)
    MIXIN           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    IMPORT          reduce using rule 35 (assignOperator -> EQ_LEFT .)
    LIT_STR         reduce using rule 35 (assignOperator -> EQ_LEFT .)
    BOOL            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    SHORT           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    USHORT          reduce using rule 35 (assignOperator -> EQ_LEFT .)
    INT             reduce using rule 35 (assignOperator -> EQ_LEFT .)
    UINT            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    LONG            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    ULONG           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    CHAR            reduce using rule 35 (assignOperator -> EQ_LEFT .)
    FLOAT           reduce using rule 35 (assignOperator -> EQ_LEFT .)
    TYPEOF          reduce using rule 35 (assignOperator -> EQ_LEFT .)
    LBRACE          reduce using rule 35 (assignOperator -> EQ_LEFT .)


state 215

    (40) assignOperator -> EQ_MODULO .

    AMPERSAND       reduce using rule 40 (assignOperator -> EQ_MODULO .)
    EXCLAMATION     reduce using rule 40 (assignOperator -> EQ_MODULO .)
    TIMES           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    PLUS            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    MINUS           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    DOT             reduce using rule 40 (assignOperator -> EQ_MODULO .)
    PLUS_PLUS       reduce using rule 40 (assignOperator -> EQ_MODULO .)
    ELLIPSIS        reduce using rule 40 (assignOperator -> EQ_MODULO .)
    LBRACKET        reduce using rule 40 (assignOperator -> EQ_MODULO .)
    RANGE           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    LPAREN          reduce using rule 40 (assignOperator -> EQ_MODULO .)
    DOLLAR          reduce using rule 40 (assignOperator -> EQ_MODULO .)
    THIS            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    NULL            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    TRUE            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    FALSE           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    INUMBER         reduce using rule 40 (assignOperator -> EQ_MODULO .)
    DNUMBER         reduce using rule 40 (assignOperator -> EQ_MODULO .)
    LIT_CHAR        reduce using rule 40 (assignOperator -> EQ_MODULO .)
    NEW             reduce using rule 40 (assignOperator -> EQ_MODULO .)
    DELETE          reduce using rule 40 (assignOperator -> EQ_MODULO .)
    CAST            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    IDENTIFIER      reduce using rule 40 (assignOperator -> EQ_MODULO .)
    CONST           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    IMMUTABLE       reduce using rule 40 (assignOperator -> EQ_MODULO .)
    FUNCTION        reduce using rule 40 (assignOperator -> EQ_MODULO .)
    MIXIN           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    IMPORT          reduce using rule 40 (assignOperator -> EQ_MODULO .)
    LIT_STR         reduce using rule 40 (assignOperator -> EQ_MODULO .)
    BOOL            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    SHORT           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    USHORT          reduce using rule 40 (assignOperator -> EQ_MODULO .)
    INT             reduce using rule 40 (assignOperator -> EQ_MODULO .)
    UINT            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    LONG            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    ULONG           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    CHAR            reduce using rule 40 (assignOperator -> EQ_MODULO .)
    FLOAT           reduce using rule 40 (assignOperator -> EQ_MODULO .)
    TYPEOF          reduce using rule 40 (assignOperator -> EQ_MODULO .)
    LBRACE          reduce using rule 40 (assignOperator -> EQ_MODULO .)


state 216

    (38) assignOperator -> EQ_MINUS .

    AMPERSAND       reduce using rule 38 (assignOperator -> EQ_MINUS .)
    EXCLAMATION     reduce using rule 38 (assignOperator -> EQ_MINUS .)
    TIMES           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    PLUS            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    MINUS           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    DOT             reduce using rule 38 (assignOperator -> EQ_MINUS .)
    PLUS_PLUS       reduce using rule 38 (assignOperator -> EQ_MINUS .)
    ELLIPSIS        reduce using rule 38 (assignOperator -> EQ_MINUS .)
    LBRACKET        reduce using rule 38 (assignOperator -> EQ_MINUS .)
    RANGE           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    LPAREN          reduce using rule 38 (assignOperator -> EQ_MINUS .)
    DOLLAR          reduce using rule 38 (assignOperator -> EQ_MINUS .)
    THIS            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    NULL            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    TRUE            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    FALSE           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    INUMBER         reduce using rule 38 (assignOperator -> EQ_MINUS .)
    DNUMBER         reduce using rule 38 (assignOperator -> EQ_MINUS .)
    LIT_CHAR        reduce using rule 38 (assignOperator -> EQ_MINUS .)
    NEW             reduce using rule 38 (assignOperator -> EQ_MINUS .)
    DELETE          reduce using rule 38 (assignOperator -> EQ_MINUS .)
    CAST            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    IDENTIFIER      reduce using rule 38 (assignOperator -> EQ_MINUS .)
    CONST           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    IMMUTABLE       reduce using rule 38 (assignOperator -> EQ_MINUS .)
    FUNCTION        reduce using rule 38 (assignOperator -> EQ_MINUS .)
    MIXIN           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    IMPORT          reduce using rule 38 (assignOperator -> EQ_MINUS .)
    LIT_STR         reduce using rule 38 (assignOperator -> EQ_MINUS .)
    BOOL            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    SHORT           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    USHORT          reduce using rule 38 (assignOperator -> EQ_MINUS .)
    INT             reduce using rule 38 (assignOperator -> EQ_MINUS .)
    UINT            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    LONG            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    ULONG           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    CHAR            reduce using rule 38 (assignOperator -> EQ_MINUS .)
    FLOAT           reduce using rule 38 (assignOperator -> EQ_MINUS .)
    TYPEOF          reduce using rule 38 (assignOperator -> EQ_MINUS .)
    LBRACE          reduce using rule 38 (assignOperator -> EQ_MINUS .)


state 217

    (33) assignExpression -> ternaryExpression assignOperator . expression
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 346

state 218

    (39) assignOperator -> EQ_TIMES .

    AMPERSAND       reduce using rule 39 (assignOperator -> EQ_TIMES .)
    EXCLAMATION     reduce using rule 39 (assignOperator -> EQ_TIMES .)
    TIMES           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    PLUS            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    MINUS           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    DOT             reduce using rule 39 (assignOperator -> EQ_TIMES .)
    PLUS_PLUS       reduce using rule 39 (assignOperator -> EQ_TIMES .)
    ELLIPSIS        reduce using rule 39 (assignOperator -> EQ_TIMES .)
    LBRACKET        reduce using rule 39 (assignOperator -> EQ_TIMES .)
    RANGE           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    LPAREN          reduce using rule 39 (assignOperator -> EQ_TIMES .)
    DOLLAR          reduce using rule 39 (assignOperator -> EQ_TIMES .)
    THIS            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    NULL            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    TRUE            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    FALSE           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    INUMBER         reduce using rule 39 (assignOperator -> EQ_TIMES .)
    DNUMBER         reduce using rule 39 (assignOperator -> EQ_TIMES .)
    LIT_CHAR        reduce using rule 39 (assignOperator -> EQ_TIMES .)
    NEW             reduce using rule 39 (assignOperator -> EQ_TIMES .)
    DELETE          reduce using rule 39 (assignOperator -> EQ_TIMES .)
    CAST            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    IDENTIFIER      reduce using rule 39 (assignOperator -> EQ_TIMES .)
    CONST           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    IMMUTABLE       reduce using rule 39 (assignOperator -> EQ_TIMES .)
    FUNCTION        reduce using rule 39 (assignOperator -> EQ_TIMES .)
    MIXIN           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    IMPORT          reduce using rule 39 (assignOperator -> EQ_TIMES .)
    LIT_STR         reduce using rule 39 (assignOperator -> EQ_TIMES .)
    BOOL            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    SHORT           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    USHORT          reduce using rule 39 (assignOperator -> EQ_TIMES .)
    INT             reduce using rule 39 (assignOperator -> EQ_TIMES .)
    UINT            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    LONG            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    ULONG           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    CHAR            reduce using rule 39 (assignOperator -> EQ_TIMES .)
    FLOAT           reduce using rule 39 (assignOperator -> EQ_TIMES .)
    TYPEOF          reduce using rule 39 (assignOperator -> EQ_TIMES .)
    LBRACE          reduce using rule 39 (assignOperator -> EQ_TIMES .)


state 219

    (20) comma_assign -> COMMA . assignExpression comma_assign
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 347
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    typeConstructor                shift and go to state 15
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49

state 220

    (29) arrayLiteral -> LBRACKET argumentList RBRACKET .

    DOT             reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    PLUS_PLUS       reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    LBRACKET        reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    CARET           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    TIMES           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    DIV             reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    MODULO          reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    PLUS            reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    MINUS           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    TILDE           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    LEFT_SHIFT      reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    RIGHT_SHIFT     reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    IS_EQ           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    NOT_EQ          reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    AMPERSAND       reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    PIPE            reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    QUESTION        reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    DOUBLE_PIPE     reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    ASSIGN          reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_LEFT         reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_RIGHT        reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_PLUS         reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_MINUS        reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_TIMES        reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_MODULO       reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_AND_BIT      reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_DIV          reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_OR_BIT       reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    EQ_XOR_BIT      reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    SEMICOLON       reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    COMMA           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    LESS            reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    LESS_EQ         reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    GREATER         reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    GREATER_EQ      reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    IS_EQ_DIFF      reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    LESS_DIFF       reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    GREATER_DIFF    reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    RBRACKET        reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    $end            reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    RPAREN          reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    COLON           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    RANGE           reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    TYPEDEF         reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    IDENTIFIER      reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    RBRACE          reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)
    LPAREN          reduce using rule 29 (arrayLiteral -> LBRACKET argumentList RBRACKET .)


state 221

    (19) argumentList -> argumentList comma_assign .

    RBRACKET        reduce using rule 19 (argumentList -> argumentList comma_assign .)
    COMMA           reduce using rule 19 (argumentList -> argumentList comma_assign .)
    COLON           reduce using rule 19 (argumentList -> argumentList comma_assign .)
    RPAREN          reduce using rule 19 (argumentList -> argumentList comma_assign .)


state 222

    (21) comma_assign -> empty .

    RBRACKET        reduce using rule 21 (comma_assign -> empty .)
    COMMA           reduce using rule 21 (comma_assign -> empty .)
    COLON           reduce using rule 21 (comma_assign -> empty .)
    RPAREN          reduce using rule 21 (comma_assign -> empty .)


state 223

    (143) equalExpression -> shiftExpression IS_EQ . shiftExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    shiftExpression                shift and go to state 348
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 224

    (302) shiftExpression -> shiftExpression LEFT_SHIFT . addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 349
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 225

    (303) shiftExpression -> shiftExpression RIGHT_SHIFT . addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 350
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 226

    (144) equalExpression -> shiftExpression NOT_EQ . shiftExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    shiftExpression                shift and go to state 351
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 227

    (236) orExpression -> orExpression PIPE . xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 352
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 228

    (389) unaryExpression -> LBRACKET TYPEDEF RBRACKET . DOT identifierOrTemplateInstance

    DOT             shift and go to state 353


state 229

    (344) type2 -> typeofExpression DOT identifierOrTemplateChain .
    (186) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

  ! shift/reduce conflict for DOT resolved as shift
    TIMES           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LBRACKET        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DELEGATE        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    FUNCTION        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    SEMICOLON       reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LPAREN          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    PLUS_PLUS       reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    CARET           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DIV             reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    MODULO          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    PLUS            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    MINUS           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    TILDE           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    $end            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LEFT_SHIFT      reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RIGHT_SHIFT     reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    IS_EQ           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    NOT_EQ          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    AMPERSAND       reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    PIPE            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DOUBLE_AMPERSAND reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    QUESTION        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DOUBLE_PIPE     reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    ASSIGN          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_LEFT         reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_RIGHT        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_PLUS         reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_MINUS        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_TIMES        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_MODULO       reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_AND_BIT      reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_DIV          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_OR_BIT       reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_XOR_BIT      reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RBRACKET        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    COMMA           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS_EQ         reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER         reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER_EQ      reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    IS_EQ_DIFF      reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    NOT_EQ_DIFF     reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS_EQ_DIFF    reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS_DIFF       reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER_EQ_DIFF reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER_DIFF    reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RPAREN          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    COLON           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RANGE           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    TYPEDEF         reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    IDENTIFIER      reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RBRACE          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DOUBLE_QUOTE    reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LBRACE          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    FINAL           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    AUTO            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RETURN          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    CONST           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    IMMUTABLE       reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    BOOL            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    SHORT           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    USHORT          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    INT             reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    UINT            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LONG            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    ULONG           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    CHAR            reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    FLOAT           reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    TYPEOF          reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    ELLIPSIS        reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DOT             shift and go to state 94

  ! DOT             [ reduce using rule 344 (type2 -> typeofExpression DOT identifierOrTemplateChain .) ]


state 230

    (265) importExpression -> IMPORT LBRACKET assignExpression . RBRACKET

    RBRACKET        shift and go to state 354


state 231

    (340) type -> typeConstructors type2 typeSuffixStar .

    DOT             reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LPAREN          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    IDENTIFIER      reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LBRACKET        reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    PLUS_PLUS       reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    CARET           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    TIMES           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    DIV             reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    MODULO          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    PLUS            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    MINUS           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    TILDE           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    $end            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    IS_EQ           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    NOT_EQ          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    AMPERSAND       reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    PIPE            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    QUESTION        reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    ASSIGN          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_LEFT         reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_RIGHT        reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_PLUS         reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_MINUS        reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_TIMES        reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_MODULO       reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_DIV          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    RBRACKET        reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    COMMA           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LESS            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LESS_EQ         reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER         reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER_EQ      reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LESS_DIFF       reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER_DIFF    reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    SEMICOLON       reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    RPAREN          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    COLON           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    RANGE           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    TYPEDEF         reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    RBRACE          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    DOUBLE_QUOTE    reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    ELLIPSIS        reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    FINAL           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    AUTO            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    RETURN          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    CONST           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    IMMUTABLE       reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    BOOL            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    SHORT           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    USHORT          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    INT             reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    UINT            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LONG            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    ULONG           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    CHAR            reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    FLOAT           reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    TYPEOF          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    LBRACE          reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)


state 232

    (363) typeofExpression -> TYPEOF LBRACKET RETURN . RBRACKET

    RBRACKET        shift and go to state 355


state 233

    (362) typeofExpression -> TYPEOF LBRACKET expression . RBRACKET
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 356
    COMMA           shift and go to state 250


state 234

    (186) identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .

    DOT             reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DELEGATE        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    FUNCTION        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    FINAL           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    AUTO            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RETURN          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    CONST           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    IMMUTABLE       reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    BOOL            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    SHORT           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    USHORT          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    INT             reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    UINT            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LONG            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    ULONG           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    CHAR            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    FLOAT           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    TYPEOF          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LBRACE          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    $end            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    TYPEDEF         reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RBRACE          reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DOUBLE_QUOTE    reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    ELLIPSIS        reduce using rule 186 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)


state 235

    (346) type2 -> typeConstructor LBRACKET TYPEDEF . RBRACKET

    RBRACKET        shift and go to state 357


state 236

    (268) primaryExpression -> typeConstructor LPAREN type . RPAREN DOT IDENTIFIER

    RPAREN          shift and go to state 358


state 237

    (174) functionLiteralExpression -> FUNCTION TYPEDEF functionBody .

    DOT             reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    PLUS_PLUS       reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    LBRACKET        reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    CARET           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    TIMES           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    DIV             reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    MODULO          reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    PLUS            reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    MINUS           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    TILDE           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    LEFT_SHIFT      reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    RIGHT_SHIFT     reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    IS_EQ           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    NOT_EQ          reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    AMPERSAND       reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    PIPE            reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    DOUBLE_AMPERSAND reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    QUESTION        reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    DOUBLE_PIPE     reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    ASSIGN          reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_LEFT         reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_RIGHT        reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_PLUS         reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_MINUS        reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_TIMES        reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_MODULO       reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_AND_BIT      reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_DIV          reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_OR_BIT       reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    EQ_XOR_BIT      reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    RPAREN          reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    COMMA           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    LESS            reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    LESS_EQ         reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    GREATER         reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    GREATER_EQ      reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    IS_EQ_DIFF      reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    NOT_EQ_DIFF     reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    LESS_EQ_DIFF    reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    LESS_DIFF       reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    GREATER_EQ_DIFF reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    GREATER_DIFF    reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    $end            reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    SEMICOLON       reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    RBRACKET        reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    COLON           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    RANGE           reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    TYPEDEF         reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    IDENTIFIER      reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    RBRACE          reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    DOUBLE_QUOTE    reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)
    LPAREN          reduce using rule 174 (functionLiteralExpression -> FUNCTION TYPEDEF functionBody .)


state 238

    (404) withStatement -> WITH LBRACKET . expression RBRACKET statementNoCaseNoDefault
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 359
    addExpression                  shift and go to state 80

state 239

    (179) gotoStatement -> GOTO CASE . SEMICOLON
    (180) gotoStatement -> GOTO CASE . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 361
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 360

state 240

    (178) gotoStatement -> GOTO DEFAULT . SEMICOLON

    SEMICOLON       shift and go to state 362


state 241

    (177) gotoStatement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 363


state 242

    (156) foreachStatement -> FOREACH LPAREN . foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> FOREACH LPAREN . foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (164) foreachTypeList -> . foreachType
    (165) foreachTypeList -> . foreachTypeList COMMA foreachType
    (160) foreachType -> . IDENTIFIER
    (161) foreachType -> . type IDENTIFIER
    (162) foreachType -> . typeConstructors IDENTIFIER
    (163) foreachType -> . typeConstructors type IDENTIFIER
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 366
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    foreachType                    shift and go to state 364
    foreachTypeList                shift and go to state 365
    type2                          shift and go to state 53
    type                           shift and go to state 367
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 368

state 243

    (117) declarationsAndStatements -> declarationOrStatement declarationsAndStatements .

    RBRACE          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    PRIVATE         reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    PROTECTED       reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    PUBLIC          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    STATIC          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    EXTERN          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    FINAL           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    AUTO            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    CONST           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    IMMUTABLE       reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    CASE            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    DEFAULT         reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    IDENTIFIER      reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    LBRACE          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    IF              reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    WHILE           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    DO              reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    FOR             reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    FOREACH         reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    FOREACH_REVERSE reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    SWITCH          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    CONTINUE        reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    BREAK           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    RETURN          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    GOTO            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    WITH            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    AMPERSAND       reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    EXCLAMATION     reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    TIMES           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    PLUS            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    MINUS           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    DOT             reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    PLUS_PLUS       reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    ELLIPSIS        reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    LBRACKET        reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    RANGE           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    LPAREN          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    DOLLAR          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    THIS            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    NULL            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    TRUE            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    FALSE           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    INUMBER         reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    DNUMBER         reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    LIT_CHAR        reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    NEW             reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    DELETE          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    CAST            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    FUNCTION        reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    MIXIN           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    IMPORT          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    LIT_STR         reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    BOOL            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    SHORT           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    USHORT          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    INT             reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    UINT            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    LONG            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    ULONG           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    CHAR            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    FLOAT           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    TYPEOF          reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    ALIAS           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    ENUM            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    CLASS           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    TILDE           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    TYPEDEF         reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    UNION           reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    SEMICOLON       reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)
    ELSE            reduce using rule 117 (declarationsAndStatements -> declarationOrStatement declarationsAndStatements .)


state 244

    (299) returnStatement -> RETURN expression . SEMICOLON
    (146) expression -> expression . COMMA assignExpression

    SEMICOLON       shift and go to state 369
    COMMA           shift and go to state 250


state 245

    (300) returnStatement -> RETURN SEMICOLON .

    PRIVATE         reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    PROTECTED       reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    PUBLIC          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    EXTERN          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    FINAL           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    CONST           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    IMMUTABLE       reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    DO              reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    FOREACH_REVERSE reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    WITH            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    EXCLAMATION     reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    DOT             reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    PLUS_PLUS       reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    ELLIPSIS        reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    LBRACKET        reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    RANGE           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    DOLLAR          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    THIS            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    DNUMBER         reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    LIT_CHAR        reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    NEW             reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    CAST            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    MIXIN           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    IMPORT          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    LIT_STR         reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    USHORT          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    UINT            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    LONG            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    ULONG           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    TYPEOF          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    ALIAS           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    TILDE           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    UNION           reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 300 (returnStatement -> RETURN SEMICOLON .)


state 246

    (158) foreachStatement -> FOREACH_REVERSE LPAREN . foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> FOREACH_REVERSE LPAREN . foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (164) foreachTypeList -> . foreachType
    (165) foreachTypeList -> . foreachTypeList COMMA foreachType
    (160) foreachType -> . IDENTIFIER
    (161) foreachType -> . type IDENTIFIER
    (162) foreachType -> . typeConstructors IDENTIFIER
    (163) foreachType -> . typeConstructors type IDENTIFIER
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 366
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    foreachType                    shift and go to state 370
    foreachTypeList                shift and go to state 371
    type2                          shift and go to state 53
    type                           shift and go to state 367
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 368

state 247

    (148) forStatement -> FOR LPAREN . declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> FOR LPAREN . statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> FOR LPAREN . declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> FOR LPAREN . statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> FOR LPAREN . declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> FOR LPAREN . statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> FOR LPAREN . declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> FOR LPAREN . statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (407) empty -> .
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statementNoCaseNoDefault       shift and go to state 372
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 373
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 248

    (96) continueStatement -> CONTINUE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 374


state 249

    (95) continueStatement -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    PRIVATE         reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    PROTECTED       reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    PUBLIC          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    EXTERN          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    IMMUTABLE       reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    FOREACH_REVERSE reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    WITH            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    AMPERSAND       reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    EXCLAMATION     reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    DOT             reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    PLUS_PLUS       reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    ELLIPSIS        reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    LBRACKET        reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    RANGE           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    DOLLAR          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    INUMBER         reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    DNUMBER         reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    LIT_CHAR        reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    CAST            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    MIXIN           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    IMPORT          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    LIT_STR         reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    USHORT          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    UINT            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    ULONG           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    TYPEOF          reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    ALIAS           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    TILDE           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    UNION           reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 95 (continueStatement -> CONTINUE SEMICOLON .)


state 250

    (146) expression -> expression COMMA . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 375
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 251

    (147) expressionStatement -> expression SEMICOLON .

    RBRACE          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    PRIVATE         reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    PROTECTED       reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    PUBLIC          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    STATIC          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    EXTERN          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    FINAL           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    AUTO            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    CONST           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    IMMUTABLE       reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    CASE            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    LBRACE          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    IF              reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    WHILE           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    DO              reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    FOR             reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    FOREACH         reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    SWITCH          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    BREAK           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    RETURN          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    GOTO            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    WITH            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    AMPERSAND       reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    TIMES           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    PLUS            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    MINUS           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    DOT             reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    ELLIPSIS        reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    LBRACKET        reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    RANGE           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    LPAREN          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    DOLLAR          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    THIS            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    NULL            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    TRUE            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    FALSE           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    INUMBER         reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    DNUMBER         reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    LIT_CHAR        reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    NEW             reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    DELETE          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    CAST            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    MIXIN           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    IMPORT          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    LIT_STR         reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    BOOL            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    SHORT           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    USHORT          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    INT             reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    UINT            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    LONG            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    ULONG           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    CHAR            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    FLOAT           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    TYPEOF          reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    ALIAS           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    ENUM            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    CLASS           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    TILDE           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    UNION           reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 147 (expressionStatement -> expression SEMICOLON .)
    ELSE            reduce using rule 147 (expressionStatement -> expression SEMICOLON .)


state 252

    (112) declaration2 -> importDeclaration .

    PRIVATE         reduce using rule 112 (declaration2 -> importDeclaration .)
    PROTECTED       reduce using rule 112 (declaration2 -> importDeclaration .)
    PUBLIC          reduce using rule 112 (declaration2 -> importDeclaration .)
    STATIC          reduce using rule 112 (declaration2 -> importDeclaration .)
    EXTERN          reduce using rule 112 (declaration2 -> importDeclaration .)
    FINAL           reduce using rule 112 (declaration2 -> importDeclaration .)
    AUTO            reduce using rule 112 (declaration2 -> importDeclaration .)
    CONST           reduce using rule 112 (declaration2 -> importDeclaration .)
    IMMUTABLE       reduce using rule 112 (declaration2 -> importDeclaration .)
    CASE            reduce using rule 112 (declaration2 -> importDeclaration .)
    DEFAULT         reduce using rule 112 (declaration2 -> importDeclaration .)
    IDENTIFIER      reduce using rule 112 (declaration2 -> importDeclaration .)
    LBRACE          reduce using rule 112 (declaration2 -> importDeclaration .)
    IF              reduce using rule 112 (declaration2 -> importDeclaration .)
    WHILE           reduce using rule 112 (declaration2 -> importDeclaration .)
    DO              reduce using rule 112 (declaration2 -> importDeclaration .)
    FOR             reduce using rule 112 (declaration2 -> importDeclaration .)
    FOREACH         reduce using rule 112 (declaration2 -> importDeclaration .)
    FOREACH_REVERSE reduce using rule 112 (declaration2 -> importDeclaration .)
    SWITCH          reduce using rule 112 (declaration2 -> importDeclaration .)
    CONTINUE        reduce using rule 112 (declaration2 -> importDeclaration .)
    BREAK           reduce using rule 112 (declaration2 -> importDeclaration .)
    RETURN          reduce using rule 112 (declaration2 -> importDeclaration .)
    GOTO            reduce using rule 112 (declaration2 -> importDeclaration .)
    WITH            reduce using rule 112 (declaration2 -> importDeclaration .)
    AMPERSAND       reduce using rule 112 (declaration2 -> importDeclaration .)
    EXCLAMATION     reduce using rule 112 (declaration2 -> importDeclaration .)
    TIMES           reduce using rule 112 (declaration2 -> importDeclaration .)
    PLUS            reduce using rule 112 (declaration2 -> importDeclaration .)
    MINUS           reduce using rule 112 (declaration2 -> importDeclaration .)
    DOT             reduce using rule 112 (declaration2 -> importDeclaration .)
    PLUS_PLUS       reduce using rule 112 (declaration2 -> importDeclaration .)
    ELLIPSIS        reduce using rule 112 (declaration2 -> importDeclaration .)
    LBRACKET        reduce using rule 112 (declaration2 -> importDeclaration .)
    RANGE           reduce using rule 112 (declaration2 -> importDeclaration .)
    LPAREN          reduce using rule 112 (declaration2 -> importDeclaration .)
    DOLLAR          reduce using rule 112 (declaration2 -> importDeclaration .)
    THIS            reduce using rule 112 (declaration2 -> importDeclaration .)
    NULL            reduce using rule 112 (declaration2 -> importDeclaration .)
    TRUE            reduce using rule 112 (declaration2 -> importDeclaration .)
    FALSE           reduce using rule 112 (declaration2 -> importDeclaration .)
    INUMBER         reduce using rule 112 (declaration2 -> importDeclaration .)
    DNUMBER         reduce using rule 112 (declaration2 -> importDeclaration .)
    LIT_CHAR        reduce using rule 112 (declaration2 -> importDeclaration .)
    NEW             reduce using rule 112 (declaration2 -> importDeclaration .)
    DELETE          reduce using rule 112 (declaration2 -> importDeclaration .)
    CAST            reduce using rule 112 (declaration2 -> importDeclaration .)
    FUNCTION        reduce using rule 112 (declaration2 -> importDeclaration .)
    MIXIN           reduce using rule 112 (declaration2 -> importDeclaration .)
    IMPORT          reduce using rule 112 (declaration2 -> importDeclaration .)
    LIT_STR         reduce using rule 112 (declaration2 -> importDeclaration .)
    BOOL            reduce using rule 112 (declaration2 -> importDeclaration .)
    SHORT           reduce using rule 112 (declaration2 -> importDeclaration .)
    USHORT          reduce using rule 112 (declaration2 -> importDeclaration .)
    INT             reduce using rule 112 (declaration2 -> importDeclaration .)
    UINT            reduce using rule 112 (declaration2 -> importDeclaration .)
    LONG            reduce using rule 112 (declaration2 -> importDeclaration .)
    ULONG           reduce using rule 112 (declaration2 -> importDeclaration .)
    CHAR            reduce using rule 112 (declaration2 -> importDeclaration .)
    FLOAT           reduce using rule 112 (declaration2 -> importDeclaration .)
    TYPEOF          reduce using rule 112 (declaration2 -> importDeclaration .)
    ALIAS           reduce using rule 112 (declaration2 -> importDeclaration .)
    ENUM            reduce using rule 112 (declaration2 -> importDeclaration .)
    CLASS           reduce using rule 112 (declaration2 -> importDeclaration .)
    TILDE           reduce using rule 112 (declaration2 -> importDeclaration .)
    TYPEDEF         reduce using rule 112 (declaration2 -> importDeclaration .)
    UNION           reduce using rule 112 (declaration2 -> importDeclaration .)
    RBRACE          reduce using rule 112 (declaration2 -> importDeclaration .)
    SEMICOLON       reduce using rule 112 (declaration2 -> importDeclaration .)
    ELSE            reduce using rule 112 (declaration2 -> importDeclaration .)


state 253

    (54) attributeDeclaration -> attribute . COLON

    COLON           shift and go to state 376


state 254

    (104) declaration2 -> aliasThisDeclaration .

    PRIVATE         reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    PROTECTED       reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    PUBLIC          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    STATIC          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    EXTERN          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    FINAL           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    AUTO            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    CONST           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    IMMUTABLE       reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    CASE            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    DEFAULT         reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    IDENTIFIER      reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    LBRACE          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    IF              reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    WHILE           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    DO              reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    FOR             reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    FOREACH         reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    FOREACH_REVERSE reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    SWITCH          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    CONTINUE        reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    BREAK           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    RETURN          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    GOTO            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    WITH            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    AMPERSAND       reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    EXCLAMATION     reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    TIMES           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    PLUS            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    MINUS           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    DOT             reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    PLUS_PLUS       reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    ELLIPSIS        reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    LBRACKET        reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    RANGE           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    LPAREN          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    DOLLAR          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    THIS            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    NULL            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    TRUE            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    FALSE           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    INUMBER         reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    DNUMBER         reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    LIT_CHAR        reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    NEW             reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    DELETE          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    CAST            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    FUNCTION        reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    MIXIN           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    IMPORT          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    LIT_STR         reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    BOOL            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    SHORT           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    USHORT          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    INT             reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    UINT            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    LONG            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    ULONG           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    CHAR            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    FLOAT           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    TYPEOF          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    ALIAS           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    ENUM            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    CLASS           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    TILDE           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    TYPEDEF         reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    UNION           reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    RBRACE          reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    SEMICOLON       reduce using rule 104 (declaration2 -> aliasThisDeclaration .)
    ELSE            reduce using rule 104 (declaration2 -> aliasThisDeclaration .)


state 255

    (49) attribute -> EXTERN .
    (327) storageClass -> EXTERN .

    COLON           reduce using rule 49 (attribute -> EXTERN .)
    AUTO            reduce using rule 327 (storageClass -> EXTERN .)
    ENUM            reduce using rule 327 (storageClass -> EXTERN .)
    EXTERN          reduce using rule 327 (storageClass -> EXTERN .)
    FINAL           reduce using rule 327 (storageClass -> EXTERN .)
    STATIC          reduce using rule 327 (storageClass -> EXTERN .)
    CONST           reduce using rule 327 (storageClass -> EXTERN .)
    IMMUTABLE       reduce using rule 327 (storageClass -> EXTERN .)
    IDENTIFIER      reduce using rule 327 (storageClass -> EXTERN .)
    TYPEDEF         reduce using rule 327 (storageClass -> EXTERN .)


state 256

    (402) variableDeclaration -> autoDeclaration .

    PRIVATE         reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    PROTECTED       reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    PUBLIC          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    STATIC          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    EXTERN          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    FINAL           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    AUTO            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    CONST           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    IMMUTABLE       reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    CASE            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    DEFAULT         reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    IDENTIFIER      reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    LBRACE          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    IF              reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    WHILE           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    DO              reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    FOR             reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    FOREACH         reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    FOREACH_REVERSE reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    SWITCH          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    CONTINUE        reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    BREAK           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    RETURN          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    GOTO            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    WITH            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    AMPERSAND       reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    EXCLAMATION     reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    TIMES           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    PLUS            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    MINUS           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    DOT             reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    PLUS_PLUS       reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    ELLIPSIS        reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    LBRACKET        reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    RANGE           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    LPAREN          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    DOLLAR          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    THIS            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    NULL            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    TRUE            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    FALSE           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    INUMBER         reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    DNUMBER         reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    LIT_CHAR        reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    NEW             reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    DELETE          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    CAST            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    FUNCTION        reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    MIXIN           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    IMPORT          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    LIT_STR         reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    BOOL            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    SHORT           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    USHORT          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    INT             reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    UINT            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    LONG            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    ULONG           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    CHAR            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    FLOAT           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    TYPEOF          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    ALIAS           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    ENUM            reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    CLASS           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    TILDE           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    TYPEDEF         reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    UNION           reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    RBRACE          reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    SEMICOLON       reduce using rule 402 (variableDeclaration -> autoDeclaration .)
    ELSE            reduce using rule 402 (variableDeclaration -> autoDeclaration .)


state 257

    (48) attribute -> STATIC .
    (329) storageClass -> STATIC .

    COLON           reduce using rule 48 (attribute -> STATIC .)
    AUTO            reduce using rule 329 (storageClass -> STATIC .)
    ENUM            reduce using rule 329 (storageClass -> STATIC .)
    EXTERN          reduce using rule 329 (storageClass -> STATIC .)
    FINAL           reduce using rule 329 (storageClass -> STATIC .)
    STATIC          reduce using rule 329 (storageClass -> STATIC .)
    CONST           reduce using rule 329 (storageClass -> STATIC .)
    IMMUTABLE       reduce using rule 329 (storageClass -> STATIC .)
    IDENTIFIER      reduce using rule 329 (storageClass -> STATIC .)
    TYPEDEF         reduce using rule 329 (storageClass -> STATIC .)


state 258

    (103) declaration2 -> aliasDeclaration .

    PRIVATE         reduce using rule 103 (declaration2 -> aliasDeclaration .)
    PROTECTED       reduce using rule 103 (declaration2 -> aliasDeclaration .)
    PUBLIC          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    STATIC          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    EXTERN          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    FINAL           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    AUTO            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    CONST           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    IMMUTABLE       reduce using rule 103 (declaration2 -> aliasDeclaration .)
    CASE            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    DEFAULT         reduce using rule 103 (declaration2 -> aliasDeclaration .)
    IDENTIFIER      reduce using rule 103 (declaration2 -> aliasDeclaration .)
    LBRACE          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    IF              reduce using rule 103 (declaration2 -> aliasDeclaration .)
    WHILE           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    DO              reduce using rule 103 (declaration2 -> aliasDeclaration .)
    FOR             reduce using rule 103 (declaration2 -> aliasDeclaration .)
    FOREACH         reduce using rule 103 (declaration2 -> aliasDeclaration .)
    FOREACH_REVERSE reduce using rule 103 (declaration2 -> aliasDeclaration .)
    SWITCH          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    CONTINUE        reduce using rule 103 (declaration2 -> aliasDeclaration .)
    BREAK           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    RETURN          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    GOTO            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    WITH            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    AMPERSAND       reduce using rule 103 (declaration2 -> aliasDeclaration .)
    EXCLAMATION     reduce using rule 103 (declaration2 -> aliasDeclaration .)
    TIMES           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    PLUS            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    MINUS           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    DOT             reduce using rule 103 (declaration2 -> aliasDeclaration .)
    PLUS_PLUS       reduce using rule 103 (declaration2 -> aliasDeclaration .)
    ELLIPSIS        reduce using rule 103 (declaration2 -> aliasDeclaration .)
    LBRACKET        reduce using rule 103 (declaration2 -> aliasDeclaration .)
    RANGE           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    LPAREN          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    DOLLAR          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    THIS            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    NULL            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    TRUE            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    FALSE           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    INUMBER         reduce using rule 103 (declaration2 -> aliasDeclaration .)
    DNUMBER         reduce using rule 103 (declaration2 -> aliasDeclaration .)
    LIT_CHAR        reduce using rule 103 (declaration2 -> aliasDeclaration .)
    NEW             reduce using rule 103 (declaration2 -> aliasDeclaration .)
    DELETE          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    CAST            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    FUNCTION        reduce using rule 103 (declaration2 -> aliasDeclaration .)
    MIXIN           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    IMPORT          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    LIT_STR         reduce using rule 103 (declaration2 -> aliasDeclaration .)
    BOOL            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    SHORT           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    USHORT          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    INT             reduce using rule 103 (declaration2 -> aliasDeclaration .)
    UINT            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    LONG            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    ULONG           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    CHAR            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    FLOAT           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    TYPEOF          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    ALIAS           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    ENUM            reduce using rule 103 (declaration2 -> aliasDeclaration .)
    CLASS           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    TILDE           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    TYPEDEF         reduce using rule 103 (declaration2 -> aliasDeclaration .)
    UNION           reduce using rule 103 (declaration2 -> aliasDeclaration .)
    RBRACE          reduce using rule 103 (declaration2 -> aliasDeclaration .)
    SEMICOLON       reduce using rule 103 (declaration2 -> aliasDeclaration .)
    ELSE            reduce using rule 103 (declaration2 -> aliasDeclaration .)


state 259

    (324) storageClass -> typeConstructor .

    AUTO            reduce using rule 324 (storageClass -> typeConstructor .)
    ENUM            reduce using rule 324 (storageClass -> typeConstructor .)
    EXTERN          reduce using rule 324 (storageClass -> typeConstructor .)
    FINAL           reduce using rule 324 (storageClass -> typeConstructor .)
    STATIC          reduce using rule 324 (storageClass -> typeConstructor .)
    CONST           reduce using rule 324 (storageClass -> typeConstructor .)
    IMMUTABLE       reduce using rule 324 (storageClass -> typeConstructor .)
    BOOL            reduce using rule 324 (storageClass -> typeConstructor .)
    SHORT           reduce using rule 324 (storageClass -> typeConstructor .)
    USHORT          reduce using rule 324 (storageClass -> typeConstructor .)
    INT             reduce using rule 324 (storageClass -> typeConstructor .)
    UINT            reduce using rule 324 (storageClass -> typeConstructor .)
    LONG            reduce using rule 324 (storageClass -> typeConstructor .)
    ULONG           reduce using rule 324 (storageClass -> typeConstructor .)
    CHAR            reduce using rule 324 (storageClass -> typeConstructor .)
    FLOAT           reduce using rule 324 (storageClass -> typeConstructor .)
    DOT             reduce using rule 324 (storageClass -> typeConstructor .)
    TYPEOF          reduce using rule 324 (storageClass -> typeConstructor .)
    IDENTIFIER      reduce using rule 324 (storageClass -> typeConstructor .)
    TYPEDEF         reduce using rule 324 (storageClass -> typeConstructor .)


state 260

    (113) declaration2 -> mixinDeclaration .

    PRIVATE         reduce using rule 113 (declaration2 -> mixinDeclaration .)
    PROTECTED       reduce using rule 113 (declaration2 -> mixinDeclaration .)
    PUBLIC          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    STATIC          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    EXTERN          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    FINAL           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    AUTO            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    CONST           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    IMMUTABLE       reduce using rule 113 (declaration2 -> mixinDeclaration .)
    CASE            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    DEFAULT         reduce using rule 113 (declaration2 -> mixinDeclaration .)
    IDENTIFIER      reduce using rule 113 (declaration2 -> mixinDeclaration .)
    LBRACE          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    IF              reduce using rule 113 (declaration2 -> mixinDeclaration .)
    WHILE           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    DO              reduce using rule 113 (declaration2 -> mixinDeclaration .)
    FOR             reduce using rule 113 (declaration2 -> mixinDeclaration .)
    FOREACH         reduce using rule 113 (declaration2 -> mixinDeclaration .)
    FOREACH_REVERSE reduce using rule 113 (declaration2 -> mixinDeclaration .)
    SWITCH          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    CONTINUE        reduce using rule 113 (declaration2 -> mixinDeclaration .)
    BREAK           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    RETURN          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    GOTO            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    WITH            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    AMPERSAND       reduce using rule 113 (declaration2 -> mixinDeclaration .)
    EXCLAMATION     reduce using rule 113 (declaration2 -> mixinDeclaration .)
    TIMES           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    PLUS            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    MINUS           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    DOT             reduce using rule 113 (declaration2 -> mixinDeclaration .)
    PLUS_PLUS       reduce using rule 113 (declaration2 -> mixinDeclaration .)
    ELLIPSIS        reduce using rule 113 (declaration2 -> mixinDeclaration .)
    LBRACKET        reduce using rule 113 (declaration2 -> mixinDeclaration .)
    RANGE           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    LPAREN          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    DOLLAR          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    THIS            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    NULL            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    TRUE            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    FALSE           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    INUMBER         reduce using rule 113 (declaration2 -> mixinDeclaration .)
    DNUMBER         reduce using rule 113 (declaration2 -> mixinDeclaration .)
    LIT_CHAR        reduce using rule 113 (declaration2 -> mixinDeclaration .)
    NEW             reduce using rule 113 (declaration2 -> mixinDeclaration .)
    DELETE          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    CAST            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    FUNCTION        reduce using rule 113 (declaration2 -> mixinDeclaration .)
    MIXIN           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    IMPORT          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    LIT_STR         reduce using rule 113 (declaration2 -> mixinDeclaration .)
    BOOL            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    SHORT           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    USHORT          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    INT             reduce using rule 113 (declaration2 -> mixinDeclaration .)
    UINT            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    LONG            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    ULONG           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    CHAR            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    FLOAT           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    TYPEOF          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    ALIAS           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    ENUM            reduce using rule 113 (declaration2 -> mixinDeclaration .)
    CLASS           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    TILDE           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    TYPEDEF         reduce using rule 113 (declaration2 -> mixinDeclaration .)
    UNION           reduce using rule 113 (declaration2 -> mixinDeclaration .)
    RBRACE          reduce using rule 113 (declaration2 -> mixinDeclaration .)
    SEMICOLON       reduce using rule 113 (declaration2 -> mixinDeclaration .)
    ELSE            reduce using rule 113 (declaration2 -> mixinDeclaration .)


state 261

    (106) declaration2 -> attributeDeclaration .

    PRIVATE         reduce using rule 106 (declaration2 -> attributeDeclaration .)
    PROTECTED       reduce using rule 106 (declaration2 -> attributeDeclaration .)
    PUBLIC          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    STATIC          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    EXTERN          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    FINAL           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    AUTO            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    CONST           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    IMMUTABLE       reduce using rule 106 (declaration2 -> attributeDeclaration .)
    CASE            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    DEFAULT         reduce using rule 106 (declaration2 -> attributeDeclaration .)
    IDENTIFIER      reduce using rule 106 (declaration2 -> attributeDeclaration .)
    LBRACE          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    IF              reduce using rule 106 (declaration2 -> attributeDeclaration .)
    WHILE           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    DO              reduce using rule 106 (declaration2 -> attributeDeclaration .)
    FOR             reduce using rule 106 (declaration2 -> attributeDeclaration .)
    FOREACH         reduce using rule 106 (declaration2 -> attributeDeclaration .)
    FOREACH_REVERSE reduce using rule 106 (declaration2 -> attributeDeclaration .)
    SWITCH          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    CONTINUE        reduce using rule 106 (declaration2 -> attributeDeclaration .)
    BREAK           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    RETURN          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    GOTO            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    WITH            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    AMPERSAND       reduce using rule 106 (declaration2 -> attributeDeclaration .)
    EXCLAMATION     reduce using rule 106 (declaration2 -> attributeDeclaration .)
    TIMES           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    PLUS            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    MINUS           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    DOT             reduce using rule 106 (declaration2 -> attributeDeclaration .)
    PLUS_PLUS       reduce using rule 106 (declaration2 -> attributeDeclaration .)
    ELLIPSIS        reduce using rule 106 (declaration2 -> attributeDeclaration .)
    LBRACKET        reduce using rule 106 (declaration2 -> attributeDeclaration .)
    RANGE           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    LPAREN          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    DOLLAR          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    THIS            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    NULL            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    TRUE            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    FALSE           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    INUMBER         reduce using rule 106 (declaration2 -> attributeDeclaration .)
    DNUMBER         reduce using rule 106 (declaration2 -> attributeDeclaration .)
    LIT_CHAR        reduce using rule 106 (declaration2 -> attributeDeclaration .)
    NEW             reduce using rule 106 (declaration2 -> attributeDeclaration .)
    DELETE          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    CAST            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    FUNCTION        reduce using rule 106 (declaration2 -> attributeDeclaration .)
    MIXIN           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    IMPORT          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    LIT_STR         reduce using rule 106 (declaration2 -> attributeDeclaration .)
    BOOL            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    SHORT           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    USHORT          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    INT             reduce using rule 106 (declaration2 -> attributeDeclaration .)
    UINT            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    LONG            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    ULONG           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    CHAR            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    FLOAT           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    TYPEOF          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    ALIAS           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    ENUM            reduce using rule 106 (declaration2 -> attributeDeclaration .)
    CLASS           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    TILDE           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    TYPEDEF         reduce using rule 106 (declaration2 -> attributeDeclaration .)
    UNION           reduce using rule 106 (declaration2 -> attributeDeclaration .)
    RBRACE          reduce using rule 106 (declaration2 -> attributeDeclaration .)
    SEMICOLON       reduce using rule 106 (declaration2 -> attributeDeclaration .)
    ELSE            reduce using rule 106 (declaration2 -> attributeDeclaration .)


state 262

    (97) declaration -> multipleattributes declaration2 .

    RBRACE          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    PRIVATE         reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    PROTECTED       reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    PUBLIC          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    STATIC          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    EXTERN          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    FINAL           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    AUTO            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    CONST           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    IMMUTABLE       reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    CASE            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    DEFAULT         reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    IDENTIFIER      reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    LBRACE          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    IF              reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    WHILE           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    DO              reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    FOR             reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    FOREACH         reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    FOREACH_REVERSE reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    SWITCH          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    CONTINUE        reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    BREAK           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    RETURN          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    GOTO            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    WITH            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    AMPERSAND       reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    EXCLAMATION     reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    TIMES           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    PLUS            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    MINUS           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    DOT             reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    PLUS_PLUS       reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    ELLIPSIS        reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    LBRACKET        reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    RANGE           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    LPAREN          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    DOLLAR          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    THIS            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    NULL            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    TRUE            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    FALSE           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    INUMBER         reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    DNUMBER         reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    LIT_CHAR        reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    NEW             reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    DELETE          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    CAST            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    FUNCTION        reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    MIXIN           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    IMPORT          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    LIT_STR         reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    BOOL            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    SHORT           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    USHORT          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    INT             reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    UINT            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    LONG            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    ULONG           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    CHAR            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    FLOAT           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    TYPEOF          reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    ALIAS           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    ENUM            reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    CLASS           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    TILDE           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    TYPEDEF         reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    UNION           reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    SEMICOLON       reduce using rule 97 (declaration -> multipleattributes declaration2 .)
    ELSE            reduce using rule 97 (declaration -> multipleattributes declaration2 .)


state 263

    (109) declaration2 -> destructor .

    PRIVATE         reduce using rule 109 (declaration2 -> destructor .)
    PROTECTED       reduce using rule 109 (declaration2 -> destructor .)
    PUBLIC          reduce using rule 109 (declaration2 -> destructor .)
    STATIC          reduce using rule 109 (declaration2 -> destructor .)
    EXTERN          reduce using rule 109 (declaration2 -> destructor .)
    FINAL           reduce using rule 109 (declaration2 -> destructor .)
    AUTO            reduce using rule 109 (declaration2 -> destructor .)
    CONST           reduce using rule 109 (declaration2 -> destructor .)
    IMMUTABLE       reduce using rule 109 (declaration2 -> destructor .)
    CASE            reduce using rule 109 (declaration2 -> destructor .)
    DEFAULT         reduce using rule 109 (declaration2 -> destructor .)
    IDENTIFIER      reduce using rule 109 (declaration2 -> destructor .)
    LBRACE          reduce using rule 109 (declaration2 -> destructor .)
    IF              reduce using rule 109 (declaration2 -> destructor .)
    WHILE           reduce using rule 109 (declaration2 -> destructor .)
    DO              reduce using rule 109 (declaration2 -> destructor .)
    FOR             reduce using rule 109 (declaration2 -> destructor .)
    FOREACH         reduce using rule 109 (declaration2 -> destructor .)
    FOREACH_REVERSE reduce using rule 109 (declaration2 -> destructor .)
    SWITCH          reduce using rule 109 (declaration2 -> destructor .)
    CONTINUE        reduce using rule 109 (declaration2 -> destructor .)
    BREAK           reduce using rule 109 (declaration2 -> destructor .)
    RETURN          reduce using rule 109 (declaration2 -> destructor .)
    GOTO            reduce using rule 109 (declaration2 -> destructor .)
    WITH            reduce using rule 109 (declaration2 -> destructor .)
    AMPERSAND       reduce using rule 109 (declaration2 -> destructor .)
    EXCLAMATION     reduce using rule 109 (declaration2 -> destructor .)
    TIMES           reduce using rule 109 (declaration2 -> destructor .)
    PLUS            reduce using rule 109 (declaration2 -> destructor .)
    MINUS           reduce using rule 109 (declaration2 -> destructor .)
    DOT             reduce using rule 109 (declaration2 -> destructor .)
    PLUS_PLUS       reduce using rule 109 (declaration2 -> destructor .)
    ELLIPSIS        reduce using rule 109 (declaration2 -> destructor .)
    LBRACKET        reduce using rule 109 (declaration2 -> destructor .)
    RANGE           reduce using rule 109 (declaration2 -> destructor .)
    LPAREN          reduce using rule 109 (declaration2 -> destructor .)
    DOLLAR          reduce using rule 109 (declaration2 -> destructor .)
    THIS            reduce using rule 109 (declaration2 -> destructor .)
    NULL            reduce using rule 109 (declaration2 -> destructor .)
    TRUE            reduce using rule 109 (declaration2 -> destructor .)
    FALSE           reduce using rule 109 (declaration2 -> destructor .)
    INUMBER         reduce using rule 109 (declaration2 -> destructor .)
    DNUMBER         reduce using rule 109 (declaration2 -> destructor .)
    LIT_CHAR        reduce using rule 109 (declaration2 -> destructor .)
    NEW             reduce using rule 109 (declaration2 -> destructor .)
    DELETE          reduce using rule 109 (declaration2 -> destructor .)
    CAST            reduce using rule 109 (declaration2 -> destructor .)
    FUNCTION        reduce using rule 109 (declaration2 -> destructor .)
    MIXIN           reduce using rule 109 (declaration2 -> destructor .)
    IMPORT          reduce using rule 109 (declaration2 -> destructor .)
    LIT_STR         reduce using rule 109 (declaration2 -> destructor .)
    BOOL            reduce using rule 109 (declaration2 -> destructor .)
    SHORT           reduce using rule 109 (declaration2 -> destructor .)
    USHORT          reduce using rule 109 (declaration2 -> destructor .)
    INT             reduce using rule 109 (declaration2 -> destructor .)
    UINT            reduce using rule 109 (declaration2 -> destructor .)
    LONG            reduce using rule 109 (declaration2 -> destructor .)
    ULONG           reduce using rule 109 (declaration2 -> destructor .)
    CHAR            reduce using rule 109 (declaration2 -> destructor .)
    FLOAT           reduce using rule 109 (declaration2 -> destructor .)
    TYPEOF          reduce using rule 109 (declaration2 -> destructor .)
    ALIAS           reduce using rule 109 (declaration2 -> destructor .)
    ENUM            reduce using rule 109 (declaration2 -> destructor .)
    CLASS           reduce using rule 109 (declaration2 -> destructor .)
    TILDE           reduce using rule 109 (declaration2 -> destructor .)
    TYPEDEF         reduce using rule 109 (declaration2 -> destructor .)
    UNION           reduce using rule 109 (declaration2 -> destructor .)
    RBRACE          reduce using rule 109 (declaration2 -> destructor .)
    SEMICOLON       reduce using rule 109 (declaration2 -> destructor .)
    ELSE            reduce using rule 109 (declaration2 -> destructor .)


state 264

    (124) destructor -> TILDE . THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody
    (125) destructor -> TILDE . THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON

    THIS            shift and go to state 377


state 265

    (197) importDeclaration -> IMPORT . singleImport comma_singleImport COMMA importBindings SEMICOLON
    (198) importDeclaration -> IMPORT . singleImport comma_singleImport SEMICOLON
    (199) importDeclaration -> IMPORT . importBindings SEMICOLON
    (304) singleImport -> . IDENTIFIER ASSIGN identifierChain
    (305) singleImport -> . identifierChain
    (195) importBindings -> . singleImport COLON importBind
    (196) importBindings -> . singleImport COLON importBind COLON importBind
    (181) identifierChain -> . IDENTIFIER
    (182) identifierChain -> . identifierChain DOT IDENTIFIER

    IDENTIFIER      shift and go to state 381

    importBindings                 shift and go to state 378
    identifierChain                shift and go to state 379
    singleImport                   shift and go to state 380

state 266

    (82) classDeclaration -> CLASS . IDENTIFIER SEMICOLON
    (83) classDeclaration -> CLASS . IDENTIFIER COLON baseClassList structBody
    (84) classDeclaration -> CLASS . IDENTIFIER structBody

    IDENTIFIER      shift and go to state 382


state 267

    (10) multiplestorageClass -> empty .

    CONST           reduce using rule 10 (multiplestorageClass -> empty .)
    IMMUTABLE       reduce using rule 10 (multiplestorageClass -> empty .)
    BOOL            reduce using rule 10 (multiplestorageClass -> empty .)
    SHORT           reduce using rule 10 (multiplestorageClass -> empty .)
    USHORT          reduce using rule 10 (multiplestorageClass -> empty .)
    INT             reduce using rule 10 (multiplestorageClass -> empty .)
    UINT            reduce using rule 10 (multiplestorageClass -> empty .)
    LONG            reduce using rule 10 (multiplestorageClass -> empty .)
    ULONG           reduce using rule 10 (multiplestorageClass -> empty .)
    CHAR            reduce using rule 10 (multiplestorageClass -> empty .)
    FLOAT           reduce using rule 10 (multiplestorageClass -> empty .)
    DOT             reduce using rule 10 (multiplestorageClass -> empty .)
    TYPEOF          reduce using rule 10 (multiplestorageClass -> empty .)
    IDENTIFIER      reduce using rule 10 (multiplestorageClass -> empty .)
    TYPEDEF         reduce using rule 10 (multiplestorageClass -> empty .)


state 268

    (50) attribute -> FINAL .
    (328) storageClass -> FINAL .

    COLON           reduce using rule 50 (attribute -> FINAL .)
    AUTO            reduce using rule 328 (storageClass -> FINAL .)
    ENUM            reduce using rule 328 (storageClass -> FINAL .)
    EXTERN          reduce using rule 328 (storageClass -> FINAL .)
    FINAL           reduce using rule 328 (storageClass -> FINAL .)
    STATIC          reduce using rule 328 (storageClass -> FINAL .)
    CONST           reduce using rule 328 (storageClass -> FINAL .)
    IMMUTABLE       reduce using rule 328 (storageClass -> FINAL .)
    IDENTIFIER      reduce using rule 328 (storageClass -> FINAL .)
    TYPEDEF         reduce using rule 328 (storageClass -> FINAL .)


state 269

    (171) functionDeclaration -> TYPEDEF . IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (172) functionDeclaration -> TYPEDEF . IDENTIFIER parameters multiple_memberFunctionAttribute functionBody

    IDENTIFIER      shift and go to state 383


state 270

    (134) anonymousEnumDeclaration -> ENUM . LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
    (135) anonymousEnumDeclaration -> ENUM . COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
    (138) enumDeclaration -> ENUM . IDENTIFIER SEMICOLON
    (139) enumDeclaration -> ENUM . IDENTIFIER COLON TYPEDEF SEMICOLON
    (140) enumDeclaration -> ENUM . IDENTIFIER COLON TYPEDEF enumBody
    (326) storageClass -> ENUM .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 384
    COLON           shift and go to state 385
    IDENTIFIER      shift and go to state 386
    AUTO            reduce using rule 326 (storageClass -> ENUM .)
    ENUM            reduce using rule 326 (storageClass -> ENUM .)
    EXTERN          reduce using rule 326 (storageClass -> ENUM .)
    FINAL           reduce using rule 326 (storageClass -> ENUM .)
    STATIC          reduce using rule 326 (storageClass -> ENUM .)
    CONST           reduce using rule 326 (storageClass -> ENUM .)
    IMMUTABLE       reduce using rule 326 (storageClass -> ENUM .)
    TYPEDEF         reduce using rule 326 (storageClass -> ENUM .)

  ! IDENTIFIER      [ reduce using rule 326 (storageClass -> ENUM .) ]


state 271

    (110) declaration2 -> enumDeclaration .

    PRIVATE         reduce using rule 110 (declaration2 -> enumDeclaration .)
    PROTECTED       reduce using rule 110 (declaration2 -> enumDeclaration .)
    PUBLIC          reduce using rule 110 (declaration2 -> enumDeclaration .)
    STATIC          reduce using rule 110 (declaration2 -> enumDeclaration .)
    EXTERN          reduce using rule 110 (declaration2 -> enumDeclaration .)
    FINAL           reduce using rule 110 (declaration2 -> enumDeclaration .)
    AUTO            reduce using rule 110 (declaration2 -> enumDeclaration .)
    CONST           reduce using rule 110 (declaration2 -> enumDeclaration .)
    IMMUTABLE       reduce using rule 110 (declaration2 -> enumDeclaration .)
    CASE            reduce using rule 110 (declaration2 -> enumDeclaration .)
    DEFAULT         reduce using rule 110 (declaration2 -> enumDeclaration .)
    IDENTIFIER      reduce using rule 110 (declaration2 -> enumDeclaration .)
    LBRACE          reduce using rule 110 (declaration2 -> enumDeclaration .)
    IF              reduce using rule 110 (declaration2 -> enumDeclaration .)
    WHILE           reduce using rule 110 (declaration2 -> enumDeclaration .)
    DO              reduce using rule 110 (declaration2 -> enumDeclaration .)
    FOR             reduce using rule 110 (declaration2 -> enumDeclaration .)
    FOREACH         reduce using rule 110 (declaration2 -> enumDeclaration .)
    FOREACH_REVERSE reduce using rule 110 (declaration2 -> enumDeclaration .)
    SWITCH          reduce using rule 110 (declaration2 -> enumDeclaration .)
    CONTINUE        reduce using rule 110 (declaration2 -> enumDeclaration .)
    BREAK           reduce using rule 110 (declaration2 -> enumDeclaration .)
    RETURN          reduce using rule 110 (declaration2 -> enumDeclaration .)
    GOTO            reduce using rule 110 (declaration2 -> enumDeclaration .)
    WITH            reduce using rule 110 (declaration2 -> enumDeclaration .)
    AMPERSAND       reduce using rule 110 (declaration2 -> enumDeclaration .)
    EXCLAMATION     reduce using rule 110 (declaration2 -> enumDeclaration .)
    TIMES           reduce using rule 110 (declaration2 -> enumDeclaration .)
    PLUS            reduce using rule 110 (declaration2 -> enumDeclaration .)
    MINUS           reduce using rule 110 (declaration2 -> enumDeclaration .)
    DOT             reduce using rule 110 (declaration2 -> enumDeclaration .)
    PLUS_PLUS       reduce using rule 110 (declaration2 -> enumDeclaration .)
    ELLIPSIS        reduce using rule 110 (declaration2 -> enumDeclaration .)
    LBRACKET        reduce using rule 110 (declaration2 -> enumDeclaration .)
    RANGE           reduce using rule 110 (declaration2 -> enumDeclaration .)
    LPAREN          reduce using rule 110 (declaration2 -> enumDeclaration .)
    DOLLAR          reduce using rule 110 (declaration2 -> enumDeclaration .)
    THIS            reduce using rule 110 (declaration2 -> enumDeclaration .)
    NULL            reduce using rule 110 (declaration2 -> enumDeclaration .)
    TRUE            reduce using rule 110 (declaration2 -> enumDeclaration .)
    FALSE           reduce using rule 110 (declaration2 -> enumDeclaration .)
    INUMBER         reduce using rule 110 (declaration2 -> enumDeclaration .)
    DNUMBER         reduce using rule 110 (declaration2 -> enumDeclaration .)
    LIT_CHAR        reduce using rule 110 (declaration2 -> enumDeclaration .)
    NEW             reduce using rule 110 (declaration2 -> enumDeclaration .)
    DELETE          reduce using rule 110 (declaration2 -> enumDeclaration .)
    CAST            reduce using rule 110 (declaration2 -> enumDeclaration .)
    FUNCTION        reduce using rule 110 (declaration2 -> enumDeclaration .)
    MIXIN           reduce using rule 110 (declaration2 -> enumDeclaration .)
    IMPORT          reduce using rule 110 (declaration2 -> enumDeclaration .)
    LIT_STR         reduce using rule 110 (declaration2 -> enumDeclaration .)
    BOOL            reduce using rule 110 (declaration2 -> enumDeclaration .)
    SHORT           reduce using rule 110 (declaration2 -> enumDeclaration .)
    USHORT          reduce using rule 110 (declaration2 -> enumDeclaration .)
    INT             reduce using rule 110 (declaration2 -> enumDeclaration .)
    UINT            reduce using rule 110 (declaration2 -> enumDeclaration .)
    LONG            reduce using rule 110 (declaration2 -> enumDeclaration .)
    ULONG           reduce using rule 110 (declaration2 -> enumDeclaration .)
    CHAR            reduce using rule 110 (declaration2 -> enumDeclaration .)
    FLOAT           reduce using rule 110 (declaration2 -> enumDeclaration .)
    TYPEOF          reduce using rule 110 (declaration2 -> enumDeclaration .)
    ALIAS           reduce using rule 110 (declaration2 -> enumDeclaration .)
    ENUM            reduce using rule 110 (declaration2 -> enumDeclaration .)
    CLASS           reduce using rule 110 (declaration2 -> enumDeclaration .)
    TILDE           reduce using rule 110 (declaration2 -> enumDeclaration .)
    TYPEDEF         reduce using rule 110 (declaration2 -> enumDeclaration .)
    UNION           reduce using rule 110 (declaration2 -> enumDeclaration .)
    RBRACE          reduce using rule 110 (declaration2 -> enumDeclaration .)
    SEMICOLON       reduce using rule 110 (declaration2 -> enumDeclaration .)
    ELSE            reduce using rule 110 (declaration2 -> enumDeclaration .)


state 272

    (111) declaration2 -> functionDeclaration .

    PRIVATE         reduce using rule 111 (declaration2 -> functionDeclaration .)
    PROTECTED       reduce using rule 111 (declaration2 -> functionDeclaration .)
    PUBLIC          reduce using rule 111 (declaration2 -> functionDeclaration .)
    STATIC          reduce using rule 111 (declaration2 -> functionDeclaration .)
    EXTERN          reduce using rule 111 (declaration2 -> functionDeclaration .)
    FINAL           reduce using rule 111 (declaration2 -> functionDeclaration .)
    AUTO            reduce using rule 111 (declaration2 -> functionDeclaration .)
    CONST           reduce using rule 111 (declaration2 -> functionDeclaration .)
    IMMUTABLE       reduce using rule 111 (declaration2 -> functionDeclaration .)
    CASE            reduce using rule 111 (declaration2 -> functionDeclaration .)
    DEFAULT         reduce using rule 111 (declaration2 -> functionDeclaration .)
    IDENTIFIER      reduce using rule 111 (declaration2 -> functionDeclaration .)
    LBRACE          reduce using rule 111 (declaration2 -> functionDeclaration .)
    IF              reduce using rule 111 (declaration2 -> functionDeclaration .)
    WHILE           reduce using rule 111 (declaration2 -> functionDeclaration .)
    DO              reduce using rule 111 (declaration2 -> functionDeclaration .)
    FOR             reduce using rule 111 (declaration2 -> functionDeclaration .)
    FOREACH         reduce using rule 111 (declaration2 -> functionDeclaration .)
    FOREACH_REVERSE reduce using rule 111 (declaration2 -> functionDeclaration .)
    SWITCH          reduce using rule 111 (declaration2 -> functionDeclaration .)
    CONTINUE        reduce using rule 111 (declaration2 -> functionDeclaration .)
    BREAK           reduce using rule 111 (declaration2 -> functionDeclaration .)
    RETURN          reduce using rule 111 (declaration2 -> functionDeclaration .)
    GOTO            reduce using rule 111 (declaration2 -> functionDeclaration .)
    WITH            reduce using rule 111 (declaration2 -> functionDeclaration .)
    AMPERSAND       reduce using rule 111 (declaration2 -> functionDeclaration .)
    EXCLAMATION     reduce using rule 111 (declaration2 -> functionDeclaration .)
    TIMES           reduce using rule 111 (declaration2 -> functionDeclaration .)
    PLUS            reduce using rule 111 (declaration2 -> functionDeclaration .)
    MINUS           reduce using rule 111 (declaration2 -> functionDeclaration .)
    DOT             reduce using rule 111 (declaration2 -> functionDeclaration .)
    PLUS_PLUS       reduce using rule 111 (declaration2 -> functionDeclaration .)
    ELLIPSIS        reduce using rule 111 (declaration2 -> functionDeclaration .)
    LBRACKET        reduce using rule 111 (declaration2 -> functionDeclaration .)
    RANGE           reduce using rule 111 (declaration2 -> functionDeclaration .)
    LPAREN          reduce using rule 111 (declaration2 -> functionDeclaration .)
    DOLLAR          reduce using rule 111 (declaration2 -> functionDeclaration .)
    THIS            reduce using rule 111 (declaration2 -> functionDeclaration .)
    NULL            reduce using rule 111 (declaration2 -> functionDeclaration .)
    TRUE            reduce using rule 111 (declaration2 -> functionDeclaration .)
    FALSE           reduce using rule 111 (declaration2 -> functionDeclaration .)
    INUMBER         reduce using rule 111 (declaration2 -> functionDeclaration .)
    DNUMBER         reduce using rule 111 (declaration2 -> functionDeclaration .)
    LIT_CHAR        reduce using rule 111 (declaration2 -> functionDeclaration .)
    NEW             reduce using rule 111 (declaration2 -> functionDeclaration .)
    DELETE          reduce using rule 111 (declaration2 -> functionDeclaration .)
    CAST            reduce using rule 111 (declaration2 -> functionDeclaration .)
    FUNCTION        reduce using rule 111 (declaration2 -> functionDeclaration .)
    MIXIN           reduce using rule 111 (declaration2 -> functionDeclaration .)
    IMPORT          reduce using rule 111 (declaration2 -> functionDeclaration .)
    LIT_STR         reduce using rule 111 (declaration2 -> functionDeclaration .)
    BOOL            reduce using rule 111 (declaration2 -> functionDeclaration .)
    SHORT           reduce using rule 111 (declaration2 -> functionDeclaration .)
    USHORT          reduce using rule 111 (declaration2 -> functionDeclaration .)
    INT             reduce using rule 111 (declaration2 -> functionDeclaration .)
    UINT            reduce using rule 111 (declaration2 -> functionDeclaration .)
    LONG            reduce using rule 111 (declaration2 -> functionDeclaration .)
    ULONG           reduce using rule 111 (declaration2 -> functionDeclaration .)
    CHAR            reduce using rule 111 (declaration2 -> functionDeclaration .)
    FLOAT           reduce using rule 111 (declaration2 -> functionDeclaration .)
    TYPEOF          reduce using rule 111 (declaration2 -> functionDeclaration .)
    ALIAS           reduce using rule 111 (declaration2 -> functionDeclaration .)
    ENUM            reduce using rule 111 (declaration2 -> functionDeclaration .)
    CLASS           reduce using rule 111 (declaration2 -> functionDeclaration .)
    TILDE           reduce using rule 111 (declaration2 -> functionDeclaration .)
    TYPEDEF         reduce using rule 111 (declaration2 -> functionDeclaration .)
    UNION           reduce using rule 111 (declaration2 -> functionDeclaration .)
    RBRACE          reduce using rule 111 (declaration2 -> functionDeclaration .)
    SEMICOLON       reduce using rule 111 (declaration2 -> functionDeclaration .)
    ELSE            reduce using rule 111 (declaration2 -> functionDeclaration .)


state 273

    (395) unionDeclaration -> UNION . IDENTIFIER structBody
    (396) unionDeclaration -> UNION . IDENTIFIER SEMICOLON
    (397) unionDeclaration -> UNION . structBody
    (332) structBody -> . LBRACE declarationStar RBRACE

    IDENTIFIER      shift and go to state 388
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 387

state 274

    (400) variableDeclaration -> multiplestorageClass . TYPEDEF declarator CommaDeclarator SEMICOLON
    (401) variableDeclaration -> multiplestorageClass . TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON

    TYPEDEF         shift and go to state 389


state 275

    (114) declaration2 -> unionDeclaration .

    PRIVATE         reduce using rule 114 (declaration2 -> unionDeclaration .)
    PROTECTED       reduce using rule 114 (declaration2 -> unionDeclaration .)
    PUBLIC          reduce using rule 114 (declaration2 -> unionDeclaration .)
    STATIC          reduce using rule 114 (declaration2 -> unionDeclaration .)
    EXTERN          reduce using rule 114 (declaration2 -> unionDeclaration .)
    FINAL           reduce using rule 114 (declaration2 -> unionDeclaration .)
    AUTO            reduce using rule 114 (declaration2 -> unionDeclaration .)
    CONST           reduce using rule 114 (declaration2 -> unionDeclaration .)
    IMMUTABLE       reduce using rule 114 (declaration2 -> unionDeclaration .)
    CASE            reduce using rule 114 (declaration2 -> unionDeclaration .)
    DEFAULT         reduce using rule 114 (declaration2 -> unionDeclaration .)
    IDENTIFIER      reduce using rule 114 (declaration2 -> unionDeclaration .)
    LBRACE          reduce using rule 114 (declaration2 -> unionDeclaration .)
    IF              reduce using rule 114 (declaration2 -> unionDeclaration .)
    WHILE           reduce using rule 114 (declaration2 -> unionDeclaration .)
    DO              reduce using rule 114 (declaration2 -> unionDeclaration .)
    FOR             reduce using rule 114 (declaration2 -> unionDeclaration .)
    FOREACH         reduce using rule 114 (declaration2 -> unionDeclaration .)
    FOREACH_REVERSE reduce using rule 114 (declaration2 -> unionDeclaration .)
    SWITCH          reduce using rule 114 (declaration2 -> unionDeclaration .)
    CONTINUE        reduce using rule 114 (declaration2 -> unionDeclaration .)
    BREAK           reduce using rule 114 (declaration2 -> unionDeclaration .)
    RETURN          reduce using rule 114 (declaration2 -> unionDeclaration .)
    GOTO            reduce using rule 114 (declaration2 -> unionDeclaration .)
    WITH            reduce using rule 114 (declaration2 -> unionDeclaration .)
    AMPERSAND       reduce using rule 114 (declaration2 -> unionDeclaration .)
    EXCLAMATION     reduce using rule 114 (declaration2 -> unionDeclaration .)
    TIMES           reduce using rule 114 (declaration2 -> unionDeclaration .)
    PLUS            reduce using rule 114 (declaration2 -> unionDeclaration .)
    MINUS           reduce using rule 114 (declaration2 -> unionDeclaration .)
    DOT             reduce using rule 114 (declaration2 -> unionDeclaration .)
    PLUS_PLUS       reduce using rule 114 (declaration2 -> unionDeclaration .)
    ELLIPSIS        reduce using rule 114 (declaration2 -> unionDeclaration .)
    LBRACKET        reduce using rule 114 (declaration2 -> unionDeclaration .)
    RANGE           reduce using rule 114 (declaration2 -> unionDeclaration .)
    LPAREN          reduce using rule 114 (declaration2 -> unionDeclaration .)
    DOLLAR          reduce using rule 114 (declaration2 -> unionDeclaration .)
    THIS            reduce using rule 114 (declaration2 -> unionDeclaration .)
    NULL            reduce using rule 114 (declaration2 -> unionDeclaration .)
    TRUE            reduce using rule 114 (declaration2 -> unionDeclaration .)
    FALSE           reduce using rule 114 (declaration2 -> unionDeclaration .)
    INUMBER         reduce using rule 114 (declaration2 -> unionDeclaration .)
    DNUMBER         reduce using rule 114 (declaration2 -> unionDeclaration .)
    LIT_CHAR        reduce using rule 114 (declaration2 -> unionDeclaration .)
    NEW             reduce using rule 114 (declaration2 -> unionDeclaration .)
    DELETE          reduce using rule 114 (declaration2 -> unionDeclaration .)
    CAST            reduce using rule 114 (declaration2 -> unionDeclaration .)
    FUNCTION        reduce using rule 114 (declaration2 -> unionDeclaration .)
    MIXIN           reduce using rule 114 (declaration2 -> unionDeclaration .)
    IMPORT          reduce using rule 114 (declaration2 -> unionDeclaration .)
    LIT_STR         reduce using rule 114 (declaration2 -> unionDeclaration .)
    BOOL            reduce using rule 114 (declaration2 -> unionDeclaration .)
    SHORT           reduce using rule 114 (declaration2 -> unionDeclaration .)
    USHORT          reduce using rule 114 (declaration2 -> unionDeclaration .)
    INT             reduce using rule 114 (declaration2 -> unionDeclaration .)
    UINT            reduce using rule 114 (declaration2 -> unionDeclaration .)
    LONG            reduce using rule 114 (declaration2 -> unionDeclaration .)
    ULONG           reduce using rule 114 (declaration2 -> unionDeclaration .)
    CHAR            reduce using rule 114 (declaration2 -> unionDeclaration .)
    FLOAT           reduce using rule 114 (declaration2 -> unionDeclaration .)
    TYPEOF          reduce using rule 114 (declaration2 -> unionDeclaration .)
    ALIAS           reduce using rule 114 (declaration2 -> unionDeclaration .)
    ENUM            reduce using rule 114 (declaration2 -> unionDeclaration .)
    CLASS           reduce using rule 114 (declaration2 -> unionDeclaration .)
    TILDE           reduce using rule 114 (declaration2 -> unionDeclaration .)
    TYPEDEF         reduce using rule 114 (declaration2 -> unionDeclaration .)
    UNION           reduce using rule 114 (declaration2 -> unionDeclaration .)
    RBRACE          reduce using rule 114 (declaration2 -> unionDeclaration .)
    SEMICOLON       reduce using rule 114 (declaration2 -> unionDeclaration .)
    ELSE            reduce using rule 114 (declaration2 -> unionDeclaration .)


state 276

    (5) aliasDeclaration -> ALIAS . aliasInitializer comma_aliasInitializer SEMICOLON
    (6) aliasDeclaration -> ALIAS . multiplestorageClass type identifierList SEMICOLON
    (13) aliasThisDeclaration -> ALIAS . IDENTIFIER THIS SEMICOLON
    (11) aliasInitializer -> . IDENTIFIER ASSIGN multiplestorageClass type
    (12) aliasInitializer -> . IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON
    (9) multiplestorageClass -> . storageClass multiplestorageClass
    (10) multiplestorageClass -> . empty
    (324) storageClass -> . typeConstructor
    (325) storageClass -> . AUTO
    (326) storageClass -> . ENUM
    (327) storageClass -> . EXTERN
    (328) storageClass -> . FINAL
    (329) storageClass -> . STATIC
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      shift and go to state 398
    AUTO            shift and go to state 394
    ENUM            shift and go to state 392
    EXTERN          shift and go to state 396
    FINAL           shift and go to state 393
    STATIC          shift and go to state 397
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 407 (empty -> .) ]

    aliasInitializer               shift and go to state 390
    multiplestorageClass           shift and go to state 391
    storageClass                   shift and go to state 395
    typeConstructor                shift and go to state 259
    empty                          shift and go to state 267

state 277

    (107) declaration2 -> classDeclaration .

    PRIVATE         reduce using rule 107 (declaration2 -> classDeclaration .)
    PROTECTED       reduce using rule 107 (declaration2 -> classDeclaration .)
    PUBLIC          reduce using rule 107 (declaration2 -> classDeclaration .)
    STATIC          reduce using rule 107 (declaration2 -> classDeclaration .)
    EXTERN          reduce using rule 107 (declaration2 -> classDeclaration .)
    FINAL           reduce using rule 107 (declaration2 -> classDeclaration .)
    AUTO            reduce using rule 107 (declaration2 -> classDeclaration .)
    CONST           reduce using rule 107 (declaration2 -> classDeclaration .)
    IMMUTABLE       reduce using rule 107 (declaration2 -> classDeclaration .)
    CASE            reduce using rule 107 (declaration2 -> classDeclaration .)
    DEFAULT         reduce using rule 107 (declaration2 -> classDeclaration .)
    IDENTIFIER      reduce using rule 107 (declaration2 -> classDeclaration .)
    LBRACE          reduce using rule 107 (declaration2 -> classDeclaration .)
    IF              reduce using rule 107 (declaration2 -> classDeclaration .)
    WHILE           reduce using rule 107 (declaration2 -> classDeclaration .)
    DO              reduce using rule 107 (declaration2 -> classDeclaration .)
    FOR             reduce using rule 107 (declaration2 -> classDeclaration .)
    FOREACH         reduce using rule 107 (declaration2 -> classDeclaration .)
    FOREACH_REVERSE reduce using rule 107 (declaration2 -> classDeclaration .)
    SWITCH          reduce using rule 107 (declaration2 -> classDeclaration .)
    CONTINUE        reduce using rule 107 (declaration2 -> classDeclaration .)
    BREAK           reduce using rule 107 (declaration2 -> classDeclaration .)
    RETURN          reduce using rule 107 (declaration2 -> classDeclaration .)
    GOTO            reduce using rule 107 (declaration2 -> classDeclaration .)
    WITH            reduce using rule 107 (declaration2 -> classDeclaration .)
    AMPERSAND       reduce using rule 107 (declaration2 -> classDeclaration .)
    EXCLAMATION     reduce using rule 107 (declaration2 -> classDeclaration .)
    TIMES           reduce using rule 107 (declaration2 -> classDeclaration .)
    PLUS            reduce using rule 107 (declaration2 -> classDeclaration .)
    MINUS           reduce using rule 107 (declaration2 -> classDeclaration .)
    DOT             reduce using rule 107 (declaration2 -> classDeclaration .)
    PLUS_PLUS       reduce using rule 107 (declaration2 -> classDeclaration .)
    ELLIPSIS        reduce using rule 107 (declaration2 -> classDeclaration .)
    LBRACKET        reduce using rule 107 (declaration2 -> classDeclaration .)
    RANGE           reduce using rule 107 (declaration2 -> classDeclaration .)
    LPAREN          reduce using rule 107 (declaration2 -> classDeclaration .)
    DOLLAR          reduce using rule 107 (declaration2 -> classDeclaration .)
    THIS            reduce using rule 107 (declaration2 -> classDeclaration .)
    NULL            reduce using rule 107 (declaration2 -> classDeclaration .)
    TRUE            reduce using rule 107 (declaration2 -> classDeclaration .)
    FALSE           reduce using rule 107 (declaration2 -> classDeclaration .)
    INUMBER         reduce using rule 107 (declaration2 -> classDeclaration .)
    DNUMBER         reduce using rule 107 (declaration2 -> classDeclaration .)
    LIT_CHAR        reduce using rule 107 (declaration2 -> classDeclaration .)
    NEW             reduce using rule 107 (declaration2 -> classDeclaration .)
    DELETE          reduce using rule 107 (declaration2 -> classDeclaration .)
    CAST            reduce using rule 107 (declaration2 -> classDeclaration .)
    FUNCTION        reduce using rule 107 (declaration2 -> classDeclaration .)
    MIXIN           reduce using rule 107 (declaration2 -> classDeclaration .)
    IMPORT          reduce using rule 107 (declaration2 -> classDeclaration .)
    LIT_STR         reduce using rule 107 (declaration2 -> classDeclaration .)
    BOOL            reduce using rule 107 (declaration2 -> classDeclaration .)
    SHORT           reduce using rule 107 (declaration2 -> classDeclaration .)
    USHORT          reduce using rule 107 (declaration2 -> classDeclaration .)
    INT             reduce using rule 107 (declaration2 -> classDeclaration .)
    UINT            reduce using rule 107 (declaration2 -> classDeclaration .)
    LONG            reduce using rule 107 (declaration2 -> classDeclaration .)
    ULONG           reduce using rule 107 (declaration2 -> classDeclaration .)
    CHAR            reduce using rule 107 (declaration2 -> classDeclaration .)
    FLOAT           reduce using rule 107 (declaration2 -> classDeclaration .)
    TYPEOF          reduce using rule 107 (declaration2 -> classDeclaration .)
    ALIAS           reduce using rule 107 (declaration2 -> classDeclaration .)
    ENUM            reduce using rule 107 (declaration2 -> classDeclaration .)
    CLASS           reduce using rule 107 (declaration2 -> classDeclaration .)
    TILDE           reduce using rule 107 (declaration2 -> classDeclaration .)
    TYPEDEF         reduce using rule 107 (declaration2 -> classDeclaration .)
    UNION           reduce using rule 107 (declaration2 -> classDeclaration .)
    RBRACE          reduce using rule 107 (declaration2 -> classDeclaration .)
    SEMICOLON       reduce using rule 107 (declaration2 -> classDeclaration .)
    ELSE            reduce using rule 107 (declaration2 -> classDeclaration .)


state 278

    (215) mixinDeclaration -> mixinExpression . SEMICOLON

    SEMICOLON       shift and go to state 399


state 279

    (51) attribute -> AUTO .
    (325) storageClass -> AUTO .

    COLON           reduce using rule 51 (attribute -> AUTO .)
    AUTO            reduce using rule 325 (storageClass -> AUTO .)
    ENUM            reduce using rule 325 (storageClass -> AUTO .)
    EXTERN          reduce using rule 325 (storageClass -> AUTO .)
    FINAL           reduce using rule 325 (storageClass -> AUTO .)
    STATIC          reduce using rule 325 (storageClass -> AUTO .)
    CONST           reduce using rule 325 (storageClass -> AUTO .)
    IMMUTABLE       reduce using rule 325 (storageClass -> AUTO .)
    IDENTIFIER      reduce using rule 325 (storageClass -> AUTO .)
    TYPEDEF         reduce using rule 325 (storageClass -> AUTO .)


state 280

    (89) constructor -> THIS . parameters multiple_memberFunctionAttribute functionBody
    (90) constructor -> THIS . parameters multiple_memberFunctionAttribute SEMICOLON
    (91) constructor -> THIS . parameters multiple_memberFunctionAttribute constraint functionBody
    (92) constructor -> THIS . parameters multiple_memberFunctionAttribute constraint SEMICOLON
    (255) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (256) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (257) parameters -> . LPAREN ELLIPSIS RPAREN
    (258) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 328

    parameters                     shift and go to state 400

state 281

    (108) declaration2 -> constructor .

    PRIVATE         reduce using rule 108 (declaration2 -> constructor .)
    PROTECTED       reduce using rule 108 (declaration2 -> constructor .)
    PUBLIC          reduce using rule 108 (declaration2 -> constructor .)
    STATIC          reduce using rule 108 (declaration2 -> constructor .)
    EXTERN          reduce using rule 108 (declaration2 -> constructor .)
    FINAL           reduce using rule 108 (declaration2 -> constructor .)
    AUTO            reduce using rule 108 (declaration2 -> constructor .)
    CONST           reduce using rule 108 (declaration2 -> constructor .)
    IMMUTABLE       reduce using rule 108 (declaration2 -> constructor .)
    CASE            reduce using rule 108 (declaration2 -> constructor .)
    DEFAULT         reduce using rule 108 (declaration2 -> constructor .)
    IDENTIFIER      reduce using rule 108 (declaration2 -> constructor .)
    LBRACE          reduce using rule 108 (declaration2 -> constructor .)
    IF              reduce using rule 108 (declaration2 -> constructor .)
    WHILE           reduce using rule 108 (declaration2 -> constructor .)
    DO              reduce using rule 108 (declaration2 -> constructor .)
    FOR             reduce using rule 108 (declaration2 -> constructor .)
    FOREACH         reduce using rule 108 (declaration2 -> constructor .)
    FOREACH_REVERSE reduce using rule 108 (declaration2 -> constructor .)
    SWITCH          reduce using rule 108 (declaration2 -> constructor .)
    CONTINUE        reduce using rule 108 (declaration2 -> constructor .)
    BREAK           reduce using rule 108 (declaration2 -> constructor .)
    RETURN          reduce using rule 108 (declaration2 -> constructor .)
    GOTO            reduce using rule 108 (declaration2 -> constructor .)
    WITH            reduce using rule 108 (declaration2 -> constructor .)
    AMPERSAND       reduce using rule 108 (declaration2 -> constructor .)
    EXCLAMATION     reduce using rule 108 (declaration2 -> constructor .)
    TIMES           reduce using rule 108 (declaration2 -> constructor .)
    PLUS            reduce using rule 108 (declaration2 -> constructor .)
    MINUS           reduce using rule 108 (declaration2 -> constructor .)
    DOT             reduce using rule 108 (declaration2 -> constructor .)
    PLUS_PLUS       reduce using rule 108 (declaration2 -> constructor .)
    ELLIPSIS        reduce using rule 108 (declaration2 -> constructor .)
    LBRACKET        reduce using rule 108 (declaration2 -> constructor .)
    RANGE           reduce using rule 108 (declaration2 -> constructor .)
    LPAREN          reduce using rule 108 (declaration2 -> constructor .)
    DOLLAR          reduce using rule 108 (declaration2 -> constructor .)
    THIS            reduce using rule 108 (declaration2 -> constructor .)
    NULL            reduce using rule 108 (declaration2 -> constructor .)
    TRUE            reduce using rule 108 (declaration2 -> constructor .)
    FALSE           reduce using rule 108 (declaration2 -> constructor .)
    INUMBER         reduce using rule 108 (declaration2 -> constructor .)
    DNUMBER         reduce using rule 108 (declaration2 -> constructor .)
    LIT_CHAR        reduce using rule 108 (declaration2 -> constructor .)
    NEW             reduce using rule 108 (declaration2 -> constructor .)
    DELETE          reduce using rule 108 (declaration2 -> constructor .)
    CAST            reduce using rule 108 (declaration2 -> constructor .)
    FUNCTION        reduce using rule 108 (declaration2 -> constructor .)
    MIXIN           reduce using rule 108 (declaration2 -> constructor .)
    IMPORT          reduce using rule 108 (declaration2 -> constructor .)
    LIT_STR         reduce using rule 108 (declaration2 -> constructor .)
    BOOL            reduce using rule 108 (declaration2 -> constructor .)
    SHORT           reduce using rule 108 (declaration2 -> constructor .)
    USHORT          reduce using rule 108 (declaration2 -> constructor .)
    INT             reduce using rule 108 (declaration2 -> constructor .)
    UINT            reduce using rule 108 (declaration2 -> constructor .)
    LONG            reduce using rule 108 (declaration2 -> constructor .)
    ULONG           reduce using rule 108 (declaration2 -> constructor .)
    CHAR            reduce using rule 108 (declaration2 -> constructor .)
    FLOAT           reduce using rule 108 (declaration2 -> constructor .)
    TYPEOF          reduce using rule 108 (declaration2 -> constructor .)
    ALIAS           reduce using rule 108 (declaration2 -> constructor .)
    ENUM            reduce using rule 108 (declaration2 -> constructor .)
    CLASS           reduce using rule 108 (declaration2 -> constructor .)
    TILDE           reduce using rule 108 (declaration2 -> constructor .)
    TYPEDEF         reduce using rule 108 (declaration2 -> constructor .)
    UNION           reduce using rule 108 (declaration2 -> constructor .)
    RBRACE          reduce using rule 108 (declaration2 -> constructor .)
    SEMICOLON       reduce using rule 108 (declaration2 -> constructor .)
    ELSE            reduce using rule 108 (declaration2 -> constructor .)


state 282

    (169) functionDeclaration -> storageClass . multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (170) functionDeclaration -> storageClass . multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (9) multiplestorageClass -> storageClass . multiplestorageClass
    (55) autoDeclaration -> storageClass . multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON
    (9) multiplestorageClass -> . storageClass multiplestorageClass
    (10) multiplestorageClass -> . empty
    (324) storageClass -> . typeConstructor
    (325) storageClass -> . AUTO
    (326) storageClass -> . ENUM
    (327) storageClass -> . EXTERN
    (328) storageClass -> . FINAL
    (329) storageClass -> . STATIC
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

    AUTO            shift and go to state 394
    ENUM            shift and go to state 392
    EXTERN          shift and go to state 396
    FINAL           shift and go to state 393
    STATIC          shift and go to state 397
    IDENTIFIER      reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

    multiplestorageClass           shift and go to state 401
    storageClass                   shift and go to state 395
    typeConstructor                shift and go to state 259
    empty                          shift and go to state 267

state 283

    (105) declaration2 -> anonymousEnumDeclaration .

    PRIVATE         reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    PROTECTED       reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    PUBLIC          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    STATIC          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    EXTERN          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    FINAL           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    AUTO            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    CONST           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    IMMUTABLE       reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    CASE            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    DEFAULT         reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    IDENTIFIER      reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    LBRACE          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    IF              reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    WHILE           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    DO              reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    FOR             reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    FOREACH         reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    FOREACH_REVERSE reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    SWITCH          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    CONTINUE        reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    BREAK           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    RETURN          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    GOTO            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    WITH            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    AMPERSAND       reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    EXCLAMATION     reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    TIMES           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    PLUS            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    MINUS           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    DOT             reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    PLUS_PLUS       reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    ELLIPSIS        reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    LBRACKET        reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    RANGE           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    LPAREN          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    DOLLAR          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    THIS            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    NULL            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    TRUE            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    FALSE           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    INUMBER         reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    DNUMBER         reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    LIT_CHAR        reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    NEW             reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    DELETE          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    CAST            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    FUNCTION        reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    MIXIN           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    IMPORT          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    LIT_STR         reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    BOOL            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    SHORT           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    USHORT          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    INT             reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    UINT            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    LONG            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    ULONG           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    CHAR            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    FLOAT           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    TYPEOF          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    ALIAS           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    ENUM            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    CLASS           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    TILDE           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    TYPEDEF         reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    UNION           reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    RBRACE          reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    SEMICOLON       reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)
    ELSE            reduce using rule 105 (declaration2 -> anonymousEnumDeclaration .)


state 284

    (115) declaration2 -> variableDeclaration .

    PRIVATE         reduce using rule 115 (declaration2 -> variableDeclaration .)
    PROTECTED       reduce using rule 115 (declaration2 -> variableDeclaration .)
    PUBLIC          reduce using rule 115 (declaration2 -> variableDeclaration .)
    STATIC          reduce using rule 115 (declaration2 -> variableDeclaration .)
    EXTERN          reduce using rule 115 (declaration2 -> variableDeclaration .)
    FINAL           reduce using rule 115 (declaration2 -> variableDeclaration .)
    AUTO            reduce using rule 115 (declaration2 -> variableDeclaration .)
    CONST           reduce using rule 115 (declaration2 -> variableDeclaration .)
    IMMUTABLE       reduce using rule 115 (declaration2 -> variableDeclaration .)
    CASE            reduce using rule 115 (declaration2 -> variableDeclaration .)
    DEFAULT         reduce using rule 115 (declaration2 -> variableDeclaration .)
    IDENTIFIER      reduce using rule 115 (declaration2 -> variableDeclaration .)
    LBRACE          reduce using rule 115 (declaration2 -> variableDeclaration .)
    IF              reduce using rule 115 (declaration2 -> variableDeclaration .)
    WHILE           reduce using rule 115 (declaration2 -> variableDeclaration .)
    DO              reduce using rule 115 (declaration2 -> variableDeclaration .)
    FOR             reduce using rule 115 (declaration2 -> variableDeclaration .)
    FOREACH         reduce using rule 115 (declaration2 -> variableDeclaration .)
    FOREACH_REVERSE reduce using rule 115 (declaration2 -> variableDeclaration .)
    SWITCH          reduce using rule 115 (declaration2 -> variableDeclaration .)
    CONTINUE        reduce using rule 115 (declaration2 -> variableDeclaration .)
    BREAK           reduce using rule 115 (declaration2 -> variableDeclaration .)
    RETURN          reduce using rule 115 (declaration2 -> variableDeclaration .)
    GOTO            reduce using rule 115 (declaration2 -> variableDeclaration .)
    WITH            reduce using rule 115 (declaration2 -> variableDeclaration .)
    AMPERSAND       reduce using rule 115 (declaration2 -> variableDeclaration .)
    EXCLAMATION     reduce using rule 115 (declaration2 -> variableDeclaration .)
    TIMES           reduce using rule 115 (declaration2 -> variableDeclaration .)
    PLUS            reduce using rule 115 (declaration2 -> variableDeclaration .)
    MINUS           reduce using rule 115 (declaration2 -> variableDeclaration .)
    DOT             reduce using rule 115 (declaration2 -> variableDeclaration .)
    PLUS_PLUS       reduce using rule 115 (declaration2 -> variableDeclaration .)
    ELLIPSIS        reduce using rule 115 (declaration2 -> variableDeclaration .)
    LBRACKET        reduce using rule 115 (declaration2 -> variableDeclaration .)
    RANGE           reduce using rule 115 (declaration2 -> variableDeclaration .)
    LPAREN          reduce using rule 115 (declaration2 -> variableDeclaration .)
    DOLLAR          reduce using rule 115 (declaration2 -> variableDeclaration .)
    THIS            reduce using rule 115 (declaration2 -> variableDeclaration .)
    NULL            reduce using rule 115 (declaration2 -> variableDeclaration .)
    TRUE            reduce using rule 115 (declaration2 -> variableDeclaration .)
    FALSE           reduce using rule 115 (declaration2 -> variableDeclaration .)
    INUMBER         reduce using rule 115 (declaration2 -> variableDeclaration .)
    DNUMBER         reduce using rule 115 (declaration2 -> variableDeclaration .)
    LIT_CHAR        reduce using rule 115 (declaration2 -> variableDeclaration .)
    NEW             reduce using rule 115 (declaration2 -> variableDeclaration .)
    DELETE          reduce using rule 115 (declaration2 -> variableDeclaration .)
    CAST            reduce using rule 115 (declaration2 -> variableDeclaration .)
    FUNCTION        reduce using rule 115 (declaration2 -> variableDeclaration .)
    MIXIN           reduce using rule 115 (declaration2 -> variableDeclaration .)
    IMPORT          reduce using rule 115 (declaration2 -> variableDeclaration .)
    LIT_STR         reduce using rule 115 (declaration2 -> variableDeclaration .)
    BOOL            reduce using rule 115 (declaration2 -> variableDeclaration .)
    SHORT           reduce using rule 115 (declaration2 -> variableDeclaration .)
    USHORT          reduce using rule 115 (declaration2 -> variableDeclaration .)
    INT             reduce using rule 115 (declaration2 -> variableDeclaration .)
    UINT            reduce using rule 115 (declaration2 -> variableDeclaration .)
    LONG            reduce using rule 115 (declaration2 -> variableDeclaration .)
    ULONG           reduce using rule 115 (declaration2 -> variableDeclaration .)
    CHAR            reduce using rule 115 (declaration2 -> variableDeclaration .)
    FLOAT           reduce using rule 115 (declaration2 -> variableDeclaration .)
    TYPEOF          reduce using rule 115 (declaration2 -> variableDeclaration .)
    ALIAS           reduce using rule 115 (declaration2 -> variableDeclaration .)
    ENUM            reduce using rule 115 (declaration2 -> variableDeclaration .)
    CLASS           reduce using rule 115 (declaration2 -> variableDeclaration .)
    TILDE           reduce using rule 115 (declaration2 -> variableDeclaration .)
    TYPEDEF         reduce using rule 115 (declaration2 -> variableDeclaration .)
    UNION           reduce using rule 115 (declaration2 -> variableDeclaration .)
    RBRACE          reduce using rule 115 (declaration2 -> variableDeclaration .)
    SEMICOLON       reduce using rule 115 (declaration2 -> variableDeclaration .)
    ELSE            reduce using rule 115 (declaration2 -> variableDeclaration .)


state 285

    (126) doStatement -> DO statementNoCaseNoDefault . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 402


state 286

    (122) defaultStatement -> DEFAULT COLON . declarationsAndStatements
    (116) declarationsAndStatements -> . declarationOrStatement
    (117) declarationsAndStatements -> . declarationOrStatement declarationsAndStatements
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    declarationsAndStatements      shift and go to state 403
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 113
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 287

    (403) whileStatement -> WHILE LBRACKET . expression RBRACKET declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 404

state 288

    (75) caseRangeStatement -> CASE assignExpression . COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (18) argumentList -> assignExpression .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 405
    COMMA           reduce using rule 18 (argumentList -> assignExpression .)

  ! COLON           [ reduce using rule 18 (argumentList -> assignExpression .) ]


state 289

    (76) caseStatement -> CASE argumentList . COLON declarationsAndStatements
    (19) argumentList -> argumentList . comma_assign
    (20) comma_assign -> . COMMA assignExpression comma_assign
    (21) comma_assign -> . empty
    (407) empty -> .

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    COLON           shift and go to state 406
    COMMA           shift and go to state 219

  ! COLON           [ reduce using rule 407 (empty -> .) ]
  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    comma_assign                   shift and go to state 221
    empty                          shift and go to state 222

state 290

    (333) switchStatement -> SWITCH LBRACKET . expression RBRACKET statement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 407

state 291

    (210) labeledStatement -> IDENTIFIER COLON .
    (211) labeledStatement -> IDENTIFIER COLON . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! reduce/reduce conflict for ALIAS resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for ENUM resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for THIS resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for TILDE resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for IMPORT resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for UNION resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! reduce/reduce conflict for MIXIN resolved using rule 210 (labeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACE          reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    ALIAS           reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    ENUM            reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    CLASS           reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    TILDE           reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    TYPEDEF         reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    UNION           reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    SEMICOLON       reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    ELSE            reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .)
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! PRIVATE         [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! PROTECTED       [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! PUBLIC          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! STATIC          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! EXTERN          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! FINAL           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! AUTO            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! CONST           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! IMMUTABLE       [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! CASE            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! DEFAULT         [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! IDENTIFIER      [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! LBRACE          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! IF              [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! WHILE           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! DO              [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! FOR             [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! FOREACH         [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! FOREACH_REVERSE [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! SWITCH          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! CONTINUE        [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! BREAK           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! RETURN          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! GOTO            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! WITH            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! AMPERSAND       [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! EXCLAMATION     [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! TIMES           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! PLUS            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! MINUS           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! DOT             [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! PLUS_PLUS       [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! ELLIPSIS        [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! LBRACKET        [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! RANGE           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! LPAREN          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! DOLLAR          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! THIS            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! NULL            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! TRUE            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! FALSE           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! INUMBER         [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! DNUMBER         [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! LIT_CHAR        [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! NEW             [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! DELETE          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! CAST            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! FUNCTION        [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! MIXIN           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! IMPORT          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! LIT_STR         [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! BOOL            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! SHORT           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! USHORT          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! INT             [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! UINT            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! LONG            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! ULONG           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! CHAR            [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! FLOAT           [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! TYPEOF          [ reduce using rule 210 (labeledStatement -> IDENTIFIER COLON .) ]
  ! ALIAS           [ reduce using rule 407 (empty -> .) ]
  ! ENUM            [ reduce using rule 407 (empty -> .) ]
  ! CLASS           [ reduce using rule 407 (empty -> .) ]
  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! TILDE           [ reduce using rule 407 (empty -> .) ]
  ! TYPEDEF         [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! UNION           [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 408
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 292

    (62) breakStatement -> BREAK IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 409


state 293

    (61) breakStatement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    PRIVATE         reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    PROTECTED       reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    PUBLIC          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    EXTERN          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    FINAL           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    CONST           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    IMMUTABLE       reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    CASE            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    IF              reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    DO              reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    FOREACH_REVERSE reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    WITH            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    EXCLAMATION     reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    DOT             reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    PLUS_PLUS       reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    ELLIPSIS        reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    LBRACKET        reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    RANGE           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    DOLLAR          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    THIS            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    NULL            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    INUMBER         reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    DNUMBER         reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    LIT_CHAR        reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    NEW             reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    CAST            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    MIXIN           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    IMPORT          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    LIT_STR         reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    USHORT          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    INT             reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    UINT            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    LONG            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    ULONG           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    TYPEOF          reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    ALIAS           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    TILDE           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    UNION           reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 61 (breakStatement -> BREAK SEMICOLON .)


state 294

    (52) attribute -> CONST .

    PRIVATE         reduce using rule 52 (attribute -> CONST .)
    PROTECTED       reduce using rule 52 (attribute -> CONST .)
    PUBLIC          reduce using rule 52 (attribute -> CONST .)
    STATIC          reduce using rule 52 (attribute -> CONST .)
    EXTERN          reduce using rule 52 (attribute -> CONST .)
    FINAL           reduce using rule 52 (attribute -> CONST .)
    AUTO            reduce using rule 52 (attribute -> CONST .)
    CONST           reduce using rule 52 (attribute -> CONST .)
    IMMUTABLE       reduce using rule 52 (attribute -> CONST .)
    LBRACE          reduce using rule 52 (attribute -> CONST .)
    ALIAS           reduce using rule 52 (attribute -> CONST .)
    ENUM            reduce using rule 52 (attribute -> CONST .)
    CLASS           reduce using rule 52 (attribute -> CONST .)
    THIS            reduce using rule 52 (attribute -> CONST .)
    TILDE           reduce using rule 52 (attribute -> CONST .)
    TYPEDEF         reduce using rule 52 (attribute -> CONST .)
    IMPORT          reduce using rule 52 (attribute -> CONST .)
    UNION           reduce using rule 52 (attribute -> CONST .)
    MIXIN           reduce using rule 52 (attribute -> CONST .)


state 295

    (98) declaration -> attribute multipleattributes . LBRACE multiple_declaration RBRACE
    (101) multipleattributes -> attribute multipleattributes .

    LBRACE          shift and go to state 410
    ALIAS           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    ENUM            reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    CLASS           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    THIS            reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    TILDE           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    TYPEDEF         reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    IMPORT          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    UNION           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    PRIVATE         reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    PROTECTED       reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    PUBLIC          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    STATIC          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    EXTERN          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    FINAL           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    AUTO            reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    CONST           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    IMMUTABLE       reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    MIXIN           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)


state 296

    (101) multipleattributes -> attribute . multipleattributes
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (407) empty -> .

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 294
    IMMUTABLE       shift and go to state 297
    LBRACE          reduce using rule 407 (empty -> .)
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    THIS            reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IMPORT          reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    MIXIN           reduce using rule 407 (empty -> .)

  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    attribute                      shift and go to state 296
    multipleattributes             shift and go to state 411
    empty                          shift and go to state 140

state 297

    (53) attribute -> IMMUTABLE .

    PRIVATE         reduce using rule 53 (attribute -> IMMUTABLE .)
    PROTECTED       reduce using rule 53 (attribute -> IMMUTABLE .)
    PUBLIC          reduce using rule 53 (attribute -> IMMUTABLE .)
    STATIC          reduce using rule 53 (attribute -> IMMUTABLE .)
    EXTERN          reduce using rule 53 (attribute -> IMMUTABLE .)
    FINAL           reduce using rule 53 (attribute -> IMMUTABLE .)
    AUTO            reduce using rule 53 (attribute -> IMMUTABLE .)
    CONST           reduce using rule 53 (attribute -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 53 (attribute -> IMMUTABLE .)
    LBRACE          reduce using rule 53 (attribute -> IMMUTABLE .)
    ALIAS           reduce using rule 53 (attribute -> IMMUTABLE .)
    ENUM            reduce using rule 53 (attribute -> IMMUTABLE .)
    CLASS           reduce using rule 53 (attribute -> IMMUTABLE .)
    THIS            reduce using rule 53 (attribute -> IMMUTABLE .)
    TILDE           reduce using rule 53 (attribute -> IMMUTABLE .)
    TYPEDEF         reduce using rule 53 (attribute -> IMMUTABLE .)
    IMPORT          reduce using rule 53 (attribute -> IMMUTABLE .)
    UNION           reduce using rule 53 (attribute -> IMMUTABLE .)
    MIXIN           reduce using rule 53 (attribute -> IMMUTABLE .)


state 298

    (59) blockStatement -> LBRACE declarationsAndStatements RBRACE .

    DOT             reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PLUS_PLUS       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LBRACKET        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CARET           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TIMES           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DIV             reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    MODULO          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PLUS            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    MINUS           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TILDE           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LEFT_SHIFT      reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RIGHT_SHIFT     reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IS_EQ           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NOT_EQ          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    AMPERSAND       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PIPE            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    QUESTION        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOUBLE_PIPE     reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ASSIGN          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_LEFT         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_RIGHT        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_PLUS         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_MINUS        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_TIMES        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_MODULO       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_AND_BIT      reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_DIV          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_OR_BIT       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_XOR_BIT      reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RANGE           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    COMMA           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RBRACKET        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS_EQ         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER_EQ      reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IS_EQ_DIFF      reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NOT_EQ_DIFF     reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS_EQ_DIFF    reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS_DIFF       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER_EQ_DIFF reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER_DIFF    reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    COLON           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RBRACE          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PRIVATE         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PROTECTED       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PUBLIC          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    STATIC          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EXTERN          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FINAL           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    AUTO            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CONST           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IMMUTABLE       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CASE            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DEFAULT         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IDENTIFIER      reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LBRACE          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IF              reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    WHILE           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DO              reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FOR             reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FOREACH         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FOREACH_REVERSE reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    SWITCH          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CONTINUE        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    BREAK           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RETURN          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GOTO            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    WITH            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EXCLAMATION     reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ELLIPSIS        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LPAREN          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOLLAR          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    THIS            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NULL            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TRUE            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FALSE           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    INUMBER         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DNUMBER         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LIT_CHAR        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NEW             reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DELETE          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CAST            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FUNCTION        reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    MIXIN           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IMPORT          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LIT_STR         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    BOOL            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    SHORT           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    USHORT          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    INT             reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UINT            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LONG            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ULONG           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CHAR            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FLOAT           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TYPEOF          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ALIAS           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ENUM            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CLASS           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TYPEDEF         reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UNION           reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    SEMICOLON       reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ELSE            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    $end            reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RPAREN          reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOUBLE_QUOTE    reduce using rule 59 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)


state 299

    (188) ifStatement -> IF LPAREN . ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> IF LPAREN . ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (190) ifCondition -> . AUTO IDENTIFIER ASSIGN expression
    (191) ifCondition -> . TYPEDEF IDENTIFIER ASSIGN expression
    (192) ifCondition -> . expression
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AUTO            shift and go to state 412
    TYPEDEF         shift and go to state 415
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    ifCondition                    shift and go to state 413
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 414

state 300

    (216) mixinExpression -> MIXIN LPAREN assignExpression . RPAREN

    RPAREN          shift and go to state 416


state 301

    (225) newAnonClassExpression -> NEW arguments CLASS . structBody
    (226) newAnonClassExpression -> NEW arguments CLASS . arguments structBody
    (227) newAnonClassExpression -> NEW arguments CLASS . baseClassList structBody
    (228) newAnonClassExpression -> NEW arguments CLASS . arguments baseClassList structBody
    (332) structBody -> . LBRACE declarationStar RBRACE
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN
    (64) baseClassList -> . baseClass
    (65) baseClassList -> . baseClassList COMMA baseClass
    (63) baseClass -> . type2
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    LBRACE          shift and go to state 308
    LPAREN          shift and go to state 160
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 92
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    baseClassList                  shift and go to state 418
    arguments                      shift and go to state 417
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    structBody                     shift and go to state 419
    baseClass                      shift and go to state 307
    typeofExpression               shift and go to state 2
    type2                          shift and go to state 304

state 302

    (230) newExpression -> NEW type LBRACKET . assignExpression RBRACKET
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 420
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 303

    (231) newExpression -> NEW type arguments .

    DOT             reduce using rule 231 (newExpression -> NEW type arguments .)
    PLUS_PLUS       reduce using rule 231 (newExpression -> NEW type arguments .)
    LBRACKET        reduce using rule 231 (newExpression -> NEW type arguments .)
    CARET           reduce using rule 231 (newExpression -> NEW type arguments .)
    TIMES           reduce using rule 231 (newExpression -> NEW type arguments .)
    DIV             reduce using rule 231 (newExpression -> NEW type arguments .)
    MODULO          reduce using rule 231 (newExpression -> NEW type arguments .)
    PLUS            reduce using rule 231 (newExpression -> NEW type arguments .)
    MINUS           reduce using rule 231 (newExpression -> NEW type arguments .)
    TILDE           reduce using rule 231 (newExpression -> NEW type arguments .)
    LEFT_SHIFT      reduce using rule 231 (newExpression -> NEW type arguments .)
    RIGHT_SHIFT     reduce using rule 231 (newExpression -> NEW type arguments .)
    IS_EQ           reduce using rule 231 (newExpression -> NEW type arguments .)
    NOT_EQ          reduce using rule 231 (newExpression -> NEW type arguments .)
    AMPERSAND       reduce using rule 231 (newExpression -> NEW type arguments .)
    PIPE            reduce using rule 231 (newExpression -> NEW type arguments .)
    DOUBLE_AMPERSAND reduce using rule 231 (newExpression -> NEW type arguments .)
    QUESTION        reduce using rule 231 (newExpression -> NEW type arguments .)
    DOUBLE_PIPE     reduce using rule 231 (newExpression -> NEW type arguments .)
    ASSIGN          reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_LEFT         reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_RIGHT        reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_PLUS         reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_MINUS        reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_TIMES        reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_MODULO       reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_AND_BIT      reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_DIV          reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_OR_BIT       reduce using rule 231 (newExpression -> NEW type arguments .)
    EQ_XOR_BIT      reduce using rule 231 (newExpression -> NEW type arguments .)
    SEMICOLON       reduce using rule 231 (newExpression -> NEW type arguments .)
    COMMA           reduce using rule 231 (newExpression -> NEW type arguments .)
    LESS            reduce using rule 231 (newExpression -> NEW type arguments .)
    LESS_EQ         reduce using rule 231 (newExpression -> NEW type arguments .)
    GREATER         reduce using rule 231 (newExpression -> NEW type arguments .)
    GREATER_EQ      reduce using rule 231 (newExpression -> NEW type arguments .)
    IS_EQ_DIFF      reduce using rule 231 (newExpression -> NEW type arguments .)
    NOT_EQ_DIFF     reduce using rule 231 (newExpression -> NEW type arguments .)
    LESS_EQ_DIFF    reduce using rule 231 (newExpression -> NEW type arguments .)
    LESS_DIFF       reduce using rule 231 (newExpression -> NEW type arguments .)
    GREATER_EQ_DIFF reduce using rule 231 (newExpression -> NEW type arguments .)
    GREATER_DIFF    reduce using rule 231 (newExpression -> NEW type arguments .)
    $end            reduce using rule 231 (newExpression -> NEW type arguments .)
    RBRACKET        reduce using rule 231 (newExpression -> NEW type arguments .)
    RPAREN          reduce using rule 231 (newExpression -> NEW type arguments .)
    COLON           reduce using rule 231 (newExpression -> NEW type arguments .)
    RANGE           reduce using rule 231 (newExpression -> NEW type arguments .)
    TYPEDEF         reduce using rule 231 (newExpression -> NEW type arguments .)
    IDENTIFIER      reduce using rule 231 (newExpression -> NEW type arguments .)
    RBRACE          reduce using rule 231 (newExpression -> NEW type arguments .)
    DOUBLE_QUOTE    reduce using rule 231 (newExpression -> NEW type arguments .)
    LPAREN          reduce using rule 231 (newExpression -> NEW type arguments .)


state 304

    (63) baseClass -> type2 .

    COMMA           reduce using rule 63 (baseClass -> type2 .)
    LBRACE          reduce using rule 63 (baseClass -> type2 .)


state 305

    (221) newAnonClassExpression -> NEW CLASS arguments . baseClassList structBody
    (222) newAnonClassExpression -> NEW CLASS arguments . structBody
    (64) baseClassList -> . baseClass
    (65) baseClassList -> . baseClassList COMMA baseClass
    (332) structBody -> . LBRACE declarationStar RBRACE
    (63) baseClass -> . type2
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    LBRACE          shift and go to state 308
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 92
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    baseClassList                  shift and go to state 421
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    structBody                     shift and go to state 422
    baseClass                      shift and go to state 307
    typeofExpression               shift and go to state 2
    type2                          shift and go to state 304

state 306

    (223) newAnonClassExpression -> NEW CLASS baseClassList . structBody
    (65) baseClassList -> baseClassList . COMMA baseClass
    (332) structBody -> . LBRACE declarationStar RBRACE

    COMMA           shift and go to state 423
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 424

state 307

    (64) baseClassList -> baseClass .

    COMMA           reduce using rule 64 (baseClassList -> baseClass .)
    LBRACE          reduce using rule 64 (baseClassList -> baseClass .)


state 308

    (332) structBody -> LBRACE . declarationStar RBRACE
    (330) declarationStar -> . declaration declarationStar
    (331) declarationStar -> . empty
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (407) empty -> .
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 407 (empty -> .)
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    THIS            reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IMPORT          reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    MIXIN           reduce using rule 407 (empty -> .)
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 294
    IMMUTABLE       shift and go to state 297

  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    multipleattributes             shift and go to state 130
    attribute                      shift and go to state 145
    declaration                    shift and go to state 425
    declarationStar                shift and go to state 426
    empty                          shift and go to state 427

state 309

    (224) newAnonClassExpression -> NEW CLASS structBody .

    DOT             reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    PLUS_PLUS       reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    LBRACKET        reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    CARET           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    TIMES           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    DIV             reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    MODULO          reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    PLUS            reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    MINUS           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    TILDE           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    LEFT_SHIFT      reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    RIGHT_SHIFT     reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    IS_EQ           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    NOT_EQ          reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    AMPERSAND       reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    PIPE            reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    DOUBLE_AMPERSAND reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    QUESTION        reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    DOUBLE_PIPE     reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    ASSIGN          reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_LEFT         reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_RIGHT        reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_PLUS         reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_MINUS        reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_TIMES        reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_MODULO       reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_AND_BIT      reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_DIV          reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_OR_BIT       reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    EQ_XOR_BIT      reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    COLON           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    COMMA           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    RBRACKET        reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    LESS            reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    LESS_EQ         reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    GREATER         reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    GREATER_EQ      reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    IS_EQ_DIFF      reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    NOT_EQ_DIFF     reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    LESS_EQ_DIFF    reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    LESS_DIFF       reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    GREATER_EQ_DIFF reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    GREATER_DIFF    reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    RPAREN          reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    $end            reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    SEMICOLON       reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    RANGE           reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    TYPEDEF         reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    IDENTIFIER      reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    RBRACE          reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    DOUBLE_QUOTE    reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)
    LPAREN          reduce using rule 224 (newAnonClassExpression -> NEW CLASS structBody .)


state 310

    (22) arguments -> LPAREN RPAREN .

    LBRACE          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    BOOL            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    SHORT           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    USHORT          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    INT             reduce using rule 22 (arguments -> LPAREN RPAREN .)
    UINT            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LONG            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    ULONG           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    CHAR            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    FLOAT           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DOT             reduce using rule 22 (arguments -> LPAREN RPAREN .)
    TYPEOF          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    CONST           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    IMMUTABLE       reduce using rule 22 (arguments -> LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 22 (arguments -> LPAREN RPAREN .)
    PLUS_PLUS       reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    CARET           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    TIMES           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DIV             reduce using rule 22 (arguments -> LPAREN RPAREN .)
    MODULO          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    PLUS            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    MINUS           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    TILDE           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    $end            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LEFT_SHIFT      reduce using rule 22 (arguments -> LPAREN RPAREN .)
    RIGHT_SHIFT     reduce using rule 22 (arguments -> LPAREN RPAREN .)
    IS_EQ           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    NOT_EQ          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    AMPERSAND       reduce using rule 22 (arguments -> LPAREN RPAREN .)
    PIPE            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 22 (arguments -> LPAREN RPAREN .)
    QUESTION        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DOUBLE_PIPE     reduce using rule 22 (arguments -> LPAREN RPAREN .)
    ASSIGN          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_LEFT         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_RIGHT        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_PLUS         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_MINUS        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_TIMES        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_MODULO       reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_AND_BIT      reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_DIV          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_OR_BIT       reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EQ_XOR_BIT      reduce using rule 22 (arguments -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    COMMA           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LESS            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LESS_EQ         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    GREATER         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 22 (arguments -> LPAREN RPAREN .)
    IS_EQ_DIFF      reduce using rule 22 (arguments -> LPAREN RPAREN .)
    NOT_EQ_DIFF     reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LESS_EQ_DIFF    reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LESS_DIFF       reduce using rule 22 (arguments -> LPAREN RPAREN .)
    GREATER_EQ_DIFF reduce using rule 22 (arguments -> LPAREN RPAREN .)
    GREATER_DIFF    reduce using rule 22 (arguments -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 22 (arguments -> LPAREN RPAREN .)
    RPAREN          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    COLON           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    RANGE           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    TYPEDEF         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    RBRACE          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DOUBLE_QUOTE    reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LPAREN          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    EXCLAMATION     reduce using rule 22 (arguments -> LPAREN RPAREN .)
    ELLIPSIS        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DOLLAR          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    THIS            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    NULL            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    TRUE            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    FALSE           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    INUMBER         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DNUMBER         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LIT_CHAR        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    NEW             reduce using rule 22 (arguments -> LPAREN RPAREN .)
    DELETE          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    CAST            reduce using rule 22 (arguments -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 22 (arguments -> LPAREN RPAREN .)
    MIXIN           reduce using rule 22 (arguments -> LPAREN RPAREN .)
    IMPORT          reduce using rule 22 (arguments -> LPAREN RPAREN .)
    LIT_STR         reduce using rule 22 (arguments -> LPAREN RPAREN .)
    CLASS           reduce using rule 22 (arguments -> LPAREN RPAREN .)


state 311

    (23) arguments -> LPAREN argumentList . RPAREN
    (19) argumentList -> argumentList . comma_assign
    (20) comma_assign -> . COMMA assignExpression comma_assign
    (21) comma_assign -> . empty
    (407) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 428
    COMMA           shift and go to state 219

  ! RPAREN          [ reduce using rule 407 (empty -> .) ]
  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    comma_assign                   shift and go to state 221
    empty                          shift and go to state 222

state 312

    (80) castQualifier -> CONST .
    (347) typeConstructor -> CONST .

    RPAREN          reduce using rule 80 (castQualifier -> CONST .)
    LBRACKET        reduce using rule 347 (typeConstructor -> CONST .)
    CONST           reduce using rule 347 (typeConstructor -> CONST .)
    IMMUTABLE       reduce using rule 347 (typeConstructor -> CONST .)
    BOOL            reduce using rule 347 (typeConstructor -> CONST .)
    SHORT           reduce using rule 347 (typeConstructor -> CONST .)
    USHORT          reduce using rule 347 (typeConstructor -> CONST .)
    INT             reduce using rule 347 (typeConstructor -> CONST .)
    UINT            reduce using rule 347 (typeConstructor -> CONST .)
    LONG            reduce using rule 347 (typeConstructor -> CONST .)
    ULONG           reduce using rule 347 (typeConstructor -> CONST .)
    CHAR            reduce using rule 347 (typeConstructor -> CONST .)
    FLOAT           reduce using rule 347 (typeConstructor -> CONST .)
    DOT             reduce using rule 347 (typeConstructor -> CONST .)
    TYPEOF          reduce using rule 347 (typeConstructor -> CONST .)
    IDENTIFIER      reduce using rule 347 (typeConstructor -> CONST .)


state 313

    (77) castExpression -> CAST LPAREN RPAREN . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 429
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 314

    (79) castExpression -> CAST LPAREN castQualifier . RPAREN unaryExpression

    RPAREN          shift and go to state 430


state 315

    (78) castExpression -> CAST LPAREN type . RPAREN unaryExpression

    RPAREN          shift and go to state 431


state 316

    (81) castQualifier -> IMMUTABLE .
    (348) typeConstructor -> IMMUTABLE .

    RPAREN          reduce using rule 81 (castQualifier -> IMMUTABLE .)
    LBRACKET        reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    CONST           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    BOOL            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    SHORT           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    USHORT          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    INT             reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    UINT            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    LONG            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    ULONG           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    CHAR            reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    FLOAT           reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    DOT             reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    TYPEOF          reduce using rule 348 (typeConstructor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 348 (typeConstructor -> IMMUTABLE .)


state 317

    (269) primaryExpression -> type DOT IDENTIFIER .

    DOT             reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    LBRACKET        reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    CARET           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    TIMES           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    DIV             reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    MODULO          reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    PLUS            reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    MINUS           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    TILDE           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    IS_EQ           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    PIPE            reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    QUESTION        reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    ASSIGN          reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    RBRACKET        reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    COMMA           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    LESS            reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER         reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_DIFF       reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_DIFF    reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    RPAREN          reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    $end            reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    COLON           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    RANGE           reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    TYPEDEF         reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    RBRACE          reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    DOUBLE_QUOTE    reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)
    LPAREN          reduce using rule 269 (primaryExpression -> type DOT IDENTIFIER .)


state 318

    (262) powExpression -> powExpression CARET unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    TIMES           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    DIV             reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    MODULO          reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    PLUS            reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    MINUS           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    TILDE           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    LEFT_SHIFT      reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    RIGHT_SHIFT     reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    IS_EQ           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    NOT_EQ          reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    AMPERSAND       reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    PIPE            reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    QUESTION        reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    DOUBLE_PIPE     reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    ASSIGN          reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_LEFT         reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_RIGHT        reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_PLUS         reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_MINUS        reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_TIMES        reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_MODULO       reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_AND_BIT      reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_DIV          reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_OR_BIT       reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    EQ_XOR_BIT      reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    COMMA           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    RPAREN          reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    LESS            reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    LESS_EQ         reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    GREATER         reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    GREATER_EQ      reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    IS_EQ_DIFF      reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    LESS_DIFF       reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    GREATER_DIFF    reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    $end            reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    RBRACKET        reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    SEMICOLON       reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    COLON           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    RANGE           reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    TYPEDEF         reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    IDENTIFIER      reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    RBRACE          reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    LPAREN          reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 262 (powExpression -> powExpression CARET unaryExpression .) ]


state 319

    (349) typeConstructors -> typeConstructor .
    (350) typeConstructors -> typeConstructor . typeConstructors
    (346) type2 -> typeConstructor . LBRACKET TYPEDEF RBRACKET
    (268) primaryExpression -> typeConstructor . LPAREN type RPAREN DOT IDENTIFIER
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    BOOL            reduce using rule 349 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 349 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 349 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 349 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 349 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 349 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 349 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 349 (typeConstructors -> typeConstructor .)
    LBRACKET        shift and go to state 96
    LPAREN          shift and go to state 97
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 95
    typeConstructors               shift and go to state 98

state 320

    (367) typeSuffix -> LBRACKET assignExpression . RBRACKET
    (368) typeSuffix -> LBRACKET assignExpression . RANGE assignExpression RBRACKET

    RBRACKET        shift and go to state 432
    RANGE           shift and go to state 433


state 321

    (334) symbol -> DOT . identifierOrTemplateChain
    (381) unaryExpression -> DOT .
    (267) primaryExpression -> DOT . identifierOrTemplateInstance
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    DOT             reduce using rule 381 (unaryExpression -> DOT .)
    PLUS_PLUS       reduce using rule 381 (unaryExpression -> DOT .)
    LBRACKET        reduce using rule 381 (unaryExpression -> DOT .)
    CARET           reduce using rule 381 (unaryExpression -> DOT .)
    TIMES           reduce using rule 381 (unaryExpression -> DOT .)
    DIV             reduce using rule 381 (unaryExpression -> DOT .)
    MODULO          reduce using rule 381 (unaryExpression -> DOT .)
    PLUS            reduce using rule 381 (unaryExpression -> DOT .)
    MINUS           reduce using rule 381 (unaryExpression -> DOT .)
    TILDE           reduce using rule 381 (unaryExpression -> DOT .)
    LEFT_SHIFT      reduce using rule 381 (unaryExpression -> DOT .)
    RIGHT_SHIFT     reduce using rule 381 (unaryExpression -> DOT .)
    IS_EQ           reduce using rule 381 (unaryExpression -> DOT .)
    NOT_EQ          reduce using rule 381 (unaryExpression -> DOT .)
    AMPERSAND       reduce using rule 381 (unaryExpression -> DOT .)
    PIPE            reduce using rule 381 (unaryExpression -> DOT .)
    DOUBLE_AMPERSAND reduce using rule 381 (unaryExpression -> DOT .)
    QUESTION        reduce using rule 381 (unaryExpression -> DOT .)
    DOUBLE_PIPE     reduce using rule 381 (unaryExpression -> DOT .)
    ASSIGN          reduce using rule 381 (unaryExpression -> DOT .)
    EQ_LEFT         reduce using rule 381 (unaryExpression -> DOT .)
    EQ_RIGHT        reduce using rule 381 (unaryExpression -> DOT .)
    EQ_PLUS         reduce using rule 381 (unaryExpression -> DOT .)
    EQ_MINUS        reduce using rule 381 (unaryExpression -> DOT .)
    EQ_TIMES        reduce using rule 381 (unaryExpression -> DOT .)
    EQ_MODULO       reduce using rule 381 (unaryExpression -> DOT .)
    EQ_AND_BIT      reduce using rule 381 (unaryExpression -> DOT .)
    EQ_DIV          reduce using rule 381 (unaryExpression -> DOT .)
    EQ_OR_BIT       reduce using rule 381 (unaryExpression -> DOT .)
    EQ_XOR_BIT      reduce using rule 381 (unaryExpression -> DOT .)
    RBRACKET        reduce using rule 381 (unaryExpression -> DOT .)
    RANGE           reduce using rule 381 (unaryExpression -> DOT .)
    LESS            reduce using rule 381 (unaryExpression -> DOT .)
    LESS_EQ         reduce using rule 381 (unaryExpression -> DOT .)
    GREATER         reduce using rule 381 (unaryExpression -> DOT .)
    GREATER_EQ      reduce using rule 381 (unaryExpression -> DOT .)
    IS_EQ_DIFF      reduce using rule 381 (unaryExpression -> DOT .)
    NOT_EQ_DIFF     reduce using rule 381 (unaryExpression -> DOT .)
    LESS_EQ_DIFF    reduce using rule 381 (unaryExpression -> DOT .)
    LESS_DIFF       reduce using rule 381 (unaryExpression -> DOT .)
    GREATER_EQ_DIFF reduce using rule 381 (unaryExpression -> DOT .)
    GREATER_DIFF    reduce using rule 381 (unaryExpression -> DOT .)
    COMMA           reduce using rule 381 (unaryExpression -> DOT .)
    IDENTIFIER      shift and go to state 90

    identifierOrTemplateInstance   shift and go to state 162
    identifierOrTemplateChain      shift and go to state 163

state 322

    (185) identifierOrTemplateChain -> identifierOrTemplateInstance .
    (392) unaryExpression -> identifierOrTemplateInstance .
    (266) primaryExpression -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TIMES resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DOT resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for CARET resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TIMES resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DIV resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for MODULO resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for PLUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for MINUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for TILDE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for PIPE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for QUESTION resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for COMMA resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RANGE resolved using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DOT             reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DELEGATE        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    FUNCTION        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 185 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    CARET           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DIV             reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS            reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)
    RANGE           reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! PLUS_PLUS       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LBRACKET        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! CARET           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! TIMES           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DIV             [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! MODULO          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! PLUS            [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! MINUS           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! TILDE           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LEFT_SHIFT      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RIGHT_SHIFT     [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! IS_EQ           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! NOT_EQ          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! AMPERSAND       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! PIPE            [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! QUESTION        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DOUBLE_PIPE     [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! ASSIGN          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_LEFT         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_RIGHT        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_PLUS         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_MINUS        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_TIMES        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_MODULO       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_AND_BIT      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_DIV          [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_OR_BIT       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! EQ_XOR_BIT      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RBRACKET        [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! RANGE           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS            [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS_EQ         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER         [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER_EQ      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! IS_EQ_DIFF      [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! LESS_DIFF       [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! GREATER_DIFF    [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! COMMA           [ reduce using rule 392 (unaryExpression -> identifierOrTemplateInstance .) ]
  ! DOT             [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]
  ! LBRACKET        [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]
  ! TIMES           [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]
  ! RBRACKET        [ reduce using rule 266 (primaryExpression -> identifierOrTemplateInstance .) ]


state 323

    (365) typeSuffix -> LBRACKET type . RBRACKET
    (269) primaryExpression -> type . DOT IDENTIFIER
    (270) primaryExpression -> type . arguments
    (168) functionCallExpression -> type . arguments
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN

    RBRACKET        shift and go to state 434
    DOT             shift and go to state 167
    LPAREN          shift and go to state 160

    arguments                      shift and go to state 166

state 324

    (343) type2 -> symbol .
    (167) functionCallExpression -> symbol . arguments unaryExpression arguments
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    TIMES           reduce using rule 343 (type2 -> symbol .)
    LBRACKET        reduce using rule 343 (type2 -> symbol .)
    DELEGATE        reduce using rule 343 (type2 -> symbol .)
    FUNCTION        reduce using rule 343 (type2 -> symbol .)
    SEMICOLON       reduce using rule 343 (type2 -> symbol .)
    RBRACKET        reduce using rule 343 (type2 -> symbol .)
    DOT             reduce using rule 343 (type2 -> symbol .)
    LPAREN          shift and go to state 160

  ! LPAREN          [ reduce using rule 343 (type2 -> symbol .) ]

    arguments                      shift and go to state 187

state 325

    (366) typeSuffix -> LBRACKET RBRACKET .

    TIMES           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    DELEGATE        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    DOT             reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    CARET           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    DIV             reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    MODULO          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    TILDE           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    $end            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    PIPE            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    QUESTION        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LESS            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    IS_EQ_DIFF      reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LESS_DIFF       reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    GREATER_DIFF    reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    COLON           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    RANGE           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    TYPEDEF         reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    FINAL           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    AUTO            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    CONST           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    IMMUTABLE       reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    BOOL            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    SHORT           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    USHORT          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    INT             reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    UINT            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    LONG            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    ULONG           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    CHAR            reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    FLOAT           reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    TYPEOF          reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)
    ELLIPSIS        reduce using rule 366 (typeSuffix -> LBRACKET RBRACKET .)


state 326

    (373) typeSuffix -> SEMICOLON typeofExpression . COLON TYPEOF LBRACKET expression RBRACKET
    (374) typeSuffix -> SEMICOLON typeofExpression . COLON TYPEOF LBRACKET RETURN RBRACKET

    COLON           shift and go to state 435


state 327

    (371) typeSuffix -> FUNCTION parameters . multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION parameters . multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (93) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (94) multiple_memberFunctionAttribute -> . empty
    (212) memberFunctionAttribute -> . IMMUTABLE
    (213) memberFunctionAttribute -> . CONST
    (214) memberFunctionAttribute -> . RETURN
    (407) empty -> .

    IMMUTABLE       shift and go to state 440
    CONST           shift and go to state 436
    RETURN          shift and go to state 439
    SEMICOLON       reduce using rule 407 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 437
    memberFunctionAttribute        shift and go to state 438
    empty                          shift and go to state 441

state 328

    (255) parameters -> LPAREN . parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (256) parameters -> LPAREN . parameter CommaParameterStar RPAREN
    (257) parameters -> LPAREN . ELLIPSIS RPAREN
    (258) parameters -> LPAREN . RPAREN
    (241) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
    (243) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type
    (245) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER
    (247) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (248) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type
    (239) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (240) parameterAttributeStar -> . empty
    (249) parameterAttribute -> . typeConstructor
    (250) parameterAttribute -> . FINAL
    (251) parameterAttribute -> . AUTO
    (252) parameterAttribute -> . RETURN
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    ELLIPSIS        shift and go to state 448
    RPAREN          shift and go to state 449
    FINAL           shift and go to state 442
    AUTO            shift and go to state 443
    RETURN          shift and go to state 447
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    parameterAttribute             shift and go to state 445
    parameterAttributeStar         shift and go to state 446
    typeConstructor                shift and go to state 444
    parameter                      shift and go to state 450
    empty                          shift and go to state 451

state 329

    (338) typeSuffixStar -> typeSuffix typeSuffixStar .

    DOT             reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LPAREN          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LBRACKET        reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PLUS_PLUS       reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    CARET           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TIMES           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DIV             reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MODULO          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PLUS            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MINUS           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TILDE           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    $end            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IS_EQ           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    NOT_EQ          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    AMPERSAND       reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PIPE            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    QUESTION        reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    ASSIGN          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_LEFT         reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_RIGHT        reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_PLUS         reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_MINUS        reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_TIMES        reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_MODULO       reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_DIV          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RBRACKET        reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    COMMA           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_EQ         reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER         reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_EQ      reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_DIFF       reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_DIFF    reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    SEMICOLON       reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RPAREN          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    COLON           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RANGE           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TYPEDEF         reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IDENTIFIER      reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RBRACE          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOUBLE_QUOTE    reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LBRACE          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    FINAL           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    AUTO            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RETURN          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    CONST           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IMMUTABLE       reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    BOOL            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    SHORT           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    USHORT          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    INT             reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    UINT            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LONG            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    ULONG           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    CHAR            reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    FLOAT           reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TYPEOF          reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    ELLIPSIS        reduce using rule 338 (typeSuffixStar -> typeSuffix typeSuffixStar .)


state 330

    (369) typeSuffix -> DELEGATE parameters . multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE parameters . multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (93) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (94) multiple_memberFunctionAttribute -> . empty
    (212) memberFunctionAttribute -> . IMMUTABLE
    (213) memberFunctionAttribute -> . CONST
    (214) memberFunctionAttribute -> . RETURN
    (407) empty -> .

    IMMUTABLE       shift and go to state 440
    CONST           shift and go to state 436
    RETURN          shift and go to state 439
    SEMICOLON       reduce using rule 407 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 452
    memberFunctionAttribute        shift and go to state 438
    empty                          shift and go to state 441

state 331

    (2) addExpression -> addExpression PLUS mulExpression .
    (218) mulExpression -> mulExpression . TIMES
    (219) mulExpression -> mulExpression . DIV
    (220) mulExpression -> mulExpression . MODULO

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    MINUS           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    TILDE           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LEFT_SHIFT      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RIGHT_SHIFT     reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    IS_EQ           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    NOT_EQ          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    AMPERSAND       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    CARET           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    PIPE            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    QUESTION        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    DOUBLE_PIPE     reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    ASSIGN          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_LEFT         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_RIGHT        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_PLUS         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_MINUS        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_TIMES        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_MODULO       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_AND_BIT      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_DIV          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_OR_BIT       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_XOR_BIT      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    SEMICOLON       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    COMMA           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS_EQ         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_EQ      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    IS_EQ_DIFF      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    NOT_EQ_DIFF     reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS_EQ_DIFF    reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS_DIFF       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_EQ_DIFF reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_DIFF    reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    DOT             reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    PLUS_PLUS       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LBRACKET        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    TYPEDEF         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    IDENTIFIER      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RBRACE          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    $end            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RBRACKET        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RPAREN          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    COLON           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RANGE           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    DOUBLE_QUOTE    reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LPAREN          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    TIMES           shift and go to state 186
    DIV             shift and go to state 184
    MODULO          shift and go to state 185

  ! TIMES           [ reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .) ]
  ! DIV             [ reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .) ]
  ! MODULO          [ reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .) ]


state 332

    (3) addExpression -> addExpression MINUS mulExpression .
    (218) mulExpression -> mulExpression . TIMES
    (219) mulExpression -> mulExpression . DIV
    (220) mulExpression -> mulExpression . MODULO

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    MINUS           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    TILDE           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LEFT_SHIFT      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RIGHT_SHIFT     reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    IS_EQ           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    NOT_EQ          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    AMPERSAND       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    CARET           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    PIPE            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    QUESTION        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    DOUBLE_PIPE     reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    ASSIGN          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_LEFT         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_RIGHT        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_PLUS         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_MINUS        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_TIMES        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_MODULO       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_AND_BIT      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_DIV          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_OR_BIT       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_XOR_BIT      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    SEMICOLON       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    COMMA           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS_EQ         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_EQ      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    IS_EQ_DIFF      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    NOT_EQ_DIFF     reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS_EQ_DIFF    reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS_DIFF       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_EQ_DIFF reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_DIFF    reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    DOT             reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    PLUS_PLUS       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LBRACKET        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    TYPEDEF         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    IDENTIFIER      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RBRACE          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    $end            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RBRACKET        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RPAREN          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    COLON           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RANGE           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    DOUBLE_QUOTE    reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LPAREN          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    TIMES           shift and go to state 186
    DIV             shift and go to state 184
    MODULO          shift and go to state 185

  ! TIMES           [ reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .) ]
  ! DIV             [ reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .) ]
  ! MODULO          [ reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .) ]


state 333

    (4) addExpression -> addExpression TILDE mulExpression .
    (218) mulExpression -> mulExpression . TIMES
    (219) mulExpression -> mulExpression . DIV
    (220) mulExpression -> mulExpression . MODULO

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    MINUS           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    TILDE           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LEFT_SHIFT      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RIGHT_SHIFT     reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    IS_EQ           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    NOT_EQ          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    AMPERSAND       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    CARET           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    PIPE            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    QUESTION        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    DOUBLE_PIPE     reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    ASSIGN          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_LEFT         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_RIGHT        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_PLUS         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_MINUS        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_TIMES        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_MODULO       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_AND_BIT      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_DIV          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_OR_BIT       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_XOR_BIT      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    SEMICOLON       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    COMMA           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS_EQ         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_EQ      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    IS_EQ_DIFF      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    NOT_EQ_DIFF     reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS_EQ_DIFF    reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS_DIFF       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_EQ_DIFF reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_DIFF    reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    DOT             reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    PLUS_PLUS       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LBRACKET        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    TYPEDEF         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    IDENTIFIER      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RBRACE          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    $end            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RBRACKET        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RPAREN          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    COLON           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RANGE           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    DOUBLE_QUOTE    reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LPAREN          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    TIMES           shift and go to state 186
    DIV             shift and go to state 184
    MODULO          shift and go to state 185

  ! TIMES           [ reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .) ]
  ! DIV             [ reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .) ]
  ! MODULO          [ reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .) ]


state 334

    (205) indexExpression -> unaryExpression LBRACKET index . comma_index RBRACKET
    (206) comma_index -> . COMMA index comma_index
    (207) comma_index -> . empty
    (407) empty -> .

    COMMA           shift and go to state 453
    RBRACKET        reduce using rule 407 (empty -> .)

    comma_index                    shift and go to state 454
    empty                          shift and go to state 455

state 335

    (202) index -> assignExpression .
    (203) index -> assignExpression . RANGE assignExpression

    COMMA           reduce using rule 202 (index -> assignExpression .)
    RBRACKET        reduce using rule 202 (index -> assignExpression .)
    RANGE           shift and go to state 456


state 336

    (204) indexExpression -> unaryExpression LBRACKET RBRACKET .

    DOT             reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    CARET           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TIMES           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DIV             reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MODULO          reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PLUS            reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MINUS           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TILDE           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PIPE            reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    QUESTION        reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    COLON           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    COMMA           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS            reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER         reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IS_EQ_DIFF      reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_DIFF       reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_DIFF    reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RPAREN          reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    $end            reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RANGE           reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TYPEDEF         reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RBRACE          reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LPAREN          reduce using rule 204 (indexExpression -> unaryExpression LBRACKET RBRACKET .)


state 337

    (390) unaryExpression -> unaryExpression DOT newExpression .

    DOT             reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    PLUS_PLUS       reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    LBRACKET        reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    CARET           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    TIMES           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    DIV             reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    MODULO          reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    PLUS            reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    MINUS           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    TILDE           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    LEFT_SHIFT      reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    RIGHT_SHIFT     reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    IS_EQ           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    NOT_EQ          reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    AMPERSAND       reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    PIPE            reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    DOUBLE_AMPERSAND reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    QUESTION        reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    DOUBLE_PIPE     reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    ASSIGN          reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_LEFT         reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_RIGHT        reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_PLUS         reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_MINUS        reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_TIMES        reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_MODULO       reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_AND_BIT      reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_DIV          reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_OR_BIT       reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_XOR_BIT      reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    SEMICOLON       reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    COMMA           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS            reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_EQ         reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER         reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_EQ      reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    IS_EQ_DIFF      reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    NOT_EQ_DIFF     reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_EQ_DIFF    reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_DIFF       reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_EQ_DIFF reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_DIFF    reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    RPAREN          reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    $end            reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    RBRACKET        reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    COLON           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    RANGE           reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    TYPEDEF         reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    IDENTIFIER      reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    RBRACE          reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    DOUBLE_QUOTE    reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)
    LPAREN          reduce using rule 390 (unaryExpression -> unaryExpression DOT newExpression .)


state 338

    (167) functionCallExpression -> symbol arguments unaryExpression . arguments
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN

    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180
    LPAREN          shift and go to state 160

    arguments                      shift and go to state 457

state 339

    (272) primaryExpression -> LPAREN expression RPAREN .

    DOT             reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    PLUS_PLUS       reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    CARET           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    LEFT_SHIFT      reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    PIPE            reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    QUESTION        reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_LEFT         reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_RIGHT        reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_TIMES        reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_MODULO       reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_AND_BIT      reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_DIV          reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_OR_BIT       reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    IS_EQ_DIFF      reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    NOT_EQ_DIFF     reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_EQ_DIFF    reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_DIFF       reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_EQ_DIFF reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_DIFF    reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    $end            reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    TYPEDEF         reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    DOUBLE_QUOTE    reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 272 (primaryExpression -> LPAREN expression RPAREN .)


state 340

    (406) xorExpression -> xorExpression CARET andExpression .
    (17) andExpression -> andExpression . AMPERSAND cmpExpression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    CARET           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    PIPE            reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    DOUBLE_AMPERSAND reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    QUESTION        reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    DOUBLE_PIPE     reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    ASSIGN          reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_LEFT         reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_RIGHT        reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_PLUS         reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_MINUS        reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_TIMES        reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_MODULO       reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_AND_BIT      reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_DIV          reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_OR_BIT       reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    EQ_XOR_BIT      reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    RBRACKET        reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    COMMA           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    RPAREN          reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    SEMICOLON       reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    DOT             reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    PLUS_PLUS       reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    LBRACKET        reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    TIMES           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    DIV             reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    MODULO          reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    PLUS            reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    MINUS           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    TILDE           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    $end            reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    LEFT_SHIFT      reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    RIGHT_SHIFT     reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    IS_EQ           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    NOT_EQ          reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    LESS            reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    LESS_EQ         reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    GREATER         reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_EQ      reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    IS_EQ_DIFF      reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    NOT_EQ_DIFF     reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    LESS_EQ_DIFF    reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    LESS_DIFF       reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_EQ_DIFF reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_DIFF    reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    COLON           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    RANGE           reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    TYPEDEF         reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    IDENTIFIER      reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    RBRACE          reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    DOUBLE_QUOTE    reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    LPAREN          reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .)
    AMPERSAND       shift and go to state 204

  ! AMPERSAND       [ reduce using rule 406 (xorExpression -> xorExpression CARET andExpression .) ]


state 341

    (288) relExpression -> relExpression relOperator shiftExpression .
    (302) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression
    (303) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression

  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
    LESS            reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_EQ         reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER         reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_EQ      reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    IS_EQ_DIFF      reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_DIFF       reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_DIFF    reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    AMPERSAND       reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    CARET           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    PIPE            reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    QUESTION        reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    DOUBLE_PIPE     reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    ASSIGN          reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_LEFT         reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_RIGHT        reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_PLUS         reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_MINUS        reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_TIMES        reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_MODULO       reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_AND_BIT      reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_DIV          reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_OR_BIT       reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_XOR_BIT      reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    COLON           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    RBRACKET        reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    COMMA           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    SEMICOLON       reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    TYPEDEF         reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    IDENTIFIER      reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    RBRACE          reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    RPAREN          reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    DOT             reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    PLUS_PLUS       reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    LBRACKET        reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    TIMES           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    DIV             reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    MODULO          reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    PLUS            reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    MINUS           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    TILDE           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    $end            reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    IS_EQ           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    NOT_EQ          reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    RANGE           reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    DOUBLE_QUOTE    reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    LPAREN          reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .)
    LEFT_SHIFT      shift and go to state 224
    RIGHT_SHIFT     shift and go to state 225

  ! LEFT_SHIFT      [ reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .) ]
  ! RIGHT_SHIFT     [ reduce using rule 288 (relExpression -> relExpression relOperator shiftExpression .) ]


state 342

    (15) andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .
    (236) orExpression -> orExpression . PIPE xorExpression

  ! shift/reduce conflict for PIPE resolved as shift
    DOUBLE_AMPERSAND reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    QUESTION        reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DOUBLE_PIPE     reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    ASSIGN          reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_LEFT         reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_RIGHT        reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_PLUS         reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_MINUS        reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_TIMES        reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_MODULO       reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_AND_BIT      reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_DIV          reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_OR_BIT       reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_XOR_BIT      reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    SEMICOLON       reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    COMMA           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DOT             reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PLUS_PLUS       reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LBRACKET        reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    CARET           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TIMES           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DIV             reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MODULO          reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PLUS            reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MINUS           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TILDE           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LEFT_SHIFT      reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RIGHT_SHIFT     reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IS_EQ           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    NOT_EQ          reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    AMPERSAND       reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS            reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_EQ         reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER         reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_EQ      reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IS_EQ_DIFF      reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    NOT_EQ_DIFF     reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_EQ_DIFF    reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_DIFF       reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_EQ_DIFF reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_DIFF    reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    $end            reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RBRACKET        reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RPAREN          reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    COLON           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RANGE           reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TYPEDEF         reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IDENTIFIER      reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RBRACE          reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DOUBLE_QUOTE    reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LPAREN          reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PIPE            shift and go to state 227

  ! PIPE            [ reduce using rule 15 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .) ]


state 343

    (17) andExpression -> andExpression AMPERSAND cmpExpression .

    AMPERSAND       reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    CARET           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PIPE            reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    QUESTION        reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOUBLE_PIPE     reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    ASSIGN          reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_LEFT         reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_RIGHT        reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_PLUS         reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_MINUS        reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_TIMES        reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_MODULO       reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_AND_BIT      reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_DIV          reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_OR_BIT       reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_XOR_BIT      reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RANGE           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    COMMA           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RBRACKET        reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    SEMICOLON       reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOT             reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PLUS_PLUS       reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LBRACKET        reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TIMES           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DIV             reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MODULO          reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PLUS            reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MINUS           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TILDE           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    $end            reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LEFT_SHIFT      reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RIGHT_SHIFT     reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IS_EQ           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    NOT_EQ          reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS            reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_EQ         reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER         reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_EQ      reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IS_EQ_DIFF      reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    NOT_EQ_DIFF     reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_EQ_DIFF    reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_DIFF       reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_EQ_DIFF reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_DIFF    reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RPAREN          reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    COLON           reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TYPEDEF         reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IDENTIFIER      reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RBRACE          reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOUBLE_QUOTE    reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LPAREN          reduce using rule 17 (andExpression -> andExpression AMPERSAND cmpExpression .)


state 344

    (336) ternaryExpression -> orOrExpression QUESTION expression . COLON ternaryExpression
    (146) expression -> expression . COMMA assignExpression

    COLON           shift and go to state 458
    COMMA           shift and go to state 250


state 345

    (238) orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .
    (15) andAndExpression -> andAndExpression . DOUBLE_AMPERSAND orExpression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
    QUESTION        reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOUBLE_PIPE     reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    ASSIGN          reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_LEFT         reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_RIGHT        reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_PLUS         reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_MINUS        reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_TIMES        reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_MODULO       reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_AND_BIT      reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_DIV          reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_OR_BIT       reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_XOR_BIT      reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    SEMICOLON       reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    COMMA           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RPAREN          reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RBRACKET        reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOUBLE_QUOTE    reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RANGE           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOT             reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PLUS_PLUS       reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LBRACKET        reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    CARET           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TIMES           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DIV             reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MODULO          reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PLUS            reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MINUS           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TILDE           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LEFT_SHIFT      reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RIGHT_SHIFT     reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IS_EQ           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    NOT_EQ          reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    AMPERSAND       reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PIPE            reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS            reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_EQ         reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER         reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_EQ      reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IS_EQ_DIFF      reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    NOT_EQ_DIFF     reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_EQ_DIFF    reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_DIFF       reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_EQ_DIFF reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_DIFF    reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TYPEDEF         reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IDENTIFIER      reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RBRACE          reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    $end            reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    COLON           reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LPAREN          reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 203

  ! DOUBLE_AMPERSAND [ reduce using rule 238 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .) ]


state 346

    (33) assignExpression -> ternaryExpression assignOperator expression .
    (146) expression -> expression . COMMA assignExpression

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    RPAREN          reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    RBRACKET        reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    RANGE           reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    COLON           reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    TYPEDEF         reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    IDENTIFIER      reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    RBRACE          reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    DOT             reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    PLUS_PLUS       reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    LBRACKET        reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    CARET           reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    TIMES           reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    DIV             reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    MODULO          reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    PLUS            reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    MINUS           reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    TILDE           reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    LEFT_SHIFT      reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    RIGHT_SHIFT     reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    IS_EQ           reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    NOT_EQ          reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    AMPERSAND       reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    PIPE            reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    DOUBLE_AMPERSAND reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    QUESTION        reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    DOUBLE_PIPE     reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    ASSIGN          reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_LEFT         reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_RIGHT        reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_PLUS         reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_MINUS        reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_TIMES        reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_MODULO       reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_AND_BIT      reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_DIV          reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_OR_BIT       reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_XOR_BIT      reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS            reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_EQ         reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER         reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_EQ      reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    IS_EQ_DIFF      reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    NOT_EQ_DIFF     reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_EQ_DIFF    reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_DIFF       reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_EQ_DIFF reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_DIFF    reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    $end            reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    DOUBLE_QUOTE    reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    LPAREN          reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .)
    COMMA           shift and go to state 250

  ! COMMA           [ reduce using rule 33 (assignExpression -> ternaryExpression assignOperator expression .) ]


state 347

    (20) comma_assign -> COMMA assignExpression . comma_assign
    (20) comma_assign -> . COMMA assignExpression comma_assign
    (21) comma_assign -> . empty
    (407) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 219
    RBRACKET        reduce using rule 407 (empty -> .)
    COLON           reduce using rule 407 (empty -> .)
    RPAREN          reduce using rule 407 (empty -> .)

  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    comma_assign                   shift and go to state 459
    empty                          shift and go to state 222

state 348

    (143) equalExpression -> shiftExpression IS_EQ shiftExpression .
    (302) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression
    (303) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression

  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
    AMPERSAND       reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    CARET           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PIPE            reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    QUESTION        reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOUBLE_PIPE     reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    ASSIGN          reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_LEFT         reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_RIGHT        reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_PLUS         reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_MINUS        reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_TIMES        reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_MODULO       reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_AND_BIT      reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_DIV          reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_OR_BIT       reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_XOR_BIT      reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RBRACKET        reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    COMMA           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RANGE           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    SEMICOLON       reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    COLON           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RPAREN          reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOT             reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PLUS_PLUS       reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LBRACKET        reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TIMES           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DIV             reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MODULO          reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PLUS            reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MINUS           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TILDE           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    $end            reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IS_EQ           reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    NOT_EQ          reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS            reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_EQ         reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER         reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_EQ      reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IS_EQ_DIFF      reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_DIFF       reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_DIFF    reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TYPEDEF         reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IDENTIFIER      reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RBRACE          reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOUBLE_QUOTE    reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LPAREN          reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LEFT_SHIFT      shift and go to state 224
    RIGHT_SHIFT     shift and go to state 225

  ! LEFT_SHIFT      [ reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .) ]
  ! RIGHT_SHIFT     [ reduce using rule 143 (equalExpression -> shiftExpression IS_EQ shiftExpression .) ]


state 349

    (302) shiftExpression -> shiftExpression LEFT_SHIFT addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
    LEFT_SHIFT      reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RIGHT_SHIFT     reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IS_EQ           reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    NOT_EQ          reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    AMPERSAND       reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    CARET           reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PIPE            reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOUBLE_AMPERSAND reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    QUESTION        reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOUBLE_PIPE     reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    ASSIGN          reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_LEFT         reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_RIGHT        reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_PLUS         reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_MINUS        reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_TIMES        reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_MODULO       reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_AND_BIT      reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_DIV          reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_OR_BIT       reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_XOR_BIT      reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    SEMICOLON       reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    COMMA           reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS            reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_EQ         reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER         reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_EQ      reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IS_EQ_DIFF      reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    NOT_EQ_DIFF     reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_EQ_DIFF    reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_DIFF       reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_EQ_DIFF reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_DIFF    reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RPAREN          reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RBRACKET        reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RANGE           reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOT             reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PLUS_PLUS       reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LBRACKET        reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    TIMES           reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DIV             reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    MODULO          reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    $end            reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    COLON           reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    TYPEDEF         reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IDENTIFIER      reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RBRACE          reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOUBLE_QUOTE    reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LPAREN          reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PLUS            shift and go to state 177
    MINUS           shift and go to state 178
    TILDE           shift and go to state 179

  ! PLUS            [ reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]
  ! MINUS           [ reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]
  ! TILDE           [ reduce using rule 302 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]


state 350

    (303) shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
    LEFT_SHIFT      reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RIGHT_SHIFT     reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IS_EQ           reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    NOT_EQ          reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    AMPERSAND       reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    CARET           reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PIPE            reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOUBLE_AMPERSAND reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    QUESTION        reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOUBLE_PIPE     reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    ASSIGN          reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_LEFT         reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_RIGHT        reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_PLUS         reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_MINUS        reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_TIMES        reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_MODULO       reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_AND_BIT      reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_DIV          reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_OR_BIT       reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_XOR_BIT      reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    SEMICOLON       reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    COMMA           reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS            reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_EQ         reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER         reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_EQ      reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IS_EQ_DIFF      reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    NOT_EQ_DIFF     reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_EQ_DIFF    reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_DIFF       reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_EQ_DIFF reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_DIFF    reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RPAREN          reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RBRACKET        reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RANGE           reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOT             reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PLUS_PLUS       reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LBRACKET        reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    TIMES           reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DIV             reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    MODULO          reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    $end            reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    COLON           reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    TYPEDEF         reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IDENTIFIER      reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RBRACE          reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOUBLE_QUOTE    reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LPAREN          reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PLUS            shift and go to state 177
    MINUS           shift and go to state 178
    TILDE           shift and go to state 179

  ! PLUS            [ reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]
  ! MINUS           [ reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]
  ! TILDE           [ reduce using rule 303 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]


state 351

    (144) equalExpression -> shiftExpression NOT_EQ shiftExpression .
    (302) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression
    (303) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression

  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
    AMPERSAND       reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    CARET           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PIPE            reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    QUESTION        reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOUBLE_PIPE     reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    ASSIGN          reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_LEFT         reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_RIGHT        reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_PLUS         reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_MINUS        reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_TIMES        reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_MODULO       reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_AND_BIT      reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_DIV          reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_OR_BIT       reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_XOR_BIT      reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RBRACKET        reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    COMMA           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RANGE           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    SEMICOLON       reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    COLON           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RPAREN          reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOT             reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PLUS_PLUS       reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LBRACKET        reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TIMES           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DIV             reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MODULO          reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PLUS            reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MINUS           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TILDE           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    $end            reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IS_EQ           reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    NOT_EQ          reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS            reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_EQ         reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER         reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_EQ      reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IS_EQ_DIFF      reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_DIFF       reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_DIFF    reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TYPEDEF         reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IDENTIFIER      reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RBRACE          reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOUBLE_QUOTE    reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LPAREN          reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LEFT_SHIFT      shift and go to state 224
    RIGHT_SHIFT     shift and go to state 225

  ! LEFT_SHIFT      [ reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .) ]
  ! RIGHT_SHIFT     [ reduce using rule 144 (equalExpression -> shiftExpression NOT_EQ shiftExpression .) ]


state 352

    (236) orExpression -> orExpression PIPE xorExpression .
    (406) xorExpression -> xorExpression . CARET andExpression

  ! shift/reduce conflict for CARET resolved as shift
    PIPE            reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    DOUBLE_AMPERSAND reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    QUESTION        reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    DOUBLE_PIPE     reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    ASSIGN          reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_LEFT         reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_RIGHT        reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_PLUS         reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_MINUS        reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_TIMES        reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_MODULO       reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_AND_BIT      reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_DIV          reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_OR_BIT       reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    EQ_XOR_BIT      reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    SEMICOLON       reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    COMMA           reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    DOT             reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    PLUS_PLUS       reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    LBRACKET        reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    TIMES           reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    DIV             reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    MODULO          reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    PLUS            reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    MINUS           reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    TILDE           reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    LEFT_SHIFT      reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    RIGHT_SHIFT     reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    IS_EQ           reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    NOT_EQ          reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    AMPERSAND       reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    LESS            reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    LESS_EQ         reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    GREATER         reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_EQ      reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    IS_EQ_DIFF      reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    NOT_EQ_DIFF     reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    LESS_EQ_DIFF    reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    LESS_DIFF       reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_EQ_DIFF reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_DIFF    reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    COLON           reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    RPAREN          reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    $end            reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    RBRACKET        reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    RANGE           reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    TYPEDEF         reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    IDENTIFIER      reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    RBRACE          reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    DOUBLE_QUOTE    reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    LPAREN          reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .)
    CARET           shift and go to state 191

  ! CARET           [ reduce using rule 236 (orExpression -> orExpression PIPE xorExpression .) ]


state 353

    (389) unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT . identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 90

    identifierOrTemplateInstance   shift and go to state 460

state 354

    (265) importExpression -> IMPORT LBRACKET assignExpression RBRACKET .

    DOT             reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TIMES           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    $end            reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TYPEDEF         reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RBRACE          reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 265 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)


state 355

    (363) typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .

    DOT             reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    TIMES           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LBRACKET        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DELEGATE        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    FUNCTION        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    SEMICOLON       reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LPAREN          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    COMMA           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LBRACE          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    IDENTIFIER      reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RPAREN          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    FINAL           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    AUTO            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RETURN          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    CONST           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    IMMUTABLE       reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    BOOL            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    SHORT           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    USHORT          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    INT             reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    UINT            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LONG            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    ULONG           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    CHAR            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    FLOAT           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    TYPEOF          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    COLON           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RBRACKET        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    PLUS_PLUS       reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    CARET           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DIV             reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    MODULO          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    PLUS            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    MINUS           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    TILDE           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    $end            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LEFT_SHIFT      reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RIGHT_SHIFT     reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    IS_EQ           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    NOT_EQ          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    AMPERSAND       reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    PIPE            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    QUESTION        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_PIPE     reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    ASSIGN          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_LEFT         reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_RIGHT        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_PLUS         reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_MINUS        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_TIMES        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_MODULO       reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_AND_BIT      reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_DIV          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_OR_BIT       reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_XOR_BIT      reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS            reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_EQ         reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER         reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_EQ      reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    IS_EQ_DIFF      reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_DIFF       reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_DIFF    reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RANGE           reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    TYPEDEF         reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RBRACE          reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    ELLIPSIS        reduce using rule 363 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)


state 356

    (362) typeofExpression -> TYPEOF LBRACKET expression RBRACKET .

    DOT             reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DELEGATE        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    FINAL           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    AUTO            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    CONST           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    IMMUTABLE       reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    SHORT           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    USHORT          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    INT             reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    UINT            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LONG            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    ULONG           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    TYPEOF          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    COLON           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    PLUS_PLUS       reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    CARET           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DIV             reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    $end            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LEFT_SHIFT      reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    IS_EQ           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    AMPERSAND       reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    PIPE            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_LEFT         reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_RIGHT        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_AND_BIT      reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_OR_BIT       reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS            reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS_DIFF       reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER_DIFF    reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    TYPEDEF         reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    ELLIPSIS        reduce using rule 362 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)


state 357

    (346) type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .

    TIMES           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LBRACKET        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    DELEGATE        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    FUNCTION        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    SEMICOLON       reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    DOT             reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LPAREN          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    PLUS_PLUS       reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    CARET           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    DIV             reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    MODULO          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    PLUS            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    MINUS           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    TILDE           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    $end            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LEFT_SHIFT      reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    RIGHT_SHIFT     reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    IS_EQ           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    NOT_EQ          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    AMPERSAND       reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    PIPE            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    QUESTION        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_PIPE     reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    ASSIGN          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_LEFT         reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_RIGHT        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_PLUS         reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_MINUS        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_TIMES        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_MODULO       reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_AND_BIT      reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_DIV          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_OR_BIT       reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    EQ_XOR_BIT      reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    RBRACKET        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    COMMA           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LESS            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LESS_EQ         reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    GREATER         reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    GREATER_EQ      reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    IS_EQ_DIFF      reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LESS_DIFF       reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    GREATER_DIFF    reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    RPAREN          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    COLON           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    RANGE           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    TYPEDEF         reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    IDENTIFIER      reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    RBRACE          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LBRACE          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    FINAL           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    AUTO            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    RETURN          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    CONST           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    IMMUTABLE       reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    BOOL            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    SHORT           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    USHORT          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    INT             reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    UINT            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    LONG            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    ULONG           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    CHAR            reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    FLOAT           reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    TYPEOF          reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)
    ELLIPSIS        reduce using rule 346 (type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET .)


state 358

    (268) primaryExpression -> typeConstructor LPAREN type RPAREN . DOT IDENTIFIER

    DOT             shift and go to state 461


state 359

    (404) withStatement -> WITH LBRACKET expression . RBRACKET statementNoCaseNoDefault
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 462
    COMMA           shift and go to state 250


state 360

    (180) gotoStatement -> GOTO CASE expression . SEMICOLON
    (146) expression -> expression . COMMA assignExpression

    SEMICOLON       shift and go to state 463
    COMMA           shift and go to state 250


state 361

    (179) gotoStatement -> GOTO CASE SEMICOLON .

    RBRACE          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    PRIVATE         reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    PROTECTED       reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    PUBLIC          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    STATIC          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    EXTERN          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    FINAL           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    AUTO            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    CONST           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    IMMUTABLE       reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    CASE            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    DEFAULT         reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    IDENTIFIER      reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    LBRACE          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    IF              reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    WHILE           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    DO              reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    FOR             reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    FOREACH         reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    FOREACH_REVERSE reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    SWITCH          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    CONTINUE        reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    BREAK           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    RETURN          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    GOTO            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    WITH            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    AMPERSAND       reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    EXCLAMATION     reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    TIMES           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    PLUS            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    MINUS           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    DOT             reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    PLUS_PLUS       reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    ELLIPSIS        reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    LBRACKET        reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    RANGE           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    LPAREN          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    DOLLAR          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    THIS            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    NULL            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    TRUE            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    FALSE           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    INUMBER         reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    DNUMBER         reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    LIT_CHAR        reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    NEW             reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    DELETE          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    CAST            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    FUNCTION        reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    MIXIN           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    IMPORT          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    LIT_STR         reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    BOOL            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    SHORT           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    USHORT          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    INT             reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    UINT            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    LONG            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    ULONG           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    CHAR            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    FLOAT           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    TYPEOF          reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    ALIAS           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    ENUM            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    CLASS           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    TILDE           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    TYPEDEF         reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    UNION           reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    SEMICOLON       reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)
    ELSE            reduce using rule 179 (gotoStatement -> GOTO CASE SEMICOLON .)


state 362

    (178) gotoStatement -> GOTO DEFAULT SEMICOLON .

    RBRACE          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PRIVATE         reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PROTECTED       reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PUBLIC          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    STATIC          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXTERN          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FINAL           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    AUTO            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONST           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMMUTABLE       reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CASE            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DEFAULT         reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IDENTIFIER      reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACE          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IF              reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    WHILE           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DO              reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOR             reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH         reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH_REVERSE reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    SWITCH          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONTINUE        reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    BREAK           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    RETURN          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    GOTO            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    WITH            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    AMPERSAND       reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXCLAMATION     reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TIMES           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PLUS            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    MINUS           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOT             reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PLUS_PLUS       reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ELLIPSIS        reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACKET        reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    RANGE           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LPAREN          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOLLAR          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    THIS            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    NULL            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TRUE            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FALSE           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    INUMBER         reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DNUMBER         reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_CHAR        reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    NEW             reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DELETE          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CAST            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FUNCTION        reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    MIXIN           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMPORT          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_STR         reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    BOOL            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    SHORT           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    USHORT          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    INT             reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UINT            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LONG            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ULONG           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CHAR            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FLOAT           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TYPEOF          reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ALIAS           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ENUM            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CLASS           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TILDE           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TYPEDEF         reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UNION           reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    SEMICOLON       reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ELSE            reduce using rule 178 (gotoStatement -> GOTO DEFAULT SEMICOLON .)


state 363

    (177) gotoStatement -> GOTO IDENTIFIER SEMICOLON .

    RBRACE          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ELLIPSIS        reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RANGE           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 177 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)


state 364

    (157) foreachStatement -> FOREACH LPAREN foreachType . SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (164) foreachTypeList -> foreachType .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 464
    COMMA           reduce using rule 164 (foreachTypeList -> foreachType .)

  ! SEMICOLON       [ reduce using rule 164 (foreachTypeList -> foreachType .) ]


state 365

    (156) foreachStatement -> FOREACH LPAREN foreachTypeList . SEMICOLON expression RPAREN declarationOrStatement
    (165) foreachTypeList -> foreachTypeList . COMMA foreachType

    SEMICOLON       shift and go to state 465
    COMMA           shift and go to state 466


state 366

    (160) foreachType -> IDENTIFIER .
    (187) identifierOrTemplateInstance -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 160 (foreachType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 160 (foreachType -> IDENTIFIER .)
    COMMA           reduce using rule 160 (foreachType -> IDENTIFIER .)
    DOT             reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TIMES           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LBRACKET        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DELEGATE        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    FUNCTION        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]


state 367

    (161) foreachType -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 467


state 368

    (162) foreachType -> typeConstructors . IDENTIFIER
    (163) foreachType -> typeConstructors . type IDENTIFIER
    (340) type -> typeConstructors . type2 typeSuffixStar
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 469
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

    typeConstructor                shift and go to state 471
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 10
    type                           shift and go to state 470
    type2                          shift and go to state 468

state 369

    (299) returnStatement -> RETURN expression SEMICOLON .

    PRIVATE         reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    PROTECTED       reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    PUBLIC          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    STATIC          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    EXTERN          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    FINAL           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    IMMUTABLE       reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    FOREACH         reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    WITH            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    AMPERSAND       reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    EXCLAMATION     reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    DOT             reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    ELLIPSIS        reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    LBRACKET        reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    RANGE           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    DOLLAR          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    NULL            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    DNUMBER         reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    LIT_CHAR        reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    CAST            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    MIXIN           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    IMPORT          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    LIT_STR         reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    USHORT          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    UINT            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    ULONG           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    TYPEOF          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    ALIAS           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    TILDE           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    UNION           reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 299 (returnStatement -> RETURN expression SEMICOLON .)


state 370

    (159) foreachStatement -> FOREACH_REVERSE LPAREN foreachType . SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (164) foreachTypeList -> foreachType .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 472
    COMMA           reduce using rule 164 (foreachTypeList -> foreachType .)

  ! SEMICOLON       [ reduce using rule 164 (foreachTypeList -> foreachType .) ]


state 371

    (158) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList . SEMICOLON expression RPAREN declarationOrStatement
    (165) foreachTypeList -> foreachTypeList . COMMA foreachType

    SEMICOLON       shift and go to state 473
    COMMA           shift and go to state 466


state 372

    (149) forStatement -> FOR LPAREN statementNoCaseNoDefault . SEMICOLON RPAREN declarationOrStatement
    (151) forStatement -> FOR LPAREN statementNoCaseNoDefault . SEMICOLON expression RPAREN declarationOrStatement
    (153) forStatement -> FOR LPAREN statementNoCaseNoDefault . expression SEMICOLON RPAREN declarationOrStatement
    (155) forStatement -> FOR LPAREN statementNoCaseNoDefault . expression SEMICOLON expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 475
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 474
    addExpression                  shift and go to state 80

state 373

    (148) forStatement -> FOR LPAREN declaration . SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> FOR LPAREN declaration . SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> FOR LPAREN declaration . expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> FOR LPAREN declaration . expression SEMICOLON expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 477
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 476

state 374

    (96) continueStatement -> CONTINUE IDENTIFIER SEMICOLON .

    RBRACE          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DO              reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ELLIPSIS        reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    RANGE           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    INT             reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 96 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)


state 375

    (146) expression -> expression COMMA assignExpression .

    SEMICOLON       reduce using rule 146 (expression -> expression COMMA assignExpression .)
    COMMA           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    RANGE           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    RPAREN          reduce using rule 146 (expression -> expression COMMA assignExpression .)
    RBRACKET        reduce using rule 146 (expression -> expression COMMA assignExpression .)
    COLON           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    DOT             reduce using rule 146 (expression -> expression COMMA assignExpression .)
    PLUS_PLUS       reduce using rule 146 (expression -> expression COMMA assignExpression .)
    LBRACKET        reduce using rule 146 (expression -> expression COMMA assignExpression .)
    CARET           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    TIMES           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    DIV             reduce using rule 146 (expression -> expression COMMA assignExpression .)
    MODULO          reduce using rule 146 (expression -> expression COMMA assignExpression .)
    PLUS            reduce using rule 146 (expression -> expression COMMA assignExpression .)
    MINUS           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    TILDE           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    $end            reduce using rule 146 (expression -> expression COMMA assignExpression .)
    LEFT_SHIFT      reduce using rule 146 (expression -> expression COMMA assignExpression .)
    RIGHT_SHIFT     reduce using rule 146 (expression -> expression COMMA assignExpression .)
    IS_EQ           reduce using rule 146 (expression -> expression COMMA assignExpression .)
    NOT_EQ          reduce using rule 146 (expression -> expression COMMA assignExpression .)
    AMPERSAND       reduce using rule 146 (expression -> expression COMMA assignExpression .)
    PIPE            reduce using rule 146 (expression -> expression COMMA assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 146 (expression -> expression COMMA assignExpression .)
    QUESTION        reduce using rule 146 (expression -> expression COMMA assignExpression .)
    DOUBLE_PIPE     reduce using rule 146 (expression -> expression COMMA assignExpression .)
    ASSIGN          reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_LEFT         reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_RIGHT        reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_PLUS         reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_MINUS        reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_TIMES        reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_MODULO       reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_AND_BIT      reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_DIV          reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_OR_BIT       reduce using rule 146 (expression -> expression COMMA assignExpression .)
    EQ_XOR_BIT      reduce using rule 146 (expression -> expression COMMA assignExpression .)
    LESS            reduce using rule 146 (expression -> expression COMMA assignExpression .)
    LESS_EQ         reduce using rule 146 (expression -> expression COMMA assignExpression .)
    GREATER         reduce using rule 146 (expression -> expression COMMA assignExpression .)
    GREATER_EQ      reduce using rule 146 (expression -> expression COMMA assignExpression .)
    IS_EQ_DIFF      reduce using rule 146 (expression -> expression COMMA assignExpression .)
    NOT_EQ_DIFF     reduce using rule 146 (expression -> expression COMMA assignExpression .)
    LESS_EQ_DIFF    reduce using rule 146 (expression -> expression COMMA assignExpression .)
    LESS_DIFF       reduce using rule 146 (expression -> expression COMMA assignExpression .)
    GREATER_EQ_DIFF reduce using rule 146 (expression -> expression COMMA assignExpression .)
    GREATER_DIFF    reduce using rule 146 (expression -> expression COMMA assignExpression .)
    TYPEDEF         reduce using rule 146 (expression -> expression COMMA assignExpression .)
    IDENTIFIER      reduce using rule 146 (expression -> expression COMMA assignExpression .)
    RBRACE          reduce using rule 146 (expression -> expression COMMA assignExpression .)
    DOUBLE_QUOTE    reduce using rule 146 (expression -> expression COMMA assignExpression .)
    LPAREN          reduce using rule 146 (expression -> expression COMMA assignExpression .)


state 376

    (54) attributeDeclaration -> attribute COLON .

    PRIVATE         reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    PROTECTED       reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    PUBLIC          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    STATIC          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    EXTERN          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    FINAL           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    AUTO            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    CONST           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    IMMUTABLE       reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    CASE            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    DEFAULT         reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    IDENTIFIER      reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    LBRACE          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    IF              reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    WHILE           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    DO              reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    FOR             reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    FOREACH         reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    FOREACH_REVERSE reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    SWITCH          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    CONTINUE        reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    BREAK           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    RETURN          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    GOTO            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    WITH            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    AMPERSAND       reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    EXCLAMATION     reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    TIMES           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    PLUS            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    MINUS           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    DOT             reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    PLUS_PLUS       reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    ELLIPSIS        reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    LBRACKET        reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    RANGE           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    LPAREN          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    DOLLAR          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    THIS            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    NULL            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    TRUE            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    FALSE           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    INUMBER         reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    DNUMBER         reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    LIT_CHAR        reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    NEW             reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    DELETE          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    CAST            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    FUNCTION        reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    MIXIN           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    IMPORT          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    LIT_STR         reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    BOOL            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    SHORT           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    USHORT          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    INT             reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    UINT            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    LONG            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    ULONG           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    CHAR            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    FLOAT           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    TYPEOF          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    ALIAS           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    ENUM            reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    CLASS           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    TILDE           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    TYPEDEF         reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    UNION           reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    RBRACE          reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    SEMICOLON       reduce using rule 54 (attributeDeclaration -> attribute COLON .)
    ELSE            reduce using rule 54 (attributeDeclaration -> attribute COLON .)


state 377

    (124) destructor -> TILDE THIS . LPAREN RPAREN multiple_memberFunctionAttribute functionBody
    (125) destructor -> TILDE THIS . LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON

    LPAREN          shift and go to state 478


state 378

    (199) importDeclaration -> IMPORT importBindings . SEMICOLON

    SEMICOLON       shift and go to state 479


state 379

    (305) singleImport -> identifierChain .
    (182) identifierChain -> identifierChain . DOT IDENTIFIER

    COLON           reduce using rule 305 (singleImport -> identifierChain .)
    COMMA           reduce using rule 305 (singleImport -> identifierChain .)
    SEMICOLON       reduce using rule 305 (singleImport -> identifierChain .)
    DOT             shift and go to state 480


state 380

    (197) importDeclaration -> IMPORT singleImport . comma_singleImport COMMA importBindings SEMICOLON
    (198) importDeclaration -> IMPORT singleImport . comma_singleImport SEMICOLON
    (195) importBindings -> singleImport . COLON importBind
    (196) importBindings -> singleImport . COLON importBind COLON importBind
    (200) comma_singleImport -> . COMMA singleImport comma_singleImport
    (201) comma_singleImport -> . empty
    (407) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COLON           shift and go to state 481
    COMMA           shift and go to state 482
    SEMICOLON       reduce using rule 407 (empty -> .)

  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    comma_singleImport             shift and go to state 483
    empty                          shift and go to state 484

state 381

    (304) singleImport -> IDENTIFIER . ASSIGN identifierChain
    (181) identifierChain -> IDENTIFIER .

    ASSIGN          shift and go to state 485
    DOT             reduce using rule 181 (identifierChain -> IDENTIFIER .)
    COMMA           reduce using rule 181 (identifierChain -> IDENTIFIER .)
    SEMICOLON       reduce using rule 181 (identifierChain -> IDENTIFIER .)
    COLON           reduce using rule 181 (identifierChain -> IDENTIFIER .)


state 382

    (82) classDeclaration -> CLASS IDENTIFIER . SEMICOLON
    (83) classDeclaration -> CLASS IDENTIFIER . COLON baseClassList structBody
    (84) classDeclaration -> CLASS IDENTIFIER . structBody
    (332) structBody -> . LBRACE declarationStar RBRACE

    SEMICOLON       shift and go to state 486
    COLON           shift and go to state 487
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 488

state 383

    (171) functionDeclaration -> TYPEDEF IDENTIFIER . parameters multiple_memberFunctionAttribute SEMICOLON
    (172) functionDeclaration -> TYPEDEF IDENTIFIER . parameters multiple_memberFunctionAttribute functionBody
    (255) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (256) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (257) parameters -> . LPAREN ELLIPSIS RPAREN
    (258) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 328

    parameters                     shift and go to state 489

state 384

    (134) anonymousEnumDeclaration -> ENUM LBRACE . anonymousEnumMember multipleanonymousEnumMember RBRACE
    (131) anonymousEnumMember -> . TYPEDEF IDENTIFIER ASSIGN assignExpression
    (132) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (133) anonymousEnumMember -> . IDENTIFIER

    TYPEDEF         shift and go to state 490
    IDENTIFIER      shift and go to state 491

    anonymousEnumMember            shift and go to state 492

state 385

    (135) anonymousEnumDeclaration -> ENUM COLON . type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 10
    type                           shift and go to state 493
    type2                          shift and go to state 53

state 386

    (138) enumDeclaration -> ENUM IDENTIFIER . SEMICOLON
    (139) enumDeclaration -> ENUM IDENTIFIER . COLON TYPEDEF SEMICOLON
    (140) enumDeclaration -> ENUM IDENTIFIER . COLON TYPEDEF enumBody

    SEMICOLON       shift and go to state 494
    COLON           shift and go to state 495


state 387

    (397) unionDeclaration -> UNION structBody .

    PRIVATE         reduce using rule 397 (unionDeclaration -> UNION structBody .)
    PROTECTED       reduce using rule 397 (unionDeclaration -> UNION structBody .)
    PUBLIC          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    STATIC          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    EXTERN          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    FINAL           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    AUTO            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    CONST           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    IMMUTABLE       reduce using rule 397 (unionDeclaration -> UNION structBody .)
    CASE            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    DEFAULT         reduce using rule 397 (unionDeclaration -> UNION structBody .)
    IDENTIFIER      reduce using rule 397 (unionDeclaration -> UNION structBody .)
    LBRACE          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    IF              reduce using rule 397 (unionDeclaration -> UNION structBody .)
    WHILE           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    DO              reduce using rule 397 (unionDeclaration -> UNION structBody .)
    FOR             reduce using rule 397 (unionDeclaration -> UNION structBody .)
    FOREACH         reduce using rule 397 (unionDeclaration -> UNION structBody .)
    FOREACH_REVERSE reduce using rule 397 (unionDeclaration -> UNION structBody .)
    SWITCH          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    CONTINUE        reduce using rule 397 (unionDeclaration -> UNION structBody .)
    BREAK           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    RETURN          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    GOTO            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    WITH            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    AMPERSAND       reduce using rule 397 (unionDeclaration -> UNION structBody .)
    EXCLAMATION     reduce using rule 397 (unionDeclaration -> UNION structBody .)
    TIMES           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    PLUS            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    MINUS           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    DOT             reduce using rule 397 (unionDeclaration -> UNION structBody .)
    PLUS_PLUS       reduce using rule 397 (unionDeclaration -> UNION structBody .)
    ELLIPSIS        reduce using rule 397 (unionDeclaration -> UNION structBody .)
    LBRACKET        reduce using rule 397 (unionDeclaration -> UNION structBody .)
    RANGE           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    LPAREN          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    DOLLAR          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    THIS            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    NULL            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    TRUE            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    FALSE           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    INUMBER         reduce using rule 397 (unionDeclaration -> UNION structBody .)
    DNUMBER         reduce using rule 397 (unionDeclaration -> UNION structBody .)
    LIT_CHAR        reduce using rule 397 (unionDeclaration -> UNION structBody .)
    NEW             reduce using rule 397 (unionDeclaration -> UNION structBody .)
    DELETE          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    CAST            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    FUNCTION        reduce using rule 397 (unionDeclaration -> UNION structBody .)
    MIXIN           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    IMPORT          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    LIT_STR         reduce using rule 397 (unionDeclaration -> UNION structBody .)
    BOOL            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    SHORT           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    USHORT          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    INT             reduce using rule 397 (unionDeclaration -> UNION structBody .)
    UINT            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    LONG            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    ULONG           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    CHAR            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    FLOAT           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    TYPEOF          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    ALIAS           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    ENUM            reduce using rule 397 (unionDeclaration -> UNION structBody .)
    CLASS           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    TILDE           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    TYPEDEF         reduce using rule 397 (unionDeclaration -> UNION structBody .)
    UNION           reduce using rule 397 (unionDeclaration -> UNION structBody .)
    RBRACE          reduce using rule 397 (unionDeclaration -> UNION structBody .)
    SEMICOLON       reduce using rule 397 (unionDeclaration -> UNION structBody .)
    ELSE            reduce using rule 397 (unionDeclaration -> UNION structBody .)


state 388

    (395) unionDeclaration -> UNION IDENTIFIER . structBody
    (396) unionDeclaration -> UNION IDENTIFIER . SEMICOLON
    (332) structBody -> . LBRACE declarationStar RBRACE

    SEMICOLON       shift and go to state 496
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 497

state 389

    (400) variableDeclaration -> multiplestorageClass TYPEDEF . declarator CommaDeclarator SEMICOLON
    (401) variableDeclaration -> multiplestorageClass TYPEDEF . IDENTIFIER ASSIGN functionBody SEMICOLON
    (120) declarator -> . IDENTIFIER
    (121) declarator -> . IDENTIFIER ASSIGN initializer

    IDENTIFIER      shift and go to state 498

    declarator                     shift and go to state 499

state 390

    (5) aliasDeclaration -> ALIAS aliasInitializer . comma_aliasInitializer SEMICOLON
    (7) comma_aliasInitializer -> . COMMA aliasInitializer comma_aliasInitializer
    (8) comma_aliasInitializer -> . empty
    (407) empty -> .

    COMMA           shift and go to state 501
    SEMICOLON       reduce using rule 407 (empty -> .)

    comma_aliasInitializer         shift and go to state 500
    empty                          shift and go to state 502

state 391

    (6) aliasDeclaration -> ALIAS multiplestorageClass . type identifierList SEMICOLON
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    type2                          shift and go to state 53
    type                           shift and go to state 503
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 10

state 392

    (326) storageClass -> ENUM .

    AUTO            reduce using rule 326 (storageClass -> ENUM .)
    ENUM            reduce using rule 326 (storageClass -> ENUM .)
    EXTERN          reduce using rule 326 (storageClass -> ENUM .)
    FINAL           reduce using rule 326 (storageClass -> ENUM .)
    STATIC          reduce using rule 326 (storageClass -> ENUM .)
    CONST           reduce using rule 326 (storageClass -> ENUM .)
    IMMUTABLE       reduce using rule 326 (storageClass -> ENUM .)
    BOOL            reduce using rule 326 (storageClass -> ENUM .)
    SHORT           reduce using rule 326 (storageClass -> ENUM .)
    USHORT          reduce using rule 326 (storageClass -> ENUM .)
    INT             reduce using rule 326 (storageClass -> ENUM .)
    UINT            reduce using rule 326 (storageClass -> ENUM .)
    LONG            reduce using rule 326 (storageClass -> ENUM .)
    ULONG           reduce using rule 326 (storageClass -> ENUM .)
    CHAR            reduce using rule 326 (storageClass -> ENUM .)
    FLOAT           reduce using rule 326 (storageClass -> ENUM .)
    DOT             reduce using rule 326 (storageClass -> ENUM .)
    TYPEOF          reduce using rule 326 (storageClass -> ENUM .)
    IDENTIFIER      reduce using rule 326 (storageClass -> ENUM .)
    TYPEDEF         reduce using rule 326 (storageClass -> ENUM .)


state 393

    (328) storageClass -> FINAL .

    AUTO            reduce using rule 328 (storageClass -> FINAL .)
    ENUM            reduce using rule 328 (storageClass -> FINAL .)
    EXTERN          reduce using rule 328 (storageClass -> FINAL .)
    FINAL           reduce using rule 328 (storageClass -> FINAL .)
    STATIC          reduce using rule 328 (storageClass -> FINAL .)
    CONST           reduce using rule 328 (storageClass -> FINAL .)
    IMMUTABLE       reduce using rule 328 (storageClass -> FINAL .)
    BOOL            reduce using rule 328 (storageClass -> FINAL .)
    SHORT           reduce using rule 328 (storageClass -> FINAL .)
    USHORT          reduce using rule 328 (storageClass -> FINAL .)
    INT             reduce using rule 328 (storageClass -> FINAL .)
    UINT            reduce using rule 328 (storageClass -> FINAL .)
    LONG            reduce using rule 328 (storageClass -> FINAL .)
    ULONG           reduce using rule 328 (storageClass -> FINAL .)
    CHAR            reduce using rule 328 (storageClass -> FINAL .)
    FLOAT           reduce using rule 328 (storageClass -> FINAL .)
    DOT             reduce using rule 328 (storageClass -> FINAL .)
    TYPEOF          reduce using rule 328 (storageClass -> FINAL .)
    IDENTIFIER      reduce using rule 328 (storageClass -> FINAL .)
    TYPEDEF         reduce using rule 328 (storageClass -> FINAL .)


state 394

    (325) storageClass -> AUTO .

    AUTO            reduce using rule 325 (storageClass -> AUTO .)
    ENUM            reduce using rule 325 (storageClass -> AUTO .)
    EXTERN          reduce using rule 325 (storageClass -> AUTO .)
    FINAL           reduce using rule 325 (storageClass -> AUTO .)
    STATIC          reduce using rule 325 (storageClass -> AUTO .)
    CONST           reduce using rule 325 (storageClass -> AUTO .)
    IMMUTABLE       reduce using rule 325 (storageClass -> AUTO .)
    BOOL            reduce using rule 325 (storageClass -> AUTO .)
    SHORT           reduce using rule 325 (storageClass -> AUTO .)
    USHORT          reduce using rule 325 (storageClass -> AUTO .)
    INT             reduce using rule 325 (storageClass -> AUTO .)
    UINT            reduce using rule 325 (storageClass -> AUTO .)
    LONG            reduce using rule 325 (storageClass -> AUTO .)
    ULONG           reduce using rule 325 (storageClass -> AUTO .)
    CHAR            reduce using rule 325 (storageClass -> AUTO .)
    FLOAT           reduce using rule 325 (storageClass -> AUTO .)
    DOT             reduce using rule 325 (storageClass -> AUTO .)
    TYPEOF          reduce using rule 325 (storageClass -> AUTO .)
    IDENTIFIER      reduce using rule 325 (storageClass -> AUTO .)
    TYPEDEF         reduce using rule 325 (storageClass -> AUTO .)


state 395

    (9) multiplestorageClass -> storageClass . multiplestorageClass
    (9) multiplestorageClass -> . storageClass multiplestorageClass
    (10) multiplestorageClass -> . empty
    (324) storageClass -> . typeConstructor
    (325) storageClass -> . AUTO
    (326) storageClass -> . ENUM
    (327) storageClass -> . EXTERN
    (328) storageClass -> . FINAL
    (329) storageClass -> . STATIC
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    AUTO            shift and go to state 394
    ENUM            shift and go to state 392
    EXTERN          shift and go to state 396
    FINAL           shift and go to state 393
    STATIC          shift and go to state 397
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    multiplestorageClass           shift and go to state 504
    typeConstructor                shift and go to state 259
    storageClass                   shift and go to state 395
    empty                          shift and go to state 267

state 396

    (327) storageClass -> EXTERN .

    AUTO            reduce using rule 327 (storageClass -> EXTERN .)
    ENUM            reduce using rule 327 (storageClass -> EXTERN .)
    EXTERN          reduce using rule 327 (storageClass -> EXTERN .)
    FINAL           reduce using rule 327 (storageClass -> EXTERN .)
    STATIC          reduce using rule 327 (storageClass -> EXTERN .)
    CONST           reduce using rule 327 (storageClass -> EXTERN .)
    IMMUTABLE       reduce using rule 327 (storageClass -> EXTERN .)
    BOOL            reduce using rule 327 (storageClass -> EXTERN .)
    SHORT           reduce using rule 327 (storageClass -> EXTERN .)
    USHORT          reduce using rule 327 (storageClass -> EXTERN .)
    INT             reduce using rule 327 (storageClass -> EXTERN .)
    UINT            reduce using rule 327 (storageClass -> EXTERN .)
    LONG            reduce using rule 327 (storageClass -> EXTERN .)
    ULONG           reduce using rule 327 (storageClass -> EXTERN .)
    CHAR            reduce using rule 327 (storageClass -> EXTERN .)
    FLOAT           reduce using rule 327 (storageClass -> EXTERN .)
    DOT             reduce using rule 327 (storageClass -> EXTERN .)
    TYPEOF          reduce using rule 327 (storageClass -> EXTERN .)
    IDENTIFIER      reduce using rule 327 (storageClass -> EXTERN .)
    TYPEDEF         reduce using rule 327 (storageClass -> EXTERN .)


state 397

    (329) storageClass -> STATIC .

    AUTO            reduce using rule 329 (storageClass -> STATIC .)
    ENUM            reduce using rule 329 (storageClass -> STATIC .)
    EXTERN          reduce using rule 329 (storageClass -> STATIC .)
    FINAL           reduce using rule 329 (storageClass -> STATIC .)
    STATIC          reduce using rule 329 (storageClass -> STATIC .)
    CONST           reduce using rule 329 (storageClass -> STATIC .)
    IMMUTABLE       reduce using rule 329 (storageClass -> STATIC .)
    BOOL            reduce using rule 329 (storageClass -> STATIC .)
    SHORT           reduce using rule 329 (storageClass -> STATIC .)
    USHORT          reduce using rule 329 (storageClass -> STATIC .)
    INT             reduce using rule 329 (storageClass -> STATIC .)
    UINT            reduce using rule 329 (storageClass -> STATIC .)
    LONG            reduce using rule 329 (storageClass -> STATIC .)
    ULONG           reduce using rule 329 (storageClass -> STATIC .)
    CHAR            reduce using rule 329 (storageClass -> STATIC .)
    FLOAT           reduce using rule 329 (storageClass -> STATIC .)
    DOT             reduce using rule 329 (storageClass -> STATIC .)
    TYPEOF          reduce using rule 329 (storageClass -> STATIC .)
    IDENTIFIER      reduce using rule 329 (storageClass -> STATIC .)
    TYPEDEF         reduce using rule 329 (storageClass -> STATIC .)


state 398

    (13) aliasThisDeclaration -> ALIAS IDENTIFIER . THIS SEMICOLON
    (11) aliasInitializer -> IDENTIFIER . ASSIGN multiplestorageClass type
    (12) aliasInitializer -> IDENTIFIER . ASSIGN functionLiteralExpression SEMICOLON

    THIS            shift and go to state 505
    ASSIGN          shift and go to state 506


state 399

    (215) mixinDeclaration -> mixinExpression SEMICOLON .

    PRIVATE         reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    PROTECTED       reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    PUBLIC          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    STATIC          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    EXTERN          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FINAL           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    AUTO            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CONST           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IMMUTABLE       reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CASE            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DEFAULT         reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IDENTIFIER      reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LBRACE          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IF              reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    WHILE           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DO              reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FOR             reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FOREACH         reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    SWITCH          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CONTINUE        reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    BREAK           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    RETURN          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    GOTO            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    WITH            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    AMPERSAND       reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    EXCLAMATION     reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TIMES           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    PLUS            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    MINUS           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DOT             reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    PLUS_PLUS       reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ELLIPSIS        reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LBRACKET        reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    RANGE           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LPAREN          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DOLLAR          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    THIS            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    NULL            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TRUE            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FALSE           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    INUMBER         reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DNUMBER         reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LIT_CHAR        reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    NEW             reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DELETE          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CAST            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FUNCTION        reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    MIXIN           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IMPORT          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LIT_STR         reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    BOOL            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    SHORT           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    USHORT          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    INT             reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UINT            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LONG            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ULONG           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CHAR            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FLOAT           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TYPEOF          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ALIAS           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ENUM            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CLASS           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TILDE           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TYPEDEF         reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UNION           reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    RBRACE          reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    SEMICOLON       reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ELSE            reduce using rule 215 (mixinDeclaration -> mixinExpression SEMICOLON .)


state 400

    (89) constructor -> THIS parameters . multiple_memberFunctionAttribute functionBody
    (90) constructor -> THIS parameters . multiple_memberFunctionAttribute SEMICOLON
    (91) constructor -> THIS parameters . multiple_memberFunctionAttribute constraint functionBody
    (92) constructor -> THIS parameters . multiple_memberFunctionAttribute constraint SEMICOLON
    (93) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (94) multiple_memberFunctionAttribute -> . empty
    (212) memberFunctionAttribute -> . IMMUTABLE
    (213) memberFunctionAttribute -> . CONST
    (214) memberFunctionAttribute -> . RETURN
    (407) empty -> .

    IMMUTABLE       shift and go to state 440
    CONST           shift and go to state 436
    RETURN          shift and go to state 439
    SEMICOLON       reduce using rule 407 (empty -> .)
    IF              reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 507
    memberFunctionAttribute        shift and go to state 438
    empty                          shift and go to state 441

state 401

    (169) functionDeclaration -> storageClass multiplestorageClass . IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (170) functionDeclaration -> storageClass multiplestorageClass . IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (9) multiplestorageClass -> storageClass multiplestorageClass .
    (55) autoDeclaration -> storageClass multiplestorageClass . IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON

    IDENTIFIER      shift and go to state 508
    TYPEDEF         reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)


state 402

    (126) doStatement -> DO statementNoCaseNoDefault WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 509


state 403

    (122) defaultStatement -> DEFAULT COLON declarationsAndStatements .

    RBRACE          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PRIVATE         reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PROTECTED       reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PUBLIC          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    STATIC          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    EXTERN          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FINAL           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    AUTO            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CONST           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IMMUTABLE       reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CASE            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DEFAULT         reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IDENTIFIER      reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LBRACE          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IF              reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    WHILE           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DO              reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FOR             reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FOREACH         reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FOREACH_REVERSE reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    SWITCH          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CONTINUE        reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    BREAK           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    RETURN          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    GOTO            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    WITH            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    AMPERSAND       reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    EXCLAMATION     reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TIMES           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PLUS            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    MINUS           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DOT             reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PLUS_PLUS       reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ELLIPSIS        reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LBRACKET        reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    RANGE           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LPAREN          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DOLLAR          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    THIS            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    NULL            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TRUE            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FALSE           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    INUMBER         reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DNUMBER         reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LIT_CHAR        reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    NEW             reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DELETE          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CAST            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FUNCTION        reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    MIXIN           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IMPORT          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LIT_STR         reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    BOOL            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    SHORT           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    USHORT          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    INT             reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UINT            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LONG            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ULONG           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CHAR            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FLOAT           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TYPEOF          reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ALIAS           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ENUM            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CLASS           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TILDE           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TYPEDEF         reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UNION           reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    SEMICOLON       reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ELSE            reduce using rule 122 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)


state 404

    (403) whileStatement -> WHILE LBRACKET expression . RBRACKET declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 510
    COMMA           shift and go to state 250


state 405

    (75) caseRangeStatement -> CASE assignExpression COLON . ELLIPSIS CASE assignExpression COLON declarationsAndStatements

    ELLIPSIS        shift and go to state 511


state 406

    (76) caseStatement -> CASE argumentList COLON . declarationsAndStatements
    (116) declarationsAndStatements -> . declarationOrStatement
    (117) declarationsAndStatements -> . declarationOrStatement declarationsAndStatements
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    declarationsAndStatements      shift and go to state 512
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 113
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 407

    (333) switchStatement -> SWITCH LBRACKET expression . RBRACKET statement
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 513
    COMMA           shift and go to state 250


state 408

    (211) labeledStatement -> IDENTIFIER COLON declarationOrStatement .

    RBRACE          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    PRIVATE         reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    PROTECTED       reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    PUBLIC          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    STATIC          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    EXTERN          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    FINAL           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    AUTO            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    CONST           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    IMMUTABLE       reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    CASE            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    DEFAULT         reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    IDENTIFIER      reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    LBRACE          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    IF              reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    WHILE           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    DO              reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    FOR             reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    FOREACH         reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    SWITCH          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    CONTINUE        reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    BREAK           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    RETURN          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    GOTO            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    WITH            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    AMPERSAND       reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    EXCLAMATION     reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    TIMES           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    PLUS            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    MINUS           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    DOT             reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    PLUS_PLUS       reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    ELLIPSIS        reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    LBRACKET        reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    RANGE           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    LPAREN          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    DOLLAR          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    THIS            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    NULL            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    TRUE            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    FALSE           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    INUMBER         reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    DNUMBER         reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    LIT_CHAR        reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    NEW             reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    DELETE          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    CAST            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    FUNCTION        reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    MIXIN           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    IMPORT          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    LIT_STR         reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    BOOL            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    SHORT           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    USHORT          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    INT             reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    UINT            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    LONG            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    ULONG           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    CHAR            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    FLOAT           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    TYPEOF          reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    ALIAS           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    ENUM            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    CLASS           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    TILDE           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    TYPEDEF         reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    UNION           reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    SEMICOLON       reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)
    ELSE            reduce using rule 211 (labeledStatement -> IDENTIFIER COLON declarationOrStatement .)


state 409

    (62) breakStatement -> BREAK IDENTIFIER SEMICOLON .

    RBRACE          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IF              reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DO              reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ELLIPSIS        reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    RANGE           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    INT             reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 62 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)


state 410

    (98) declaration -> attribute multipleattributes LBRACE . multiple_declaration RBRACE
    (99) multiple_declaration -> . declaration multiple_declaration
    (100) multiple_declaration -> . empty
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (407) empty -> .
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 407 (empty -> .)
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    THIS            reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IMPORT          reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    MIXIN           reduce using rule 407 (empty -> .)
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 294
    IMMUTABLE       shift and go to state 297

  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    multipleattributes             shift and go to state 130
    attribute                      shift and go to state 145
    declaration                    shift and go to state 514
    multiple_declaration           shift and go to state 515
    empty                          shift and go to state 516

state 411

    (101) multipleattributes -> attribute multipleattributes .

    LBRACE          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    ALIAS           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    ENUM            reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    CLASS           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    THIS            reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    TILDE           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    TYPEDEF         reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    IMPORT          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    UNION           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    PRIVATE         reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    PROTECTED       reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    PUBLIC          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    STATIC          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    EXTERN          reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    FINAL           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    AUTO            reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    CONST           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    IMMUTABLE       reduce using rule 101 (multipleattributes -> attribute multipleattributes .)
    MIXIN           reduce using rule 101 (multipleattributes -> attribute multipleattributes .)


state 412

    (190) ifCondition -> AUTO . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 517


state 413

    (188) ifStatement -> IF LPAREN ifCondition . RPAREN declarationOrStatement
    (189) ifStatement -> IF LPAREN ifCondition . RPAREN declarationOrStatement ELSE declarationOrStatement

    RPAREN          shift and go to state 518


state 414

    (192) ifCondition -> expression .
    (146) expression -> expression . COMMA assignExpression

    RPAREN          reduce using rule 192 (ifCondition -> expression .)
    COMMA           shift and go to state 250


state 415

    (191) ifCondition -> TYPEDEF . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 519


state 416

    (216) mixinExpression -> MIXIN LPAREN assignExpression RPAREN .

    DOT             reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LBRACKET        reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    CARET           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TIMES           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DIV             reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MODULO          reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PLUS            reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MINUS           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TILDE           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IS_EQ           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    NOT_EQ          reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    AMPERSAND       reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PIPE            reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    QUESTION        reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    ASSIGN          reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_LEFT         reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_PLUS         reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_MINUS        reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_TIMES        reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_MODULO       reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_DIV          reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TYPEDEF         reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IDENTIFIER      reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RBRACE          reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS            reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_EQ         reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER         reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_EQ      reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IS_EQ_DIFF      reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    NOT_EQ_DIFF     reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_EQ_DIFF    reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_DIFF       reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_EQ_DIFF reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_DIFF    reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RBRACKET        reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    COMMA           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RPAREN          reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    SEMICOLON       reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    $end            reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    COLON           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RANGE           reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DOUBLE_QUOTE    reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LPAREN          reduce using rule 216 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)


state 417

    (226) newAnonClassExpression -> NEW arguments CLASS arguments . structBody
    (228) newAnonClassExpression -> NEW arguments CLASS arguments . baseClassList structBody
    (332) structBody -> . LBRACE declarationStar RBRACE
    (64) baseClassList -> . baseClass
    (65) baseClassList -> . baseClassList COMMA baseClass
    (63) baseClass -> . type2
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    LBRACE          shift and go to state 308
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 92
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    baseClassList                  shift and go to state 520
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    structBody                     shift and go to state 521
    baseClass                      shift and go to state 307
    typeofExpression               shift and go to state 2
    type2                          shift and go to state 304

state 418

    (227) newAnonClassExpression -> NEW arguments CLASS baseClassList . structBody
    (65) baseClassList -> baseClassList . COMMA baseClass
    (332) structBody -> . LBRACE declarationStar RBRACE

    COMMA           shift and go to state 423
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 522

state 419

    (225) newAnonClassExpression -> NEW arguments CLASS structBody .

    DOT             reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    PLUS_PLUS       reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    LBRACKET        reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    CARET           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    TIMES           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    DIV             reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    MODULO          reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    PLUS            reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    MINUS           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    TILDE           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    LEFT_SHIFT      reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    RIGHT_SHIFT     reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    IS_EQ           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    NOT_EQ          reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    AMPERSAND       reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    PIPE            reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    DOUBLE_AMPERSAND reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    QUESTION        reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    DOUBLE_PIPE     reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    ASSIGN          reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_LEFT         reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_RIGHT        reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_PLUS         reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_MINUS        reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_TIMES        reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_MODULO       reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_AND_BIT      reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_DIV          reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_OR_BIT       reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    EQ_XOR_BIT      reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    COLON           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    COMMA           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    RBRACKET        reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    LESS            reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    LESS_EQ         reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    GREATER         reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    GREATER_EQ      reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    IS_EQ_DIFF      reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    NOT_EQ_DIFF     reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    LESS_EQ_DIFF    reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    LESS_DIFF       reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    GREATER_EQ_DIFF reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    GREATER_DIFF    reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    RPAREN          reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    $end            reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    SEMICOLON       reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    RANGE           reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    TYPEDEF         reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    IDENTIFIER      reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    RBRACE          reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    DOUBLE_QUOTE    reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)
    LPAREN          reduce using rule 225 (newAnonClassExpression -> NEW arguments CLASS structBody .)


state 420

    (230) newExpression -> NEW type LBRACKET assignExpression . RBRACKET

    RBRACKET        shift and go to state 523


state 421

    (221) newAnonClassExpression -> NEW CLASS arguments baseClassList . structBody
    (65) baseClassList -> baseClassList . COMMA baseClass
    (332) structBody -> . LBRACE declarationStar RBRACE

    COMMA           shift and go to state 423
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 524

state 422

    (222) newAnonClassExpression -> NEW CLASS arguments structBody .

    DOT             reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    PLUS_PLUS       reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    LBRACKET        reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    CARET           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    TIMES           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    DIV             reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    MODULO          reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    PLUS            reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    MINUS           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    TILDE           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    LEFT_SHIFT      reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    RIGHT_SHIFT     reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    IS_EQ           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    NOT_EQ          reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    AMPERSAND       reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    PIPE            reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    DOUBLE_AMPERSAND reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    QUESTION        reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    DOUBLE_PIPE     reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    ASSIGN          reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_LEFT         reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_RIGHT        reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_PLUS         reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_MINUS        reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_TIMES        reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_MODULO       reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_AND_BIT      reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_DIV          reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_OR_BIT       reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    EQ_XOR_BIT      reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    COLON           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    COMMA           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    RBRACKET        reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    LESS            reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    LESS_EQ         reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    GREATER         reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    GREATER_EQ      reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    IS_EQ_DIFF      reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    NOT_EQ_DIFF     reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    LESS_EQ_DIFF    reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    LESS_DIFF       reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    GREATER_EQ_DIFF reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    GREATER_DIFF    reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    RPAREN          reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    $end            reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    SEMICOLON       reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    RANGE           reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    TYPEDEF         reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    IDENTIFIER      reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    RBRACE          reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    DOUBLE_QUOTE    reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)
    LPAREN          reduce using rule 222 (newAnonClassExpression -> NEW CLASS arguments structBody .)


state 423

    (65) baseClassList -> baseClassList COMMA . baseClass
    (63) baseClass -> . type2
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 90

    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructor                shift and go to state 92
    baseClass                      shift and go to state 525
    type2                          shift and go to state 304

state 424

    (223) newAnonClassExpression -> NEW CLASS baseClassList structBody .

    DOT             reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    PLUS_PLUS       reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    LBRACKET        reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    CARET           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    TIMES           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    DIV             reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    MODULO          reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    PLUS            reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    MINUS           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    TILDE           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    LEFT_SHIFT      reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    RIGHT_SHIFT     reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    IS_EQ           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    NOT_EQ          reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    AMPERSAND       reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    PIPE            reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    DOUBLE_AMPERSAND reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    QUESTION        reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    DOUBLE_PIPE     reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    ASSIGN          reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_LEFT         reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_RIGHT        reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_PLUS         reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_MINUS        reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_TIMES        reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_MODULO       reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_AND_BIT      reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_DIV          reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_OR_BIT       reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    EQ_XOR_BIT      reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    COLON           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    COMMA           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    RBRACKET        reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    LESS            reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    LESS_EQ         reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    GREATER         reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    GREATER_EQ      reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    IS_EQ_DIFF      reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    NOT_EQ_DIFF     reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    LESS_EQ_DIFF    reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    LESS_DIFF       reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    GREATER_EQ_DIFF reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    GREATER_DIFF    reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    RPAREN          reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    $end            reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    SEMICOLON       reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    RANGE           reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    TYPEDEF         reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    IDENTIFIER      reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    RBRACE          reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    DOUBLE_QUOTE    reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)
    LPAREN          reduce using rule 223 (newAnonClassExpression -> NEW CLASS baseClassList structBody .)


state 425

    (330) declarationStar -> declaration . declarationStar
    (330) declarationStar -> . declaration declarationStar
    (331) declarationStar -> . empty
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (407) empty -> .
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 407 (empty -> .)
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    THIS            reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IMPORT          reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    MIXIN           reduce using rule 407 (empty -> .)
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 294
    IMMUTABLE       shift and go to state 297

  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    multipleattributes             shift and go to state 130
    attribute                      shift and go to state 145
    declaration                    shift and go to state 425
    declarationStar                shift and go to state 526
    empty                          shift and go to state 427

state 426

    (332) structBody -> LBRACE declarationStar . RBRACE

    RBRACE          shift and go to state 527


state 427

    (331) declarationStar -> empty .
    (102) multipleattributes -> empty .

    RBRACE          reduce using rule 331 (declarationStar -> empty .)
    ALIAS           reduce using rule 102 (multipleattributes -> empty .)
    ENUM            reduce using rule 102 (multipleattributes -> empty .)
    CLASS           reduce using rule 102 (multipleattributes -> empty .)
    THIS            reduce using rule 102 (multipleattributes -> empty .)
    TILDE           reduce using rule 102 (multipleattributes -> empty .)
    TYPEDEF         reduce using rule 102 (multipleattributes -> empty .)
    IMPORT          reduce using rule 102 (multipleattributes -> empty .)
    UNION           reduce using rule 102 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 102 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 102 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 102 (multipleattributes -> empty .)
    STATIC          reduce using rule 102 (multipleattributes -> empty .)
    EXTERN          reduce using rule 102 (multipleattributes -> empty .)
    FINAL           reduce using rule 102 (multipleattributes -> empty .)
    AUTO            reduce using rule 102 (multipleattributes -> empty .)
    CONST           reduce using rule 102 (multipleattributes -> empty .)
    IMMUTABLE       reduce using rule 102 (multipleattributes -> empty .)
    MIXIN           reduce using rule 102 (multipleattributes -> empty .)


state 428

    (23) arguments -> LPAREN argumentList RPAREN .

    LBRACE          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    BOOL            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    SHORT           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    USHORT          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    INT             reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    UINT            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LONG            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    ULONG           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    CHAR            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    FLOAT           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DOT             reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    TYPEOF          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    CONST           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    IMMUTABLE       reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    IDENTIFIER      reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    PLUS_PLUS       reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LBRACKET        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    CARET           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    TIMES           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DIV             reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    MODULO          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    PLUS            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    MINUS           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    TILDE           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    $end            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LEFT_SHIFT      reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    RIGHT_SHIFT     reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    IS_EQ           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    NOT_EQ          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    AMPERSAND       reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    PIPE            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    QUESTION        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DOUBLE_PIPE     reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    ASSIGN          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_LEFT         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_RIGHT        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_PLUS         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_MINUS        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_TIMES        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_MODULO       reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_AND_BIT      reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_DIV          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_OR_BIT       reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EQ_XOR_BIT      reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    RBRACKET        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    COMMA           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LESS            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LESS_EQ         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    GREATER         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    GREATER_EQ      reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    IS_EQ_DIFF      reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    NOT_EQ_DIFF     reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LESS_EQ_DIFF    reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LESS_DIFF       reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    GREATER_EQ_DIFF reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    GREATER_DIFF    reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    SEMICOLON       reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    RPAREN          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    COLON           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    RANGE           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    TYPEDEF         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    RBRACE          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DOUBLE_QUOTE    reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LPAREN          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    EXCLAMATION     reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    ELLIPSIS        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DOLLAR          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    THIS            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    NULL            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    TRUE            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    FALSE           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    INUMBER         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DNUMBER         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LIT_CHAR        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    NEW             reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    DELETE          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    CAST            reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    FUNCTION        reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    MIXIN           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    IMPORT          reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    LIT_STR         reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)
    CLASS           reduce using rule 23 (arguments -> LPAREN argumentList RPAREN .)


state 429

    (77) castExpression -> CAST LPAREN RPAREN unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TIMES           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DIV             reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    MODULO          reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    PLUS            reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    MINUS           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TILDE           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IS_EQ           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    PIPE            reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    QUESTION        reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    ASSIGN          reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RANGE           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    COMMA           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RBRACKET        reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS            reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER         reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RPAREN          reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TYPEDEF         reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IDENTIFIER      reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RBRACE          reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    SEMICOLON       reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    $end            reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    COLON           reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LPAREN          reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 77 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]


state 430

    (79) castExpression -> CAST LPAREN castQualifier RPAREN . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 528
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 431

    (78) castExpression -> CAST LPAREN type RPAREN . unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    type2                          shift and go to state 53
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    identifierOrTemplateInstance   shift and go to state 37
    LIT_STRPlus                    shift and go to state 45
    typeConstructors               shift and go to state 10
    unaryExpression                shift and go to state 529
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    typeConstructor                shift and go to state 15

state 432

    (367) typeSuffix -> LBRACKET assignExpression RBRACKET .

    TIMES           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DELEGATE        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    FUNCTION        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DOT             reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    $end            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    TYPEDEF         reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RBRACE          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LBRACE          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    FINAL           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    AUTO            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RETURN          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    CONST           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IMMUTABLE       reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    BOOL            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    SHORT           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    USHORT          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    INT             reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    UINT            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LONG            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    ULONG           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    CHAR            reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    FLOAT           reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    TYPEOF          reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 367 (typeSuffix -> LBRACKET assignExpression RBRACKET .)


state 433

    (368) typeSuffix -> LBRACKET assignExpression RANGE . assignExpression RBRACKET
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 530
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 434

    (365) typeSuffix -> LBRACKET type RBRACKET .

    TIMES           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LBRACKET        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    DELEGATE        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    FUNCTION        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    SEMICOLON       reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    DOT             reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LPAREN          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    PLUS_PLUS       reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    CARET           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    DIV             reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    MODULO          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    PLUS            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    MINUS           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    TILDE           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    $end            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LEFT_SHIFT      reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    RIGHT_SHIFT     reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    IS_EQ           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    NOT_EQ          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    AMPERSAND       reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    PIPE            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    QUESTION        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    DOUBLE_PIPE     reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    ASSIGN          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_LEFT         reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_RIGHT        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_PLUS         reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_MINUS        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_TIMES        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_MODULO       reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_AND_BIT      reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_DIV          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_OR_BIT       reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    EQ_XOR_BIT      reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    COMMA           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LESS            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LESS_EQ         reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    GREATER         reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    GREATER_EQ      reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    IS_EQ_DIFF      reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LESS_DIFF       reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    GREATER_DIFF    reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    COLON           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    RANGE           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    TYPEDEF         reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    IDENTIFIER      reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    RBRACE          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LBRACE          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    FINAL           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    AUTO            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    RETURN          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    CONST           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    IMMUTABLE       reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    BOOL            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    SHORT           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    USHORT          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    INT             reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    UINT            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    LONG            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    ULONG           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    CHAR            reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    FLOAT           reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    TYPEOF          reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)
    ELLIPSIS        reduce using rule 365 (typeSuffix -> LBRACKET type RBRACKET .)


state 435

    (373) typeSuffix -> SEMICOLON typeofExpression COLON . TYPEOF LBRACKET expression RBRACKET
    (374) typeSuffix -> SEMICOLON typeofExpression COLON . TYPEOF LBRACKET RETURN RBRACKET

    TYPEOF          shift and go to state 531


state 436

    (213) memberFunctionAttribute -> CONST .

    IMMUTABLE       reduce using rule 213 (memberFunctionAttribute -> CONST .)
    CONST           reduce using rule 213 (memberFunctionAttribute -> CONST .)
    RETURN          reduce using rule 213 (memberFunctionAttribute -> CONST .)
    SEMICOLON       reduce using rule 213 (memberFunctionAttribute -> CONST .)
    LBRACE          reduce using rule 213 (memberFunctionAttribute -> CONST .)
    IF              reduce using rule 213 (memberFunctionAttribute -> CONST .)


state 437

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute . SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute . SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET

    SEMICOLON       shift and go to state 532


state 438

    (93) multiple_memberFunctionAttribute -> memberFunctionAttribute . multiple_memberFunctionAttribute
    (93) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (94) multiple_memberFunctionAttribute -> . empty
    (212) memberFunctionAttribute -> . IMMUTABLE
    (213) memberFunctionAttribute -> . CONST
    (214) memberFunctionAttribute -> . RETURN
    (407) empty -> .

    IMMUTABLE       shift and go to state 440
    CONST           shift and go to state 436
    RETURN          shift and go to state 439
    SEMICOLON       reduce using rule 407 (empty -> .)
    IF              reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)

    memberFunctionAttribute        shift and go to state 438
    empty                          shift and go to state 441
    multiple_memberFunctionAttribute shift and go to state 533

state 439

    (214) memberFunctionAttribute -> RETURN .

    IMMUTABLE       reduce using rule 214 (memberFunctionAttribute -> RETURN .)
    CONST           reduce using rule 214 (memberFunctionAttribute -> RETURN .)
    RETURN          reduce using rule 214 (memberFunctionAttribute -> RETURN .)
    SEMICOLON       reduce using rule 214 (memberFunctionAttribute -> RETURN .)
    LBRACE          reduce using rule 214 (memberFunctionAttribute -> RETURN .)
    IF              reduce using rule 214 (memberFunctionAttribute -> RETURN .)


state 440

    (212) memberFunctionAttribute -> IMMUTABLE .

    IMMUTABLE       reduce using rule 212 (memberFunctionAttribute -> IMMUTABLE .)
    CONST           reduce using rule 212 (memberFunctionAttribute -> IMMUTABLE .)
    RETURN          reduce using rule 212 (memberFunctionAttribute -> IMMUTABLE .)
    SEMICOLON       reduce using rule 212 (memberFunctionAttribute -> IMMUTABLE .)
    LBRACE          reduce using rule 212 (memberFunctionAttribute -> IMMUTABLE .)
    IF              reduce using rule 212 (memberFunctionAttribute -> IMMUTABLE .)


state 441

    (94) multiple_memberFunctionAttribute -> empty .

    SEMICOLON       reduce using rule 94 (multiple_memberFunctionAttribute -> empty .)
    IF              reduce using rule 94 (multiple_memberFunctionAttribute -> empty .)
    LBRACE          reduce using rule 94 (multiple_memberFunctionAttribute -> empty .)


state 442

    (250) parameterAttribute -> FINAL .

    FINAL           reduce using rule 250 (parameterAttribute -> FINAL .)
    AUTO            reduce using rule 250 (parameterAttribute -> FINAL .)
    RETURN          reduce using rule 250 (parameterAttribute -> FINAL .)
    CONST           reduce using rule 250 (parameterAttribute -> FINAL .)
    IMMUTABLE       reduce using rule 250 (parameterAttribute -> FINAL .)
    BOOL            reduce using rule 250 (parameterAttribute -> FINAL .)
    SHORT           reduce using rule 250 (parameterAttribute -> FINAL .)
    USHORT          reduce using rule 250 (parameterAttribute -> FINAL .)
    INT             reduce using rule 250 (parameterAttribute -> FINAL .)
    UINT            reduce using rule 250 (parameterAttribute -> FINAL .)
    LONG            reduce using rule 250 (parameterAttribute -> FINAL .)
    ULONG           reduce using rule 250 (parameterAttribute -> FINAL .)
    CHAR            reduce using rule 250 (parameterAttribute -> FINAL .)
    FLOAT           reduce using rule 250 (parameterAttribute -> FINAL .)
    DOT             reduce using rule 250 (parameterAttribute -> FINAL .)
    TYPEOF          reduce using rule 250 (parameterAttribute -> FINAL .)
    IDENTIFIER      reduce using rule 250 (parameterAttribute -> FINAL .)


state 443

    (251) parameterAttribute -> AUTO .

    FINAL           reduce using rule 251 (parameterAttribute -> AUTO .)
    AUTO            reduce using rule 251 (parameterAttribute -> AUTO .)
    RETURN          reduce using rule 251 (parameterAttribute -> AUTO .)
    CONST           reduce using rule 251 (parameterAttribute -> AUTO .)
    IMMUTABLE       reduce using rule 251 (parameterAttribute -> AUTO .)
    BOOL            reduce using rule 251 (parameterAttribute -> AUTO .)
    SHORT           reduce using rule 251 (parameterAttribute -> AUTO .)
    USHORT          reduce using rule 251 (parameterAttribute -> AUTO .)
    INT             reduce using rule 251 (parameterAttribute -> AUTO .)
    UINT            reduce using rule 251 (parameterAttribute -> AUTO .)
    LONG            reduce using rule 251 (parameterAttribute -> AUTO .)
    ULONG           reduce using rule 251 (parameterAttribute -> AUTO .)
    CHAR            reduce using rule 251 (parameterAttribute -> AUTO .)
    FLOAT           reduce using rule 251 (parameterAttribute -> AUTO .)
    DOT             reduce using rule 251 (parameterAttribute -> AUTO .)
    TYPEOF          reduce using rule 251 (parameterAttribute -> AUTO .)
    IDENTIFIER      reduce using rule 251 (parameterAttribute -> AUTO .)


state 444

    (249) parameterAttribute -> typeConstructor .

    FINAL           reduce using rule 249 (parameterAttribute -> typeConstructor .)
    AUTO            reduce using rule 249 (parameterAttribute -> typeConstructor .)
    RETURN          reduce using rule 249 (parameterAttribute -> typeConstructor .)
    CONST           reduce using rule 249 (parameterAttribute -> typeConstructor .)
    IMMUTABLE       reduce using rule 249 (parameterAttribute -> typeConstructor .)
    BOOL            reduce using rule 249 (parameterAttribute -> typeConstructor .)
    SHORT           reduce using rule 249 (parameterAttribute -> typeConstructor .)
    USHORT          reduce using rule 249 (parameterAttribute -> typeConstructor .)
    INT             reduce using rule 249 (parameterAttribute -> typeConstructor .)
    UINT            reduce using rule 249 (parameterAttribute -> typeConstructor .)
    LONG            reduce using rule 249 (parameterAttribute -> typeConstructor .)
    ULONG           reduce using rule 249 (parameterAttribute -> typeConstructor .)
    CHAR            reduce using rule 249 (parameterAttribute -> typeConstructor .)
    FLOAT           reduce using rule 249 (parameterAttribute -> typeConstructor .)
    DOT             reduce using rule 249 (parameterAttribute -> typeConstructor .)
    TYPEOF          reduce using rule 249 (parameterAttribute -> typeConstructor .)
    IDENTIFIER      reduce using rule 249 (parameterAttribute -> typeConstructor .)


state 445

    (239) parameterAttributeStar -> parameterAttribute . parameterAttributeStar
    (239) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (240) parameterAttributeStar -> . empty
    (249) parameterAttribute -> . typeConstructor
    (250) parameterAttribute -> . FINAL
    (251) parameterAttribute -> . AUTO
    (252) parameterAttribute -> . RETURN
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FINAL           shift and go to state 442
    AUTO            shift and go to state 443
    RETURN          shift and go to state 447
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    typeConstructor                shift and go to state 444
    parameterAttribute             shift and go to state 445
    empty                          shift and go to state 451
    parameterAttributeStar         shift and go to state 534

state 446

    (241) parameter -> parameterAttributeStar . type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar . type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
    (243) parameter -> parameterAttributeStar . type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar . type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type
    (245) parameter -> parameterAttributeStar . type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar . type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER
    (247) parameter -> parameterAttributeStar . type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (248) parameter -> parameterAttributeStar . type parameterAttributeStar type ELLIPSIS parameterAttributeStar type
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 10
    type                           shift and go to state 535
    type2                          shift and go to state 53

state 447

    (252) parameterAttribute -> RETURN .

    FINAL           reduce using rule 252 (parameterAttribute -> RETURN .)
    AUTO            reduce using rule 252 (parameterAttribute -> RETURN .)
    RETURN          reduce using rule 252 (parameterAttribute -> RETURN .)
    CONST           reduce using rule 252 (parameterAttribute -> RETURN .)
    IMMUTABLE       reduce using rule 252 (parameterAttribute -> RETURN .)
    BOOL            reduce using rule 252 (parameterAttribute -> RETURN .)
    SHORT           reduce using rule 252 (parameterAttribute -> RETURN .)
    USHORT          reduce using rule 252 (parameterAttribute -> RETURN .)
    INT             reduce using rule 252 (parameterAttribute -> RETURN .)
    UINT            reduce using rule 252 (parameterAttribute -> RETURN .)
    LONG            reduce using rule 252 (parameterAttribute -> RETURN .)
    ULONG           reduce using rule 252 (parameterAttribute -> RETURN .)
    CHAR            reduce using rule 252 (parameterAttribute -> RETURN .)
    FLOAT           reduce using rule 252 (parameterAttribute -> RETURN .)
    DOT             reduce using rule 252 (parameterAttribute -> RETURN .)
    TYPEOF          reduce using rule 252 (parameterAttribute -> RETURN .)
    IDENTIFIER      reduce using rule 252 (parameterAttribute -> RETURN .)


state 448

    (257) parameters -> LPAREN ELLIPSIS . RPAREN

    RPAREN          shift and go to state 536


state 449

    (258) parameters -> LPAREN RPAREN .

    IMMUTABLE       reduce using rule 258 (parameters -> LPAREN RPAREN .)
    CONST           reduce using rule 258 (parameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 258 (parameters -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 258 (parameters -> LPAREN RPAREN .)
    LBRACE          reduce using rule 258 (parameters -> LPAREN RPAREN .)
    IF              reduce using rule 258 (parameters -> LPAREN RPAREN .)


state 450

    (255) parameters -> LPAREN parameter . CommaParameterStar COMMA ELLIPSIS RPAREN
    (256) parameters -> LPAREN parameter . CommaParameterStar RPAREN
    (253) CommaParameterStar -> . COMMA parameter CommaParameterStar
    (254) CommaParameterStar -> . empty
    (407) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 538
    RPAREN          reduce using rule 407 (empty -> .)

  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    CommaParameterStar             shift and go to state 537
    empty                          shift and go to state 539

state 451

    (240) parameterAttributeStar -> empty .

    CONST           reduce using rule 240 (parameterAttributeStar -> empty .)
    IMMUTABLE       reduce using rule 240 (parameterAttributeStar -> empty .)
    BOOL            reduce using rule 240 (parameterAttributeStar -> empty .)
    SHORT           reduce using rule 240 (parameterAttributeStar -> empty .)
    USHORT          reduce using rule 240 (parameterAttributeStar -> empty .)
    INT             reduce using rule 240 (parameterAttributeStar -> empty .)
    UINT            reduce using rule 240 (parameterAttributeStar -> empty .)
    LONG            reduce using rule 240 (parameterAttributeStar -> empty .)
    ULONG           reduce using rule 240 (parameterAttributeStar -> empty .)
    CHAR            reduce using rule 240 (parameterAttributeStar -> empty .)
    FLOAT           reduce using rule 240 (parameterAttributeStar -> empty .)
    DOT             reduce using rule 240 (parameterAttributeStar -> empty .)
    TYPEOF          reduce using rule 240 (parameterAttributeStar -> empty .)
    IDENTIFIER      reduce using rule 240 (parameterAttributeStar -> empty .)


state 452

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute . SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute . SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET

    SEMICOLON       shift and go to state 540


state 453

    (206) comma_index -> COMMA . index comma_index
    (202) index -> . assignExpression
    (203) index -> . assignExpression RANGE assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    index                          shift and go to state 541
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 335
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 454

    (205) indexExpression -> unaryExpression LBRACKET index comma_index . RBRACKET

    RBRACKET        shift and go to state 542


state 455

    (207) comma_index -> empty .

    RBRACKET        reduce using rule 207 (comma_index -> empty .)


state 456

    (203) index -> assignExpression RANGE . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 543
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 457

    (167) functionCallExpression -> symbol arguments unaryExpression arguments .

    DOT             reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    PLUS_PLUS       reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LBRACKET        reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    CARET           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    TIMES           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    DIV             reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    MODULO          reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    PLUS            reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    MINUS           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    TILDE           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LEFT_SHIFT      reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RIGHT_SHIFT     reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    IS_EQ           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    NOT_EQ          reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    AMPERSAND       reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    PIPE            reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    DOUBLE_AMPERSAND reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    QUESTION        reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    DOUBLE_PIPE     reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    ASSIGN          reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_LEFT         reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_RIGHT        reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_PLUS         reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_MINUS        reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_TIMES        reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_MODULO       reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_AND_BIT      reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_DIV          reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_OR_BIT       reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_XOR_BIT      reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    SEMICOLON       reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    COMMA           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS            reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS_EQ         reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER         reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER_EQ      reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    IS_EQ_DIFF      reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    NOT_EQ_DIFF     reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS_EQ_DIFF    reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS_DIFF       reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER_EQ_DIFF reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER_DIFF    reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RPAREN          reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    $end            reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RBRACKET        reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    COLON           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RANGE           reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    TYPEDEF         reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    IDENTIFIER      reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RBRACE          reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    DOUBLE_QUOTE    reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LPAREN          reduce using rule 167 (functionCallExpression -> symbol arguments unaryExpression arguments .)


state 458

    (336) ternaryExpression -> orOrExpression QUESTION expression COLON . ternaryExpression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 544
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 459

    (20) comma_assign -> COMMA assignExpression comma_assign .

    RBRACKET        reduce using rule 20 (comma_assign -> COMMA assignExpression comma_assign .)
    COMMA           reduce using rule 20 (comma_assign -> COMMA assignExpression comma_assign .)
    COLON           reduce using rule 20 (comma_assign -> COMMA assignExpression comma_assign .)
    RPAREN          reduce using rule 20 (comma_assign -> COMMA assignExpression comma_assign .)


state 460

    (389) unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .

    DOT             reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    $end            reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    TYPEDEF         reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    RBRACE          reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    DOUBLE_QUOTE    reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 389 (unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance .)


state 461

    (268) primaryExpression -> typeConstructor LPAREN type RPAREN DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 545


state 462

    (404) withStatement -> WITH LBRACKET expression RBRACKET . statementNoCaseNoDefault
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

    forStatement                   shift and go to state 103
    continueStatement              shift and go to state 118
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    newExpression                  shift and go to state 20
    statementNoCaseNoDefault       shift and go to state 546
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 463

    (180) gotoStatement -> GOTO CASE expression SEMICOLON .

    RBRACE          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    PRIVATE         reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    PROTECTED       reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    PUBLIC          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    STATIC          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    EXTERN          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    FINAL           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    AUTO            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    CONST           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    IMMUTABLE       reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    CASE            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    DEFAULT         reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    IDENTIFIER      reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    LBRACE          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    IF              reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    WHILE           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    DO              reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    FOR             reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    FOREACH         reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    SWITCH          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    CONTINUE        reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    BREAK           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    RETURN          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    GOTO            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    WITH            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    AMPERSAND       reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    EXCLAMATION     reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    TIMES           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    PLUS            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    MINUS           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    DOT             reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    ELLIPSIS        reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    LBRACKET        reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    RANGE           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    LPAREN          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    DOLLAR          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    THIS            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    NULL            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    TRUE            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    FALSE           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    INUMBER         reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    DNUMBER         reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    LIT_CHAR        reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    NEW             reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    DELETE          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    CAST            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    FUNCTION        reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    MIXIN           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    IMPORT          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    LIT_STR         reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    BOOL            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    SHORT           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    USHORT          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    INT             reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    UINT            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    LONG            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    ULONG           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    CHAR            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    FLOAT           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    TYPEOF          reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    ALIAS           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    ENUM            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    CLASS           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    TILDE           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    TYPEDEF         reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    UNION           reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    SEMICOLON       reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)
    ELSE            reduce using rule 180 (gotoStatement -> GOTO CASE expression SEMICOLON .)


state 464

    (157) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON . expression RANGE expression RBRACKET declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 547

state 465

    (156) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON . expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    identifierOrTemplateInstance   shift and go to state 37
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 548

state 466

    (165) foreachTypeList -> foreachTypeList COMMA . foreachType
    (160) foreachType -> . IDENTIFIER
    (161) foreachType -> . type IDENTIFIER
    (162) foreachType -> . typeConstructors IDENTIFIER
    (163) foreachType -> . typeConstructors type IDENTIFIER
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 366
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    foreachType                    shift and go to state 549
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    type2                          shift and go to state 53
    type                           shift and go to state 367
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 368

state 467

    (161) foreachType -> type IDENTIFIER .

    SEMICOLON       reduce using rule 161 (foreachType -> type IDENTIFIER .)
    COMMA           reduce using rule 161 (foreachType -> type IDENTIFIER .)


state 468

    (340) type -> typeConstructors type2 . typeSuffixStar
    (341) type -> type2 . typeSuffixStar
    (338) typeSuffixStar -> . typeSuffix typeSuffixStar
    (339) typeSuffixStar -> . empty
    (364) typeSuffix -> . TIMES
    (365) typeSuffix -> . LBRACKET type RBRACKET
    (366) typeSuffix -> . LBRACKET RBRACKET
    (367) typeSuffix -> . LBRACKET assignExpression RBRACKET
    (368) typeSuffix -> . LBRACKET assignExpression RANGE assignExpression RBRACKET
    (369) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (371) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (373) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET
    (374) typeSuffix -> . SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET
    (407) empty -> .

    TIMES           shift and go to state 174
    LBRACKET        shift and go to state 169
    DELEGATE        shift and go to state 176
    FUNCTION        shift and go to state 173
    SEMICOLON       shift and go to state 171
    IDENTIFIER      reduce using rule 407 (empty -> .)

    typeSuffix                     shift and go to state 175
    typeSuffixStar                 shift and go to state 550
    empty                          shift and go to state 172

state 469

    (162) foreachType -> typeConstructors IDENTIFIER .
    (187) identifierOrTemplateInstance -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 162 (foreachType -> typeConstructors IDENTIFIER .)
    SEMICOLON       reduce using rule 162 (foreachType -> typeConstructors IDENTIFIER .)
    COMMA           reduce using rule 162 (foreachType -> typeConstructors IDENTIFIER .)
    DOT             reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    TIMES           reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    LBRACKET        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    DELEGATE        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    FUNCTION        reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 187 (identifierOrTemplateInstance -> IDENTIFIER .) ]


state 470

    (163) foreachType -> typeConstructors type . IDENTIFIER

    IDENTIFIER      shift and go to state 551


state 471

    (346) type2 -> typeConstructor . LBRACKET TYPEDEF RBRACKET
    (349) typeConstructors -> typeConstructor .
    (350) typeConstructors -> typeConstructor . typeConstructors
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LBRACKET        shift and go to state 96
    BOOL            reduce using rule 349 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 349 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 349 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 349 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 349 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 349 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 349 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 349 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 349 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 349 (typeConstructors -> typeConstructor .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 349 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 95
    typeConstructors               shift and go to state 98

state 472

    (159) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON . expression RANGE expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 552

state 473

    (158) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON . expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    identifierOrTemplateInstance   shift and go to state 37
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 553

state 474

    (153) forStatement -> FOR LPAREN statementNoCaseNoDefault expression . SEMICOLON RPAREN declarationOrStatement
    (155) forStatement -> FOR LPAREN statementNoCaseNoDefault expression . SEMICOLON expression RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    SEMICOLON       shift and go to state 554
    COMMA           shift and go to state 250


state 475

    (149) forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON . RPAREN declarationOrStatement
    (151) forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON . expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RPAREN          shift and go to state 555
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 556
    addExpression                  shift and go to state 80

state 476

    (152) forStatement -> FOR LPAREN declaration expression . SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> FOR LPAREN declaration expression . SEMICOLON expression RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    SEMICOLON       shift and go to state 557
    COMMA           shift and go to state 250


state 477

    (148) forStatement -> FOR LPAREN declaration SEMICOLON . RPAREN declarationOrStatement
    (150) forStatement -> FOR LPAREN declaration SEMICOLON . expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RPAREN          shift and go to state 558
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 559

state 478

    (124) destructor -> TILDE THIS LPAREN . RPAREN multiple_memberFunctionAttribute functionBody
    (125) destructor -> TILDE THIS LPAREN . RPAREN multiple_memberFunctionAttribute SEMICOLON

    RPAREN          shift and go to state 560


state 479

    (199) importDeclaration -> IMPORT importBindings SEMICOLON .

    PRIVATE         reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    PROTECTED       reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    PUBLIC          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    STATIC          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    EXTERN          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FINAL           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    AUTO            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CONST           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IMMUTABLE       reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CASE            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DEFAULT         reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IDENTIFIER      reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LBRACE          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IF              reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    WHILE           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DO              reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FOR             reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FOREACH         reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FOREACH_REVERSE reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    SWITCH          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CONTINUE        reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    BREAK           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    RETURN          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    GOTO            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    WITH            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    AMPERSAND       reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    EXCLAMATION     reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TIMES           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    PLUS            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    MINUS           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DOT             reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    PLUS_PLUS       reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ELLIPSIS        reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LBRACKET        reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    RANGE           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LPAREN          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DOLLAR          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    THIS            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    NULL            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TRUE            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FALSE           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    INUMBER         reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DNUMBER         reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LIT_CHAR        reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    NEW             reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DELETE          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CAST            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FUNCTION        reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    MIXIN           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IMPORT          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LIT_STR         reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    BOOL            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    SHORT           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    USHORT          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    INT             reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UINT            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LONG            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ULONG           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CHAR            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FLOAT           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TYPEOF          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ALIAS           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ENUM            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CLASS           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TILDE           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TYPEDEF         reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UNION           reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    RBRACE          reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    SEMICOLON       reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ELSE            reduce using rule 199 (importDeclaration -> IMPORT importBindings SEMICOLON .)


state 480

    (182) identifierChain -> identifierChain DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 561


state 481

    (195) importBindings -> singleImport COLON . importBind
    (196) importBindings -> singleImport COLON . importBind COLON importBind
    (193) importBind -> . IDENTIFIER
    (194) importBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 563

    importBind                     shift and go to state 562

state 482

    (200) comma_singleImport -> COMMA . singleImport comma_singleImport
    (304) singleImport -> . IDENTIFIER ASSIGN identifierChain
    (305) singleImport -> . identifierChain
    (181) identifierChain -> . IDENTIFIER
    (182) identifierChain -> . identifierChain DOT IDENTIFIER

    IDENTIFIER      shift and go to state 381

    identifierChain                shift and go to state 379
    singleImport                   shift and go to state 564

state 483

    (197) importDeclaration -> IMPORT singleImport comma_singleImport . COMMA importBindings SEMICOLON
    (198) importDeclaration -> IMPORT singleImport comma_singleImport . SEMICOLON

    COMMA           shift and go to state 566
    SEMICOLON       shift and go to state 565


state 484

    (201) comma_singleImport -> empty .

    COMMA           reduce using rule 201 (comma_singleImport -> empty .)
    SEMICOLON       reduce using rule 201 (comma_singleImport -> empty .)


state 485

    (304) singleImport -> IDENTIFIER ASSIGN . identifierChain
    (181) identifierChain -> . IDENTIFIER
    (182) identifierChain -> . identifierChain DOT IDENTIFIER

    IDENTIFIER      shift and go to state 567

    identifierChain                shift and go to state 568

state 486

    (82) classDeclaration -> CLASS IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IF              reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DO              reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ELLIPSIS        reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RANGE           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INT             reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 82 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)


state 487

    (83) classDeclaration -> CLASS IDENTIFIER COLON . baseClassList structBody
    (64) baseClassList -> . baseClass
    (65) baseClassList -> . baseClassList COMMA baseClass
    (63) baseClass -> . type2
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 90

    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    baseClassList                  shift and go to state 569
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructor                shift and go to state 92
    baseClass                      shift and go to state 307
    type2                          shift and go to state 304

state 488

    (84) classDeclaration -> CLASS IDENTIFIER structBody .

    PRIVATE         reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    PROTECTED       reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    PUBLIC          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    STATIC          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    EXTERN          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FINAL           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    AUTO            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CONST           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IMMUTABLE       reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CASE            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DEFAULT         reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IDENTIFIER      reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LBRACE          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IF              reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    WHILE           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DO              reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FOR             reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FOREACH         reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FOREACH_REVERSE reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    SWITCH          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CONTINUE        reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    BREAK           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    RETURN          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    GOTO            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    WITH            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    AMPERSAND       reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    EXCLAMATION     reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TIMES           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    PLUS            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    MINUS           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DOT             reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    PLUS_PLUS       reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ELLIPSIS        reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LBRACKET        reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    RANGE           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LPAREN          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DOLLAR          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    THIS            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    NULL            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TRUE            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FALSE           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    INUMBER         reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DNUMBER         reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LIT_CHAR        reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    NEW             reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DELETE          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CAST            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FUNCTION        reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    MIXIN           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IMPORT          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LIT_STR         reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    BOOL            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    SHORT           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    USHORT          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    INT             reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UINT            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LONG            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ULONG           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CHAR            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FLOAT           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TYPEOF          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ALIAS           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ENUM            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CLASS           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TILDE           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TYPEDEF         reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UNION           reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    RBRACE          reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    SEMICOLON       reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ELSE            reduce using rule 84 (classDeclaration -> CLASS IDENTIFIER structBody .)


state 489

    (171) functionDeclaration -> TYPEDEF IDENTIFIER parameters . multiple_memberFunctionAttribute SEMICOLON
    (172) functionDeclaration -> TYPEDEF IDENTIFIER parameters . multiple_memberFunctionAttribute functionBody
    (93) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (94) multiple_memberFunctionAttribute -> . empty
    (212) memberFunctionAttribute -> . IMMUTABLE
    (213) memberFunctionAttribute -> . CONST
    (214) memberFunctionAttribute -> . RETURN
    (407) empty -> .

    IMMUTABLE       shift and go to state 440
    CONST           shift and go to state 436
    RETURN          shift and go to state 439
    SEMICOLON       reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)

    memberFunctionAttribute        shift and go to state 438
    empty                          shift and go to state 441
    multiple_memberFunctionAttribute shift and go to state 570

state 490

    (131) anonymousEnumMember -> TYPEDEF . IDENTIFIER ASSIGN assignExpression

    IDENTIFIER      shift and go to state 571


state 491

    (132) anonymousEnumMember -> IDENTIFIER . ASSIGN assignExpression
    (133) anonymousEnumMember -> IDENTIFIER .

    ASSIGN          shift and go to state 572
    TYPEDEF         reduce using rule 133 (anonymousEnumMember -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 133 (anonymousEnumMember -> IDENTIFIER .)
    RBRACE          reduce using rule 133 (anonymousEnumMember -> IDENTIFIER .)


state 492

    (134) anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember . multipleanonymousEnumMember RBRACE
    (136) multipleanonymousEnumMember -> . anonymousEnumMember multipleanonymousEnumMember
    (137) multipleanonymousEnumMember -> . empty
    (131) anonymousEnumMember -> . TYPEDEF IDENTIFIER ASSIGN assignExpression
    (132) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (133) anonymousEnumMember -> . IDENTIFIER
    (407) empty -> .

    TYPEDEF         shift and go to state 490
    IDENTIFIER      shift and go to state 491
    RBRACE          reduce using rule 407 (empty -> .)

    multipleanonymousEnumMember    shift and go to state 573
    anonymousEnumMember            shift and go to state 574
    empty                          shift and go to state 575

state 493

    (135) anonymousEnumDeclaration -> ENUM COLON type . LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE

    LBRACE          shift and go to state 576


state 494

    (138) enumDeclaration -> ENUM IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    IF              reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    DO              reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    ELLIPSIS        reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    RANGE           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    INT             reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 138 (enumDeclaration -> ENUM IDENTIFIER SEMICOLON .)


state 495

    (139) enumDeclaration -> ENUM IDENTIFIER COLON . TYPEDEF SEMICOLON
    (140) enumDeclaration -> ENUM IDENTIFIER COLON . TYPEDEF enumBody

    TYPEDEF         shift and go to state 577


state 496

    (396) unionDeclaration -> UNION IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IF              reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DO              reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ELLIPSIS        reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RANGE           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INT             reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 396 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)


state 497

    (395) unionDeclaration -> UNION IDENTIFIER structBody .

    PRIVATE         reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    PROTECTED       reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    PUBLIC          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    STATIC          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    EXTERN          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FINAL           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    AUTO            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CONST           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IMMUTABLE       reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CASE            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DEFAULT         reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IDENTIFIER      reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LBRACE          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IF              reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    WHILE           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DO              reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FOR             reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FOREACH         reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FOREACH_REVERSE reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    SWITCH          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CONTINUE        reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    BREAK           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    RETURN          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    GOTO            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    WITH            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    AMPERSAND       reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    EXCLAMATION     reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TIMES           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    PLUS            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    MINUS           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DOT             reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    PLUS_PLUS       reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ELLIPSIS        reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LBRACKET        reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    RANGE           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LPAREN          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DOLLAR          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    THIS            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    NULL            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TRUE            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FALSE           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    INUMBER         reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DNUMBER         reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LIT_CHAR        reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    NEW             reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DELETE          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CAST            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FUNCTION        reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    MIXIN           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IMPORT          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LIT_STR         reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    BOOL            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    SHORT           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    USHORT          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    INT             reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UINT            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LONG            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ULONG           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CHAR            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FLOAT           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TYPEOF          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ALIAS           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ENUM            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CLASS           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TILDE           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TYPEDEF         reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UNION           reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    RBRACE          reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    SEMICOLON       reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ELSE            reduce using rule 395 (unionDeclaration -> UNION IDENTIFIER structBody .)


state 498

    (401) variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER . ASSIGN functionBody SEMICOLON
    (120) declarator -> IDENTIFIER .
    (121) declarator -> IDENTIFIER . ASSIGN initializer

    ASSIGN          shift and go to state 578
    COMMA           reduce using rule 120 (declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 120 (declarator -> IDENTIFIER .)


state 499

    (400) variableDeclaration -> multiplestorageClass TYPEDEF declarator . CommaDeclarator SEMICOLON
    (398) CommaDeclarator -> . COMMA declarator CommaDeclarator
    (399) CommaDeclarator -> . empty
    (407) empty -> .

    COMMA           shift and go to state 579
    SEMICOLON       reduce using rule 407 (empty -> .)

    CommaDeclarator                shift and go to state 580
    empty                          shift and go to state 581

state 500

    (5) aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer . SEMICOLON

    SEMICOLON       shift and go to state 582


state 501

    (7) comma_aliasInitializer -> COMMA . aliasInitializer comma_aliasInitializer
    (11) aliasInitializer -> . IDENTIFIER ASSIGN multiplestorageClass type
    (12) aliasInitializer -> . IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON

    IDENTIFIER      shift and go to state 584

    aliasInitializer               shift and go to state 583

state 502

    (8) comma_aliasInitializer -> empty .

    SEMICOLON       reduce using rule 8 (comma_aliasInitializer -> empty .)


state 503

    (6) aliasDeclaration -> ALIAS multiplestorageClass type . identifierList SEMICOLON
    (183) identifierList -> . IDENTIFIER
    (184) identifierList -> . identifierList COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 586

    identifierList                 shift and go to state 585

state 504

    (9) multiplestorageClass -> storageClass multiplestorageClass .

    CONST           reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    IMMUTABLE       reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    BOOL            reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    SHORT           reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    USHORT          reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    INT             reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    UINT            reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    LONG            reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    ULONG           reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    CHAR            reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    FLOAT           reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    DOT             reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    TYPEOF          reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    IDENTIFIER      reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)
    TYPEDEF         reduce using rule 9 (multiplestorageClass -> storageClass multiplestorageClass .)


state 505

    (13) aliasThisDeclaration -> ALIAS IDENTIFIER THIS . SEMICOLON

    SEMICOLON       shift and go to state 587


state 506

    (11) aliasInitializer -> IDENTIFIER ASSIGN . multiplestorageClass type
    (12) aliasInitializer -> IDENTIFIER ASSIGN . functionLiteralExpression SEMICOLON
    (9) multiplestorageClass -> . storageClass multiplestorageClass
    (10) multiplestorageClass -> . empty
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (324) storageClass -> . typeConstructor
    (325) storageClass -> . AUTO
    (326) storageClass -> . ENUM
    (327) storageClass -> . EXTERN
    (328) storageClass -> . FINAL
    (329) storageClass -> . STATIC
    (407) empty -> .
    (166) functionBody -> . blockStatement
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FUNCTION        shift and go to state 21
    IDENTIFIER      shift and go to state 588
    AUTO            shift and go to state 394
    ENUM            shift and go to state 392
    EXTERN          shift and go to state 396
    FINAL           shift and go to state 393
    STATIC          shift and go to state 397
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    LBRACE          shift and go to state 26

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 407 (empty -> .) ]

    functionBody                   shift and go to state 42
    multiplestorageClass           shift and go to state 589
    functionLiteralExpression      shift and go to state 590
    storageClass                   shift and go to state 395
    blockStatement                 shift and go to state 3
    typeConstructor                shift and go to state 259
    empty                          shift and go to state 267

state 507

    (89) constructor -> THIS parameters multiple_memberFunctionAttribute . functionBody
    (90) constructor -> THIS parameters multiple_memberFunctionAttribute . SEMICOLON
    (91) constructor -> THIS parameters multiple_memberFunctionAttribute . constraint functionBody
    (92) constructor -> THIS parameters multiple_memberFunctionAttribute . constraint SEMICOLON
    (166) functionBody -> . blockStatement
    (88) constraint -> . IF LPAREN expression RPAREN
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 592
    IF              shift and go to state 594
    LBRACE          shift and go to state 26

    functionBody                   shift and go to state 591
    constraint                     shift and go to state 593
    blockStatement                 shift and go to state 3

state 508

    (169) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER . parameters multiple_memberFunctionAttribute SEMICOLON
    (170) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER . parameters multiple_memberFunctionAttribute functionBody
    (55) autoDeclaration -> storageClass multiplestorageClass IDENTIFIER . ASSIGN initializer comma_identifier_assign_initializer SEMICOLON
    (255) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (256) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (257) parameters -> . LPAREN ELLIPSIS RPAREN
    (258) parameters -> . LPAREN RPAREN

    ASSIGN          shift and go to state 596
    LPAREN          shift and go to state 328

    parameters                     shift and go to state 595

state 509

    (126) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN . expression RPAREN SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 597
    addExpression                  shift and go to state 80

state 510

    (403) whileStatement -> WHILE LBRACKET expression RBRACKET . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 598
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 511

    (75) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS . CASE assignExpression COLON declarationsAndStatements

    CASE            shift and go to state 599


state 512

    (76) caseStatement -> CASE argumentList COLON declarationsAndStatements .

    RBRACE          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PRIVATE         reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PROTECTED       reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PUBLIC          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    STATIC          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    EXTERN          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FINAL           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    AUTO            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CONST           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IMMUTABLE       reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CASE            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DEFAULT         reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IDENTIFIER      reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LBRACE          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IF              reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    WHILE           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DO              reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FOR             reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FOREACH         reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FOREACH_REVERSE reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    SWITCH          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CONTINUE        reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    BREAK           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    RETURN          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    GOTO            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    WITH            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    AMPERSAND       reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    EXCLAMATION     reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TIMES           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PLUS            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    MINUS           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DOT             reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PLUS_PLUS       reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ELLIPSIS        reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LBRACKET        reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    RANGE           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LPAREN          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DOLLAR          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    THIS            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    NULL            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TRUE            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FALSE           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    INUMBER         reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DNUMBER         reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LIT_CHAR        reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    NEW             reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DELETE          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CAST            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FUNCTION        reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    MIXIN           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IMPORT          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LIT_STR         reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    BOOL            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    SHORT           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    USHORT          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    INT             reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UINT            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LONG            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ULONG           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CHAR            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FLOAT           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TYPEOF          reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ALIAS           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ENUM            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CLASS           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TILDE           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TYPEDEF         reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UNION           reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    SEMICOLON       reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ELSE            reduce using rule 76 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)


state 513

    (333) switchStatement -> SWITCH LBRACKET expression RBRACKET . statement
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

    forStatement                   shift and go to state 103
    continueStatement              shift and go to state 118
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    indexExpression                shift and go to state 22
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 600
    newExpression                  shift and go to state 20
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 514

    (99) multiple_declaration -> declaration . multiple_declaration
    (99) multiple_declaration -> . declaration multiple_declaration
    (100) multiple_declaration -> . empty
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (407) empty -> .
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 407 (empty -> .)
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    THIS            reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    IMPORT          reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    MIXIN           reduce using rule 407 (empty -> .)
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 294
    IMMUTABLE       shift and go to state 297

  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    multipleattributes             shift and go to state 130
    attribute                      shift and go to state 145
    declaration                    shift and go to state 514
    multiple_declaration           shift and go to state 601
    empty                          shift and go to state 516

state 515

    (98) declaration -> attribute multipleattributes LBRACE multiple_declaration . RBRACE

    RBRACE          shift and go to state 602


state 516

    (100) multiple_declaration -> empty .
    (102) multipleattributes -> empty .

    RBRACE          reduce using rule 100 (multiple_declaration -> empty .)
    ALIAS           reduce using rule 102 (multipleattributes -> empty .)
    ENUM            reduce using rule 102 (multipleattributes -> empty .)
    CLASS           reduce using rule 102 (multipleattributes -> empty .)
    THIS            reduce using rule 102 (multipleattributes -> empty .)
    TILDE           reduce using rule 102 (multipleattributes -> empty .)
    TYPEDEF         reduce using rule 102 (multipleattributes -> empty .)
    IMPORT          reduce using rule 102 (multipleattributes -> empty .)
    UNION           reduce using rule 102 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 102 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 102 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 102 (multipleattributes -> empty .)
    STATIC          reduce using rule 102 (multipleattributes -> empty .)
    EXTERN          reduce using rule 102 (multipleattributes -> empty .)
    FINAL           reduce using rule 102 (multipleattributes -> empty .)
    AUTO            reduce using rule 102 (multipleattributes -> empty .)
    CONST           reduce using rule 102 (multipleattributes -> empty .)
    IMMUTABLE       reduce using rule 102 (multipleattributes -> empty .)
    MIXIN           reduce using rule 102 (multipleattributes -> empty .)


state 517

    (190) ifCondition -> AUTO IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 603


state 518

    (188) ifStatement -> IF LPAREN ifCondition RPAREN . declarationOrStatement
    (189) ifStatement -> IF LPAREN ifCondition RPAREN . declarationOrStatement ELSE declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 604
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 519

    (191) ifCondition -> TYPEDEF IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 605


state 520

    (228) newAnonClassExpression -> NEW arguments CLASS arguments baseClassList . structBody
    (65) baseClassList -> baseClassList . COMMA baseClass
    (332) structBody -> . LBRACE declarationStar RBRACE

    COMMA           shift and go to state 423
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 606

state 521

    (226) newAnonClassExpression -> NEW arguments CLASS arguments structBody .

    DOT             reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    PLUS_PLUS       reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    LBRACKET        reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    CARET           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    TIMES           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    DIV             reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    MODULO          reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    PLUS            reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    MINUS           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    TILDE           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    LEFT_SHIFT      reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    RIGHT_SHIFT     reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    IS_EQ           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    NOT_EQ          reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    AMPERSAND       reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    PIPE            reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    DOUBLE_AMPERSAND reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    QUESTION        reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    DOUBLE_PIPE     reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    ASSIGN          reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_LEFT         reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_RIGHT        reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_PLUS         reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_MINUS        reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_TIMES        reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_MODULO       reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_AND_BIT      reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_DIV          reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_OR_BIT       reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    EQ_XOR_BIT      reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    COLON           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    COMMA           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    RBRACKET        reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    LESS            reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    LESS_EQ         reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    GREATER         reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    GREATER_EQ      reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    IS_EQ_DIFF      reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    NOT_EQ_DIFF     reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    LESS_EQ_DIFF    reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    LESS_DIFF       reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    GREATER_EQ_DIFF reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    GREATER_DIFF    reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    RPAREN          reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    $end            reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    SEMICOLON       reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    RANGE           reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    TYPEDEF         reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    IDENTIFIER      reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    RBRACE          reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    DOUBLE_QUOTE    reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)
    LPAREN          reduce using rule 226 (newAnonClassExpression -> NEW arguments CLASS arguments structBody .)


state 522

    (227) newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .

    DOT             reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    PLUS_PLUS       reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    LBRACKET        reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    CARET           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    TIMES           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    DIV             reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    MODULO          reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    PLUS            reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    MINUS           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    TILDE           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    LEFT_SHIFT      reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    RIGHT_SHIFT     reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    IS_EQ           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    NOT_EQ          reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    AMPERSAND       reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    PIPE            reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    DOUBLE_AMPERSAND reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    QUESTION        reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    DOUBLE_PIPE     reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    ASSIGN          reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_LEFT         reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_RIGHT        reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_PLUS         reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_MINUS        reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_TIMES        reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_MODULO       reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_AND_BIT      reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_DIV          reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_OR_BIT       reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    EQ_XOR_BIT      reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    COLON           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    COMMA           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    RBRACKET        reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    LESS            reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    LESS_EQ         reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    GREATER         reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    GREATER_EQ      reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    IS_EQ_DIFF      reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    NOT_EQ_DIFF     reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    LESS_EQ_DIFF    reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    LESS_DIFF       reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    GREATER_EQ_DIFF reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    GREATER_DIFF    reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    RPAREN          reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    $end            reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    SEMICOLON       reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    RANGE           reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    TYPEDEF         reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    IDENTIFIER      reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    RBRACE          reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    DOUBLE_QUOTE    reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)
    LPAREN          reduce using rule 227 (newAnonClassExpression -> NEW arguments CLASS baseClassList structBody .)


state 523

    (230) newExpression -> NEW type LBRACKET assignExpression RBRACKET .

    DOT             reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TIMES           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    $end            reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TYPEDEF         reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RBRACE          reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 230 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)


state 524

    (221) newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .

    DOT             reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    PLUS_PLUS       reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    LBRACKET        reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    CARET           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    TIMES           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    DIV             reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    MODULO          reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    PLUS            reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    MINUS           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    TILDE           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    LEFT_SHIFT      reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    RIGHT_SHIFT     reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    IS_EQ           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    NOT_EQ          reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    AMPERSAND       reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    PIPE            reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    DOUBLE_AMPERSAND reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    QUESTION        reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    DOUBLE_PIPE     reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    ASSIGN          reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_LEFT         reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_RIGHT        reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_PLUS         reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_MINUS        reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_TIMES        reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_MODULO       reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_AND_BIT      reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_DIV          reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_OR_BIT       reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    EQ_XOR_BIT      reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    COLON           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    COMMA           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    RBRACKET        reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    LESS            reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    LESS_EQ         reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    GREATER         reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    GREATER_EQ      reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    IS_EQ_DIFF      reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    NOT_EQ_DIFF     reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    LESS_EQ_DIFF    reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    LESS_DIFF       reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    GREATER_EQ_DIFF reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    GREATER_DIFF    reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    RPAREN          reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    $end            reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    SEMICOLON       reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    RANGE           reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    TYPEDEF         reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    IDENTIFIER      reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    RBRACE          reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    DOUBLE_QUOTE    reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)
    LPAREN          reduce using rule 221 (newAnonClassExpression -> NEW CLASS arguments baseClassList structBody .)


state 525

    (65) baseClassList -> baseClassList COMMA baseClass .

    COMMA           reduce using rule 65 (baseClassList -> baseClassList COMMA baseClass .)
    LBRACE          reduce using rule 65 (baseClassList -> baseClassList COMMA baseClass .)


state 526

    (330) declarationStar -> declaration declarationStar .

    RBRACE          reduce using rule 330 (declarationStar -> declaration declarationStar .)


state 527

    (332) structBody -> LBRACE declarationStar RBRACE .

    PRIVATE         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    PROTECTED       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    PUBLIC          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    STATIC          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EXTERN          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    FINAL           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    AUTO            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    CONST           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    IMMUTABLE       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    CASE            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DEFAULT         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    IDENTIFIER      reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LBRACE          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    IF              reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    WHILE           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DO              reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    FOR             reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    FOREACH         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    FOREACH_REVERSE reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    SWITCH          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    CONTINUE        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    BREAK           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    RETURN          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    GOTO            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    WITH            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    AMPERSAND       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EXCLAMATION     reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    TIMES           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    PLUS            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    MINUS           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DOT             reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    PLUS_PLUS       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    ELLIPSIS        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LBRACKET        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    RANGE           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LPAREN          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DOLLAR          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    THIS            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    NULL            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    TRUE            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    FALSE           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    INUMBER         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DNUMBER         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LIT_CHAR        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    NEW             reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DELETE          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    CAST            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    FUNCTION        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    MIXIN           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    IMPORT          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LIT_STR         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    BOOL            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    SHORT           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    USHORT          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    INT             reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    UINT            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LONG            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    ULONG           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    CHAR            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    FLOAT           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    TYPEOF          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    ALIAS           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    ENUM            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    CLASS           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    TILDE           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    TYPEDEF         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    UNION           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    RBRACE          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    SEMICOLON       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    ELSE            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    CARET           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DIV             reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    MODULO          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    $end            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LEFT_SHIFT      reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    RIGHT_SHIFT     reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    IS_EQ           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    NOT_EQ          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    PIPE            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    QUESTION        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DOUBLE_PIPE     reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    ASSIGN          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_LEFT         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_RIGHT        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_PLUS         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_MINUS        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_TIMES        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_MODULO       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_AND_BIT      reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_DIV          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_OR_BIT       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    EQ_XOR_BIT      reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    RBRACKET        reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    COMMA           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LESS            reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LESS_EQ         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    GREATER         reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    GREATER_EQ      reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    IS_EQ_DIFF      reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    NOT_EQ_DIFF     reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LESS_EQ_DIFF    reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    LESS_DIFF       reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    GREATER_EQ_DIFF reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    GREATER_DIFF    reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    RPAREN          reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    COLON           reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)
    DOUBLE_QUOTE    reduce using rule 332 (structBody -> LBRACE declarationStar RBRACE .)


state 528

    (79) castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TIMES           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DIV             reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    MODULO          reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    PLUS            reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    MINUS           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TILDE           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IS_EQ           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    PIPE            reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    QUESTION        reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    ASSIGN          reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RANGE           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    COMMA           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RBRACKET        reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS            reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER         reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RPAREN          reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TYPEDEF         reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IDENTIFIER      reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RBRACE          reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    SEMICOLON       reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    $end            reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    COLON           reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LPAREN          reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 79 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]


state 529

    (78) castExpression -> CAST LPAREN type RPAREN unaryExpression .
    (390) unaryExpression -> unaryExpression . DOT newExpression
    (391) unaryExpression -> unaryExpression . DOT
    (394) unaryExpression -> unaryExpression . PLUS_PLUS
    (204) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (205) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TIMES           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DIV             reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    MODULO          reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    PLUS            reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    MINUS           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TILDE           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IS_EQ           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    PIPE            reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    QUESTION        reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    ASSIGN          reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RANGE           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    COMMA           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RBRACKET        reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS            reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER         reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RPAREN          reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TYPEDEF         reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IDENTIFIER      reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RBRACE          reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    SEMICOLON       reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    $end            reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    COLON           reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOUBLE_QUOTE    reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LPAREN          reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOT             shift and go to state 182
    PLUS_PLUS       shift and go to state 181
    LBRACKET        shift and go to state 180

  ! DOT             [ reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 78 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]


state 530

    (368) typeSuffix -> LBRACKET assignExpression RANGE assignExpression . RBRACKET

    RBRACKET        shift and go to state 607


state 531

    (373) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF . LBRACKET expression RBRACKET
    (374) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF . LBRACKET RETURN RBRACKET

    LBRACKET        shift and go to state 608


state 532

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON . typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON . typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (360) typeidExpression -> . TYPEID LBRACKET type RBRACKET
    (361) typeidExpression -> . TYPEID LBRACKET expression RBRACKET

    TYPEID          shift and go to state 609

    typeidExpression               shift and go to state 610

state 533

    (93) multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .

    SEMICOLON       reduce using rule 93 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    IF              reduce using rule 93 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LBRACE          reduce using rule 93 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)


state 534

    (239) parameterAttributeStar -> parameterAttribute parameterAttributeStar .

    CONST           reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    IMMUTABLE       reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    BOOL            reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    SHORT           reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    USHORT          reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    INT             reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    UINT            reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    LONG            reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    ULONG           reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    CHAR            reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    FLOAT           reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    DOT             reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    TYPEOF          reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    IDENTIFIER      reduce using rule 239 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)


state 535

    (241) parameter -> parameterAttributeStar type . parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type . parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
    (243) parameter -> parameterAttributeStar type . parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar type . parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type
    (245) parameter -> parameterAttributeStar type . parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar type . parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER
    (247) parameter -> parameterAttributeStar type . parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (248) parameter -> parameterAttributeStar type . parameterAttributeStar type ELLIPSIS parameterAttributeStar type
    (239) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (240) parameterAttributeStar -> . empty
    (249) parameterAttribute -> . typeConstructor
    (250) parameterAttribute -> . FINAL
    (251) parameterAttribute -> . AUTO
    (252) parameterAttribute -> . RETURN
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FINAL           shift and go to state 442
    AUTO            shift and go to state 443
    RETURN          shift and go to state 447
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    parameterAttribute             shift and go to state 445
    parameterAttributeStar         shift and go to state 611
    typeConstructor                shift and go to state 444
    empty                          shift and go to state 451

state 536

    (257) parameters -> LPAREN ELLIPSIS RPAREN .

    IMMUTABLE       reduce using rule 257 (parameters -> LPAREN ELLIPSIS RPAREN .)
    CONST           reduce using rule 257 (parameters -> LPAREN ELLIPSIS RPAREN .)
    RETURN          reduce using rule 257 (parameters -> LPAREN ELLIPSIS RPAREN .)
    SEMICOLON       reduce using rule 257 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LBRACE          reduce using rule 257 (parameters -> LPAREN ELLIPSIS RPAREN .)
    IF              reduce using rule 257 (parameters -> LPAREN ELLIPSIS RPAREN .)


state 537

    (255) parameters -> LPAREN parameter CommaParameterStar . COMMA ELLIPSIS RPAREN
    (256) parameters -> LPAREN parameter CommaParameterStar . RPAREN

    COMMA           shift and go to state 612
    RPAREN          shift and go to state 613


state 538

    (253) CommaParameterStar -> COMMA . parameter CommaParameterStar
    (241) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
    (243) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> . parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type
    (245) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER
    (247) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (248) parameter -> . parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type
    (239) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (240) parameterAttributeStar -> . empty
    (249) parameterAttribute -> . typeConstructor
    (250) parameterAttribute -> . FINAL
    (251) parameterAttribute -> . AUTO
    (252) parameterAttribute -> . RETURN
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FINAL           shift and go to state 442
    AUTO            shift and go to state 443
    RETURN          shift and go to state 447
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    parameterAttribute             shift and go to state 445
    parameterAttributeStar         shift and go to state 446
    typeConstructor                shift and go to state 444
    parameter                      shift and go to state 614
    empty                          shift and go to state 451

state 539

    (254) CommaParameterStar -> empty .

    COMMA           reduce using rule 254 (CommaParameterStar -> empty .)
    RPAREN          reduce using rule 254 (CommaParameterStar -> empty .)


state 540

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON . typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON . typeidExpression COLON TYPEID LBRACKET expression RBRACKET
    (360) typeidExpression -> . TYPEID LBRACKET type RBRACKET
    (361) typeidExpression -> . TYPEID LBRACKET expression RBRACKET

    TYPEID          shift and go to state 609

    typeidExpression               shift and go to state 615

state 541

    (206) comma_index -> COMMA index . comma_index
    (206) comma_index -> . COMMA index comma_index
    (207) comma_index -> . empty
    (407) empty -> .

    COMMA           shift and go to state 453
    RBRACKET        reduce using rule 407 (empty -> .)

    comma_index                    shift and go to state 616
    empty                          shift and go to state 455

state 542

    (205) indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .

    DOT             reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PLUS_PLUS       reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LBRACKET        reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    CARET           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TIMES           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DIV             reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MODULO          reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PLUS            reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MINUS           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TILDE           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LEFT_SHIFT      reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RIGHT_SHIFT     reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IS_EQ           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    NOT_EQ          reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    AMPERSAND       reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PIPE            reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    QUESTION        reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DOUBLE_PIPE     reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    ASSIGN          reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_LEFT         reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_RIGHT        reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_PLUS         reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_MINUS        reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_TIMES        reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_MODULO       reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_AND_BIT      reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_DIV          reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_OR_BIT       reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_XOR_BIT      reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    COLON           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    COMMA           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS            reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_EQ         reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER         reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_EQ      reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IS_EQ_DIFF      reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_DIFF       reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_DIFF    reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    SEMICOLON       reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RPAREN          reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    $end            reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RBRACKET        reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RANGE           reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TYPEDEF         reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IDENTIFIER      reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RBRACE          reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LPAREN          reduce using rule 205 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)


state 543

    (203) index -> assignExpression RANGE assignExpression .

    COMMA           reduce using rule 203 (index -> assignExpression RANGE assignExpression .)
    RBRACKET        reduce using rule 203 (index -> assignExpression RANGE assignExpression .)


state 544

    (336) ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .

    ASSIGN          reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_LEFT         reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_RIGHT        reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_PLUS         reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_MINUS        reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_TIMES        reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_MODULO       reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_AND_BIT      reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_DIV          reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_OR_BIT       reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_XOR_BIT      reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RBRACKET        reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    COMMA           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    SEMICOLON       reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RPAREN          reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    COLON           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOT             reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PLUS_PLUS       reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LBRACKET        reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    CARET           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TIMES           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DIV             reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MODULO          reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PLUS            reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MINUS           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TILDE           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    $end            reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LEFT_SHIFT      reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RIGHT_SHIFT     reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IS_EQ           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    NOT_EQ          reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    AMPERSAND       reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PIPE            reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    QUESTION        reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOUBLE_PIPE     reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS            reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_EQ         reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER         reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_EQ      reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IS_EQ_DIFF      reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    NOT_EQ_DIFF     reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_EQ_DIFF    reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_DIFF       reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_EQ_DIFF reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_DIFF    reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RANGE           reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TYPEDEF         reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IDENTIFIER      reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RBRACE          reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOUBLE_QUOTE    reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LPAREN          reduce using rule 336 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)


state 545

    (268) primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .

    DOT             reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LBRACKET        reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    CARET           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TIMES           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DIV             reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MODULO          reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PLUS            reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MINUS           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TILDE           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IS_EQ           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PIPE            reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    QUESTION        reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    ASSIGN          reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RBRACKET        reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    COMMA           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS            reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER         reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_DIFF       reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_DIFF    reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RPAREN          reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    $end            reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    COLON           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RANGE           reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TYPEDEF         reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RBRACE          reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DOUBLE_QUOTE    reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LPAREN          reduce using rule 268 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)


state 546

    (404) withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .

    RBRACE          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    PRIVATE         reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    PROTECTED       reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    PUBLIC          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    STATIC          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    EXTERN          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    FINAL           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    AUTO            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    CONST           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    CASE            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    DEFAULT         reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    LBRACE          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    IF              reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    WHILE           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    DO              reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    FOR             reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    FOREACH         reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    SWITCH          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    CONTINUE        reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    BREAK           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    RETURN          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    GOTO            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    WITH            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    AMPERSAND       reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    TIMES           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    PLUS            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    MINUS           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    DOT             reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    ELLIPSIS        reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    LBRACKET        reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    RANGE           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    LPAREN          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    DOLLAR          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    THIS            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    NULL            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    TRUE            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    FALSE           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    INUMBER         reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    DNUMBER         reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    NEW             reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    DELETE          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    CAST            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    FUNCTION        reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    MIXIN           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    IMPORT          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    LIT_STR         reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    BOOL            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    SHORT           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    USHORT          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    INT             reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    UINT            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    LONG            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    ULONG           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    CHAR            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    FLOAT           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    TYPEOF          reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    ALIAS           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    ENUM            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    CLASS           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    TILDE           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    TYPEDEF         reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    UNION           reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    SEMICOLON       reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)
    ELSE            reduce using rule 404 (withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault .)


state 547

    (157) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression . RANGE expression RBRACKET declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RANGE           shift and go to state 617
    COMMA           shift and go to state 250


state 548

    (156) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression . RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 618
    COMMA           shift and go to state 250


state 549

    (165) foreachTypeList -> foreachTypeList COMMA foreachType .

    SEMICOLON       reduce using rule 165 (foreachTypeList -> foreachTypeList COMMA foreachType .)
    COMMA           reduce using rule 165 (foreachTypeList -> foreachTypeList COMMA foreachType .)


state 550

    (340) type -> typeConstructors type2 typeSuffixStar .
    (341) type -> type2 typeSuffixStar .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 340 (type -> typeConstructors type2 typeSuffixStar .)
    IDENTIFIER      reduce using rule 340 (type -> typeConstructors type2 typeSuffixStar .)

  ! IDENTIFIER      [ reduce using rule 341 (type -> type2 typeSuffixStar .) ]


state 551

    (163) foreachType -> typeConstructors type IDENTIFIER .

    SEMICOLON       reduce using rule 163 (foreachType -> typeConstructors type IDENTIFIER .)
    COMMA           reduce using rule 163 (foreachType -> typeConstructors type IDENTIFIER .)


state 552

    (159) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression . RANGE expression RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RANGE           shift and go to state 619
    COMMA           shift and go to state 250


state 553

    (158) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression . RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 620
    COMMA           shift and go to state 250


state 554

    (153) forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON . RPAREN declarationOrStatement
    (155) forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON . expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RPAREN          shift and go to state 621
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 622
    addExpression                  shift and go to state 80

state 555

    (149) forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 623
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 556

    (151) forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression . RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 624
    COMMA           shift and go to state 250


state 557

    (152) forStatement -> FOR LPAREN declaration expression SEMICOLON . RPAREN declarationOrStatement
    (154) forStatement -> FOR LPAREN declaration expression SEMICOLON . expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RPAREN          shift and go to state 625
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 626

state 558

    (148) forStatement -> FOR LPAREN declaration SEMICOLON RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 627
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 559

    (150) forStatement -> FOR LPAREN declaration SEMICOLON expression . RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 628
    COMMA           shift and go to state 250


state 560

    (124) destructor -> TILDE THIS LPAREN RPAREN . multiple_memberFunctionAttribute functionBody
    (125) destructor -> TILDE THIS LPAREN RPAREN . multiple_memberFunctionAttribute SEMICOLON
    (93) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (94) multiple_memberFunctionAttribute -> . empty
    (212) memberFunctionAttribute -> . IMMUTABLE
    (213) memberFunctionAttribute -> . CONST
    (214) memberFunctionAttribute -> . RETURN
    (407) empty -> .

    IMMUTABLE       shift and go to state 440
    CONST           shift and go to state 436
    RETURN          shift and go to state 439
    SEMICOLON       reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)

    memberFunctionAttribute        shift and go to state 438
    empty                          shift and go to state 441
    multiple_memberFunctionAttribute shift and go to state 629

state 561

    (182) identifierChain -> identifierChain DOT IDENTIFIER .

    DOT             reduce using rule 182 (identifierChain -> identifierChain DOT IDENTIFIER .)
    COMMA           reduce using rule 182 (identifierChain -> identifierChain DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 182 (identifierChain -> identifierChain DOT IDENTIFIER .)
    COLON           reduce using rule 182 (identifierChain -> identifierChain DOT IDENTIFIER .)


state 562

    (195) importBindings -> singleImport COLON importBind .
    (196) importBindings -> singleImport COLON importBind . COLON importBind

    SEMICOLON       reduce using rule 195 (importBindings -> singleImport COLON importBind .)
    COLON           shift and go to state 630


state 563

    (193) importBind -> IDENTIFIER .
    (194) importBind -> IDENTIFIER . ASSIGN IDENTIFIER

    COLON           reduce using rule 193 (importBind -> IDENTIFIER .)
    SEMICOLON       reduce using rule 193 (importBind -> IDENTIFIER .)
    ASSIGN          shift and go to state 631


state 564

    (200) comma_singleImport -> COMMA singleImport . comma_singleImport
    (200) comma_singleImport -> . COMMA singleImport comma_singleImport
    (201) comma_singleImport -> . empty
    (407) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 482
    SEMICOLON       reduce using rule 407 (empty -> .)

  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    comma_singleImport             shift and go to state 632
    empty                          shift and go to state 484

state 565

    (198) importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .

    PRIVATE         reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    PROTECTED       reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    PUBLIC          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    STATIC          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    EXTERN          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FINAL           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    AUTO            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CONST           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IMMUTABLE       reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CASE            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DEFAULT         reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IDENTIFIER      reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LBRACE          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IF              reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    WHILE           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DO              reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FOR             reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FOREACH         reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FOREACH_REVERSE reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    SWITCH          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CONTINUE        reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    BREAK           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    RETURN          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    GOTO            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    WITH            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    AMPERSAND       reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    EXCLAMATION     reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TIMES           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    PLUS            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    MINUS           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DOT             reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    PLUS_PLUS       reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ELLIPSIS        reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LBRACKET        reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    RANGE           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LPAREN          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DOLLAR          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    THIS            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    NULL            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TRUE            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FALSE           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    INUMBER         reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DNUMBER         reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LIT_CHAR        reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    NEW             reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DELETE          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CAST            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FUNCTION        reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    MIXIN           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IMPORT          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LIT_STR         reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    BOOL            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    SHORT           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    USHORT          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    INT             reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UINT            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LONG            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ULONG           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CHAR            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FLOAT           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TYPEOF          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ALIAS           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ENUM            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CLASS           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TILDE           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TYPEDEF         reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UNION           reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    RBRACE          reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    SEMICOLON       reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ELSE            reduce using rule 198 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)


state 566

    (197) importDeclaration -> IMPORT singleImport comma_singleImport COMMA . importBindings SEMICOLON
    (195) importBindings -> . singleImport COLON importBind
    (196) importBindings -> . singleImport COLON importBind COLON importBind
    (304) singleImport -> . IDENTIFIER ASSIGN identifierChain
    (305) singleImport -> . identifierChain
    (181) identifierChain -> . IDENTIFIER
    (182) identifierChain -> . identifierChain DOT IDENTIFIER

    IDENTIFIER      shift and go to state 381

    importBindings                 shift and go to state 633
    identifierChain                shift and go to state 379
    singleImport                   shift and go to state 634

state 567

    (181) identifierChain -> IDENTIFIER .

    DOT             reduce using rule 181 (identifierChain -> IDENTIFIER .)
    COLON           reduce using rule 181 (identifierChain -> IDENTIFIER .)
    COMMA           reduce using rule 181 (identifierChain -> IDENTIFIER .)
    SEMICOLON       reduce using rule 181 (identifierChain -> IDENTIFIER .)


state 568

    (304) singleImport -> IDENTIFIER ASSIGN identifierChain .
    (182) identifierChain -> identifierChain . DOT IDENTIFIER

    COLON           reduce using rule 304 (singleImport -> IDENTIFIER ASSIGN identifierChain .)
    COMMA           reduce using rule 304 (singleImport -> IDENTIFIER ASSIGN identifierChain .)
    SEMICOLON       reduce using rule 304 (singleImport -> IDENTIFIER ASSIGN identifierChain .)
    DOT             shift and go to state 480


state 569

    (83) classDeclaration -> CLASS IDENTIFIER COLON baseClassList . structBody
    (65) baseClassList -> baseClassList . COMMA baseClass
    (332) structBody -> . LBRACE declarationStar RBRACE

    COMMA           shift and go to state 423
    LBRACE          shift and go to state 308

    structBody                     shift and go to state 635

state 570

    (171) functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute . SEMICOLON
    (172) functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute . functionBody
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 637
    LBRACE          shift and go to state 26

    functionBody                   shift and go to state 636
    blockStatement                 shift and go to state 3

state 571

    (131) anonymousEnumMember -> TYPEDEF IDENTIFIER . ASSIGN assignExpression

    ASSIGN          shift and go to state 638


state 572

    (132) anonymousEnumMember -> IDENTIFIER ASSIGN . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 639
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 573

    (134) anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember . RBRACE

    RBRACE          shift and go to state 640


state 574

    (136) multipleanonymousEnumMember -> anonymousEnumMember . multipleanonymousEnumMember
    (136) multipleanonymousEnumMember -> . anonymousEnumMember multipleanonymousEnumMember
    (137) multipleanonymousEnumMember -> . empty
    (131) anonymousEnumMember -> . TYPEDEF IDENTIFIER ASSIGN assignExpression
    (132) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (133) anonymousEnumMember -> . IDENTIFIER
    (407) empty -> .

    TYPEDEF         shift and go to state 490
    IDENTIFIER      shift and go to state 491
    RBRACE          reduce using rule 407 (empty -> .)

    multipleanonymousEnumMember    shift and go to state 641
    anonymousEnumMember            shift and go to state 574
    empty                          shift and go to state 575

state 575

    (137) multipleanonymousEnumMember -> empty .

    RBRACE          reduce using rule 137 (multipleanonymousEnumMember -> empty .)


state 576

    (135) anonymousEnumDeclaration -> ENUM COLON type LBRACE . anonymousEnumMember multipleanonymousEnumMember RBRACE
    (131) anonymousEnumMember -> . TYPEDEF IDENTIFIER ASSIGN assignExpression
    (132) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (133) anonymousEnumMember -> . IDENTIFIER

    TYPEDEF         shift and go to state 490
    IDENTIFIER      shift and go to state 491

    anonymousEnumMember            shift and go to state 642

state 577

    (139) enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF . SEMICOLON
    (140) enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF . enumBody
    (127) enumBody -> . DOUBLE_QUOTE enumMember DOUBLE_QUOTE
    (128) enumBody -> . DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE

    SEMICOLON       shift and go to state 643
    DOUBLE_QUOTE    shift and go to state 644

    enumBody                       shift and go to state 645

state 578

    (401) variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN . functionBody SEMICOLON
    (121) declarator -> IDENTIFIER ASSIGN . initializer
    (166) functionBody -> . blockStatement
    (208) initializer -> . VOID
    (209) initializer -> . nonVoidInitializer
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (233) nonVoidInitializer -> . assignExpression
    (234) nonVoidInitializer -> . arrayInitializer
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (24) arrayInitializer -> . LBRACKET RBRACKET
    (25) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

    VOID            shift and go to state 646
    LBRACE          shift and go to state 26
    LBRACKET        shift and go to state 647
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

    initializer                    shift and go to state 649
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    typeofExpression               shift and go to state 2
    blockStatement                 shift and go to state 3
    unaryExpression                shift and go to state 55
    indexExpression                shift and go to state 22
    arrayInitializer               shift and go to state 651
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type2                          shift and go to state 53
    typeConstructors               shift and go to state 10
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    LIT_STRPlus                    shift and go to state 45
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    nonVoidInitializer             shift and go to state 648
    deleteExpression               shift and go to state 31
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 650
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 652
    ternaryExpression              shift and go to state 75
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 579

    (398) CommaDeclarator -> COMMA . declarator CommaDeclarator
    (120) declarator -> . IDENTIFIER
    (121) declarator -> . IDENTIFIER ASSIGN initializer

    IDENTIFIER      shift and go to state 654

    declarator                     shift and go to state 653

state 580

    (400) variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator . SEMICOLON

    SEMICOLON       shift and go to state 655


state 581

    (399) CommaDeclarator -> empty .

    SEMICOLON       reduce using rule 399 (CommaDeclarator -> empty .)


state 582

    (5) aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .

    PRIVATE         reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    PROTECTED       reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    PUBLIC          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    STATIC          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    EXTERN          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FINAL           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    AUTO            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CONST           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IMMUTABLE       reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CASE            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DEFAULT         reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LBRACE          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IF              reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    WHILE           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DO              reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FOR             reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FOREACH         reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FOREACH_REVERSE reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    SWITCH          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CONTINUE        reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    BREAK           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    RETURN          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    GOTO            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    WITH            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    AMPERSAND       reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    EXCLAMATION     reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TIMES           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    PLUS            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    MINUS           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DOT             reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    PLUS_PLUS       reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ELLIPSIS        reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LBRACKET        reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    RANGE           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LPAREN          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DOLLAR          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    THIS            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    NULL            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TRUE            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FALSE           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    INUMBER         reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DNUMBER         reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LIT_CHAR        reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    NEW             reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DELETE          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CAST            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FUNCTION        reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    MIXIN           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IMPORT          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LIT_STR         reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    BOOL            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    SHORT           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    USHORT          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    INT             reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UINT            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LONG            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ULONG           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CHAR            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FLOAT           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TYPEOF          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ALIAS           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ENUM            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CLASS           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TILDE           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TYPEDEF         reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UNION           reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    RBRACE          reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    SEMICOLON       reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ELSE            reduce using rule 5 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)


state 583

    (7) comma_aliasInitializer -> COMMA aliasInitializer . comma_aliasInitializer
    (7) comma_aliasInitializer -> . COMMA aliasInitializer comma_aliasInitializer
    (8) comma_aliasInitializer -> . empty
    (407) empty -> .

    COMMA           shift and go to state 501
    SEMICOLON       reduce using rule 407 (empty -> .)

    comma_aliasInitializer         shift and go to state 656
    empty                          shift and go to state 502

state 584

    (11) aliasInitializer -> IDENTIFIER . ASSIGN multiplestorageClass type
    (12) aliasInitializer -> IDENTIFIER . ASSIGN functionLiteralExpression SEMICOLON

    ASSIGN          shift and go to state 506


state 585

    (6) aliasDeclaration -> ALIAS multiplestorageClass type identifierList . SEMICOLON
    (184) identifierList -> identifierList . COMMA IDENTIFIER

    SEMICOLON       shift and go to state 657
    COMMA           shift and go to state 658


state 586

    (183) identifierList -> IDENTIFIER .

    SEMICOLON       reduce using rule 183 (identifierList -> IDENTIFIER .)
    COMMA           reduce using rule 183 (identifierList -> IDENTIFIER .)


state 587

    (13) aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .

    PRIVATE         reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PROTECTED       reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PUBLIC          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    STATIC          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    EXTERN          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FINAL           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    AUTO            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CONST           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMMUTABLE       reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CASE            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DEFAULT         reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LBRACE          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IF              reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    WHILE           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DO              reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FOR             reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FOREACH         reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FOREACH_REVERSE reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SWITCH          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CONTINUE        reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    BREAK           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RETURN          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    GOTO            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    WITH            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    AMPERSAND       reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    EXCLAMATION     reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TIMES           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PLUS            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    MINUS           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DOT             reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PLUS_PLUS       reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ELLIPSIS        reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LBRACKET        reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RANGE           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LPAREN          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DOLLAR          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    THIS            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    NULL            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TRUE            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FALSE           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    INUMBER         reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DNUMBER         reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LIT_CHAR        reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    NEW             reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DELETE          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CAST            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FUNCTION        reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    MIXIN           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMPORT          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LIT_STR         reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    BOOL            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SHORT           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    USHORT          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    INT             reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UINT            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LONG            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ULONG           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CHAR            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FLOAT           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TYPEOF          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ALIAS           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ENUM            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CLASS           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TILDE           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TYPEDEF         reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UNION           reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RBRACE          reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SEMICOLON       reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ELSE            reduce using rule 13 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)


state 588

    (176) functionLiteralExpression -> IDENTIFIER . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 165
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 589

    (11) aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass . type
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    builtinType                    shift and go to state 40
    typeConstructors               shift and go to state 10
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructor                shift and go to state 161
    type                           shift and go to state 659
    symbol                         shift and go to state 91
    type2                          shift and go to state 53

state 590

    (12) aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression . SEMICOLON

    SEMICOLON       shift and go to state 660


state 591

    (89) constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    AMPERSAND       reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TIMES           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    PLUS            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    MINUS           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ELLIPSIS        reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    RANGE           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TYPEDEF         reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 89 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)


state 592

    (90) constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    AMPERSAND       reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TIMES           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    MINUS           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELLIPSIS        reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    RANGE           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEDEF         reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 90 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)


state 593

    (91) constructor -> THIS parameters multiple_memberFunctionAttribute constraint . functionBody
    (92) constructor -> THIS parameters multiple_memberFunctionAttribute constraint . SEMICOLON
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 662
    LBRACE          shift and go to state 26

    functionBody                   shift and go to state 661
    blockStatement                 shift and go to state 3

state 594

    (88) constraint -> IF . LPAREN expression RPAREN

    LPAREN          shift and go to state 663


state 595

    (169) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters . multiple_memberFunctionAttribute SEMICOLON
    (170) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters . multiple_memberFunctionAttribute functionBody
    (93) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (94) multiple_memberFunctionAttribute -> . empty
    (212) memberFunctionAttribute -> . IMMUTABLE
    (213) memberFunctionAttribute -> . CONST
    (214) memberFunctionAttribute -> . RETURN
    (407) empty -> .

    IMMUTABLE       shift and go to state 440
    CONST           shift and go to state 436
    RETURN          shift and go to state 439
    SEMICOLON       reduce using rule 407 (empty -> .)
    LBRACE          reduce using rule 407 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 664
    memberFunctionAttribute        shift and go to state 438
    empty                          shift and go to state 441

state 596

    (55) autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN . initializer comma_identifier_assign_initializer SEMICOLON
    (208) initializer -> . VOID
    (209) initializer -> . nonVoidInitializer
    (233) nonVoidInitializer -> . assignExpression
    (234) nonVoidInitializer -> . arrayInitializer
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (24) arrayInitializer -> . LBRACKET RBRACKET
    (25) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    VOID            shift and go to state 646
    LBRACKET        shift and go to state 647
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    initializer                    shift and go to state 665
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    type2                          shift and go to state 53
    arrayInitializer               shift and go to state 651
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    typeConstructors               shift and go to state 10
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    LIT_STRPlus                    shift and go to state 45
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    nonVoidInitializer             shift and go to state 648
    powExpression                  shift and go to state 49
    deleteExpression               shift and go to state 31
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 650
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    ternaryExpression              shift and go to state 75
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15

state 597

    (126) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression . RPAREN SEMICOLON
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 666
    COMMA           shift and go to state 250


state 598

    (403) whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .

    RBRACE          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    PRIVATE         reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    PROTECTED       reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    PUBLIC          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    STATIC          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    EXTERN          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    FINAL           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    AUTO            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    CONST           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    IMMUTABLE       reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    CASE            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    DEFAULT         reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    IDENTIFIER      reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    LBRACE          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    IF              reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    WHILE           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    DO              reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    FOR             reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    FOREACH         reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    SWITCH          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    CONTINUE        reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    BREAK           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    RETURN          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    GOTO            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    WITH            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    AMPERSAND       reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    EXCLAMATION     reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    TIMES           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    PLUS            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    MINUS           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    DOT             reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    PLUS_PLUS       reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    ELLIPSIS        reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    LBRACKET        reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    RANGE           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    LPAREN          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    DOLLAR          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    THIS            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    NULL            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    TRUE            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    FALSE           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    INUMBER         reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    DNUMBER         reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    LIT_CHAR        reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    NEW             reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    DELETE          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    CAST            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    FUNCTION        reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    MIXIN           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    IMPORT          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    LIT_STR         reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    BOOL            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    SHORT           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    USHORT          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    INT             reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    UINT            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    LONG            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    ULONG           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    CHAR            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    FLOAT           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    TYPEOF          reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    ALIAS           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    ENUM            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    CLASS           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    TILDE           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    TYPEDEF         reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    UNION           reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    SEMICOLON       reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)
    ELSE            reduce using rule 403 (whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement .)


state 599

    (75) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE . assignExpression COLON declarationsAndStatements
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    indexExpression                shift and go to state 22
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type2                          shift and go to state 53
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 667
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 600

    (333) switchStatement -> SWITCH LBRACKET expression RBRACKET statement .

    RBRACE          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    PRIVATE         reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    PROTECTED       reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    PUBLIC          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    STATIC          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    EXTERN          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    FINAL           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    AUTO            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    CONST           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    IMMUTABLE       reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    CASE            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    DEFAULT         reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    IDENTIFIER      reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    LBRACE          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    IF              reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    WHILE           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    DO              reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    FOR             reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    FOREACH         reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    FOREACH_REVERSE reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    SWITCH          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    CONTINUE        reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    BREAK           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    RETURN          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    GOTO            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    WITH            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    AMPERSAND       reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    EXCLAMATION     reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    TIMES           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    PLUS            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    MINUS           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    DOT             reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    PLUS_PLUS       reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    ELLIPSIS        reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    LBRACKET        reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    RANGE           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    LPAREN          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    DOLLAR          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    THIS            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    NULL            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    TRUE            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    FALSE           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    INUMBER         reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    DNUMBER         reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    LIT_CHAR        reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    NEW             reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    DELETE          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    CAST            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    FUNCTION        reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    MIXIN           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    IMPORT          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    LIT_STR         reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    BOOL            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    SHORT           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    USHORT          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    INT             reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    UINT            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    LONG            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    ULONG           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    CHAR            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    FLOAT           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    TYPEOF          reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    ALIAS           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    ENUM            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    CLASS           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    TILDE           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    TYPEDEF         reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    UNION           reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    SEMICOLON       reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)
    ELSE            reduce using rule 333 (switchStatement -> SWITCH LBRACKET expression RBRACKET statement .)


state 601

    (99) multiple_declaration -> declaration multiple_declaration .

    RBRACE          reduce using rule 99 (multiple_declaration -> declaration multiple_declaration .)


state 602

    (98) declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .

    RBRACE          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PRIVATE         reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PROTECTED       reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PUBLIC          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    STATIC          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    EXTERN          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FINAL           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    AUTO            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CONST           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IMMUTABLE       reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CASE            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DEFAULT         reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IDENTIFIER      reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LBRACE          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IF              reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    WHILE           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DO              reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FOR             reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FOREACH         reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FOREACH_REVERSE reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    SWITCH          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CONTINUE        reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    BREAK           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    RETURN          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    GOTO            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    WITH            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    AMPERSAND       reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    EXCLAMATION     reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TIMES           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PLUS            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    MINUS           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DOT             reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PLUS_PLUS       reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ELLIPSIS        reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LBRACKET        reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    RANGE           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LPAREN          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DOLLAR          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    THIS            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    NULL            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TRUE            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FALSE           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    INUMBER         reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DNUMBER         reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LIT_CHAR        reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    NEW             reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DELETE          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CAST            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FUNCTION        reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    MIXIN           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IMPORT          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LIT_STR         reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    BOOL            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    SHORT           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    USHORT          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    INT             reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UINT            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LONG            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ULONG           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CHAR            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FLOAT           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TYPEOF          reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ALIAS           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ENUM            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CLASS           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TILDE           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TYPEDEF         reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UNION           reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    SEMICOLON       reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ELSE            reduce using rule 98 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)


state 603

    (190) ifCondition -> AUTO IDENTIFIER ASSIGN . expression
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 668

state 604

    (188) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .
    (189) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement . ELSE declarationOrStatement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    STATIC          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FINAL           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    AUTO            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CONST           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CASE            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IF              reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    WHILE           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DO              reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FOR             reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    BREAK           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    RETURN          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    GOTO            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    WITH            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TIMES           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PLUS            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    MINUS           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DOT             reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    RANGE           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    THIS            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    NULL            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TRUE            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FALSE           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    NEW             reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DELETE          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CAST            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    BOOL            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    SHORT           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    USHORT          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    INT             reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UINT            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LONG            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ULONG           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CHAR            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ENUM            reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CLASS           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TILDE           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UNION           reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ELSE            shift and go to state 669

  ! ELSE            [ reduce using rule 188 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .) ]


state 605

    (191) ifCondition -> TYPEDEF IDENTIFIER ASSIGN . expression
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 670

state 606

    (228) newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .

    DOT             reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    PLUS_PLUS       reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    LBRACKET        reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    CARET           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    TIMES           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    DIV             reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    MODULO          reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    PLUS            reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    MINUS           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    TILDE           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    LEFT_SHIFT      reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    RIGHT_SHIFT     reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    IS_EQ           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    NOT_EQ          reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    AMPERSAND       reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    PIPE            reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    DOUBLE_AMPERSAND reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    QUESTION        reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    DOUBLE_PIPE     reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    ASSIGN          reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_LEFT         reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_RIGHT        reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_PLUS         reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_MINUS        reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_TIMES        reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_MODULO       reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_AND_BIT      reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_DIV          reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_OR_BIT       reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    EQ_XOR_BIT      reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    COLON           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    COMMA           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    RBRACKET        reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    LESS            reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    LESS_EQ         reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    GREATER         reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    GREATER_EQ      reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    IS_EQ_DIFF      reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    NOT_EQ_DIFF     reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    LESS_EQ_DIFF    reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    LESS_DIFF       reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    GREATER_EQ_DIFF reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    GREATER_DIFF    reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    RPAREN          reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    $end            reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    SEMICOLON       reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    RANGE           reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    TYPEDEF         reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    IDENTIFIER      reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    RBRACE          reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    DOUBLE_QUOTE    reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)
    LPAREN          reduce using rule 228 (newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody .)


state 607

    (368) typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .

    TIMES           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LBRACKET        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DELEGATE        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    FUNCTION        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DOT             reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LPAREN          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    CARET           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DIV             reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    MODULO          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    PLUS            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    MINUS           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    TILDE           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    $end            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IS_EQ           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    PIPE            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    QUESTION        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    ASSIGN          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RBRACKET        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    COMMA           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER         reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RPAREN          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    COLON           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RANGE           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    TYPEDEF         reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RBRACE          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LBRACE          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    FINAL           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    AUTO            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RETURN          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    CONST           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IMMUTABLE       reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    BOOL            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    SHORT           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    USHORT          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    INT             reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    UINT            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LONG            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    ULONG           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    CHAR            reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    FLOAT           reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    TYPEOF          reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 368 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)


state 608

    (373) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET . expression RBRACKET
    (374) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET . RETURN RBRACKET
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RETURN          shift and go to state 671
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 672

state 609

    (360) typeidExpression -> TYPEID . LBRACKET type RBRACKET
    (361) typeidExpression -> TYPEID . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 673


state 610

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression . COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression . COLON TYPEID LBRACKET expression RBRACKET

    COLON           shift and go to state 674


state 611

    (241) parameter -> parameterAttributeStar type parameterAttributeStar . type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type parameterAttributeStar . type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
    (243) parameter -> parameterAttributeStar type parameterAttributeStar . type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar type parameterAttributeStar . type IDENTIFIER ELLIPSIS parameterAttributeStar type
    (245) parameter -> parameterAttributeStar type parameterAttributeStar . type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar type parameterAttributeStar . type ELLIPSIS parameterAttributeStar type IDENTIFIER
    (247) parameter -> parameterAttributeStar type parameterAttributeStar . type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (248) parameter -> parameterAttributeStar type parameterAttributeStar . type ELLIPSIS parameterAttributeStar type
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 10
    type                           shift and go to state 675
    type2                          shift and go to state 53

state 612

    (255) parameters -> LPAREN parameter CommaParameterStar COMMA . ELLIPSIS RPAREN

    ELLIPSIS        shift and go to state 676


state 613

    (256) parameters -> LPAREN parameter CommaParameterStar RPAREN .

    IMMUTABLE       reduce using rule 256 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    CONST           reduce using rule 256 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    RETURN          reduce using rule 256 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    SEMICOLON       reduce using rule 256 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LBRACE          reduce using rule 256 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    IF              reduce using rule 256 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)


state 614

    (253) CommaParameterStar -> COMMA parameter . CommaParameterStar
    (253) CommaParameterStar -> . COMMA parameter CommaParameterStar
    (254) CommaParameterStar -> . empty
    (407) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 538
    RPAREN          reduce using rule 407 (empty -> .)

  ! COMMA           [ reduce using rule 407 (empty -> .) ]

    CommaParameterStar             shift and go to state 677
    empty                          shift and go to state 539

state 615

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression . COLON TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression . COLON TYPEID LBRACKET expression RBRACKET

    COLON           shift and go to state 678


state 616

    (206) comma_index -> COMMA index comma_index .

    RBRACKET        reduce using rule 206 (comma_index -> COMMA index comma_index .)


state 617

    (157) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE . expression RBRACKET declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 679

state 618

    (156) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 680
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 619

    (159) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE . expression RPAREN declarationOrStatement
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 681

state 620

    (158) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 682
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 621

    (153) forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 683
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 622

    (155) forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression . RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 684
    COMMA           shift and go to state 250


state 623

    (149) forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .

    RBRACE          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    STATIC          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    FINAL           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    AUTO            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    CONST           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    CASE            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    IF              reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    WHILE           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    DO              reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    FOR             reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    BREAK           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    RETURN          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    GOTO            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    WITH            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    TIMES           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    PLUS            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    MINUS           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    DOT             reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    RANGE           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    THIS            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    NULL            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    TRUE            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    FALSE           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    NEW             reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    DELETE          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    CAST            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    BOOL            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    SHORT           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    USHORT          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    INT             reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    UINT            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    LONG            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    ULONG           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    CHAR            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    ENUM            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    CLASS           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    TILDE           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    UNION           reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)
    ELSE            reduce using rule 149 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement .)


state 624

    (151) forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 685
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 625

    (152) forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 686
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 626

    (154) forStatement -> FOR LPAREN declaration expression SEMICOLON expression . RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 687
    COMMA           shift and go to state 250


state 627

    (148) forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .

    RBRACE          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    STATIC          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    FINAL           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    AUTO            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    CONST           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    CASE            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    IF              reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    WHILE           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    DO              reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    FOR             reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    BREAK           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    RETURN          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    GOTO            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    WITH            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    TIMES           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    PLUS            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    MINUS           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    DOT             reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    RANGE           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    THIS            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    NULL            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    TRUE            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    FALSE           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    NEW             reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    DELETE          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    CAST            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    BOOL            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    SHORT           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    USHORT          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    INT             reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    UINT            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    LONG            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    ULONG           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    CHAR            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    ENUM            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    CLASS           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    TILDE           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    UNION           reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)
    ELSE            reduce using rule 148 (forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement .)


state 628

    (150) forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 688
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 629

    (124) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute . functionBody
    (125) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute . SEMICOLON
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 690
    LBRACE          shift and go to state 26

    functionBody                   shift and go to state 689
    blockStatement                 shift and go to state 3

state 630

    (196) importBindings -> singleImport COLON importBind COLON . importBind
    (193) importBind -> . IDENTIFIER
    (194) importBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 563

    importBind                     shift and go to state 691

state 631

    (194) importBind -> IDENTIFIER ASSIGN . IDENTIFIER

    IDENTIFIER      shift and go to state 692


state 632

    (200) comma_singleImport -> COMMA singleImport comma_singleImport .

    COMMA           reduce using rule 200 (comma_singleImport -> COMMA singleImport comma_singleImport .)
    SEMICOLON       reduce using rule 200 (comma_singleImport -> COMMA singleImport comma_singleImport .)


state 633

    (197) importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings . SEMICOLON

    SEMICOLON       shift and go to state 693


state 634

    (195) importBindings -> singleImport . COLON importBind
    (196) importBindings -> singleImport . COLON importBind COLON importBind

    COLON           shift and go to state 481


state 635

    (83) classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .

    PRIVATE         reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    PROTECTED       reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    PUBLIC          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    STATIC          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    EXTERN          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FINAL           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    AUTO            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CONST           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IMMUTABLE       reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CASE            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DEFAULT         reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IDENTIFIER      reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LBRACE          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IF              reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    WHILE           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DO              reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FOR             reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FOREACH         reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FOREACH_REVERSE reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    SWITCH          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CONTINUE        reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    BREAK           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    RETURN          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    GOTO            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    WITH            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    AMPERSAND       reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    EXCLAMATION     reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TIMES           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    PLUS            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    MINUS           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DOT             reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    PLUS_PLUS       reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ELLIPSIS        reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LBRACKET        reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    RANGE           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LPAREN          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DOLLAR          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    THIS            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    NULL            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TRUE            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FALSE           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    INUMBER         reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DNUMBER         reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LIT_CHAR        reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    NEW             reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DELETE          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CAST            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FUNCTION        reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    MIXIN           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IMPORT          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LIT_STR         reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    BOOL            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    SHORT           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    USHORT          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    INT             reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UINT            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LONG            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ULONG           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CHAR            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FLOAT           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TYPEOF          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ALIAS           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ENUM            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CLASS           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TILDE           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TYPEDEF         reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UNION           reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    RBRACE          reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    SEMICOLON       reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ELSE            reduce using rule 83 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)


state 636

    (172) functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    AMPERSAND       reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TIMES           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PLUS            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MINUS           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ELLIPSIS        reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RANGE           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TYPEDEF         reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 172 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)


state 637

    (171) functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    AMPERSAND       reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TIMES           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MINUS           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELLIPSIS        reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RANGE           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEDEF         reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 171 (functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)


state 638

    (131) anonymousEnumMember -> TYPEDEF IDENTIFIER ASSIGN . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 694
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 639

    (132) anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .

    TYPEDEF         reduce using rule 132 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    IDENTIFIER      reduce using rule 132 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    RBRACE          reduce using rule 132 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)


state 640

    (134) anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .

    PRIVATE         reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PROTECTED       reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PUBLIC          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    STATIC          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    EXTERN          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FINAL           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    AUTO            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CONST           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IMMUTABLE       reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CASE            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DEFAULT         reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IDENTIFIER      reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LBRACE          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IF              reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    WHILE           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DO              reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOR             reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOREACH         reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOREACH_REVERSE reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SWITCH          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CONTINUE        reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    BREAK           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RETURN          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    GOTO            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    WITH            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    AMPERSAND       reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    EXCLAMATION     reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TIMES           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PLUS            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    MINUS           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DOT             reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PLUS_PLUS       reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ELLIPSIS        reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LBRACKET        reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RANGE           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LPAREN          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DOLLAR          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    THIS            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    NULL            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TRUE            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FALSE           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    INUMBER         reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DNUMBER         reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LIT_CHAR        reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    NEW             reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DELETE          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CAST            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FUNCTION        reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    MIXIN           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IMPORT          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LIT_STR         reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    BOOL            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SHORT           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    USHORT          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    INT             reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UINT            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LONG            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ULONG           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CHAR            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FLOAT           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TYPEOF          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ALIAS           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ENUM            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CLASS           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TILDE           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TYPEDEF         reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UNION           reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RBRACE          reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SEMICOLON       reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ELSE            reduce using rule 134 (anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)


state 641

    (136) multipleanonymousEnumMember -> anonymousEnumMember multipleanonymousEnumMember .

    RBRACE          reduce using rule 136 (multipleanonymousEnumMember -> anonymousEnumMember multipleanonymousEnumMember .)


state 642

    (135) anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember . multipleanonymousEnumMember RBRACE
    (136) multipleanonymousEnumMember -> . anonymousEnumMember multipleanonymousEnumMember
    (137) multipleanonymousEnumMember -> . empty
    (131) anonymousEnumMember -> . TYPEDEF IDENTIFIER ASSIGN assignExpression
    (132) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (133) anonymousEnumMember -> . IDENTIFIER
    (407) empty -> .

    TYPEDEF         shift and go to state 490
    IDENTIFIER      shift and go to state 491
    RBRACE          reduce using rule 407 (empty -> .)

    multipleanonymousEnumMember    shift and go to state 695
    anonymousEnumMember            shift and go to state 574
    empty                          shift and go to state 575

state 643

    (139) enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .

    PRIVATE         reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    PROTECTED       reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    PUBLIC          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    STATIC          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    EXTERN          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    FINAL           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    AUTO            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    CONST           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    IMMUTABLE       reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    CASE            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    DEFAULT         reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    IDENTIFIER      reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    LBRACE          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    IF              reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    WHILE           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    DO              reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    FOR             reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    FOREACH         reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    FOREACH_REVERSE reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    SWITCH          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    CONTINUE        reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    BREAK           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    RETURN          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    GOTO            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    WITH            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    AMPERSAND       reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    EXCLAMATION     reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    TIMES           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    PLUS            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    MINUS           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    DOT             reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    PLUS_PLUS       reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    ELLIPSIS        reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    LBRACKET        reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    RANGE           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    LPAREN          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    DOLLAR          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    THIS            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    NULL            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    TRUE            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    FALSE           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    INUMBER         reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    DNUMBER         reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    LIT_CHAR        reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    NEW             reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    DELETE          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    CAST            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    FUNCTION        reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    MIXIN           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    IMPORT          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    LIT_STR         reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    BOOL            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    SHORT           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    USHORT          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    INT             reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    UINT            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    LONG            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    ULONG           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    CHAR            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    FLOAT           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    TYPEOF          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    ALIAS           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    ENUM            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    CLASS           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    TILDE           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    TYPEDEF         reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    UNION           reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    RBRACE          reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    SEMICOLON       reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)
    ELSE            reduce using rule 139 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON .)


state 644

    (127) enumBody -> DOUBLE_QUOTE . enumMember DOUBLE_QUOTE
    (128) enumBody -> DOUBLE_QUOTE . enumMember comma_enumMember DOUBLE_QUOTE
    (141) enumMember -> . IDENTIFIER
    (142) enumMember -> . IDENTIFIER ASSIGN assignExpression

    IDENTIFIER      shift and go to state 697

    enumMember                     shift and go to state 696

state 645

    (140) enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .

    PRIVATE         reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    PROTECTED       reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    PUBLIC          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    STATIC          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    EXTERN          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    FINAL           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    AUTO            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    CONST           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    IMMUTABLE       reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    CASE            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    DEFAULT         reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    IDENTIFIER      reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    LBRACE          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    IF              reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    WHILE           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    DO              reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    FOR             reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    FOREACH         reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    FOREACH_REVERSE reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    SWITCH          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    CONTINUE        reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    BREAK           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    RETURN          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    GOTO            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    WITH            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    AMPERSAND       reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    EXCLAMATION     reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    TIMES           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    PLUS            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    MINUS           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    DOT             reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    PLUS_PLUS       reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    ELLIPSIS        reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    LBRACKET        reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    RANGE           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    LPAREN          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    DOLLAR          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    THIS            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    NULL            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    TRUE            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    FALSE           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    INUMBER         reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    DNUMBER         reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    LIT_CHAR        reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    NEW             reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    DELETE          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    CAST            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    FUNCTION        reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    MIXIN           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    IMPORT          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    LIT_STR         reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    BOOL            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    SHORT           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    USHORT          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    INT             reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    UINT            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    LONG            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    ULONG           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    CHAR            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    FLOAT           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    TYPEOF          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    ALIAS           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    ENUM            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    CLASS           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    TILDE           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    TYPEDEF         reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    UNION           reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    RBRACE          reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    SEMICOLON       reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)
    ELSE            reduce using rule 140 (enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody .)


state 646

    (208) initializer -> VOID .

    COMMA           reduce using rule 208 (initializer -> VOID .)
    SEMICOLON       reduce using rule 208 (initializer -> VOID .)


state 647

    (24) arrayInitializer -> LBRACKET . RBRACKET
    (25) arrayInitializer -> LBRACKET . arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (389) unaryExpression -> LBRACKET . TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (28) arrayLiteral -> LBRACKET . RBRACKET
    (29) arrayLiteral -> LBRACKET . argumentList RBRACKET
    (30) arrayMemberInitialization -> . assignExpression COLON nonVoidInitializer
    (31) arrayMemberInitialization -> . nonVoidInitializer
    (18) argumentList -> . assignExpression
    (19) argumentList -> . argumentList comma_assign
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (233) nonVoidInitializer -> . assignExpression
    (234) nonVoidInitializer -> . arrayInitializer
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (24) arrayInitializer -> . LBRACKET RBRACKET
    (25) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    RBRACKET        shift and go to state 701
    TYPEDEF         shift and go to state 81
    LBRACKET        shift and go to state 647
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    argumentList                   shift and go to state 76
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    arrayInitializer               shift and go to state 651
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    arrayMemberInitialization      shift and go to state 699
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    LIT_STRPlus                    shift and go to state 45
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    nonVoidInitializer             shift and go to state 698
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 700
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    typeConstructor                shift and go to state 15
    ternaryExpression              shift and go to state 75
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49

state 648

    (209) initializer -> nonVoidInitializer .

    COMMA           reduce using rule 209 (initializer -> nonVoidInitializer .)
    SEMICOLON       reduce using rule 209 (initializer -> nonVoidInitializer .)


state 649

    (121) declarator -> IDENTIFIER ASSIGN initializer .

    COMMA           reduce using rule 121 (declarator -> IDENTIFIER ASSIGN initializer .)
    SEMICOLON       reduce using rule 121 (declarator -> IDENTIFIER ASSIGN initializer .)


state 650

    (233) nonVoidInitializer -> assignExpression .

    COMMA           reduce using rule 233 (nonVoidInitializer -> assignExpression .)
    SEMICOLON       reduce using rule 233 (nonVoidInitializer -> assignExpression .)
    RBRACKET        reduce using rule 233 (nonVoidInitializer -> assignExpression .)


state 651

    (234) nonVoidInitializer -> arrayInitializer .

    COMMA           reduce using rule 234 (nonVoidInitializer -> arrayInitializer .)
    RBRACKET        reduce using rule 234 (nonVoidInitializer -> arrayInitializer .)
    SEMICOLON       reduce using rule 234 (nonVoidInitializer -> arrayInitializer .)


state 652

    (401) variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody . SEMICOLON
    (175) functionLiteralExpression -> functionBody .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 702
    DOT             reduce using rule 175 (functionLiteralExpression -> functionBody .)
    PLUS_PLUS       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LBRACKET        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    CARET           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    TIMES           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    DIV             reduce using rule 175 (functionLiteralExpression -> functionBody .)
    MODULO          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    PLUS            reduce using rule 175 (functionLiteralExpression -> functionBody .)
    MINUS           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    TILDE           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LEFT_SHIFT      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    RIGHT_SHIFT     reduce using rule 175 (functionLiteralExpression -> functionBody .)
    IS_EQ           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    NOT_EQ          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    AMPERSAND       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    PIPE            reduce using rule 175 (functionLiteralExpression -> functionBody .)
    DOUBLE_AMPERSAND reduce using rule 175 (functionLiteralExpression -> functionBody .)
    QUESTION        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    DOUBLE_PIPE     reduce using rule 175 (functionLiteralExpression -> functionBody .)
    ASSIGN          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_LEFT         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_RIGHT        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_PLUS         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_MINUS        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_TIMES        reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_MODULO       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_AND_BIT      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_DIV          reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_OR_BIT       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    EQ_XOR_BIT      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    COMMA           reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS            reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS_EQ         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER         reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER_EQ      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    IS_EQ_DIFF      reduce using rule 175 (functionLiteralExpression -> functionBody .)
    NOT_EQ_DIFF     reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS_EQ_DIFF    reduce using rule 175 (functionLiteralExpression -> functionBody .)
    LESS_DIFF       reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER_EQ_DIFF reduce using rule 175 (functionLiteralExpression -> functionBody .)
    GREATER_DIFF    reduce using rule 175 (functionLiteralExpression -> functionBody .)

  ! SEMICOLON       [ reduce using rule 175 (functionLiteralExpression -> functionBody .) ]


state 653

    (398) CommaDeclarator -> COMMA declarator . CommaDeclarator
    (398) CommaDeclarator -> . COMMA declarator CommaDeclarator
    (399) CommaDeclarator -> . empty
    (407) empty -> .

    COMMA           shift and go to state 579
    SEMICOLON       reduce using rule 407 (empty -> .)

    CommaDeclarator                shift and go to state 703
    empty                          shift and go to state 581

state 654

    (120) declarator -> IDENTIFIER .
    (121) declarator -> IDENTIFIER . ASSIGN initializer

    COMMA           reduce using rule 120 (declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 120 (declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 704


state 655

    (400) variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .

    PRIVATE         reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    PROTECTED       reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    PUBLIC          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    STATIC          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    EXTERN          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    FINAL           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    AUTO            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    CONST           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    IMMUTABLE       reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    CASE            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    DEFAULT         reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    IDENTIFIER      reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    LBRACE          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    IF              reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    WHILE           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    DO              reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    FOR             reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    FOREACH         reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    FOREACH_REVERSE reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    SWITCH          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    CONTINUE        reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    BREAK           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    RETURN          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    GOTO            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    WITH            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    AMPERSAND       reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    EXCLAMATION     reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    TIMES           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    PLUS            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    MINUS           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    DOT             reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    PLUS_PLUS       reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    ELLIPSIS        reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    LBRACKET        reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    RANGE           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    LPAREN          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    DOLLAR          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    THIS            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    NULL            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    TRUE            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    FALSE           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    INUMBER         reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    DNUMBER         reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    LIT_CHAR        reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    NEW             reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    DELETE          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    CAST            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    FUNCTION        reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    MIXIN           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    IMPORT          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    LIT_STR         reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    BOOL            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    SHORT           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    USHORT          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    INT             reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    UINT            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    LONG            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    ULONG           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    CHAR            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    FLOAT           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    TYPEOF          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    ALIAS           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    ENUM            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    CLASS           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    TILDE           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    TYPEDEF         reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    UNION           reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    RBRACE          reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    SEMICOLON       reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)
    ELSE            reduce using rule 400 (variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON .)


state 656

    (7) comma_aliasInitializer -> COMMA aliasInitializer comma_aliasInitializer .

    SEMICOLON       reduce using rule 7 (comma_aliasInitializer -> COMMA aliasInitializer comma_aliasInitializer .)


state 657

    (6) aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .

    PRIVATE         reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    PROTECTED       reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    PUBLIC          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    STATIC          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    EXTERN          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    FINAL           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    AUTO            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    CONST           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    IMMUTABLE       reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    CASE            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    DEFAULT         reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    LBRACE          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    IF              reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    WHILE           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    DO              reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    FOR             reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    FOREACH         reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    FOREACH_REVERSE reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    SWITCH          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    CONTINUE        reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    BREAK           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    RETURN          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    GOTO            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    WITH            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    AMPERSAND       reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    EXCLAMATION     reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    TIMES           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    PLUS            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    MINUS           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    DOT             reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    PLUS_PLUS       reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    ELLIPSIS        reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    LBRACKET        reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    RANGE           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    LPAREN          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    DOLLAR          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    THIS            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    NULL            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    TRUE            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    FALSE           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    INUMBER         reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    DNUMBER         reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    LIT_CHAR        reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    NEW             reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    DELETE          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    CAST            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    FUNCTION        reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    MIXIN           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    IMPORT          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    LIT_STR         reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    BOOL            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    SHORT           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    USHORT          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    INT             reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    UINT            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    LONG            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    ULONG           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    CHAR            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    FLOAT           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    TYPEOF          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    ALIAS           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    ENUM            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    CLASS           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    TILDE           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    TYPEDEF         reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    UNION           reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    RBRACE          reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    SEMICOLON       reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)
    ELSE            reduce using rule 6 (aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON .)


state 658

    (184) identifierList -> identifierList COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 705


state 659

    (11) aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type .

    COMMA           reduce using rule 11 (aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type .)
    SEMICOLON       reduce using rule 11 (aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type .)


state 660

    (12) aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON .

    COMMA           reduce using rule 12 (aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON .)
    SEMICOLON       reduce using rule 12 (aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON .)


state 661

    (91) constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .

    PRIVATE         reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    PROTECTED       reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    PUBLIC          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    STATIC          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    EXTERN          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FINAL           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    AUTO            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CONST           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IMMUTABLE       reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CASE            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DEFAULT         reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IDENTIFIER      reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LBRACE          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IF              reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    WHILE           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DO              reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FOR             reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FOREACH         reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FOREACH_REVERSE reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    SWITCH          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CONTINUE        reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    BREAK           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    RETURN          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    GOTO            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    WITH            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    AMPERSAND       reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    EXCLAMATION     reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TIMES           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    PLUS            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    MINUS           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DOT             reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    PLUS_PLUS       reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ELLIPSIS        reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LBRACKET        reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    RANGE           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LPAREN          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DOLLAR          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    THIS            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    NULL            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TRUE            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FALSE           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    INUMBER         reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DNUMBER         reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LIT_CHAR        reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    NEW             reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DELETE          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CAST            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FUNCTION        reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    MIXIN           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IMPORT          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LIT_STR         reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    BOOL            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    SHORT           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    USHORT          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    INT             reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UINT            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LONG            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ULONG           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CHAR            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FLOAT           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TYPEOF          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ALIAS           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ENUM            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CLASS           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TILDE           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TYPEDEF         reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UNION           reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    RBRACE          reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    SEMICOLON       reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ELSE            reduce using rule 91 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)


state 662

    (92) constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .

    PRIVATE         reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    PROTECTED       reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    PUBLIC          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    STATIC          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    EXTERN          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FINAL           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    AUTO            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CONST           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IMMUTABLE       reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CASE            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DEFAULT         reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IDENTIFIER      reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LBRACE          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IF              reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    WHILE           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DO              reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FOR             reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FOREACH         reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FOREACH_REVERSE reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    SWITCH          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CONTINUE        reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    BREAK           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    RETURN          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    GOTO            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    WITH            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    AMPERSAND       reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    EXCLAMATION     reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TIMES           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    PLUS            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    MINUS           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DOT             reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    PLUS_PLUS       reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ELLIPSIS        reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LBRACKET        reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    RANGE           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LPAREN          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DOLLAR          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    THIS            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    NULL            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TRUE            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FALSE           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    INUMBER         reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DNUMBER         reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LIT_CHAR        reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    NEW             reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DELETE          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CAST            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FUNCTION        reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    MIXIN           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IMPORT          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LIT_STR         reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    BOOL            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    SHORT           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    USHORT          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    INT             reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UINT            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LONG            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ULONG           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CHAR            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FLOAT           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TYPEOF          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ALIAS           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ENUM            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CLASS           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TILDE           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TYPEDEF         reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UNION           reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    RBRACE          reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    SEMICOLON       reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ELSE            reduce using rule 92 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)


state 663

    (88) constraint -> IF LPAREN . expression RPAREN
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 706

state 664

    (169) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute . SEMICOLON
    (170) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute . functionBody
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 708
    LBRACE          shift and go to state 26

    functionBody                   shift and go to state 707
    blockStatement                 shift and go to state 3

state 665

    (55) autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer . comma_identifier_assign_initializer SEMICOLON
    (56) comma_identifier_assign_initializer -> . COMMA IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer
    (57) comma_identifier_assign_initializer -> . empty
    (407) empty -> .

    COMMA           shift and go to state 709
    SEMICOLON       reduce using rule 407 (empty -> .)

    comma_identifier_assign_initializer shift and go to state 710
    empty                          shift and go to state 711

state 666

    (126) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 712


state 667

    (75) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression . COLON declarationsAndStatements

    COLON           shift and go to state 713


state 668

    (190) ifCondition -> AUTO IDENTIFIER ASSIGN expression .
    (146) expression -> expression . COMMA assignExpression

    RPAREN          reduce using rule 190 (ifCondition -> AUTO IDENTIFIER ASSIGN expression .)
    COMMA           shift and go to state 250


state 669

    (189) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 714
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 670

    (191) ifCondition -> TYPEDEF IDENTIFIER ASSIGN expression .
    (146) expression -> expression . COMMA assignExpression

    RPAREN          reduce using rule 191 (ifCondition -> TYPEDEF IDENTIFIER ASSIGN expression .)
    COMMA           shift and go to state 250


state 671

    (374) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN . RBRACKET

    RBRACKET        shift and go to state 715


state 672

    (373) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression . RBRACKET
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 716
    COMMA           shift and go to state 250


state 673

    (360) typeidExpression -> TYPEID LBRACKET . type RBRACKET
    (361) typeidExpression -> TYPEID LBRACKET . expression RBRACKET
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (166) functionBody -> . blockStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 321
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 38
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 322
    addExpression                  shift and go to state 80
    type                           shift and go to state 718
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 324
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 319
    expression                     shift and go to state 717

state 674

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON . TYPEID LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON . TYPEID LBRACKET expression RBRACKET

    TYPEID          shift and go to state 719


state 675

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type . IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type parameterAttributeStar type . IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
    (243) parameter -> parameterAttributeStar type parameterAttributeStar type . IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar type parameterAttributeStar type . IDENTIFIER ELLIPSIS parameterAttributeStar type
    (245) parameter -> parameterAttributeStar type parameterAttributeStar type . ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar type parameterAttributeStar type . ELLIPSIS parameterAttributeStar type IDENTIFIER
    (247) parameter -> parameterAttributeStar type parameterAttributeStar type . ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (248) parameter -> parameterAttributeStar type parameterAttributeStar type . ELLIPSIS parameterAttributeStar type

    IDENTIFIER      shift and go to state 721
    ELLIPSIS        shift and go to state 720


state 676

    (255) parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS . RPAREN

    RPAREN          shift and go to state 722


state 677

    (253) CommaParameterStar -> COMMA parameter CommaParameterStar .

    COMMA           reduce using rule 253 (CommaParameterStar -> COMMA parameter CommaParameterStar .)
    RPAREN          reduce using rule 253 (CommaParameterStar -> COMMA parameter CommaParameterStar .)


state 678

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON . TYPEID LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON . TYPEID LBRACKET expression RBRACKET

    TYPEID          shift and go to state 723


state 679

    (157) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression . RBRACKET declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 724
    COMMA           shift and go to state 250


state 680

    (156) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .

    RBRACE          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TIMES           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RANGE           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 156 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)


state 681

    (159) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression . RPAREN declarationOrStatement
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 725
    COMMA           shift and go to state 250


state 682

    (158) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .

    RBRACE          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TIMES           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RANGE           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 158 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)


state 683

    (153) forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .

    RBRACE          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    STATIC          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    FINAL           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    AUTO            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    CONST           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    CASE            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    IF              reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    WHILE           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    DO              reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    FOR             reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    BREAK           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    RETURN          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    GOTO            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    WITH            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    TIMES           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    PLUS            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    MINUS           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    DOT             reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    RANGE           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    THIS            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    NULL            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    TRUE            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    FALSE           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    NEW             reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    DELETE          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    CAST            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    BOOL            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    SHORT           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    USHORT          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    INT             reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    UINT            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    LONG            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    ULONG           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    CHAR            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    ENUM            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    CLASS           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    TILDE           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    UNION           reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)
    ELSE            reduce using rule 153 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement .)


state 684

    (155) forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 726
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 685

    (151) forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .

    RBRACE          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    TIMES           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    RANGE           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 151 (forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement .)


state 686

    (152) forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .

    RBRACE          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    STATIC          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    FINAL           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    AUTO            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    CONST           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    CASE            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    IF              reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    WHILE           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    DO              reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    FOR             reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    BREAK           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    RETURN          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    GOTO            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    WITH            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    TIMES           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    PLUS            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    MINUS           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    DOT             reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    RANGE           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    THIS            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    NULL            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    TRUE            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    FALSE           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    NEW             reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    DELETE          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    CAST            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    BOOL            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    SHORT           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    USHORT          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    INT             reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    UINT            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    LONG            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    ULONG           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    CHAR            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    ENUM            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    CLASS           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    TILDE           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    UNION           reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)
    ELSE            reduce using rule 152 (forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement .)


state 687

    (154) forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 727
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 688

    (150) forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .

    RBRACE          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    TIMES           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    RANGE           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 150 (forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement .)


state 689

    (124) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    AMPERSAND       reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TIMES           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    PLUS            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    MINUS           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ELLIPSIS        reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    RANGE           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TYPEDEF         reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 124 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)


state 690

    (125) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    AMPERSAND       reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TIMES           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PLUS            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    MINUS           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ELLIPSIS        reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    RANGE           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TYPEDEF         reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 125 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)


state 691

    (196) importBindings -> singleImport COLON importBind COLON importBind .

    SEMICOLON       reduce using rule 196 (importBindings -> singleImport COLON importBind COLON importBind .)


state 692

    (194) importBind -> IDENTIFIER ASSIGN IDENTIFIER .

    COLON           reduce using rule 194 (importBind -> IDENTIFIER ASSIGN IDENTIFIER .)
    SEMICOLON       reduce using rule 194 (importBind -> IDENTIFIER ASSIGN IDENTIFIER .)


state 693

    (197) importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .

    PRIVATE         reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    PROTECTED       reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    PUBLIC          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    STATIC          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    EXTERN          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FINAL           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    AUTO            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CONST           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IMMUTABLE       reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CASE            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DEFAULT         reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IDENTIFIER      reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LBRACE          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IF              reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    WHILE           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DO              reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FOR             reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FOREACH         reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FOREACH_REVERSE reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    SWITCH          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CONTINUE        reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    BREAK           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    RETURN          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    GOTO            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    WITH            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    AMPERSAND       reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    EXCLAMATION     reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TIMES           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    PLUS            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    MINUS           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DOT             reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    PLUS_PLUS       reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ELLIPSIS        reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LBRACKET        reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    RANGE           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LPAREN          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DOLLAR          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    THIS            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    NULL            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TRUE            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FALSE           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    INUMBER         reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DNUMBER         reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LIT_CHAR        reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    NEW             reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DELETE          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CAST            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FUNCTION        reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    MIXIN           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IMPORT          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LIT_STR         reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    BOOL            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    SHORT           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    USHORT          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    INT             reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UINT            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LONG            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ULONG           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CHAR            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FLOAT           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TYPEOF          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ALIAS           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ENUM            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CLASS           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TILDE           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TYPEDEF         reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UNION           reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    RBRACE          reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    SEMICOLON       reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ELSE            reduce using rule 197 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)


state 694

    (131) anonymousEnumMember -> TYPEDEF IDENTIFIER ASSIGN assignExpression .

    TYPEDEF         reduce using rule 131 (anonymousEnumMember -> TYPEDEF IDENTIFIER ASSIGN assignExpression .)
    IDENTIFIER      reduce using rule 131 (anonymousEnumMember -> TYPEDEF IDENTIFIER ASSIGN assignExpression .)
    RBRACE          reduce using rule 131 (anonymousEnumMember -> TYPEDEF IDENTIFIER ASSIGN assignExpression .)


state 695

    (135) anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember . RBRACE

    RBRACE          shift and go to state 728


state 696

    (127) enumBody -> DOUBLE_QUOTE enumMember . DOUBLE_QUOTE
    (128) enumBody -> DOUBLE_QUOTE enumMember . comma_enumMember DOUBLE_QUOTE
    (129) comma_enumMember -> . COMMA enumMember comma_enumMember
    (130) comma_enumMember -> . empty
    (407) empty -> .

  ! shift/reduce conflict for DOUBLE_QUOTE resolved as shift
    DOUBLE_QUOTE    shift and go to state 729
    COMMA           shift and go to state 730

  ! DOUBLE_QUOTE    [ reduce using rule 407 (empty -> .) ]

    comma_enumMember               shift and go to state 731
    empty                          shift and go to state 732

state 697

    (141) enumMember -> IDENTIFIER .
    (142) enumMember -> IDENTIFIER . ASSIGN assignExpression

    COMMA           reduce using rule 141 (enumMember -> IDENTIFIER .)
    DOUBLE_QUOTE    reduce using rule 141 (enumMember -> IDENTIFIER .)
    ASSIGN          shift and go to state 733


state 698

    (31) arrayMemberInitialization -> nonVoidInitializer .

    COMMA           reduce using rule 31 (arrayMemberInitialization -> nonVoidInitializer .)
    RBRACKET        reduce using rule 31 (arrayMemberInitialization -> nonVoidInitializer .)


state 699

    (25) arrayInitializer -> LBRACKET arrayMemberInitialization . comma_arrayMemberInitialization RBRACKET
    (26) comma_arrayMemberInitialization -> . COMMA arrayMemberInitialization comma_arrayMemberInitialization
    (27) comma_arrayMemberInitialization -> . empty
    (407) empty -> .

    COMMA           shift and go to state 735
    RBRACKET        reduce using rule 407 (empty -> .)

    empty                          shift and go to state 736
    comma_arrayMemberInitialization shift and go to state 734

state 700

    (30) arrayMemberInitialization -> assignExpression . COLON nonVoidInitializer
    (18) argumentList -> assignExpression .
    (233) nonVoidInitializer -> assignExpression .

  ! reduce/reduce conflict for COMMA resolved using rule 18 (argumentList -> assignExpression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 18 (argumentList -> assignExpression .)
    COLON           shift and go to state 737
    RBRACKET        reduce using rule 18 (argumentList -> assignExpression .)
    COMMA           reduce using rule 18 (argumentList -> assignExpression .)

  ! COMMA           [ reduce using rule 233 (nonVoidInitializer -> assignExpression .) ]
  ! RBRACKET        [ reduce using rule 233 (nonVoidInitializer -> assignExpression .) ]


state 701

    (24) arrayInitializer -> LBRACKET RBRACKET .
    (28) arrayLiteral -> LBRACKET RBRACKET .

  ! reduce/reduce conflict for COMMA resolved using rule 24 (arrayInitializer -> LBRACKET RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 24 (arrayInitializer -> LBRACKET RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 24 (arrayInitializer -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 24 (arrayInitializer -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 24 (arrayInitializer -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 24 (arrayInitializer -> LBRACKET RBRACKET .)
    DOT             reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    CARET           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    DIV             reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    MODULO          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    TILDE           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    PIPE            reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    QUESTION        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS            reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    IS_EQ_DIFF      reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    LESS_DIFF       reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    GREATER_DIFF    reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)
    COLON           reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .)

  ! COMMA           [ reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .) ]
  ! RBRACKET        [ reduce using rule 28 (arrayLiteral -> LBRACKET RBRACKET .) ]


state 702

    (401) variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .

    PRIVATE         reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    PROTECTED       reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    PUBLIC          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    STATIC          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    EXTERN          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FINAL           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    AUTO            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CONST           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IMMUTABLE       reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CASE            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DEFAULT         reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IDENTIFIER      reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LBRACE          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IF              reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    WHILE           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DO              reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FOR             reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FOREACH         reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FOREACH_REVERSE reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    SWITCH          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CONTINUE        reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    BREAK           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    RETURN          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    GOTO            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    WITH            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    AMPERSAND       reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    EXCLAMATION     reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TIMES           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    PLUS            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    MINUS           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DOT             reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    PLUS_PLUS       reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ELLIPSIS        reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LBRACKET        reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    RANGE           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LPAREN          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DOLLAR          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    THIS            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    NULL            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TRUE            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FALSE           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    INUMBER         reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DNUMBER         reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LIT_CHAR        reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    NEW             reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DELETE          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CAST            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FUNCTION        reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    MIXIN           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IMPORT          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LIT_STR         reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    BOOL            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    SHORT           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    USHORT          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    INT             reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UINT            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LONG            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ULONG           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CHAR            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FLOAT           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TYPEOF          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ALIAS           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ENUM            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CLASS           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TILDE           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TYPEDEF         reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UNION           reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    RBRACE          reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    SEMICOLON       reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ELSE            reduce using rule 401 (variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON .)


state 703

    (398) CommaDeclarator -> COMMA declarator CommaDeclarator .

    SEMICOLON       reduce using rule 398 (CommaDeclarator -> COMMA declarator CommaDeclarator .)


state 704

    (121) declarator -> IDENTIFIER ASSIGN . initializer
    (208) initializer -> . VOID
    (209) initializer -> . nonVoidInitializer
    (233) nonVoidInitializer -> . assignExpression
    (234) nonVoidInitializer -> . arrayInitializer
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (24) arrayInitializer -> . LBRACKET RBRACKET
    (25) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    VOID            shift and go to state 646
    LBRACKET        shift and go to state 647
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    initializer                    shift and go to state 649
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    arrayInitializer               shift and go to state 651
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    LIT_STRPlus                    shift and go to state 45
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    nonVoidInitializer             shift and go to state 648
    deleteExpression               shift and go to state 31
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 650
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    ternaryExpression              shift and go to state 75
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 705

    (184) identifierList -> identifierList COMMA IDENTIFIER .

    SEMICOLON       reduce using rule 184 (identifierList -> identifierList COMMA IDENTIFIER .)
    COMMA           reduce using rule 184 (identifierList -> identifierList COMMA IDENTIFIER .)


state 706

    (88) constraint -> IF LPAREN expression . RPAREN
    (146) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 738
    COMMA           shift and go to state 250


state 707

    (170) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    AMPERSAND       reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TIMES           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PLUS            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MINUS           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ELLIPSIS        reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RANGE           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TYPEDEF         reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 170 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)


state 708

    (169) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    AMPERSAND       reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TIMES           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MINUS           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELLIPSIS        reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RANGE           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEDEF         reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 169 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)


state 709

    (56) comma_identifier_assign_initializer -> COMMA . IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer

    IDENTIFIER      shift and go to state 739


state 710

    (55) autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer . SEMICOLON

    SEMICOLON       shift and go to state 740


state 711

    (57) comma_identifier_assign_initializer -> empty .

    SEMICOLON       reduce using rule 57 (comma_identifier_assign_initializer -> empty .)


state 712

    (126) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FINAL           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IMMUTABLE       reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FOREACH         reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FOREACH_REVERSE reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    WITH            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    AMPERSAND       reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TIMES           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DOT             reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS_PLUS       reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ELLIPSIS        reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    RANGE           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DOLLAR          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    NULL            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    INUMBER         reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DNUMBER         reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LIT_CHAR        reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CAST            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    MIXIN           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LIT_STR         reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    USHORT          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UINT            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ULONG           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ALIAS           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUM            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TILDE           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UNION           reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 126 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)


state 713

    (75) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON . declarationsAndStatements
    (116) declarationsAndStatements -> . declarationOrStatement
    (117) declarationsAndStatements -> . declarationOrStatement declarationsAndStatements
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    declarationsAndStatements      shift and go to state 741
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 113
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 714

    (189) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .

    RBRACE          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PRIVATE         reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PROTECTED       reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PUBLIC          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    STATIC          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    EXTERN          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FINAL           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    AUTO            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CONST           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IMMUTABLE       reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CASE            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DEFAULT         reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IDENTIFIER      reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LBRACE          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IF              reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    WHILE           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DO              reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FOR             reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FOREACH         reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    SWITCH          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CONTINUE        reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    BREAK           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    RETURN          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    GOTO            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    WITH            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    AMPERSAND       reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    EXCLAMATION     reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TIMES           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PLUS            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    MINUS           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DOT             reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PLUS_PLUS       reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ELLIPSIS        reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LBRACKET        reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    RANGE           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LPAREN          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DOLLAR          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    THIS            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    NULL            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TRUE            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FALSE           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    INUMBER         reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DNUMBER         reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LIT_CHAR        reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    NEW             reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DELETE          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CAST            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FUNCTION        reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    MIXIN           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IMPORT          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LIT_STR         reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    BOOL            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    SHORT           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    USHORT          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    INT             reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UINT            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LONG            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ULONG           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CHAR            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FLOAT           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TYPEOF          reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ALIAS           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ENUM            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CLASS           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TILDE           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TYPEDEF         reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UNION           reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    SEMICOLON       reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ELSE            reduce using rule 189 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)


state 715

    (374) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .

    TIMES           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LBRACKET        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    DELEGATE        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    FUNCTION        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    SEMICOLON       reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    DOT             reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LPAREN          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    PLUS_PLUS       reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    CARET           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    DIV             reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    MODULO          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    PLUS            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    MINUS           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    TILDE           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    $end            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LEFT_SHIFT      reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    RIGHT_SHIFT     reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    IS_EQ           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    NOT_EQ          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    AMPERSAND       reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    PIPE            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    QUESTION        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_PIPE     reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    ASSIGN          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_LEFT         reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_RIGHT        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_PLUS         reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_MINUS        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_TIMES        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_MODULO       reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_AND_BIT      reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_DIV          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_OR_BIT       reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_XOR_BIT      reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    RBRACKET        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    COMMA           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LESS            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_EQ         reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER         reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_EQ      reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    IS_EQ_DIFF      reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_DIFF       reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_DIFF    reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    RPAREN          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    COLON           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    RANGE           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    TYPEDEF         reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    IDENTIFIER      reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    RBRACE          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LBRACE          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    FINAL           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    AUTO            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    RETURN          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    CONST           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    IMMUTABLE       reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    BOOL            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    SHORT           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    USHORT          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    INT             reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    UINT            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    LONG            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    ULONG           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    CHAR            reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    FLOAT           reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    TYPEOF          reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)
    ELLIPSIS        reduce using rule 374 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET .)


state 716

    (373) typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .

    TIMES           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    DELEGATE        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    DOT             reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    PLUS_PLUS       reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    CARET           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    DIV             reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    $end            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LEFT_SHIFT      reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    IS_EQ           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    AMPERSAND       reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    PIPE            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_LEFT         reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_RIGHT        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_AND_BIT      reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_OR_BIT       reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LESS            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LESS_DIFF       reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    GREATER_DIFF    reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    COLON           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    TYPEDEF         reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    FINAL           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    AUTO            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    CONST           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    IMMUTABLE       reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    SHORT           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    USHORT          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    INT             reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    UINT            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    LONG            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    ULONG           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    TYPEOF          reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)
    ELLIPSIS        reduce using rule 373 (typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET .)


state 717

    (361) typeidExpression -> TYPEID LBRACKET expression . RBRACKET
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 742
    COMMA           shift and go to state 250


state 718

    (360) typeidExpression -> TYPEID LBRACKET type . RBRACKET
    (269) primaryExpression -> type . DOT IDENTIFIER
    (270) primaryExpression -> type . arguments
    (168) functionCallExpression -> type . arguments
    (22) arguments -> . LPAREN RPAREN
    (23) arguments -> . LPAREN argumentList RPAREN

    RBRACKET        shift and go to state 743
    DOT             shift and go to state 167
    LPAREN          shift and go to state 160

    arguments                      shift and go to state 166

state 719

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID . LBRACKET TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 744


state 720

    (245) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS . parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS . parameterAttributeStar type IDENTIFIER
    (247) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS . parameterAttributeStar type ASSIGN assignExpression
    (248) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS . parameterAttributeStar type
    (239) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (240) parameterAttributeStar -> . empty
    (249) parameterAttribute -> . typeConstructor
    (250) parameterAttribute -> . FINAL
    (251) parameterAttribute -> . AUTO
    (252) parameterAttribute -> . RETURN
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FINAL           shift and go to state 442
    AUTO            shift and go to state 443
    RETURN          shift and go to state 447
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    parameterAttribute             shift and go to state 445
    parameterAttributeStar         shift and go to state 745
    typeConstructor                shift and go to state 444
    empty                          shift and go to state 451

state 721

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER . ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER . ELLIPSIS parameterAttributeStar type IDENTIFIER
    (243) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER . ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER . ELLIPSIS parameterAttributeStar type

    ELLIPSIS        shift and go to state 746


state 722

    (255) parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .

    IMMUTABLE       reduce using rule 255 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    CONST           reduce using rule 255 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    RETURN          reduce using rule 255 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    SEMICOLON       reduce using rule 255 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LBRACE          reduce using rule 255 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    IF              reduce using rule 255 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)


state 723

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID . LBRACKET TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 747


state 724

    (157) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 748
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 725

    (159) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN . declarationOrStatement
    (118) declarationOrStatement -> . declaration
    (119) declarationOrStatement -> . statement
    (97) declaration -> . multipleattributes declaration2
    (98) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (320) statement -> . statementNoCaseNoDefault
    (321) statement -> . caseStatement
    (322) statement -> . caseRangeStatement
    (323) statement -> . defaultStatement
    (101) multipleattributes -> . attribute multipleattributes
    (102) multipleattributes -> . empty
    (45) attribute -> . PRIVATE
    (46) attribute -> . PROTECTED
    (47) attribute -> . PUBLIC
    (48) attribute -> . STATIC
    (49) attribute -> . EXTERN
    (50) attribute -> . FINAL
    (51) attribute -> . AUTO
    (52) attribute -> . CONST
    (53) attribute -> . IMMUTABLE
    (306) statementNoCaseNoDefault -> . labeledStatement
    (307) statementNoCaseNoDefault -> . blockStatement
    (308) statementNoCaseNoDefault -> . ifStatement
    (309) statementNoCaseNoDefault -> . whileStatement
    (310) statementNoCaseNoDefault -> . doStatement
    (311) statementNoCaseNoDefault -> . forStatement
    (312) statementNoCaseNoDefault -> . foreachStatement
    (313) statementNoCaseNoDefault -> . switchStatement
    (314) statementNoCaseNoDefault -> . continueStatement
    (315) statementNoCaseNoDefault -> . breakStatement
    (316) statementNoCaseNoDefault -> . returnStatement
    (317) statementNoCaseNoDefault -> . gotoStatement
    (318) statementNoCaseNoDefault -> . withStatement
    (319) statementNoCaseNoDefault -> . expressionStatement
    (76) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (75) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (122) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (407) empty -> .
    (210) labeledStatement -> . IDENTIFIER COLON
    (211) labeledStatement -> . IDENTIFIER COLON declarationOrStatement
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (188) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (189) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (403) whileStatement -> . WHILE LBRACKET expression RBRACKET declarationOrStatement
    (126) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (148) forStatement -> . FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
    (149) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
    (150) forStatement -> . FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
    (151) forStatement -> . FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
    (152) forStatement -> . FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
    (153) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
    (154) forStatement -> . FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
    (155) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
    (156) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (157) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (158) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (159) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (333) switchStatement -> . SWITCH LBRACKET expression RBRACKET statement
    (95) continueStatement -> . CONTINUE SEMICOLON
    (96) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (61) breakStatement -> . BREAK SEMICOLON
    (62) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (299) returnStatement -> . RETURN expression SEMICOLON
    (300) returnStatement -> . RETURN SEMICOLON
    (177) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (178) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (179) gotoStatement -> . GOTO CASE SEMICOLON
    (180) gotoStatement -> . GOTO CASE expression SEMICOLON
    (404) withStatement -> . WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
    (147) expressionStatement -> . expression SEMICOLON
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 150
    PROTECTED       shift and go to state 105
    PUBLIC          shift and go to state 143
    STATIC          shift and go to state 119
    EXTERN          shift and go to state 134
    FINAL           shift and go to state 120
    AUTO            shift and go to state 152
    CONST           shift and go to state 144
    IMMUTABLE       shift and go to state 153
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 132
    ALIAS           reduce using rule 407 (empty -> .)
    ENUM            reduce using rule 407 (empty -> .)
    CLASS           reduce using rule 407 (empty -> .)
    TILDE           reduce using rule 407 (empty -> .)
    TYPEDEF         reduce using rule 407 (empty -> .)
    UNION           reduce using rule 407 (empty -> .)
    IDENTIFIER      shift and go to state 139
    LBRACE          shift and go to state 26
    IF              shift and go to state 154
    WHILE           shift and go to state 133
    DO              shift and go to state 131
    FOR             shift and go to state 124
    FOREACH         shift and go to state 112
    FOREACH_REVERSE shift and go to state 122
    SWITCH          shift and go to state 137
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 142
    RETURN          shift and go to state 117
    GOTO            shift and go to state 110
    WITH            shift and go to state 107
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13

  ! THIS            [ reduce using rule 407 (empty -> .) ]
  ! IMPORT          [ reduce using rule 407 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 407 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 407 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 407 (empty -> .) ]
  ! STATIC          [ reduce using rule 407 (empty -> .) ]
  ! EXTERN          [ reduce using rule 407 (empty -> .) ]
  ! FINAL           [ reduce using rule 407 (empty -> .) ]
  ! AUTO            [ reduce using rule 407 (empty -> .) ]
  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]
  ! MIXIN           [ reduce using rule 407 (empty -> .) ]

    forStatement                   shift and go to state 103
    multipleattributes             shift and go to state 130
    continueStatement              shift and go to state 118
    attribute                      shift and go to state 145
    switchStatement                shift and go to state 104
    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    functionCallExpression         shift and go to state 51
    breakStatement                 shift and go to state 146
    gotoStatement                  shift and go to state 147
    blockStatement                 shift and go to state 106
    unaryExpression                shift and go to state 55
    defaultStatement               shift and go to state 148
    caseStatement                  shift and go to state 121
    powExpression                  shift and go to state 49
    xorExpression                  shift and go to state 68
    doStatement                    shift and go to state 136
    relExpression                  shift and go to state 69
    typeofExpression               shift and go to state 2
    arrayLiteral                   shift and go to state 6
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    foreachStatement               shift and go to state 108
    statement                      shift and go to state 138
    statementNoCaseNoDefault       shift and go to state 109
    type2                          shift and go to state 53
    type                           shift and go to state 39
    symbol                         shift and go to state 58
    empty                          shift and go to state 140
    newExpression                  shift and go to state 20
    orOrExpression                 shift and go to state 73
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    withStatement                  shift and go to state 125
    whileStatement                 shift and go to state 111
    mixinExpression                shift and go to state 19
    cmpExpression                  shift and go to state 74
    typeConstructors               shift and go to state 10
    declaration                    shift and go to state 141
    declarationOrStatement         shift and go to state 749
    returnStatement                shift and go to state 114
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    ifStatement                    shift and go to state 123
    functionBody                   shift and go to state 42
    functionLiteralExpression      shift and go to state 65
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    expressionStatement            shift and go to state 115
    labeledStatement               shift and go to state 127
    importExpression               shift and go to state 47
    indexExpression                shift and go to state 22
    caseRangeStatement             shift and go to state 116
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 129
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80

state 726

    (155) forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .

    RBRACE          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    TIMES           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    RANGE           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 155 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement .)


state 727

    (154) forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .

    RBRACE          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    TIMES           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    RANGE           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 154 (forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement .)


state 728

    (135) anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .

    PRIVATE         reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PROTECTED       reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PUBLIC          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    STATIC          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    EXTERN          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FINAL           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    AUTO            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CONST           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IMMUTABLE       reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CASE            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DEFAULT         reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IDENTIFIER      reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LBRACE          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IF              reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    WHILE           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DO              reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOR             reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOREACH         reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOREACH_REVERSE reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SWITCH          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CONTINUE        reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    BREAK           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RETURN          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    GOTO            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    WITH            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    AMPERSAND       reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    EXCLAMATION     reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TIMES           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PLUS            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    MINUS           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DOT             reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PLUS_PLUS       reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ELLIPSIS        reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LBRACKET        reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RANGE           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LPAREN          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DOLLAR          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    THIS            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    NULL            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TRUE            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FALSE           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    INUMBER         reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DNUMBER         reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LIT_CHAR        reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    NEW             reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DELETE          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CAST            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FUNCTION        reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    MIXIN           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IMPORT          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LIT_STR         reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    BOOL            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SHORT           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    USHORT          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    INT             reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UINT            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LONG            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ULONG           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CHAR            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FLOAT           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TYPEOF          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ALIAS           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ENUM            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CLASS           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TILDE           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TYPEDEF         reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UNION           reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RBRACE          reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SEMICOLON       reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ELSE            reduce using rule 135 (anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)


state 729

    (127) enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .

    PRIVATE         reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    PROTECTED       reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    PUBLIC          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    STATIC          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    EXTERN          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    FINAL           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    AUTO            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    CONST           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    IMMUTABLE       reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    CASE            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    DEFAULT         reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    IDENTIFIER      reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    LBRACE          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    IF              reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    WHILE           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    DO              reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    FOR             reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    FOREACH         reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    FOREACH_REVERSE reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    SWITCH          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    CONTINUE        reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    BREAK           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    RETURN          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    GOTO            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    WITH            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    AMPERSAND       reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    EXCLAMATION     reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    TIMES           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    PLUS            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    MINUS           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    DOT             reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    PLUS_PLUS       reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    ELLIPSIS        reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    LBRACKET        reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    RANGE           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    LPAREN          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    DOLLAR          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    THIS            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    NULL            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    TRUE            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    FALSE           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    INUMBER         reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    DNUMBER         reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    LIT_CHAR        reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    NEW             reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    DELETE          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    CAST            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    FUNCTION        reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    MIXIN           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    IMPORT          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    LIT_STR         reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    BOOL            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    SHORT           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    USHORT          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    INT             reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    UINT            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    LONG            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    ULONG           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    CHAR            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    FLOAT           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    TYPEOF          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    ALIAS           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    ENUM            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    CLASS           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    TILDE           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    TYPEDEF         reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    UNION           reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    RBRACE          reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    SEMICOLON       reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)
    ELSE            reduce using rule 127 (enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE .)


state 730

    (129) comma_enumMember -> COMMA . enumMember comma_enumMember
    (141) enumMember -> . IDENTIFIER
    (142) enumMember -> . IDENTIFIER ASSIGN assignExpression

    IDENTIFIER      shift and go to state 697

    enumMember                     shift and go to state 750

state 731

    (128) enumBody -> DOUBLE_QUOTE enumMember comma_enumMember . DOUBLE_QUOTE

    DOUBLE_QUOTE    shift and go to state 751


state 732

    (130) comma_enumMember -> empty .

    DOUBLE_QUOTE    reduce using rule 130 (comma_enumMember -> empty .)


state 733

    (142) enumMember -> IDENTIFIER ASSIGN . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 752
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    castExpression                 shift and go to state 64
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 734

    (25) arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization . RBRACKET

    RBRACKET        shift and go to state 753


state 735

    (26) comma_arrayMemberInitialization -> COMMA . arrayMemberInitialization comma_arrayMemberInitialization
    (30) arrayMemberInitialization -> . assignExpression COLON nonVoidInitializer
    (31) arrayMemberInitialization -> . nonVoidInitializer
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (233) nonVoidInitializer -> . assignExpression
    (234) nonVoidInitializer -> . arrayInitializer
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (24) arrayInitializer -> . LBRACKET RBRACKET
    (25) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    LBRACKET        shift and go to state 647
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    arrayInitializer               shift and go to state 651
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    arrayMemberInitialization      shift and go to state 754
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    LIT_STRPlus                    shift and go to state 45
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    nonVoidInitializer             shift and go to state 698
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 755
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    ternaryExpression              shift and go to state 75
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 736

    (27) comma_arrayMemberInitialization -> empty .

    RBRACKET        reduce using rule 27 (comma_arrayMemberInitialization -> empty .)


state 737

    (30) arrayMemberInitialization -> assignExpression COLON . nonVoidInitializer
    (233) nonVoidInitializer -> . assignExpression
    (234) nonVoidInitializer -> . arrayInitializer
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (24) arrayInitializer -> . LBRACKET RBRACKET
    (25) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    LBRACKET        shift and go to state 647
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    arrayInitializer               shift and go to state 651
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    LIT_STRPlus                    shift and go to state 45
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    nonVoidInitializer             shift and go to state 756
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 650
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    ternaryExpression              shift and go to state 75
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 738

    (88) constraint -> IF LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 88 (constraint -> IF LPAREN expression RPAREN .)
    LBRACE          reduce using rule 88 (constraint -> IF LPAREN expression RPAREN .)


state 739

    (56) comma_identifier_assign_initializer -> COMMA IDENTIFIER . ASSIGN initializer comma_identifier_assign_initializer

    ASSIGN          shift and go to state 757


state 740

    (55) autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .

    PRIVATE         reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    PROTECTED       reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    PUBLIC          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    STATIC          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    EXTERN          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    FINAL           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    AUTO            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    CONST           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    IMMUTABLE       reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    CASE            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    DEFAULT         reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    IDENTIFIER      reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    LBRACE          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    IF              reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    WHILE           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    DO              reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    FOR             reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    FOREACH         reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    FOREACH_REVERSE reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    SWITCH          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    CONTINUE        reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    BREAK           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    RETURN          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    GOTO            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    WITH            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    AMPERSAND       reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    EXCLAMATION     reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    TIMES           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    PLUS            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    MINUS           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    DOT             reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    PLUS_PLUS       reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    ELLIPSIS        reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    LBRACKET        reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    RANGE           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    LPAREN          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    DOLLAR          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    THIS            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    NULL            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    TRUE            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    FALSE           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    INUMBER         reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    DNUMBER         reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    LIT_CHAR        reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    NEW             reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    DELETE          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    CAST            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    FUNCTION        reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    MIXIN           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    IMPORT          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    LIT_STR         reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    BOOL            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    SHORT           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    USHORT          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    INT             reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    UINT            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    LONG            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    ULONG           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    CHAR            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    FLOAT           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    TYPEOF          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    ALIAS           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    ENUM            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    CLASS           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    TILDE           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    TYPEDEF         reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    UNION           reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    RBRACE          reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    SEMICOLON       reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)
    ELSE            reduce using rule 55 (autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON .)


state 741

    (75) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .

    RBRACE          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PRIVATE         reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PROTECTED       reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PUBLIC          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    STATIC          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    EXTERN          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FINAL           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    AUTO            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CONST           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IMMUTABLE       reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CASE            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DEFAULT         reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IDENTIFIER      reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LBRACE          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IF              reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    WHILE           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DO              reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FOR             reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FOREACH         reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FOREACH_REVERSE reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    SWITCH          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CONTINUE        reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    BREAK           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    RETURN          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    GOTO            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    WITH            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    AMPERSAND       reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    EXCLAMATION     reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TIMES           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PLUS            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    MINUS           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DOT             reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PLUS_PLUS       reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ELLIPSIS        reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LBRACKET        reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    RANGE           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LPAREN          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DOLLAR          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    THIS            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    NULL            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TRUE            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FALSE           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    INUMBER         reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DNUMBER         reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LIT_CHAR        reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    NEW             reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DELETE          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CAST            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FUNCTION        reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    MIXIN           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IMPORT          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LIT_STR         reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    BOOL            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    SHORT           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    USHORT          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    INT             reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UINT            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LONG            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ULONG           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CHAR            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FLOAT           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TYPEOF          reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ALIAS           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ENUM            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CLASS           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TILDE           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TYPEDEF         reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UNION           reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    SEMICOLON       reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ELSE            reduce using rule 75 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)


state 742

    (361) typeidExpression -> TYPEID LBRACKET expression RBRACKET .

    COLON           reduce using rule 361 (typeidExpression -> TYPEID LBRACKET expression RBRACKET .)


state 743

    (360) typeidExpression -> TYPEID LBRACKET type RBRACKET .

    COLON           reduce using rule 360 (typeidExpression -> TYPEID LBRACKET type RBRACKET .)


state 744

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET . TYPEDEF RBRACKET
    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET . expression RBRACKET
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    TYPEDEF         shift and go to state 759
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    relExpression                  shift and go to state 69
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 758

state 745

    (245) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar . type IDENTIFIER ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar . type IDENTIFIER
    (247) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar . type ASSIGN assignExpression
    (248) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar . type
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 10
    type                           shift and go to state 760
    type2                          shift and go to state 53

state 746

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS . parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS . parameterAttributeStar type IDENTIFIER
    (243) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS . parameterAttributeStar type ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS . parameterAttributeStar type
    (239) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (240) parameterAttributeStar -> . empty
    (249) parameterAttribute -> . typeConstructor
    (250) parameterAttribute -> . FINAL
    (251) parameterAttribute -> . AUTO
    (252) parameterAttribute -> . RETURN
    (407) empty -> .
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FINAL           shift and go to state 442
    AUTO            shift and go to state 443
    RETURN          shift and go to state 447
    BOOL            reduce using rule 407 (empty -> .)
    SHORT           reduce using rule 407 (empty -> .)
    USHORT          reduce using rule 407 (empty -> .)
    INT             reduce using rule 407 (empty -> .)
    UINT            reduce using rule 407 (empty -> .)
    LONG            reduce using rule 407 (empty -> .)
    ULONG           reduce using rule 407 (empty -> .)
    CHAR            reduce using rule 407 (empty -> .)
    FLOAT           reduce using rule 407 (empty -> .)
    DOT             reduce using rule 407 (empty -> .)
    TYPEOF          reduce using rule 407 (empty -> .)
    IDENTIFIER      reduce using rule 407 (empty -> .)
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 407 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 407 (empty -> .) ]

    parameterAttribute             shift and go to state 445
    parameterAttributeStar         shift and go to state 761
    typeConstructor                shift and go to state 444
    empty                          shift and go to state 451

state 747

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET . TYPEDEF RBRACKET
    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET . expression RBRACKET
    (145) expression -> . assignExpression
    (146) expression -> . expression COMMA assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    TYPEDEF         shift and go to state 763
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    relExpression                  shift and go to state 69
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 126
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15
    expression                     shift and go to state 762

state 748

    (157) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .

    RBRACE          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PRIVATE         reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PROTECTED       reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PUBLIC          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    STATIC          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    EXTERN          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FINAL           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    AUTO            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CONST           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IMMUTABLE       reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CASE            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DEFAULT         reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IDENTIFIER      reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LBRACE          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IF              reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    WHILE           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DO              reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FOR             reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FOREACH         reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    SWITCH          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CONTINUE        reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    BREAK           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    RETURN          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    GOTO            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    WITH            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    AMPERSAND       reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    EXCLAMATION     reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TIMES           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PLUS            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    MINUS           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DOT             reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PLUS_PLUS       reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ELLIPSIS        reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LBRACKET        reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    RANGE           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LPAREN          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DOLLAR          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    THIS            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    NULL            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TRUE            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FALSE           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    INUMBER         reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DNUMBER         reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LIT_CHAR        reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    NEW             reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DELETE          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CAST            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FUNCTION        reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    MIXIN           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IMPORT          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LIT_STR         reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    BOOL            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    SHORT           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    USHORT          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    INT             reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UINT            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LONG            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ULONG           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CHAR            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FLOAT           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TYPEOF          reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ALIAS           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ENUM            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CLASS           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TILDE           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TYPEDEF         reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UNION           reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    SEMICOLON       reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ELSE            reduce using rule 157 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)


state 749

    (159) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .

    RBRACE          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PRIVATE         reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IF              reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DO              reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    AMPERSAND       reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TIMES           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PLUS            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    MINUS           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ELLIPSIS        reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    RANGE           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    INT             reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TYPEDEF         reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 159 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)


state 750

    (129) comma_enumMember -> COMMA enumMember . comma_enumMember
    (129) comma_enumMember -> . COMMA enumMember comma_enumMember
    (130) comma_enumMember -> . empty
    (407) empty -> .

    COMMA           shift and go to state 730
    DOUBLE_QUOTE    reduce using rule 407 (empty -> .)

    comma_enumMember               shift and go to state 764
    empty                          shift and go to state 732

state 751

    (128) enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .

    PRIVATE         reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    PROTECTED       reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    PUBLIC          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    STATIC          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    EXTERN          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    FINAL           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    AUTO            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    CONST           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    IMMUTABLE       reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    CASE            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    DEFAULT         reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    IDENTIFIER      reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    LBRACE          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    IF              reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    WHILE           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    DO              reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    FOR             reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    FOREACH         reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    FOREACH_REVERSE reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    SWITCH          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    CONTINUE        reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    BREAK           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    RETURN          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    GOTO            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    WITH            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    AMPERSAND       reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    EXCLAMATION     reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    TIMES           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    PLUS            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    MINUS           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    DOT             reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    PLUS_PLUS       reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    ELLIPSIS        reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    LBRACKET        reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    RANGE           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    LPAREN          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    DOLLAR          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    THIS            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    NULL            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    TRUE            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    FALSE           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    INUMBER         reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    DNUMBER         reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    LIT_CHAR        reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    NEW             reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    DELETE          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    CAST            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    FUNCTION        reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    MIXIN           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    IMPORT          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    LIT_STR         reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    BOOL            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    SHORT           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    USHORT          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    INT             reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    UINT            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    LONG            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    ULONG           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    CHAR            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    FLOAT           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    TYPEOF          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    ALIAS           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    ENUM            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    CLASS           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    TILDE           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    TYPEDEF         reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    UNION           reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    RBRACE          reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    SEMICOLON       reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)
    ELSE            reduce using rule 128 (enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE .)


state 752

    (142) enumMember -> IDENTIFIER ASSIGN assignExpression .

    COMMA           reduce using rule 142 (enumMember -> IDENTIFIER ASSIGN assignExpression .)
    DOUBLE_QUOTE    reduce using rule 142 (enumMember -> IDENTIFIER ASSIGN assignExpression .)


state 753

    (25) arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .

    COMMA           reduce using rule 25 (arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .)
    SEMICOLON       reduce using rule 25 (arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .)
    RBRACKET        reduce using rule 25 (arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .)


state 754

    (26) comma_arrayMemberInitialization -> COMMA arrayMemberInitialization . comma_arrayMemberInitialization
    (26) comma_arrayMemberInitialization -> . COMMA arrayMemberInitialization comma_arrayMemberInitialization
    (27) comma_arrayMemberInitialization -> . empty
    (407) empty -> .

    COMMA           shift and go to state 735
    RBRACKET        reduce using rule 407 (empty -> .)

    empty                          shift and go to state 736
    comma_arrayMemberInitialization shift and go to state 765

state 755

    (30) arrayMemberInitialization -> assignExpression . COLON nonVoidInitializer
    (233) nonVoidInitializer -> assignExpression .

    COLON           shift and go to state 737
    COMMA           reduce using rule 233 (nonVoidInitializer -> assignExpression .)
    RBRACKET        reduce using rule 233 (nonVoidInitializer -> assignExpression .)


state 756

    (30) arrayMemberInitialization -> assignExpression COLON nonVoidInitializer .

    COMMA           reduce using rule 30 (arrayMemberInitialization -> assignExpression COLON nonVoidInitializer .)
    RBRACKET        reduce using rule 30 (arrayMemberInitialization -> assignExpression COLON nonVoidInitializer .)


state 757

    (56) comma_identifier_assign_initializer -> COMMA IDENTIFIER ASSIGN . initializer comma_identifier_assign_initializer
    (208) initializer -> . VOID
    (209) initializer -> . nonVoidInitializer
    (233) nonVoidInitializer -> . assignExpression
    (234) nonVoidInitializer -> . arrayInitializer
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (24) arrayInitializer -> . LBRACKET RBRACKET
    (25) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    VOID            shift and go to state 646
    LBRACKET        shift and go to state 647
    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    initializer                    shift and go to state 766
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    type2                          shift and go to state 53
    arrayInitializer               shift and go to state 651
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    castExpression                 shift and go to state 64
    orExpression                   shift and go to state 78
    shiftExpression                shift and go to state 77
    equalExpression                shift and go to state 79
    newExpression                  shift and go to state 20
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    LIT_STRPlus                    shift and go to state 45
    mulExpression                  shift and go to state 57
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    nonVoidInitializer             shift and go to state 648
    powExpression                  shift and go to state 49
    deleteExpression               shift and go to state 31
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 650
    primaryExpression              shift and go to state 44
    functionBody                   shift and go to state 42
    ternaryExpression              shift and go to state 75
    type                           shift and go to state 39
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    typeConstructor                shift and go to state 15

state 758

    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression . RBRACKET
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 767
    COMMA           shift and go to state 250


state 759

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF . RBRACKET

    RBRACKET        shift and go to state 768


state 760

    (245) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type . IDENTIFIER ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type . IDENTIFIER
    (247) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type . ASSIGN assignExpression
    (248) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type .

    IDENTIFIER      shift and go to state 770
    ASSIGN          shift and go to state 769
    COMMA           reduce using rule 248 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type .)
    RPAREN          reduce using rule 248 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type .)


state 761

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar . type IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar . type IDENTIFIER
    (243) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar . type ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar . type
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (187) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    DOT             shift and go to state 87
    TYPEOF          shift and go to state 13
    IDENTIFIER      shift and go to state 90

    typeConstructor                shift and go to state 161
    builtinType                    shift and go to state 40
    symbol                         shift and go to state 91
    typeofExpression               shift and go to state 2
    identifierOrTemplateChain      shift and go to state 14
    identifierOrTemplateInstance   shift and go to state 89
    typeConstructors               shift and go to state 10
    type                           shift and go to state 771
    type2                          shift and go to state 53

state 762

    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression . RBRACKET
    (146) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 772
    COMMA           shift and go to state 250


state 763

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF . RBRACKET

    RBRACKET        shift and go to state 773


state 764

    (129) comma_enumMember -> COMMA enumMember comma_enumMember .

    DOUBLE_QUOTE    reduce using rule 129 (comma_enumMember -> COMMA enumMember comma_enumMember .)


state 765

    (26) comma_arrayMemberInitialization -> COMMA arrayMemberInitialization comma_arrayMemberInitialization .

    RBRACKET        reduce using rule 26 (comma_arrayMemberInitialization -> COMMA arrayMemberInitialization comma_arrayMemberInitialization .)


state 766

    (56) comma_identifier_assign_initializer -> COMMA IDENTIFIER ASSIGN initializer . comma_identifier_assign_initializer
    (56) comma_identifier_assign_initializer -> . COMMA IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer
    (57) comma_identifier_assign_initializer -> . empty
    (407) empty -> .

    COMMA           shift and go to state 709
    SEMICOLON       reduce using rule 407 (empty -> .)

    comma_identifier_assign_initializer shift and go to state 774
    empty                          shift and go to state 711

state 767

    (372) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DELEGATE        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOT             reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    PLUS_PLUS       reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    CARET           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    $end            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LEFT_SHIFT      reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IS_EQ           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    AMPERSAND       reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    PIPE            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_LEFT         reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_RIGHT        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_AND_BIT      reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_OR_BIT       reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS_DIFF       reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER_DIFF    reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    TYPEDEF         reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    FINAL           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    AUTO            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    CONST           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IMMUTABLE       reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    SHORT           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    USHORT          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    INT             reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    UINT            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LONG            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    ULONG           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    TYPEOF          reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    ELLIPSIS        reduce using rule 372 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)


state 768

    (371) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .

    TIMES           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LBRACKET        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DELEGATE        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    FUNCTION        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    SEMICOLON       reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOT             reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LPAREN          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    PLUS_PLUS       reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    CARET           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DIV             reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    MODULO          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    PLUS            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    MINUS           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    TILDE           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    $end            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LEFT_SHIFT      reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RIGHT_SHIFT     reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IS_EQ           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    NOT_EQ          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    AMPERSAND       reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    PIPE            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    QUESTION        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_PIPE     reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    ASSIGN          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_LEFT         reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_RIGHT        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_PLUS         reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_MINUS        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_TIMES        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_MODULO       reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_AND_BIT      reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_DIV          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_OR_BIT       reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_XOR_BIT      reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RBRACKET        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    COMMA           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS_EQ         reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER         reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER_EQ      reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IS_EQ_DIFF      reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS_DIFF       reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER_DIFF    reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RPAREN          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    COLON           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RANGE           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    TYPEDEF         reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IDENTIFIER      reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RBRACE          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LBRACE          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    FINAL           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    AUTO            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RETURN          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    CONST           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IMMUTABLE       reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    BOOL            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    SHORT           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    USHORT          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    INT             reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    UINT            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LONG            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    ULONG           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    CHAR            reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    FLOAT           reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    TYPEOF          reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    ELLIPSIS        reduce using rule 371 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)


state 769

    (247) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 775
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 770

    (245) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER . ASSIGN assignExpression
    (246) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER .

    ASSIGN          shift and go to state 776
    COMMA           reduce using rule 246 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER .)
    RPAREN          reduce using rule 246 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER .)


state 771

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type . IDENTIFIER ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type . IDENTIFIER
    (243) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type . ASSIGN assignExpression
    (244) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type .

    IDENTIFIER      shift and go to state 778
    ASSIGN          shift and go to state 777
    COMMA           reduce using rule 244 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type .)
    RPAREN          reduce using rule 244 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type .)


state 772

    (370) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DELEGATE        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOT             reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    PLUS_PLUS       reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    CARET           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    $end            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LEFT_SHIFT      reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IS_EQ           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    AMPERSAND       reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    PIPE            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_LEFT         reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_RIGHT        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_AND_BIT      reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_OR_BIT       reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LESS_DIFF       reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    GREATER_DIFF    reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    TYPEDEF         reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    FINAL           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    AUTO            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    CONST           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    IMMUTABLE       reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    SHORT           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    USHORT          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    INT             reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    UINT            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    LONG            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    ULONG           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    TYPEOF          reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)
    ELLIPSIS        reduce using rule 370 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET .)


state 773

    (369) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .

    TIMES           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LBRACKET        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DELEGATE        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    FUNCTION        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    SEMICOLON       reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOT             reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LPAREN          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    PLUS_PLUS       reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    CARET           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DIV             reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    MODULO          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    PLUS            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    MINUS           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    TILDE           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    $end            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LEFT_SHIFT      reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RIGHT_SHIFT     reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IS_EQ           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    NOT_EQ          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    AMPERSAND       reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    PIPE            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    QUESTION        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_PIPE     reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    ASSIGN          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_LEFT         reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_RIGHT        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_PLUS         reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_MINUS        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_TIMES        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_MODULO       reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_AND_BIT      reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_DIV          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_OR_BIT       reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    EQ_XOR_BIT      reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RBRACKET        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    COMMA           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS_EQ         reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER         reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER_EQ      reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IS_EQ_DIFF      reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LESS_DIFF       reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    GREATER_DIFF    reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RPAREN          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    COLON           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RANGE           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    TYPEDEF         reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IDENTIFIER      reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RBRACE          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    DOUBLE_QUOTE    reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LBRACE          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    FINAL           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    AUTO            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    RETURN          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    CONST           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    IMMUTABLE       reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    BOOL            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    SHORT           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    USHORT          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    INT             reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    UINT            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    LONG            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    ULONG           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    CHAR            reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    FLOAT           reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    TYPEOF          reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)
    ELLIPSIS        reduce using rule 369 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET .)


state 774

    (56) comma_identifier_assign_initializer -> COMMA IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer .

    SEMICOLON       reduce using rule 56 (comma_identifier_assign_initializer -> COMMA IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer .)


state 775

    (247) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression .

    COMMA           reduce using rule 247 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression .)
    RPAREN          reduce using rule 247 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression .)


state 776

    (245) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 779
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 777

    (243) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 780
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 778

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER . ASSIGN assignExpression
    (242) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER .

    ASSIGN          shift and go to state 781
    COMMA           reduce using rule 242 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER .)
    RPAREN          reduce using rule 242 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER .)


state 779

    (245) parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression .

    COMMA           reduce using rule 245 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression .)
    RPAREN          reduce using rule 245 (parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression .)


state 780

    (243) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression .

    COMMA           reduce using rule 243 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression .)
    RPAREN          reduce using rule 243 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression .)


state 781

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN . assignExpression
    (32) assignExpression -> . ternaryExpression
    (33) assignExpression -> . ternaryExpression assignOperator expression
    (336) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (337) ternaryExpression -> . orOrExpression
    (237) orOrExpression -> . andAndExpression
    (238) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (14) andAndExpression -> . orExpression
    (15) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (235) orExpression -> . xorExpression
    (236) orExpression -> . orExpression PIPE xorExpression
    (405) xorExpression -> . andExpression
    (406) xorExpression -> . xorExpression CARET andExpression
    (16) andExpression -> . cmpExpression
    (17) andExpression -> . andExpression AMPERSAND cmpExpression
    (85) cmpExpression -> . shiftExpression
    (86) cmpExpression -> . equalExpression
    (87) cmpExpression -> . relExpression
    (301) shiftExpression -> . addExpression
    (302) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (303) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (143) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (144) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (287) relExpression -> . shiftExpression
    (288) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (217) mulExpression -> . powExpression
    (218) mulExpression -> . mulExpression TIMES
    (219) mulExpression -> . mulExpression DIV
    (220) mulExpression -> . mulExpression MODULO
    (261) powExpression -> . unaryExpression
    (262) powExpression -> . powExpression CARET unaryExpression
    (375) unaryExpression -> . primaryExpression
    (376) unaryExpression -> . AMPERSAND unaryExpression
    (377) unaryExpression -> . EXCLAMATION unaryExpression
    (378) unaryExpression -> . TIMES unaryExpression
    (379) unaryExpression -> . PLUS unaryExpression
    (380) unaryExpression -> . MINUS unaryExpression
    (381) unaryExpression -> . DOT
    (382) unaryExpression -> . PLUS_PLUS unaryExpression
    (383) unaryExpression -> . ELLIPSIS
    (384) unaryExpression -> . newExpression
    (385) unaryExpression -> . deleteExpression
    (386) unaryExpression -> . castExpression
    (387) unaryExpression -> . functionCallExpression
    (388) unaryExpression -> . indexExpression
    (389) unaryExpression -> . LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
    (390) unaryExpression -> . unaryExpression DOT newExpression
    (391) unaryExpression -> . unaryExpression DOT
    (392) unaryExpression -> . identifierOrTemplateInstance
    (393) unaryExpression -> . RANGE
    (394) unaryExpression -> . unaryExpression PLUS_PLUS
    (266) primaryExpression -> . identifierOrTemplateInstance
    (267) primaryExpression -> . DOT identifierOrTemplateInstance
    (268) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (269) primaryExpression -> . type DOT IDENTIFIER
    (270) primaryExpression -> . type arguments
    (271) primaryExpression -> . arrayLiteral
    (272) primaryExpression -> . LPAREN expression RPAREN
    (273) primaryExpression -> . functionLiteralExpression
    (274) primaryExpression -> . mixinExpression
    (275) primaryExpression -> . importExpression
    (276) primaryExpression -> . DOLLAR
    (277) primaryExpression -> . THIS
    (278) primaryExpression -> . NULL
    (279) primaryExpression -> . TRUE
    (280) primaryExpression -> . FALSE
    (281) primaryExpression -> . INUMBER
    (282) primaryExpression -> . DNUMBER
    (283) primaryExpression -> . LIT_STRPlus
    (284) primaryExpression -> . LIT_CHAR
    (229) newExpression -> . NEW type
    (230) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (231) newExpression -> . NEW type arguments
    (232) newExpression -> . newAnonClassExpression
    (123) deleteExpression -> . DELETE unaryExpression
    (77) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (78) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (79) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (167) functionCallExpression -> . symbol arguments unaryExpression arguments
    (168) functionCallExpression -> . type arguments
    (204) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (205) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (187) identifierOrTemplateInstance -> . IDENTIFIER
    (347) typeConstructor -> . CONST
    (348) typeConstructor -> . IMMUTABLE
    (340) type -> . typeConstructors type2 typeSuffixStar
    (341) type -> . type2 typeSuffixStar
    (28) arrayLiteral -> . LBRACKET RBRACKET
    (29) arrayLiteral -> . LBRACKET argumentList RBRACKET
    (173) functionLiteralExpression -> . FUNCTION functionBody
    (174) functionLiteralExpression -> . FUNCTION TYPEDEF functionBody
    (175) functionLiteralExpression -> . functionBody
    (176) functionLiteralExpression -> . IDENTIFIER assignExpression
    (216) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (265) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (263) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (264) LIT_STRPlus -> . LIT_STR
    (221) newAnonClassExpression -> . NEW CLASS arguments baseClassList structBody
    (222) newAnonClassExpression -> . NEW CLASS arguments structBody
    (223) newAnonClassExpression -> . NEW CLASS baseClassList structBody
    (224) newAnonClassExpression -> . NEW CLASS structBody
    (225) newAnonClassExpression -> . NEW arguments CLASS structBody
    (226) newAnonClassExpression -> . NEW arguments CLASS arguments structBody
    (227) newAnonClassExpression -> . NEW arguments CLASS baseClassList structBody
    (228) newAnonClassExpression -> . NEW arguments CLASS arguments baseClassList structBody
    (334) symbol -> . DOT identifierOrTemplateChain
    (335) symbol -> . identifierOrTemplateChain
    (349) typeConstructors -> . typeConstructor
    (350) typeConstructors -> . typeConstructor typeConstructors
    (342) type2 -> . builtinType
    (343) type2 -> . symbol
    (344) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (345) type2 -> . typeofExpression
    (346) type2 -> . typeConstructor LBRACKET TYPEDEF RBRACKET
    (166) functionBody -> . blockStatement
    (185) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (186) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (66) builtinType -> . BOOL
    (67) builtinType -> . SHORT
    (68) builtinType -> . USHORT
    (69) builtinType -> . INT
    (70) builtinType -> . UINT
    (71) builtinType -> . LONG
    (72) builtinType -> . ULONG
    (73) builtinType -> . CHAR
    (74) builtinType -> . FLOAT
    (362) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (363) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (58) blockStatement -> . LBRACE RBRACE
    (59) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    AMPERSAND       shift and go to state 24
    EXCLAMATION     shift and go to state 30
    TIMES           shift and go to state 60
    PLUS            shift and go to state 8
    MINUS           shift and go to state 5
    DOT             shift and go to state 34
    PLUS_PLUS       shift and go to state 56
    ELLIPSIS        shift and go to state 41
    LBRACKET        shift and go to state 1
    RANGE           shift and go to state 23
    LPAREN          shift and go to state 62
    DOLLAR          shift and go to state 59
    THIS            shift and go to state 12
    NULL            shift and go to state 52
    TRUE            shift and go to state 4
    FALSE           shift and go to state 43
    INUMBER         shift and go to state 28
    DNUMBER         shift and go to state 11
    LIT_CHAR        shift and go to state 35
    NEW             shift and go to state 33
    DELETE          shift and go to state 16
    CAST            shift and go to state 36
    IDENTIFIER      shift and go to state 38
    CONST           shift and go to state 50
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 21
    MIXIN           shift and go to state 29
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 67
    BOOL            shift and go to state 48
    SHORT           shift and go to state 17
    USHORT          shift and go to state 46
    INT             shift and go to state 27
    UINT            shift and go to state 61
    LONG            shift and go to state 7
    ULONG           shift and go to state 18
    CHAR            shift and go to state 32
    FLOAT           shift and go to state 66
    TYPEOF          shift and go to state 13
    LBRACE          shift and go to state 26

    deleteExpression               shift and go to state 31
    andAndExpression               shift and go to state 70
    blockStatement                 shift and go to state 3
    typeofExpression               shift and go to state 2
    functionCallExpression         shift and go to state 51
    unaryExpression                shift and go to state 55
    shiftExpression                shift and go to state 77
    type2                          shift and go to state 53
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 6
    mixinExpression                shift and go to state 19
    orExpression                   shift and go to state 78
    equalExpression                shift and go to state 79
    mulExpression                  shift and go to state 57
    identifierOrTemplateInstance   shift and go to state 37
    addExpression                  shift and go to state 80
    type                           shift and go to state 39
    typeConstructors               shift and go to state 10
    orOrExpression                 shift and go to state 73
    indexExpression                shift and go to state 22
    builtinType                    shift and go to state 40
    newExpression                  shift and go to state 20
    symbol                         shift and go to state 58
    cmpExpression                  shift and go to state 74
    newAnonClassExpression         shift and go to state 25
    assignExpression               shift and go to state 782
    castExpression                 shift and go to state 64
    functionBody                   shift and go to state 42
    primaryExpression              shift and go to state 44
    ternaryExpression              shift and go to state 75
    LIT_STRPlus                    shift and go to state 45
    functionLiteralExpression      shift and go to state 65
    importExpression               shift and go to state 47
    identifierOrTemplateChain      shift and go to state 14
    andExpression                  shift and go to state 72
    powExpression                  shift and go to state 49
    typeConstructor                shift and go to state 15

state 782

    (241) parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression .

    COMMA           reduce using rule 241 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression .)
    RPAREN          reduce using rule 241 (parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOT in state 14 resolved as shift
WARNING: shift/reduce conflict for CONST in state 15 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 15 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 26 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 26 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 26 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 26 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 26 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 26 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 26 resolved as shift
WARNING: shift/reduce conflict for CONST in state 26 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 26 resolved as shift
WARNING: shift/reduce conflict for THIS in state 26 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 26 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 26 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 34 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 38 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 38 resolved as shift
WARNING: shift/reduce conflict for DOT in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 38 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 38 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 38 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 38 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 38 resolved as shift
WARNING: shift/reduce conflict for CARET in state 49 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 53 resolved as shift
WARNING: shift/reduce conflict for DOT in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 55 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIV in state 57 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 57 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 58 resolved as shift
WARNING: shift/reduce conflict for CARET in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for IS_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 70 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 72 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 73 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_PIPE in state 73 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_LEFT in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_RIGHT in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_TIMES in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_MODULO in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_AND_BIT in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_DIV in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_OR_BIT in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ_XOR_BIT in state 75 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 76 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for IS_EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for IS_EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for PIPE in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 80 resolved as shift
WARNING: shift/reduce conflict for DOT in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 84 resolved as shift
WARNING: shift/reduce conflict for DOT in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 85 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 88 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 88 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 88 resolved as shift
WARNING: shift/reduce conflict for CONST in state 95 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 95 resolved as shift
WARNING: shift/reduce conflict for DOT in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 99 resolved as shift
WARNING: shift/reduce conflict for DOT in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 102 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 113 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 113 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 113 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 113 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 113 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 113 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 113 resolved as shift
WARNING: shift/reduce conflict for CONST in state 113 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for CASE in state 113 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 113 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 113 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 113 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 113 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 113 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 113 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 113 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 113 resolved as shift
WARNING: shift/reduce conflict for CONST in state 113 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 113 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for DO in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 113 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 113 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 113 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 113 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 113 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 113 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 113 resolved as shift
WARNING: shift/reduce conflict for WITH in state 113 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 113 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for DOT in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 113 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 113 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 113 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 113 resolved as shift
WARNING: shift/reduce conflict for THIS in state 113 resolved as shift
WARNING: shift/reduce conflict for NULL in state 113 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 113 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 113 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 113 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 113 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 113 resolved as shift
WARNING: shift/reduce conflict for NEW in state 113 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 113 resolved as shift
WARNING: shift/reduce conflict for CAST in state 113 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 113 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 113 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 113 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 113 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 113 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 113 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 113 resolved as shift
WARNING: shift/reduce conflict for INT in state 113 resolved as shift
WARNING: shift/reduce conflict for UINT in state 113 resolved as shift
WARNING: shift/reduce conflict for LONG in state 113 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 113 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 113 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 113 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 113 resolved as shift
WARNING: shift/reduce conflict for TYPEDEF in state 130 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 139 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for DOT in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 139 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 139 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 139 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 145 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 145 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 145 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 145 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 145 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 145 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 145 resolved as shift
WARNING: shift/reduce conflict for CONST in state 145 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 145 resolved as shift
WARNING: shift/reduce conflict for DOT in state 156 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 156 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 158 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 158 resolved as shift
WARNING: shift/reduce conflict for CONST in state 161 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 161 resolved as shift
WARNING: shift/reduce conflict for DOT in state 163 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 175 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 175 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 175 resolved as shift
WARNING: shift/reduce conflict for DOT in state 183 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 183 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 183 resolved as shift
WARNING: shift/reduce conflict for DOT in state 188 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 188 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 188 resolved as shift
WARNING: shift/reduce conflict for DOT in state 229 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 247 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 247 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 247 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 247 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 247 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 247 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 247 resolved as shift
WARNING: shift/reduce conflict for CONST in state 247 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 247 resolved as shift
WARNING: shift/reduce conflict for THIS in state 247 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 247 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 247 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 270 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 276 resolved as shift
WARNING: shift/reduce conflict for CONST in state 276 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 276 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 286 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 286 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 286 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 286 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 286 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 286 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 286 resolved as shift
WARNING: shift/reduce conflict for CONST in state 286 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 286 resolved as shift
WARNING: shift/reduce conflict for THIS in state 286 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 286 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 286 resolved as shift
WARNING: shift/reduce conflict for COLON in state 288 resolved as shift
WARNING: shift/reduce conflict for COLON in state 289 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 289 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 291 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 291 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 291 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 291 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 291 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 291 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 291 resolved as shift
WARNING: shift/reduce conflict for CONST in state 291 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 291 resolved as shift
WARNING: shift/reduce conflict for CASE in state 291 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 291 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 291 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 291 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 291 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 291 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 291 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 291 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 291 resolved as shift
WARNING: shift/reduce conflict for CONST in state 291 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 291 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 291 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 291 resolved as shift
WARNING: shift/reduce conflict for IF in state 291 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 291 resolved as shift
WARNING: shift/reduce conflict for DO in state 291 resolved as shift
WARNING: shift/reduce conflict for FOR in state 291 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 291 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 291 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 291 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 291 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 291 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 291 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 291 resolved as shift
WARNING: shift/reduce conflict for WITH in state 291 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 291 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 291 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 291 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 291 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 291 resolved as shift
WARNING: shift/reduce conflict for DOT in state 291 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 291 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 291 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 291 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 291 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 291 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 291 resolved as shift
WARNING: shift/reduce conflict for THIS in state 291 resolved as shift
WARNING: shift/reduce conflict for NULL in state 291 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 291 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 291 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 291 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 291 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 291 resolved as shift
WARNING: shift/reduce conflict for NEW in state 291 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 291 resolved as shift
WARNING: shift/reduce conflict for CAST in state 291 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 291 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 291 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 291 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 291 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 291 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 291 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 291 resolved as shift
WARNING: shift/reduce conflict for INT in state 291 resolved as shift
WARNING: shift/reduce conflict for UINT in state 291 resolved as shift
WARNING: shift/reduce conflict for LONG in state 291 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 291 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 291 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 291 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 291 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 296 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 296 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 296 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 296 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 296 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 296 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 296 resolved as shift
WARNING: shift/reduce conflict for CONST in state 296 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 296 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 308 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 308 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 308 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 308 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 308 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 308 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 308 resolved as shift
WARNING: shift/reduce conflict for CONST in state 308 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 308 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 311 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 311 resolved as shift
WARNING: shift/reduce conflict for DOT in state 318 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 318 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 318 resolved as shift
WARNING: shift/reduce conflict for CONST in state 319 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 319 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 324 resolved as shift
WARNING: shift/reduce conflict for CONST in state 328 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 328 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 331 resolved as shift
WARNING: shift/reduce conflict for DIV in state 331 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 331 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 332 resolved as shift
WARNING: shift/reduce conflict for DIV in state 332 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 332 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 333 resolved as shift
WARNING: shift/reduce conflict for DIV in state 333 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 333 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 340 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 341 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 341 resolved as shift
WARNING: shift/reduce conflict for PIPE in state 342 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 345 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 346 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 347 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 348 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 348 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 349 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 349 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 349 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 350 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 350 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 350 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 351 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 351 resolved as shift
WARNING: shift/reduce conflict for CARET in state 352 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 364 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 370 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 380 resolved as shift
WARNING: shift/reduce conflict for CONST in state 395 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 395 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 406 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 406 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 406 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 406 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 406 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 406 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 406 resolved as shift
WARNING: shift/reduce conflict for CONST in state 406 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 406 resolved as shift
WARNING: shift/reduce conflict for THIS in state 406 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 406 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 406 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 410 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 410 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 410 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 410 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 410 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 410 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 410 resolved as shift
WARNING: shift/reduce conflict for CONST in state 410 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 410 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 425 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 425 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 425 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 425 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 425 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 425 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 425 resolved as shift
WARNING: shift/reduce conflict for CONST in state 425 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 425 resolved as shift
WARNING: shift/reduce conflict for DOT in state 429 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 429 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 429 resolved as shift
WARNING: shift/reduce conflict for CONST in state 445 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 445 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 450 resolved as shift
WARNING: shift/reduce conflict for CONST in state 471 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 471 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 506 resolved as shift
WARNING: shift/reduce conflict for CONST in state 506 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 506 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 510 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 510 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 510 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 510 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 510 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 510 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 510 resolved as shift
WARNING: shift/reduce conflict for CONST in state 510 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 510 resolved as shift
WARNING: shift/reduce conflict for THIS in state 510 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 510 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 510 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 514 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 514 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 514 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 514 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 514 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 514 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 514 resolved as shift
WARNING: shift/reduce conflict for CONST in state 514 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 514 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 518 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 518 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 518 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 518 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 518 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 518 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 518 resolved as shift
WARNING: shift/reduce conflict for CONST in state 518 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 518 resolved as shift
WARNING: shift/reduce conflict for THIS in state 518 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 518 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 518 resolved as shift
WARNING: shift/reduce conflict for DOT in state 528 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 528 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 528 resolved as shift
WARNING: shift/reduce conflict for DOT in state 529 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 529 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 529 resolved as shift
WARNING: shift/reduce conflict for CONST in state 535 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 535 resolved as shift
WARNING: shift/reduce conflict for CONST in state 538 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 538 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 555 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 555 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 555 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 555 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 555 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 555 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 555 resolved as shift
WARNING: shift/reduce conflict for CONST in state 555 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 555 resolved as shift
WARNING: shift/reduce conflict for THIS in state 555 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 555 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 555 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 558 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 558 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 558 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 558 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 558 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 558 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 558 resolved as shift
WARNING: shift/reduce conflict for CONST in state 558 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 558 resolved as shift
WARNING: shift/reduce conflict for THIS in state 558 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 558 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 558 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 564 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 604 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 614 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 618 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 618 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 618 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 618 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 618 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 618 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 618 resolved as shift
WARNING: shift/reduce conflict for CONST in state 618 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 618 resolved as shift
WARNING: shift/reduce conflict for THIS in state 618 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 618 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 618 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 620 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 620 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 620 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 620 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 620 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 620 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 620 resolved as shift
WARNING: shift/reduce conflict for CONST in state 620 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 620 resolved as shift
WARNING: shift/reduce conflict for THIS in state 620 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 620 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 620 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 621 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 621 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 621 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 621 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 621 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 621 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 621 resolved as shift
WARNING: shift/reduce conflict for CONST in state 621 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 621 resolved as shift
WARNING: shift/reduce conflict for THIS in state 621 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 621 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 621 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 624 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 624 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 624 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 624 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 624 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 624 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 624 resolved as shift
WARNING: shift/reduce conflict for CONST in state 624 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 624 resolved as shift
WARNING: shift/reduce conflict for THIS in state 624 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 624 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 624 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 625 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 625 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 625 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 625 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 625 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 625 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 625 resolved as shift
WARNING: shift/reduce conflict for CONST in state 625 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 625 resolved as shift
WARNING: shift/reduce conflict for THIS in state 625 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 625 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 625 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 628 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 628 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 628 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 628 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 628 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 628 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 628 resolved as shift
WARNING: shift/reduce conflict for CONST in state 628 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 628 resolved as shift
WARNING: shift/reduce conflict for THIS in state 628 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 628 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 628 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 652 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 669 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 669 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 669 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 669 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 669 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 669 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 669 resolved as shift
WARNING: shift/reduce conflict for CONST in state 669 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 669 resolved as shift
WARNING: shift/reduce conflict for THIS in state 669 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 669 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 669 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 684 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 684 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 684 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 684 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 684 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 684 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 684 resolved as shift
WARNING: shift/reduce conflict for CONST in state 684 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 684 resolved as shift
WARNING: shift/reduce conflict for THIS in state 684 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 684 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 684 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 687 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 687 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 687 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 687 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 687 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 687 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 687 resolved as shift
WARNING: shift/reduce conflict for CONST in state 687 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 687 resolved as shift
WARNING: shift/reduce conflict for THIS in state 687 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 687 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 687 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_QUOTE in state 696 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 713 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 713 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 713 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 713 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 713 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 713 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 713 resolved as shift
WARNING: shift/reduce conflict for CONST in state 713 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 713 resolved as shift
WARNING: shift/reduce conflict for THIS in state 713 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 713 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 713 resolved as shift
WARNING: shift/reduce conflict for CONST in state 720 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 720 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 724 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 724 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 724 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 724 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 724 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 724 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 724 resolved as shift
WARNING: shift/reduce conflict for CONST in state 724 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 724 resolved as shift
WARNING: shift/reduce conflict for THIS in state 724 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 724 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 724 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 725 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 725 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 725 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 725 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 725 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 725 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 725 resolved as shift
WARNING: shift/reduce conflict for CONST in state 725 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 725 resolved as shift
WARNING: shift/reduce conflict for THIS in state 725 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 725 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 725 resolved as shift
WARNING: shift/reduce conflict for CONST in state 746 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 746 resolved as shift
WARNING: reduce/reduce conflict in state 37 resolved using rule (primaryExpression -> identifierOrTemplateInstance)
WARNING: rejected rule (unaryExpression -> identifierOrTemplateInstance) in state 37
WARNING: reduce/reduce conflict in state 37 resolved using rule (identifierOrTemplateChain -> identifierOrTemplateInstance)
WARNING: rejected rule (primaryExpression -> identifierOrTemplateInstance) in state 37
WARNING: reduce/reduce conflict in state 77 resolved using rule (cmpExpression -> shiftExpression)
WARNING: rejected rule (relExpression -> shiftExpression) in state 77
WARNING: reduce/reduce conflict in state 106 resolved using rule (functionBody -> blockStatement)
WARNING: rejected rule (statementNoCaseNoDefault -> blockStatement) in state 106
WARNING: reduce/reduce conflict in state 113 resolved using rule (declarationsAndStatements -> declarationOrStatement)
WARNING: rejected rule (empty -> <empty>) in state 113
WARNING: reduce/reduce conflict in state 144 resolved using rule (attribute -> CONST)
WARNING: rejected rule (typeConstructor -> CONST) in state 144
WARNING: reduce/reduce conflict in state 153 resolved using rule (attribute -> IMMUTABLE)
WARNING: rejected rule (typeConstructor -> IMMUTABLE) in state 153
WARNING: reduce/reduce conflict in state 162 resolved using rule (identifierOrTemplateChain -> identifierOrTemplateInstance)
WARNING: rejected rule (primaryExpression -> DOT identifierOrTemplateInstance) in state 162
WARNING: reduce/reduce conflict in state 166 resolved using rule (functionCallExpression -> type arguments)
WARNING: rejected rule (primaryExpression -> type arguments) in state 166
WARNING: reduce/reduce conflict in state 291 resolved using rule (labeledStatement -> IDENTIFIER COLON)
WARNING: rejected rule (empty -> <empty>) in state 291
WARNING: reduce/reduce conflict in state 322 resolved using rule (identifierOrTemplateChain -> identifierOrTemplateInstance)
WARNING: rejected rule (unaryExpression -> identifierOrTemplateInstance) in state 322
WARNING: reduce/reduce conflict in state 322 resolved using rule (identifierOrTemplateChain -> identifierOrTemplateInstance)
WARNING: rejected rule (primaryExpression -> identifierOrTemplateInstance) in state 322
WARNING: reduce/reduce conflict in state 322 resolved using rule (primaryExpression -> identifierOrTemplateInstance)
WARNING: rejected rule (unaryExpression -> identifierOrTemplateInstance) in state 322
WARNING: reduce/reduce conflict in state 366 resolved using rule (foreachType -> IDENTIFIER)
WARNING: rejected rule (identifierOrTemplateInstance -> IDENTIFIER) in state 366
WARNING: reduce/reduce conflict in state 469 resolved using rule (foreachType -> typeConstructors IDENTIFIER)
WARNING: rejected rule (identifierOrTemplateInstance -> IDENTIFIER) in state 469
WARNING: reduce/reduce conflict in state 550 resolved using rule (type -> typeConstructors type2 typeSuffixStar)
WARNING: rejected rule (type -> type2 typeSuffixStar) in state 550
WARNING: reduce/reduce conflict in state 700 resolved using rule (argumentList -> assignExpression)
WARNING: rejected rule (nonVoidInitializer -> assignExpression) in state 700
WARNING: reduce/reduce conflict in state 701 resolved using rule (arrayInitializer -> LBRACKET RBRACKET)
WARNING: rejected rule (arrayLiteral -> LBRACKET RBRACKET) in state 701
WARNING: Rule (unaryExpression -> identifierOrTemplateInstance) is never reduced
WARNING: Rule (relExpression -> shiftExpression) is never reduced
WARNING: Rule (primaryExpression -> type arguments) is never reduced
