Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ARROW
    SCOPE
    CARET
    LESS_EQ
    SIZEOF
    MINUS_MINUS
    GREATER_EQ_DIFF
    SINGLE_QUOTE
    BACK_SLASH

Grammar

Rule 0     S' -> addExpression
Rule 1     addExpression -> mulExpression
Rule 2     addExpression -> addExpression PLUS mulExpression
Rule 3     addExpression -> addExpression MINUS mulExpression
Rule 4     addExpression -> addExpression TILDE mulExpression
Rule 5     aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON
Rule 6     aliasDeclaration -> ALIAS multiplestorageClass type identifierList SEMICOLON
Rule 7     comma_aliasInitializer -> COMMA aliasInitializer comma_aliasInitializer
Rule 8     comma_aliasInitializer -> empty
Rule 9     multiplestorageClass -> storageClass multiplestorageClass
Rule 10    multiplestorageClass -> empty
Rule 11    aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type
Rule 12    aliasInitializer -> IDENTIFIER templateParameters ASSIGN multiplestorageClass type
Rule 13    aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON
Rule 14    aliasInitializer -> IDENTIFIER templateParameters ASSIGN functionLiteralExpression SEMICOLON
Rule 15    aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON
Rule 16    andAndExpression -> orExpression
Rule 17    andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression
Rule 18    andExpression -> cmpExpression
Rule 19    andExpression -> andExpression AMPERSAND cmpExpression
Rule 20    argumentList -> assignExpression
Rule 21    argumentList -> argumentList comma_assign
Rule 22    comma_assign -> COMMA assignExpression comma_assign
Rule 23    comma_assign -> empty
Rule 24    arguments -> LPAREN RPAREN
Rule 25    arguments -> LPAREN argumentList RPAREN
Rule 26    arrayInitializer -> LBRACKET RBRACKET
Rule 27    arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
Rule 28    comma_arrayMemberInitialization -> COMMA arrayMemberInitialization comma_arrayMemberInitialization
Rule 29    comma_arrayMemberInitialization -> empty
Rule 30    array_Literal -> LBRACKET RBRACKET
Rule 31    array_Literal -> LBRACKET argumentList RBRACKET
Rule 32    arrayMemberInitialization -> assignExpression COLON nonVoidInitializer
Rule 33    arrayMemberInitialization -> nonVoidInitializer
Rule 34    assignExpression -> ternaryExpression
Rule 35    assignExpression -> ternaryExpression assignOperator expression
Rule 36    assignOperator -> ASSIGN
Rule 37    assignOperator -> EQ_LEFT
Rule 38    assignOperator -> EQ_RIGHT
Rule 39    assignOperator -> EQ_PLUS
Rule 40    assignOperator -> EQ_MINUS
Rule 41    assignOperator -> EQ_TIMES
Rule 42    assignOperator -> EQ_MODULO
Rule 43    assignOperator -> EQ_AND_BIT
Rule 44    assignOperator -> EQ_DIV
Rule 45    assignOperator -> EQ_OR_BIT
Rule 46    assignOperator -> EQ_XOR_BIT
Rule 47    attribute -> PRIVATE
Rule 48    attribute -> PROTECTED
Rule 49    attribute -> PUBLIC
Rule 50    attribute -> STATIC
Rule 51    attribute -> EXTERN
Rule 52    attribute -> FINAL
Rule 53    attribute -> AUTO
Rule 54    attribute -> CONST
Rule 55    attribute -> IMMUTABLE
Rule 56    attributeDeclaration -> attribute COLON
Rule 57    autoDeclaration -> storageClass multiplestorageClass IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer SEMICOLON
Rule 58    comma_identifier_assign_initializer -> COMMA IDENTIFIER ASSIGN initializer comma_identifier_assign_initializer
Rule 59    comma_identifier_assign_initializer -> empty
Rule 60    blockStatement -> LBRACE RBRACE
Rule 61    blockStatement -> LBRACE declarationsAndStatements RBRACE
Rule 62    bodyStatement -> BODY blockStatement
Rule 63    breakStatement -> BREAK SEMICOLON
Rule 64    breakStatement -> BREAK IDENTIFIER SEMICOLON
Rule 65    baseClass -> type2
Rule 66    baseClassList -> baseClass
Rule 67    baseClassList -> baseClassList COMMA baseClass
Rule 68    builtinType -> BOOL
Rule 69    builtinType -> SHORT
Rule 70    builtinType -> USHORT
Rule 71    builtinType -> INT
Rule 72    builtinType -> UINT
Rule 73    builtinType -> LONG
Rule 74    builtinType -> ULONG
Rule 75    builtinType -> CHAR
Rule 76    builtinType -> FLOAT
Rule 77    builtinType -> DOUBLE
Rule 78    caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
Rule 79    caseStatement -> CASE argumentList COLON declarationsAndStatements
Rule 80    castExpression -> CAST LPAREN RPAREN unaryExpression
Rule 81    castExpression -> CAST LPAREN type RPAREN unaryExpression
Rule 82    castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression
Rule 83    castQualifier -> CONST
Rule 84    castQualifier -> IMMUTABLE
Rule 85    classDeclaration -> CLASS IDENTIFIER SEMICOLON
Rule 86    classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody
Rule 87    classDeclaration -> CLASS IDENTIFIER structBody
Rule 88    cmpExpression -> shiftExpression
Rule 89    cmpExpression -> equalExpression
Rule 90    cmpExpression -> identityExpression
Rule 91    cmpExpression -> relExpression
Rule 92    shiftExpression -> addExpression
Rule 93    shiftExpression -> shiftExpression RIGHT_SHIFT addExpression
Rule 94    shiftExpression -> shiftExpression LEFT_SHIFT addExpression
Rule 95    constraint -> IF LPAREN expression RPAREN
Rule 96    constructor -> THIS parameters multiple_memberFunctionAttribute functionBody
Rule 97    constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON
Rule 98    constructor -> THIS templateParameters parameters multiple_memberFunctionAttribute functionBody
Rule 99    constructor -> THIS templateParameters parameters multiple_memberFunctionAttribute SEMICOLON
Rule 100   constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody
Rule 101   constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON
Rule 102   constructor -> THIS templateParameters parameters multiple_memberFunctionAttribute constraint functionBody
Rule 103   constructor -> THIS templateParameters parameters multiple_memberFunctionAttribute constraint SEMICOLON
Rule 104   multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute
Rule 105   multiple_memberFunctionAttribute -> empty
Rule 106   continueStatement -> CONTINUE SEMICOLON
Rule 107   continueStatement -> CONTINUE IDENTIFIER SEMICOLON
Rule 108   declaration -> multipleattributes declaration2
Rule 109   declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE
Rule 110   multiple_declaration -> declaration multiple_declaration
Rule 111   multiple_declaration -> empty
Rule 112   multipleattributes -> attribute multipleattributes
Rule 113   multipleattributes -> empty
Rule 114   declaration2 -> aliasDeclaration
Rule 115   declaration2 -> aliasThisDeclaration
Rule 116   declaration2 -> anonymousEnumDeclaration
Rule 117   declaration2 -> attributeDeclaration
Rule 118   declaration2 -> classDeclaration
Rule 119   declaration2 -> constructor
Rule 120   declaration2 -> destructor
Rule 121   declaration2 -> enumDeclaration
Rule 122   declaration2 -> functionDeclaration
Rule 123   declaration2 -> importDeclaration
Rule 124   declaration2 -> mixinDeclaration
Rule 125   declaration2 -> unionDeclaration
Rule 126   declaration2 -> variableDeclaration
Rule 127   declarationsAndStatements -> declarationOrStatement
Rule 128   declarationsAndStatements -> declarationOrStatement declarationsAndStatements
Rule 129   declarationOrStatement -> declaration
Rule 130   declarationOrStatement -> statement
Rule 131   declarator -> IDENTIFIER
Rule 132   declarator -> IDENTIFIER ASSIGN initializer
Rule 133   declarator -> IDENTIFIER templateParameters ASSIGN initializer
Rule 134   defaultStatement -> DEFAULT COLON declarationsAndStatements
Rule 135   deleteExpression -> DELETE unaryExpression
Rule 136   destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody
Rule 137   destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON
Rule 138   doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
Rule 139   enumBody -> DOUBLE_QUOTE enumMember DOUBLE_QUOTE
Rule 140   enumBody -> DOUBLE_QUOTE enumMember comma_enumMember DOUBLE_QUOTE
Rule 141   comma_enumMember -> COMMA enumMember comma_enumMember
Rule 142   comma_enumMember -> empty
Rule 143   anonymousEnumMember -> TYPEDEF IDENTIFIER ASSIGN assignExpression
Rule 144   anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression
Rule 145   anonymousEnumMember -> IDENTIFIER
Rule 146   anonymousEnumDeclaration -> ENUM LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
Rule 147   anonymousEnumDeclaration -> ENUM COLON type LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
Rule 148   multipleanonymousEnumMember -> anonymousEnumMember multipleanonymousEnumMember
Rule 149   multipleanonymousEnumMember -> empty
Rule 150   enumDeclaration -> ENUM IDENTIFIER SEMICOLON
Rule 151   enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF SEMICOLON
Rule 152   enumDeclaration -> ENUM IDENTIFIER COLON TYPEDEF enumBody
Rule 153   enumMember -> IDENTIFIER
Rule 154   enumMember -> IDENTIFIER ASSIGN assignExpression
Rule 155   equalExpression -> shiftExpression IS_EQ shiftExpression
Rule 156   equalExpression -> shiftExpression NOT_EQ shiftExpression
Rule 157   expression -> assignExpression
Rule 158   expression -> expression COMMA assignExpression
Rule 159   expressionStatement -> expression SEMICOLON
Rule 160   forStatement -> FOR LPAREN declaration SEMICOLON RPAREN declarationOrStatement
Rule 161   forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON RPAREN declarationOrStatement
Rule 162   forStatement -> FOR LPAREN declaration SEMICOLON expression RPAREN declarationOrStatement
Rule 163   forStatement -> FOR LPAREN statementNoCaseNoDefault SEMICOLON expression RPAREN declarationOrStatement
Rule 164   forStatement -> FOR LPAREN declaration expression SEMICOLON RPAREN declarationOrStatement
Rule 165   forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON RPAREN declarationOrStatement
Rule 166   forStatement -> FOR LPAREN declaration expression SEMICOLON expression RPAREN declarationOrStatement
Rule 167   forStatement -> FOR LPAREN statementNoCaseNoDefault expression SEMICOLON expression RPAREN declarationOrStatement
Rule 168   foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
Rule 169   foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
Rule 170   foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
Rule 171   foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
Rule 172   foreachType -> IDENTIFIER
Rule 173   foreachType -> type IDENTIFIER
Rule 174   foreachType -> typeConstructors IDENTIFIER
Rule 175   foreachType -> typeConstructors type IDENTIFIER
Rule 176   foreachTypeList -> foreachType
Rule 177   foreachTypeList -> foreachTypeList COMMA foreachType
Rule 178   functionBody -> blockStatement
Rule 179   functionCallExpression -> symbol arguments unaryExpression arguments
Rule 180   functionCallExpression -> type arguments
Rule 181   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
Rule 182   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
Rule 183   functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
Rule 184   functionDeclaration -> TYPEDEF IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
Rule 185   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute constraint SEMICOLON
Rule 186   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute SEMICOLON
Rule 187   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute constraint functionBody
Rule 188   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute functionBody
Rule 189   functionDeclaration -> TYPEDEF IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute constraint SEMICOLON
Rule 190   functionDeclaration -> TYPEDEF IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute SEMICOLON
Rule 191   functionDeclaration -> TYPEDEF IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute constraint functionBody
Rule 192   functionDeclaration -> TYPEDEF IDENTIFIER templateParameters parameters multiple_memberFunctionAttribute functionBody
Rule 193   functionLiteralExpression -> FUNCTION parameters multiple_functionAttribute functionBody
Rule 194   functionLiteralExpression -> FUNCTION functionBody
Rule 195   functionLiteralExpression -> FUNCTION TYPEDEF functionBody
Rule 196   functionLiteralExpression -> FUNCTION TYPEDEF parameters multiple_functionAttribute functionBody
Rule 197   functionLiteralExpression -> parameters multiple_functionAttribute functionBody
Rule 198   functionLiteralExpression -> functionBody
Rule 199   functionLiteralExpression -> IDENTIFIER assignExpression
Rule 200   functionLiteralExpression -> FUNCTION parameters multiple_functionAttribute assignExpression
Rule 201   functionLiteralExpression -> FUNCTION TYPEDEF parameters multiple_functionAttribute assignExpression
Rule 202   multiple_functionAttribute -> functionAttribute multiple_functionAttribute
Rule 203   gotoStatement -> GOTO IDENTIFIER SEMICOLON
Rule 204   gotoStatement -> GOTO DEFAULT SEMICOLON
Rule 205   gotoStatement -> GOTO CASE SEMICOLON
Rule 206   gotoStatement -> GOTO CASE expression SEMICOLON
Rule 207   identifierChain -> IDENTIFIER
Rule 208   identifierChain -> identifierChain DOT IDENTIFIER
Rule 209   identifierList -> IDENTIFIER
Rule 210   identifierList -> identifierList COMMA IDENTIFIER
Rule 211   identifierList -> identifierOrTemplateInstance
Rule 212   identifierList -> identifierOrTemplateChain DOT identifierOrTemplateInstance
Rule 213   identifierOrTemplateInstance -> IDENTIFIER
Rule 214   identifierOrTemplateInstance -> templateInstance
Rule 215   identityExpression -> shiftExpression IS shiftExpression
Rule 216   identityExpression -> shiftExpression EXCLAMATION IS shiftExpression
Rule 217   ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement
Rule 218   ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
Rule 219   ifCondition -> AUTO IDENTIFIER ASSIGN expression
Rule 220   ifCondition -> TYPEDEF IDENTIFIER ASSIGN expression
Rule 221   ifCondition -> expression
Rule 222   importBind -> IDENTIFIER
Rule 223   importBind -> IDENTIFIER ASSIGN IDENTIFIER
Rule 224   importBindings -> singleImport COLON importBind
Rule 225   importBindings -> singleImport COLON importBind COLON importBind
Rule 226   importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON
Rule 227   importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON
Rule 228   importDeclaration -> IMPORT importBindings SEMICOLON
Rule 229   comma_singleImport -> COMMA singleImport comma_singleImport
Rule 230   comma_singleImport -> empty
Rule 231   index -> assignExpression
Rule 232   index -> assignExpression RANGE assignExpression
Rule 233   indexExpression -> unaryExpression LBRACKET RBRACKET
Rule 234   indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET
Rule 235   comma_index -> COMMA index comma_index
Rule 236   comma_index -> empty
Rule 237   initializer -> VOID
Rule 238   initializer -> nonVoidInitializer
Rule 239   isExpression -> IS LPAREN type RPAREN
Rule 240   isExpression -> IS LPAREN type identifier RPAREN
Rule 241   isExpression -> IS LPAREN type COLON typeSpecialization RPAREN
Rule 242   isExpression -> IS LPAREN type identifier COLON typeSpecialization RPAREN
Rule 243   isExpression -> IS LPAREN type ASSIGN typeSpecialization RPAREN
Rule 244   isExpression -> IS LPAREN type identifier ASSIGN typeSpecialization RPAREN
Rule 245   isExpression -> IS LPAREN type COLON typeSpecialization COMMA templateParameterList RPAREN
Rule 246   isExpression -> IS LPAREN type identifier COLON typeSpecialization COMMA templateParameterList RPAREN
Rule 247   isExpression -> IS LPAREN type ASSIGN typeSpecialization COMMA templateParameterList RPAREN
Rule 248   isExpression -> IS LPAREN type identifier ASSIGN typeSpecialization COMMA templateParameterList RPAREN
Rule 249   labeledStatement -> IDENTIFIER COLON
Rule 250   labeledStatement -> IDENTIFIER COLON declarationOrStatement
Rule 251   memberFunctionAttribute -> functionAttribute
Rule 252   memberFunctionAttribute -> IMMUTABLE
Rule 253   memberFunctionAttribute -> CONST
Rule 254   memberFunctionAttribute -> RETURN
Rule 255   mixinDeclaration -> mixinExpression SEMICOLON
Rule 256   mixinDeclaration -> templateMixinExpression SEMICOLON
Rule 257   mixinExpression -> MIXIN LPAREN assignExpression RPAREN
Rule 258   mulExpression -> powExpression
Rule 259   mulExpression -> mulExpression TIMES
Rule 260   mulExpression -> mulExpression DIV
Rule 261   mulExpression -> mulExpression MODULO
Rule 262   newAnonClassExpression -> NEW CLASS arguments baseClassList structBody
Rule 263   newAnonClassExpression -> NEW CLASS arguments structBody
Rule 264   newAnonClassExpression -> NEW CLASS baseClassList structBody
Rule 265   newAnonClassExpression -> NEW CLASS structBody
Rule 266   newAnonClassExpression -> NEW arguments CLASS structBody
Rule 267   newAnonClassExpression -> NEW arguments CLASS arguments structBody
Rule 268   newAnonClassExpression -> NEW arguments CLASS baseClassList structBody
Rule 269   newAnonClassExpression -> NEW arguments CLASS arguments baseClassList structBody
Rule 270   newExpression -> NEW type
Rule 271   newExpression -> NEW type LBRACKET assignExpression RBRACKET
Rule 272   newExpression -> NEW type arguments
Rule 273   newExpression -> newAnonClassExpression
Rule 274   nonVoidInitializer -> assignExpression
Rule 275   nonVoidInitializer -> arrayInitializer
Rule 276   nonVoidInitializer -> structInitializer
Rule 277   orExpression -> xorExpression
Rule 278   orExpression -> orExpression PIPE xorExpression
Rule 279   orOrExpression -> andAndExpression
Rule 280   orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression
Rule 281   parameterAttributeStar -> parameterAttribute parameterAttributeStar
Rule 282   parameterAttributeStar -> empty
Rule 283   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
Rule 284   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type IDENTIFIER
Rule 285   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
Rule 286   parameter -> parameterAttributeStar type parameterAttributeStar type IDENTIFIER ELLIPSIS parameterAttributeStar type
Rule 287   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER ASSIGN assignExpression
Rule 288   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type IDENTIFIER
Rule 289   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type ASSIGN assignExpression
Rule 290   parameter -> parameterAttributeStar type parameterAttributeStar type ELLIPSIS parameterAttributeStar type
Rule 291   parameterAttribute -> typeConstructor
Rule 292   parameterAttribute -> FINAL
Rule 293   parameterAttribute -> OUT
Rule 294   parameterAttribute -> AUTO
Rule 295   parameterAttribute -> RETURN
Rule 296   parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
Rule 297   parameters -> LPAREN parameter CommaParameterStar RPAREN
Rule 298   parameters -> LPAREN ELLIPSIS RPAREN
Rule 299   parameters -> LPAREN RPAREN
Rule 300   postblit -> THIS LPAREN THIS RPAREN multiple_memberFunctionAttribute functionBody
Rule 301   postblit -> THIS LPAREN THIS RPAREN multiple_memberFunctionAttribute SEMICOLON
Rule 302   powExpression -> unaryExpression
Rule 303   powExpression -> powExpression DOUBLEXOR unaryExpression
Rule 304   StringLiteralPlus -> LIT_STR StringLiteralPlus
Rule 305   StringLiteralPlus -> LIT_STR
Rule 306   primaryExpression -> identifierOrTemplateInstance
Rule 307   primaryExpression -> DOT identifierOrTemplateInstance
Rule 308   primaryExpression -> typeConstructor LPAREN basicType RPAREN DOT IDENTIFIER
Rule 309   primaryExpression -> basicType DOT IDENTIFIER
Rule 310   primaryExpression -> basicType arguments
Rule 311   primaryExpression -> arrayLiteral
Rule 312   primaryExpression -> LPAREN expression RPAREN
Rule 313   primaryExpression -> functionLiteralExpression
Rule 314   primaryExpression -> traitsExpression
Rule 315   primaryExpression -> mixinExpression
Rule 316   primaryExpression -> importExpression
Rule 317   primaryExpression -> DOLLAR
Rule 318   primaryExpression -> THIS
Rule 319   primaryExpression -> NULL
Rule 320   primaryExpression -> TRUE
Rule 321   primaryExpression -> FALSE
Rule 322   primaryExpression -> INUMBER
Rule 323   primaryExpression -> DNUMBER
Rule 324   primaryExpression -> StringLiteralPlus
Rule 325   primaryExpression -> LIT_CHAR
Rule 326   register -> IDENTIFIER
Rule 327   register -> IDENTIFIER LPAREN INUMBER RPAREN
Rule 328   relExpression -> shiftExpression
Rule 329   relExpression -> relExpression relOperator shiftExpression
Rule 330   relOperator -> LESS
Rule 331   relOperator -> LESSEQ
Rule 332   relOperator -> GREATER
Rule 333   relOperator -> GREATER_EQ
Rule 334   relOperator -> IS_EQ_DIFF
Rule 335   relOperator -> NOT_EQ_DIFF
Rule 336   relOperator -> LESS_EQ_DIFF
Rule 337   relOperator -> LESS_DIFF
Rule 338   relOperator -> GREATER_EQ__DIFF
Rule 339   relOperator -> GREATER_DIFF
Rule 340   singleImport -> IDENTIFIER ASSIGN identifierChain
Rule 341   singleImport -> identifierChain
Rule 342   statement -> statementNoCaseNoDefault
Rule 343   statement -> caseStatement
Rule 344   statement -> caseRangeStatment
Rule 345   statement -> defaultStatement
Rule 346   statementNoCaseNoDefault -> labeledStatement
Rule 347   statementNoCaseNoDefault -> blockStatement
Rule 348   statementNoCaseNoDefault -> ifStatement
Rule 349   statementNoCaseNoDefault -> whileStatement
Rule 350   statementNoCaseNoDefault -> doStatement
Rule 351   statementNoCaseNoDefault -> forStatement
Rule 352   statementNoCaseNoDefault -> foreachStatement
Rule 353   statementNoCaseNoDefault -> switchStatement
Rule 354   statementNoCaseNoDefault -> finalSwitchStatement
Rule 355   statementNoCaseNoDefault -> continueStatement
Rule 356   statementNoCaseNoDefault -> breakStatement
Rule 357   statementNoCaseNoDefault -> returnStatement
Rule 358   statementNoCaseNoDefault -> gotoStatement
Rule 359   statementNoCaseNoDefault -> withStatement
Rule 360   statementNoCaseNoDefault -> conditionalStatement
Rule 361   statementNoCaseNoDefault -> expressionStatement
Rule 362   storageClass -> typeConstructor
Rule 363   storageClass -> AUTO
Rule 364   storageClass -> ENUM
Rule 365   storageClass -> EXTERN
Rule 366   storageClass -> FINAL
Rule 367   storageClass -> STATIC
Rule 368   declarationStar -> declaration declarationStar
Rule 369   declarationStar -> empty
Rule 370   structBody -> LBRACE declarationStar RBRACE
Rule 371   switchStatement -> SWITCH LBRACKET expression RBRACKET statement
Rule 372   symbol -> DOT identifierOrTemplateChain
Rule 373   symbol -> identifierOrTemplateChain
Rule 374   ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression
Rule 375   ternaryExpression -> orOrExpression
Rule 376   typeSuffixStar -> typeSuffix typeSuffixStar
Rule 377   typeSuffixStar -> empty
Rule 378   type -> typeConstructors type2 typeSuffixStar
Rule 379   type -> type2 typeSuffixStar
Rule 380   type2 -> builtinType
Rule 381   type2 -> symbol
Rule 382   type2 -> typeofExpression DOT identifierOrTemplateChain
Rule 383   type2 -> typeofExpression
Rule 384   type2 -> typeConstructor LBRACKET TYPEDEF RBRACKET
Rule 385   typeConstructor -> CONST
Rule 386   typeConstructor -> IMMUTABLE
Rule 387   typeConstructors -> typeConstructor
Rule 388   typeConstructors -> typeConstructor typeConstructors
Rule 389   typeSpecialization -> type
Rule 390   typeSpecialization -> UNION
Rule 391   typeSpecialization -> CLASS
Rule 392   typeSpecialization -> ENUM
Rule 393   typeSpecialization -> FUNCTION
Rule 394   typeSpecialization -> CONST
Rule 395   typeSpecialization -> IMMUTABLE
Rule 396   typeSpecialization -> RETURN
Rule 397   typeSpecialization -> TYPEDEF
Rule 398   typeSuffix -> TIMES
Rule 399   typeSuffix -> LBRACKET type RBRACKET
Rule 400   typeSuffix -> LBRACKET RBRACKET
Rule 401   typeSuffix -> LBRACKET assignExpression RBRACKET
Rule 402   typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET
Rule 403   typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
Rule 404   typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
Rule 405   typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET TYPEDEF RBRACKET
Rule 406   typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute SEMICOLON typeidExpression COLON TYPEID LBRACKET expression RBRACKET
Rule 407   typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET expression RBRACKET
Rule 408   typeSuffix -> SEMICOLON typeofExpression COLON TYPEOF LBRACKET RETURN RBRACKET
Rule 409   typeidExpression -> TYPEID LPAREN type RPAREN
Rule 410   typeidExpression -> TYPEID LPAREN expression RPAREN
Rule 411   unaryExpression -> primaryExpression
Rule 412   unaryExpression -> AMPERSAND unaryExpression
Rule 413   unaryExpression -> EXCLAMATION unaryExpression
Rule 414   unaryExpression -> TIMES unaryExpression
Rule 415   unaryExpression -> PLUS unaryExpression
Rule 416   unaryExpression -> MINUS unaryExpression
Rule 417   unaryExpression -> DOT
Rule 418   unaryExpression -> PLUS_PLUS unaryExpression
Rule 419   unaryExpression -> ELIPSIS
Rule 420   unaryExpression -> newExpression
Rule 421   unaryExpression -> deleteExpression
Rule 422   unaryExpression -> castExpression
Rule 423   unaryExpression -> functionCallExpression
Rule 424   unaryExpression -> indexExpression
Rule 425   unaryExpression -> LBRACKET TYPEDEF RBRACKET DOT identifierOrTemplateInstance
Rule 426   unaryExpression -> unaryExpression DOT newExpression
Rule 427   unaryExpression -> unaryExpression DOT
Rule 428   unaryExpression -> identifierOrTemplateInstance
Rule 429   unaryExpression -> RANGE
Rule 430   unaryExpression -> unaryExpression PLUS_PLUS
Rule 431   unionDeclaration -> UNION IDENTIFIER templateParameters structBody
Rule 432   unionDeclaration -> UNION IDENTIFIER templateParameters constraint structBody
Rule 433   unionDeclaration -> UNION IDENTIFIER structBody
Rule 434   unionDeclaration -> UNION IDENTIFIER SEMICOLON
Rule 435   unionDeclaration -> UNION structBody
Rule 436   CommaDeclarator -> COMMA declarator CommaDeclarator
Rule 437   CommaDeclarator -> empty
Rule 438   variableDeclaration -> multiplestorageClass TYPEDEF declarator CommaDeclarator SEMICOLON
Rule 439   variableDeclaration -> multiplestorageClass TYPEDEF IDENTIFIER ASSIGN functionBody SEMICOLON
Rule 440   variableDeclaration -> autoDeclaration
Rule 441   whileStatement -> WHILE LBRACKET expression RBRACKET declarationOrStatement
Rule 442   withStatement -> WITH LBRACKET expression RBRACKET statementNoCaseNoDefault
Rule 443   empty -> <empty>

Terminals, with rules where they appear

ALIAS                : 5 6 15
AMPERSAND            : 19 412
ARROW                : 
ASSIGN               : 11 12 13 14 36 57 58 132 133 143 144 154 219 220 223 243 244 247 248 283 285 287 289 340 439
AUTO                 : 53 219 294 363
BACK_SLASH           : 
BODY                 : 62
BOOL                 : 68
BREAK                : 63 64
CARET                : 
CASE                 : 78 78 79 205 206
CAST                 : 80 81 82
CHAR                 : 75
CLASS                : 85 86 87 262 263 264 265 266 267 268 269 391
COLON                : 32 56 78 78 79 86 134 147 151 152 224 225 225 241 242 245 246 249 250 374 403 404 405 406 407 408
COMMA                : 7 22 28 58 67 141 158 177 210 226 229 235 245 246 247 248 296 436
COMMENT              : 
CONST                : 54 83 253 385 394
CONTINUE             : 106 107
DEFAULT              : 134 204
DELEGATE             : 403 404
DELETE               : 135
DIV                  : 260
DNUMBER              : 323
DO                   : 138
DOLLAR               : 317
DOT                  : 208 212 307 308 309 372 382 417 425 426 427
DOUBLE               : 77
DOUBLE_AMPERSAND     : 17
DOUBLE_PIPE          : 280
DOUBLE_QUOTE         : 139 139 140 140
ELLIPSIS             : 78 283 284 285 286 287 288 289 290 296 298
ELSE                 : 218
ENUM                 : 146 147 150 151 152 364 392
EQ_AND_BIT           : 43
EQ_DIV               : 44
EQ_LEFT              : 37
EQ_MINUS             : 40
EQ_MODULO            : 42
EQ_OR_BIT            : 45
EQ_PLUS              : 39
EQ_RIGHT             : 38
EQ_TIMES             : 41
EQ_XOR_BIT           : 46
EXCLAMATION          : 216 413
EXTERN               : 51 365
FALSE                : 321
FINAL                : 52 292 366
FLOAT                : 76
FOR                  : 160 161 162 163 164 165 166 167
FOREACH              : 168 169
FOREACH_REVERSE      : 170 171
FUNCTION             : 193 194 195 196 200 201 393 405 406
GOTO                 : 203 204 205 206
GREATER              : 332
GREATER_DIFF         : 339
GREATER_EQ           : 333
GREATER_EQ_DIFF      : 
IDENTIFIER           : 11 12 13 14 15 57 58 64 85 86 87 107 131 132 133 143 144 145 150 151 152 153 154 172 173 174 175 181 182 183 184 185 186 187 188 189 190 191 192 199 203 207 208 209 210 213 219 220 222 223 223 249 250 283 283 284 284 285 286 287 288 308 309 326 327 340 431 432 433 434 439
IF                   : 95 217 218
IMMUTABLE            : 55 84 252 386 395
IMPORT               : 226 227 228
INT                  : 71
INUMBER              : 322 327
IS_EQ                : 155
IS_EQ_DIFF           : 334
LBRACE               : 60 61 109 146 147 370
LBRACKET             : 26 27 30 31 233 234 271 371 384 399 400 401 402 403 404 405 406 407 408 425 441 442
LEFT_SHIFT           : 94
LESS                 : 330
LESS_DIFF            : 337
LESS_EQ              : 
LESS_EQ_DIFF         : 336
LIT_CHAR             : 325
LIT_STR              : 304 305
LONG                 : 73
LPAREN               : 24 25 80 81 82 95 136 137 138 160 161 162 163 164 165 166 167 168 169 170 171 217 218 239 240 241 242 243 244 245 246 247 248 257 296 297 298 299 300 301 308 312 327 409 410
MINUS                : 3 416
MINUS_MINUS          : 
MIXIN                : 257
MODULO               : 261
NEW                  : 262 263 264 265 266 267 268 269 270 271 272
NOT_EQ               : 156
NOT_EQ_DIFF          : 335
NULL                 : 319
PIPE                 : 278
PLUS                 : 2 415
PLUS_PLUS            : 418 430
PRIVATE              : 47
PROTECTED            : 48
PUBLIC               : 49
QUESTION             : 374
RANGE                : 169 171 232 402 429
RBRACE               : 60 61 109 146 147 370
RBRACKET             : 26 27 30 31 169 233 234 271 371 384 399 400 401 402 403 404 405 406 407 408 425 441 442
RETURN               : 254 295 396 408
RIGHT_SHIFT          : 93
RPAREN               : 24 25 80 81 82 95 136 137 138 160 161 162 163 164 165 166 167 168 170 171 217 218 239 240 241 242 243 244 245 246 247 248 257 296 297 298 299 300 301 308 312 327 409 410
SCOPE                : 
SEMICOLON            : 5 6 13 14 15 57 63 64 85 97 99 101 103 106 107 137 138 150 151 159 160 161 162 163 164 165 166 167 168 169 170 171 181 183 185 186 189 190 203 204 205 206 226 227 228 255 256 301 403 404 405 406 407 408 434 438 439
SHORT                : 69
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 50 367
SWITCH               : 371
THIS                 : 15 96 97 98 99 100 101 102 103 136 137 300 300 301 301 318
TILDE                : 4 136 137
TIMES                : 259 398 414
TRUE                 : 320
TYPEDEF              : 143 151 152 183 184 189 190 191 192 195 196 201 220 384 397 403 405 425 438 439
TYPEID               : 403 404 405 406 409 410
TYPEOF               : 407 408
UINT                 : 72
ULONG                : 74
UNION                : 390 431 432 433 434 435
USHORT               : 70
VOID                 : 237
WHILE                : 138 441
WITH                 : 442
error                : 

Nonterminals, with rules where they appear

CommaDeclarator      : 436 438
CommaParameterStar   : 296 297
DOUBLEXOR            : 303
ELIPSIS              : 419
GREATER_EQ__DIFF     : 338
IS                   : 215 216 239 240 241 242 243 244 245 246 247 248
LESSEQ               : 331
OUT                  : 293
StringLiteralPlus    : 304 324
addExpression        : 2 3 4 92 93 94 0
aliasDeclaration     : 114
aliasInitializer     : 5 7
aliasThisDeclaration : 115
andAndExpression     : 17 279 280
andExpression        : 19
anonymousEnumDeclaration : 116
anonymousEnumMember  : 146 147 148
argumentList         : 21 25 31 79
arguments            : 179 179 180 262 263 266 267 267 268 269 269 272 310
arrayInitializer     : 275
arrayLiteral         : 311
arrayMemberInitialization : 27 28
array_Literal        : 
assignExpression     : 20 22 32 78 78 143 144 154 157 158 199 200 201 231 232 232 257 271 274 283 285 287 289 401 402 402
assignOperator       : 35
attribute            : 56 109 112
attributeDeclaration : 117
autoDeclaration      : 440
baseClass            : 66 67
baseClassList        : 67 86 262 264 268 269
basicType            : 308 309 310
blockStatement       : 62 178 347
bodyStatement        : 
breakStatement       : 356
builtinType          : 380
caseRangeStatement   : 
caseRangeStatment    : 344
caseStatement        : 343
castExpression       : 422
castQualifier        : 82
classDeclaration     : 118
cmpExpression        : 18 19
comma_aliasInitializer : 5 7
comma_arrayMemberInitialization : 27 28
comma_assign         : 21 22
comma_enumMember     : 140 141
comma_identifier_assign_initializer : 57 58
comma_index          : 234 235
comma_singleImport   : 226 227 229
conditionalStatement : 360
constraint           : 100 101 102 103 185 187 189 191 432
constructor          : 119
continueStatement    : 355
declaration          : 110 129 160 162 164 166 368
declaration2         : 108
declarationOrStatement : 127 128 160 161 162 163 164 165 166 167 168 169 170 171 217 218 218 250 441
declarationStar      : 368 370
declarationsAndStatements : 61 78 79 128 134
declarator           : 436 438
defaultStatement     : 345
deleteExpression     : 421
destructor           : 120
doStatement          : 350
empty                : 8 10 23 29 59 105 111 113 142 149 230 236 282 369 377 437
enumBody             : 152
enumDeclaration      : 121
enumMember           : 139 140 141
equalExpression      : 89
expression           : 35 95 138 158 159 162 163 164 165 166 166 167 167 168 169 169 170 171 171 206 219 220 221 312 371 374 404 406 407 410 441 442
expressionStatement  : 361
finalSwitchStatement : 354
forStatement         : 351
foreachStatement     : 352
foreachType          : 169 171 176 177
foreachTypeList      : 168 170 177
functionAttribute    : 202 251
functionBody         : 96 98 100 102 136 182 184 187 188 191 192 193 194 195 196 197 198 300 439
functionCallExpression : 423
functionDeclaration  : 122
functionLiteralExpression : 13 14 313
gotoStatement        : 358
identifier           : 240 242 244 246 248
identifierChain      : 208 340 341
identifierList       : 6 210
identifierOrTemplateChain : 212 372 373 382
identifierOrTemplateInstance : 211 212 306 307 425 428
identityExpression   : 90
ifCondition          : 217 218
ifStatement          : 348
importBind           : 224 225 225
importBindings       : 226 228
importDeclaration    : 123
importExpression     : 316
index                : 234 235
indexExpression      : 424
initializer          : 57 58 132 133
isExpression         : 
labeledStatement     : 346
memberFunctionAttribute : 104
mixinDeclaration     : 124
mixinExpression      : 255 315
mulExpression        : 1 2 3 4 259 260 261
multiple_declaration : 109 110
multiple_functionAttribute : 193 196 197 200 201 202
multiple_memberFunctionAttribute : 96 97 98 99 100 101 102 103 104 136 137 181 182 183 184 185 186 187 188 189 190 191 192 300 301 403 404 405 406
multipleanonymousEnumMember : 146 147 148
multipleattributes   : 108 109 112
multiplestorageClass : 6 9 11 12 57 181 182 185 186 187 188 438 439
newAnonClassExpression : 273
newExpression        : 420 426
nonVoidInitializer   : 32 33 238
orExpression         : 16 17 278
orOrExpression       : 280 374 375
parameter            : 296 297
parameterAttribute   : 281
parameterAttributeStar : 281 283 283 283 284 284 284 285 285 285 286 286 286 287 287 287 288 288 288 289 289 289 290 290 290
parameters           : 96 97 98 99 100 101 102 103 181 182 183 184 185 186 187 188 189 190 191 192 193 196 197 200 201 403 404 405 406
postblit             : 
powExpression        : 258 303
primaryExpression    : 411
register             : 
relExpression        : 91 329
relOperator          : 329
returnStatement      : 357
shiftExpression      : 88 93 94 155 155 156 156 215 215 216 216 328 329
singleImport         : 224 225 226 227 229
statement            : 130 371
statementNoCaseNoDefault : 138 161 163 165 167 342 442
storageClass         : 9 57 181 182 185 186 187 188
structBody           : 86 87 262 263 264 265 266 267 268 269 431 432 433 435
structInitializer    : 276
switchStatement      : 353
symbol               : 179 381
templateInstance     : 214
templateMixinExpression : 256
templateParameterList : 245 246 247 248
templateParameters   : 12 14 98 99 102 103 133 185 186 187 188 189 190 191 192 431 432
ternaryExpression    : 34 35 374
traitsExpression     : 314
type                 : 6 11 12 81 147 173 175 180 239 240 241 242 243 244 245 246 247 248 270 271 272 283 283 283 284 284 284 285 285 285 286 286 286 287 287 287 288 288 288 289 289 289 290 290 290 389 399 409
type2                : 65 378 379
typeConstructor      : 291 308 362 384 387 388
typeConstructors     : 174 175 378 388
typeSpecialization   : 241 242 243 244 245 246 247 248
typeSuffix           : 376
typeSuffixStar       : 376 378 379
typeidExpression     : 403 404 405 406
typeofExpression     : 382 383 407 408
unaryExpression      : 80 81 82 135 179 233 234 302 303 412 413 414 415 416 418 426 427 430
unionDeclaration     : 125
variableDeclaration  : 126
whileStatement       : 349
withStatement        : 359
xorExpression        : 277 278

