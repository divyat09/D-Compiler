Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    POST_PLUS_PLUS
    COMMENT
    ARROW
    DOUBLE
    NOT_EQ_DIFF
    SIZEOF
    EMPTY
    POST_MINUS_MINUS
    IdentifierOrTemplateInstance
    GREATER_EQ_DIFF
    IS_EQ_DIFF
    DELEGATE
    SINGLE_QUOTE
    LESS_EQ_DIFF
    DOUBLE_QUOTE
    LESS_DIFF
    GREATER_DIFF
    UTIMES
    TYPEDEF
    BACK_SLASH

Grammar

Rule 0     S' -> Declaration_mult
Rule 1     Declaration_mult -> Declaration Declaration_mult
Rule 2     Declaration_mult -> empty
Rule 3     DeclDefs -> DeclDef
Rule 4     DeclDefs -> DeclDef DeclDefs
Rule 5     DeclDefs_opt -> DeclDefs
Rule 6     DeclDefs_opt -> empty
Rule 7     DeclDef -> AttributeSpecifier
Rule 8     DeclDef -> Declaration
Rule 9     DeclDef -> Allocator
Rule 10    DeclDef -> Deallocator
Rule 11    DeclDef -> AliasThis
Rule 12    DeclDef -> MixinDeclaration
Rule 13    DeclDef -> SEMICOLON
Rule 14    ModuleFullyQualifiedName -> ModuleName
Rule 15    ModuleFullyQualifiedName -> Packages DOT ModuleName
Rule 16    ModuleName -> IDENTIFIER
Rule 17    Packages -> PackageName
Rule 18    Packages -> Packages DOT PackageName
Rule 19    PackageName -> IDENTIFIER
Rule 20    ImportDeclaration -> IMPORT ImportList SEMICOLON
Rule 21    ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON
Rule 22    ImportList -> Import
Rule 23    ImportList -> ImportBindings
Rule 24    ImportList -> Import COMMA ImportList
Rule 25    Import -> ModuleFullyQualifiedName
Rule 26    Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
Rule 27    ImportBindings -> Import COLON ImportBindList
Rule 28    ImportBindList -> ImportBind
Rule 29    ImportBindList -> ImportBind COMMA ImportBindList
Rule 30    ImportBind -> IDENTIFIER
Rule 31    ImportBind -> IDENTIFIER ASSIGN IDENTIFIER
Rule 32    ModuleAliasIdentifier -> IDENTIFIER
Rule 33    MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON
Rule 34    Declaration -> FuncDeclaration
Rule 35    Declaration -> VarDeclarations
Rule 36    Declaration -> AliasDeclaration
Rule 37    Declaration -> AggregateDeclaration
Rule 38    Declaration -> EnumDeclaration
Rule 39    Declaration -> ImportDeclaration
Rule 40    VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON
Rule 41    Declarators -> DeclaratorInitializer
Rule 42    Declarators -> DeclaratorInitializer COMMA DeclaratorIdentifierList
Rule 43    DeclaratorInitializer -> VarDeclarator
Rule 44    DeclaratorInitializer -> VarDeclarator ASSIGN Initializer
Rule 45    DeclaratorInitializer -> AltDeclarator ASSIGN Initializer
Rule 46    DeclaratorInitializer -> AltDeclarator
Rule 47    DeclaratorIdentifierList -> DeclaratorIdentifier
Rule 48    DeclaratorIdentifierList -> DeclaratorIdentifier COMMA DeclaratorIdentifierList
Rule 49    DeclaratorIdentifier -> VarDeclaratorIdentifier
Rule 50    DeclaratorIdentifier -> AltDeclaratorIdentifier
Rule 51    VarDeclaratorIdentifier -> IDENTIFIER
Rule 52    VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer
Rule 53    AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt
Rule 54    AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer
Rule 55    AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
Rule 56    AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer
Rule 57    Declarator -> VarDeclarator
Rule 58    Declarator -> AltDeclarator
Rule 59    VarDeclarator -> BasicType2_opt IDENTIFIER
Rule 60    AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
Rule 61    AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN
Rule 62    AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
Rule 63    AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
Rule 64    AltDeclaratorX -> BasicType2_opt IDENTIFIER
Rule 65    AltDeclaratorX -> BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix
Rule 66    AltDeclaratorX -> AltDeclarator
Rule 67    AltDeclaratorSuffixes -> AltDeclaratorSuffix
Rule 68    AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes
Rule 69    AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes
Rule 70    AltDeclaratorSuffixes_opt -> empty
Rule 71    AltDeclaratorSuffix -> LBRACKET RBRACKET
Rule 72    AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET
Rule 73    AltDeclaratorSuffix -> LBRACKET Type RBRACKET
Rule 74    AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt
Rule 75    Type -> TypeCtors_opt BasicType BasicType2_opt
Rule 76    Type_opt -> Type
Rule 77    Type_opt -> empty
Rule 78    TypeCtors -> TypeCtor
Rule 79    TypeCtors -> TypeCtor TypeCtors
Rule 80    TypeCtors_opt -> TypeCtors
Rule 81    TypeCtors_opt -> empty
Rule 82    TypeCtor -> CONST
Rule 83    TypeCtor -> IMMUTABLE
Rule 84    BasicType -> BasicTypeX
Rule 85    BasicType -> DOT IdentifierList
Rule 86    BasicType -> IdentifierList
Rule 87    BasicType -> Typeof
Rule 88    BasicType -> Typeof DOT IdentifierList
Rule 89    BasicType -> TypeCtor LPAREN Type RPAREN
Rule 90    BasicTypeX -> BOOL
Rule 91    BasicTypeX -> SHORT
Rule 92    BasicTypeX -> USHORT
Rule 93    BasicTypeX -> INT
Rule 94    BasicTypeX -> UINT
Rule 95    BasicTypeX -> LONG
Rule 96    BasicTypeX -> ULONG
Rule 97    BasicTypeX -> CHAR
Rule 98    BasicTypeX -> FLOAT
Rule 99    BasicTypeX -> VOID
Rule 100   BasicType2 -> BasicType2X BasicType2_opt
Rule 101   BasicType2_opt -> BasicType2
Rule 102   BasicType2_opt -> empty
Rule 103   BasicType2X -> TIMES
Rule 104   BasicType2X -> LBRACKET RBRACKET
Rule 105   BasicType2X -> LBRACKET AssignExpression RBRACKET
Rule 106   BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET
Rule 107   BasicType2X -> LBRACKET Type RBRACKET
Rule 108   BasicType2X -> FUNCTION Parameters
Rule 109   IdentifierList -> IDENTIFIER
Rule 110   IdentifierList -> IDENTIFIER DOT IdentifierList
Rule 111   IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
Rule 112   StorageClasses -> StorageClass
Rule 113   StorageClasses -> StorageClass StorageClasses
Rule 114   StorageClass -> ENUM
Rule 115   StorageClass -> STATIC
Rule 116   StorageClass -> EXTERN
Rule 117   StorageClass -> FINAL
Rule 118   StorageClass -> AUTO
Rule 119   StorageClass -> CONST
Rule 120   StorageClass -> IMMUTABLE
Rule 121   Initializer -> VoidInitializer
Rule 122   Initializer -> NonVoidInitializer
Rule 123   NonVoidInitializer -> ExpInitializer
Rule 124   NonVoidInitializer -> ArrayInitializer
Rule 125   ExpInitializer -> AssignExpression
Rule 126   ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET
Rule 127   ArrayMemberInitializations -> ArrayMemberInitialization
Rule 128   ArrayMemberInitializations -> ArrayMemberInitialization COMMA
Rule 129   ArrayMemberInitializations -> ArrayMemberInitialization COMMA ArrayMemberInitializations
Rule 130   ArrayMemberInitializations_opt -> ArrayMemberInitializations
Rule 131   ArrayMemberInitializations_opt -> empty
Rule 132   ArrayMemberInitialization -> NonVoidInitializer
Rule 133   ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer
Rule 134   AutoDeclaration -> StorageClasses AutoDeclarationX SEMICOLON
Rule 135   AutoDeclarationX -> AutoDeclarationY
Rule 136   AutoDeclarationX -> AutoDeclarationX COMMA AutoDeclarationY
Rule 137   AutoDeclarationY -> IDENTIFIER ASSIGN Initializer
Rule 138   StorageClasses_opt -> StorageClasses
Rule 139   StorageClasses_opt -> empty
Rule 140   AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
Rule 141   AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
Rule 142   AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON
Rule 143   AliasDeclarationX -> AliasDeclarationY
Rule 144   AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY
Rule 145   AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type
Rule 146   AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral
Rule 147   Typeof -> TYPEOF LPAREN Expression RPAREN
Rule 148   Typeof -> TYPEOF LPAREN RETURN RPAREN
Rule 149   VoidInitializer -> VOID
Rule 150   AttributeSpecifier -> Attribute COLON
Rule 151   AttributeSpecifier -> Attribute DeclarationBlock
Rule 152   Attribute -> VisibilityAttribute
Rule 153   Attribute -> STATIC
Rule 154   Attribute -> EXTERN
Rule 155   Attribute -> FINAL
Rule 156   Attribute -> AUTO
Rule 157   Attribute -> CONST
Rule 158   Attribute -> IMMUTABLE
Rule 159   Attribute -> RETURN
Rule 160   DeclarationBlock -> DeclDef
Rule 161   DeclarationBlock -> LBRACE DeclDefs_opt RBRACE
Rule 162   VisibilityAttribute -> PRIVATE
Rule 163   VisibilityAttribute -> PROTECTED
Rule 164   VisibilityAttribute -> PUBLIC
Rule 165   Expression -> CommaExpression
Rule 166   CommaExpression -> AssignExpression
Rule 167   CommaExpression -> AssignExpression COMMA CommaExpression
Rule 168   AssignExpression -> ConditionalExpression
Rule 169   AssignExpression -> ConditionalExpression ASSIGN AssignExpression
Rule 170   AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression
Rule 171   AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression
Rule 172   AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression
Rule 173   AssignExpression -> ConditionalExpression EQ_DIV AssignExpression
Rule 174   AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression
Rule 175   AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression
Rule 176   AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression
Rule 177   AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression
Rule 178   AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression
Rule 179   AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression
Rule 180   ConditionalExpression -> OrOrExpression
Rule 181   ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression
Rule 182   OrOrExpression -> AndAndExpression
Rule 183   OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression
Rule 184   AndAndExpression -> OrExpression
Rule 185   AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression
Rule 186   OrExpression -> XorExpression
Rule 187   OrExpression -> OrExpression PIPE XorExpression
Rule 188   XorExpression -> AndExpression
Rule 189   XorExpression -> XorExpression CARET AndExpression
Rule 190   AndExpression -> CmpExpression
Rule 191   AndExpression -> AndExpression AMPERSAND CmpExpression
Rule 192   CmpExpression -> ShiftExpression
Rule 193   CmpExpression -> EqualExpression
Rule 194   CmpExpression -> RelExpression
Rule 195   EqualExpression -> ShiftExpression IS_EQ ShiftExpression
Rule 196   EqualExpression -> ShiftExpression NOT_EQ ShiftExpression
Rule 197   RelExpression -> ShiftExpression LESS ShiftExpression
Rule 198   RelExpression -> ShiftExpression GREATER_EQ ShiftExpression
Rule 199   RelExpression -> ShiftExpression GREATER ShiftExpression
Rule 200   RelExpression -> ShiftExpression LESS_EQ ShiftExpression
Rule 201   ShiftExpression -> AddExpression
Rule 202   ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression
Rule 203   ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression
Rule 204   AddExpression -> MulExpression
Rule 205   AddExpression -> AddExpression PLUS MulExpression
Rule 206   AddExpression -> AddExpression MINUS MulExpression
Rule 207   MulExpression -> UnaryExpression
Rule 208   MulExpression -> MulExpression TIMES UnaryExpression
Rule 209   MulExpression -> MulExpression DIV UnaryExpression
Rule 210   MulExpression -> MulExpression MODULO UnaryExpression
Rule 211   UnaryExpression -> UAMPERSAND UnaryExpression
Rule 212   UnaryExpression -> PLUS_PLUS UnaryExpression
Rule 213   UnaryExpression -> MINUS_MINUS UnaryExpression
Rule 214   UnaryExpression -> TIMES UnaryExpression
Rule 215   UnaryExpression -> UMINUS UnaryExpression
Rule 216   UnaryExpression -> UPLUS UnaryExpression
Rule 217   UnaryExpression -> EXCLAMATION UnaryExpression
Rule 218   UnaryExpression -> ComplementExpression
Rule 219   UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER
Rule 220   UnaryExpression -> CastExpression
Rule 221   UnaryExpression -> PowExpression
Rule 222   ComplementExpression -> TILDE UnaryExpression
Rule 223   NewExpression -> NEW AllocatorArguments_opt Type
Rule 224   NewExpression -> NewExpressionWithArgs
Rule 225   NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
Rule 226   NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
Rule 227   NewExpressionWithArgs -> NewAnonClassExpression
Rule 228   AllocatorArguments -> LPAREN ArgumentList_opt RPAREN
Rule 229   AllocatorArguments_opt -> AllocatorArguments
Rule 230   AllocatorArguments_opt -> empty
Rule 231   ArgumentList_opt -> ArgumentList
Rule 232   ArgumentList_opt -> empty
Rule 233   ArgumentList -> AssignExpression
Rule 234   ArgumentList -> AssignExpression COMMA
Rule 235   ArgumentList -> AssignExpression COMMA ArgumentList
Rule 236   CastExpression -> CAST LPAREN Type RPAREN UnaryExpression
Rule 237   CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
Rule 238   PowExpression -> PostfixExpression
Rule 239   PowExpression -> PostfixExpression POWER UnaryExpression
Rule 240   PostfixExpression -> PrimaryExpression
Rule 241   PostfixExpression -> PostfixExpression DOT IDENTIFIER
Rule 242   PostfixExpression -> PostfixExpression DOT NewExpression
Rule 243   PostfixExpression -> PostfixExpression PLUS_PLUS
Rule 244   PostfixExpression -> PostfixExpression MINUS_MINUS
Rule 245   PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN
Rule 246   PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
Rule 247   PrimaryExpression -> IDENTIFIER
Rule 248   PrimaryExpression -> DOT IDENTIFIER
Rule 249   PrimaryExpression -> THIS
Rule 250   PrimaryExpression -> NULL
Rule 251   PrimaryExpression -> TRUE
Rule 252   PrimaryExpression -> FALSE
Rule 253   PrimaryExpression -> DOLLAR
Rule 254   PrimaryExpression -> INUMBER
Rule 255   PrimaryExpression -> DNUMBER
Rule 256   PrimaryExpression -> LIT_CHAR
Rule 257   PrimaryExpression -> LIT_STRPlus
Rule 258   PrimaryExpression -> ArrayLiteral
Rule 259   PrimaryExpression -> FunctionLiteral
Rule 260   PrimaryExpression -> MixinExpression
Rule 261   PrimaryExpression -> ImportExpression
Rule 262   PrimaryExpression -> NewExpressionWithArgs
Rule 263   PrimaryExpression -> BasicTypeX IDENTIFIER
Rule 264   PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN
Rule 265   PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
Rule 266   PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
Rule 267   PrimaryExpression -> Typeof
Rule 268   PrimaryExpression -> LPAREN Expression RPAREN
Rule 269   PrimaryExpression -> TypeidExpression
Rule 270   ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET
Rule 271   FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
Rule 272   FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody
Rule 273   FunctionLiteral -> FunctionLiteralBody
Rule 274   ParameterAttributes -> Parameters
Rule 275   ParameterAttributes_opt -> ParameterAttributes_opt
Rule 276   ParameterAttributes_opt -> empty
Rule 277   ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt
Rule 278   FunctionLiteralBody -> BlockStatement
Rule 279   FunctionLiteralBody -> BodyStatement
Rule 280   LIT_STRPlus -> LIT_STR LIT_STRPlus
Rule 281   LIT_STRPlus -> LIT_STR
Rule 282   MixinExpression -> MIXIN LPAREN AssignExpression RPAREN
Rule 283   ImportExpression -> IMPORT LPAREN AssignExpression RPAREN
Rule 284   TypeidExpression -> TYPEID LPAREN Type RPAREN
Rule 285   TypeidExpression -> TYPEID LPAREN Expression RPAREN
Rule 286   Statement -> SEMICOLON
Rule 287   Statement -> NonEmptyStatement
Rule 288   Statement -> ScopeBlockStatement
Rule 289   NoScopeNonEmptyStatement -> NonEmptyStatement
Rule 290   NoScopeNonEmptyStatement -> BlockStatement
Rule 291   NoScopeStatement -> SEMICOLON
Rule 292   NoScopeStatement -> NonEmptyStatement
Rule 293   NoScopeStatement -> BlockStatement
Rule 294   NonEmptyOrScopeBlockStatement -> NonEmptyStatement
Rule 295   NonEmptyOrScopeBlockStatement -> ScopeBlockStatement
Rule 296   NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault
Rule 297   NonEmptyStatement -> CaseStatement
Rule 298   NonEmptyStatement -> CaseRangeStatement
Rule 299   NonEmptyStatement -> DefaultStatement
Rule 300   NonEmptyStatementNoCaseNoDefault -> LabeledStatement
Rule 301   NonEmptyStatementNoCaseNoDefault -> ExpressionStatement
Rule 302   NonEmptyStatementNoCaseNoDefault -> DeclarationStatement
Rule 303   NonEmptyStatementNoCaseNoDefault -> IfStatement
Rule 304   NonEmptyStatementNoCaseNoDefault -> WhileStatement
Rule 305   NonEmptyStatementNoCaseNoDefault -> DoStatement
Rule 306   NonEmptyStatementNoCaseNoDefault -> ForStatement
Rule 307   NonEmptyStatementNoCaseNoDefault -> ForeachStatement
Rule 308   NonEmptyStatementNoCaseNoDefault -> SwitchStatement
Rule 309   NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement
Rule 310   NonEmptyStatementNoCaseNoDefault -> ContinueStatement
Rule 311   NonEmptyStatementNoCaseNoDefault -> BreakStatement
Rule 312   NonEmptyStatementNoCaseNoDefault -> ReturnStatement
Rule 313   NonEmptyStatementNoCaseNoDefault -> GotoStatement
Rule 314   NonEmptyStatementNoCaseNoDefault -> WithStatement
Rule 315   NonEmptyStatementNoCaseNoDefault -> MixinStatement
Rule 316   NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement
Rule 317   NonEmptyStatementNoCaseNoDefault -> ImportDeclaration
Rule 318   ScopeStatement -> NonEmptyStatement
Rule 319   ScopeStatement -> BlockStatement
Rule 320   ScopeBlockStatement -> BlockStatement
Rule 321   LabeledStatement -> IDENTIFIER COLON
Rule 322   LabeledStatement -> IDENTIFIER COLON NoScopeStatement
Rule 323   LabeledStatement -> IDENTIFIER COLON Statement
Rule 324   BlockStatement -> LBRACE RBRACE
Rule 325   BlockStatement -> LBRACE StatementList RBRACE
Rule 326   StatementList -> Statement
Rule 327   StatementList -> Statement StatementList
Rule 328   ExpressionStatement -> Expression SEMICOLON
Rule 329   DeclarationStatement -> StorageClasses_opt Declaration
Rule 330   IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement
Rule 331   IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
Rule 332   IfCondition -> Expression
Rule 333   IfCondition -> AUTO IDENTIFIER ASSIGN Expression
Rule 334   IfCondition -> TypeCtors IDENTIFIER ASSIGN Expression
Rule 335   IfCondition -> TypeCtors_opt BasicType Declarator ASSIGN Expression
Rule 336   ThenStatement -> ScopeStatement
Rule 337   ElseStatement -> ScopeStatement
Rule 338   WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement
Rule 339   DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN
Rule 340   ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
Rule 341   Initialize -> SEMICOLON
Rule 342   Initialize -> NoScopeNonEmptyStatement
Rule 343   Test -> Expression
Rule 344   Test_opt -> Test
Rule 345   Test_opt -> empty
Rule 346   Increment -> Expression
Rule 347   Increment_opt -> Increment
Rule 348   Increment_opt -> empty
Rule 349   AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
Rule 350   ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement
Rule 351   Foreach -> FOREACH
Rule 352   Foreach -> FOREACH_REVERSE
Rule 353   ForeachTypeList -> ForeachType
Rule 354   ForeachTypeList -> ForeachType COMMA ForeachTypeList
Rule 355   ForeachType -> ForeachTypeAttributes_opt BasicType Declarator
Rule 356   ForeachType -> ForeachTypeAttributes_opt IDENTIFIER
Rule 357   ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER
Rule 358   ForeachTypeAttributes_opt -> ForeachTypeAttributes
Rule 359   ForeachTypeAttributes_opt -> empty
Rule 360   ForeachTypeAttributes -> ForeachTypeAttribute
Rule 361   ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt
Rule 362   ForeachTypeAttribute -> TypeCtor
Rule 363   ForeachTypeAttribute -> ENUM
Rule 364   ForeachAggregate -> Expression
Rule 365   RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
Rule 366   LwrExpression -> Expression
Rule 367   UprExpression -> Expression
Rule 368   ForeachRangeStatement -> RangeForeach ScopeStatement
Rule 369   SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement
Rule 370   CaseStatement -> CASE ArgumentList COLON ScopeStatementList
Rule 371   CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
Rule 372   FirstExp -> AssignExpression
Rule 373   LastExp -> AssignExpression
Rule 374   DefaultStatement -> DEFAULT COLON ScopeStatementList
Rule 375   ScopeStatementList -> StatementListNoCaseNoDefault
Rule 376   StatementListNoCaseNoDefault -> StatementNoCaseNoDefault
Rule 377   StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault
Rule 378   StatementNoCaseNoDefault -> SEMICOLON
Rule 379   StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault
Rule 380   StatementNoCaseNoDefault -> ScopeBlockStatement
Rule 381   FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
Rule 382   IDENTIFIER_opt -> IDENTIFIER
Rule 383   IDENTIFIER_opt -> empty
Rule 384   Expression_opt -> Expression
Rule 385   Expression_opt -> empty
Rule 386   ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON
Rule 387   BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON
Rule 388   ReturnStatement -> RETURN Expression_opt SEMICOLON
Rule 389   GotoStatement -> GOTO IDENTIFIER SEMICOLON
Rule 390   GotoStatement -> GOTO DEFAULT SEMICOLON
Rule 391   GotoStatement -> GOTO CASE SEMICOLON
Rule 392   GotoStatement -> GOTO CASE Expression SEMICOLON
Rule 393   WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement
Rule 394   WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement
Rule 395   MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON
Rule 396   AggregateDeclaration -> ClassDeclaration
Rule 397   AggregateDeclaration -> UnionDeclaration
Rule 398   UnionDeclaration -> UNION IDENTIFIER SEMICOLON
Rule 399   UnionDeclaration -> UNION IDENTIFIER AggregateBody
Rule 400   UnionDeclaration -> AnonUnionDeclaration
Rule 401   AnonUnionDeclaration -> UNION AggregateBody
Rule 402   AggregateBody -> LBRACE DeclDefs_opt RBRACE
Rule 403   ClassDeclaration -> CLASS IDENTIFIER SEMICOLON
Rule 404   ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody
Rule 405   BaseClassList -> COLON SuperClass
Rule 406   BaseClassList -> COLON SuperClass COMMA Interfaces
Rule 407   BaseClassList -> COLON Interfaces
Rule 408   BaseClassList_opt -> BaseClassList
Rule 409   BaseClassList_opt -> empty
Rule 410   SuperClass -> BasicType
Rule 411   Interfaces -> Interface
Rule 412   Interfaces -> Interface COMMA Interfaces
Rule 413   Interface -> BasicType
Rule 414   Allocator -> NEW Parameters SEMICOLON
Rule 415   Allocator -> NEW Parameters FunctionBody
Rule 416   Deallocator -> DELETE Parameters SEMICOLON
Rule 417   Deallocator -> DELETE Parameters FunctionBody
Rule 418   AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON
Rule 419   NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
Rule 420   ClassArguments -> LPAREN ArgumentList_opt RPAREN
Rule 421   ClassArguments_opt -> ClassArguments
Rule 422   ClassArguments_opt -> empty
Rule 423   SuperClass_opt -> SuperClass
Rule 424   SuperClass_opt -> empty
Rule 425   Interfaces_opt -> Interfaces
Rule 426   Interfaces_opt -> empty
Rule 427   EnumDeclaration -> ENUM IDENTIFIER EnumBody
Rule 428   EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody
Rule 429   EnumDeclaration -> AnonymousEnumDeclaration
Rule 430   EnumBaseType -> Type
Rule 431   EnumBody -> LBRACE EnumMembers RBRACE
Rule 432   EnumBody -> SEMICOLON
Rule 433   EnumMembers -> EnumMember
Rule 434   EnumMembers -> EnumMember COMMA
Rule 435   EnumMembers -> EnumMember COMMA EnumMembers
Rule 436   EnumMember -> IDENTIFIER
Rule 437   EnumMember -> IDENTIFIER ASSIGN AssignExpression
Rule 438   AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
Rule 439   AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE
Rule 440   AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE
Rule 441   AnonymousEnumMembers -> AnonymousEnumMember
Rule 442   AnonymousEnumMembers -> AnonymousEnumMember COMMA
Rule 443   AnonymousEnumMembers -> AnonymousEnumMember COMMA AnonymousEnumMembers
Rule 444   AnonymousEnumMember -> EnumMember
Rule 445   AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression
Rule 446   FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody
Rule 447   FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON
Rule 448   FuncDeclaration -> AutoFuncDeclaration
Rule 449   AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
Rule 450   FuncDeclarator -> BasicType2_opt IDENTIFIER FuncDeclaratorSuffix
Rule 451   FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt
Rule 452   Parameters -> LPAREN ParameterList_opt RPAREN
Rule 453   ParameterList -> Parameter
Rule 454   ParameterList -> Parameter COMMA ParameterList
Rule 455   ParameterList -> ELLIPSIS
Rule 456   ParameterList_opt -> ParameterList
Rule 457   ParameterList_opt -> empty
Rule 458   Parameter -> InOut_opt BasicType Declarator
Rule 459   Parameter -> InOut_opt BasicType Declarator ELLIPSIS
Rule 460   Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression
Rule 461   Parameter -> InOut_opt Type
Rule 462   Parameter -> InOut_opt Type ELLIPSIS
Rule 463   InOut -> InOutX
Rule 464   InOut -> InOut InOutX
Rule 465   InOutX -> AUTO
Rule 466   InOutX -> TypeCtor
Rule 467   InOutX -> FINAL
Rule 468   InOutX -> SCOPE
Rule 469   InOut_opt -> InOut
Rule 470   InOut_opt -> empty
Rule 471   MemberFunctionAttributes -> MemberFunctionAttribute
Rule 472   MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes
Rule 473   MemberFunctionAttributes_opt -> MemberFunctionAttributes
Rule 474   MemberFunctionAttributes_opt -> empty
Rule 475   MemberFunctionAttribute -> CONST
Rule 476   MemberFunctionAttribute -> IMMUTABLE
Rule 477   MemberFunctionAttribute -> RETURN
Rule 478   FunctionBody -> BlockStatement
Rule 479   FunctionBody -> BodyStatement
Rule 480   BodyStatement -> BODY BlockStatement
Rule 481   Symbol -> SymbolTail
Rule 482   Symbol -> DOT SymbolTail
Rule 483   SymbolTail -> IDENTIFIER
Rule 484   SymbolTail -> IDENTIFIER DOT SymbolTail
Rule 485   empty -> <empty>

Terminals, with rules where they appear

ALIAS                : 140 141 142 357 418
AMPERSAND            : 191
ARROW                : 
ASSIGN               : 26 31 44 45 52 54 56 137 145 146 169 333 334 335 437 445 460
AUTO                 : 118 156 333 465
BACK_SLASH           : 
BODY                 : 480
BOOL                 : 90
BREAK                : 387
CARET                : 189
CASE                 : 370 371 391 392
CAST                 : 236 237
CHAR                 : 97
CLASS                : 403 404 419
COLON                : 27 133 150 181 321 322 323 370 371 371 374 405 406 407 428 438
COMMA                : 24 29 42 48 128 129 136 144 167 234 235 354 406 412 434 435 442 443 454
COMMENT              : 
CONST                : 82 119 157 475
CONTINUE             : 386
DEFAULT              : 374 390
DELEGATE             : 
DELETE               : 416 417
DIV                  : 209
DNUMBER              : 255
DO                   : 339
DOLLAR               : 253
DOT                  : 15 18 85 88 110 111 219 241 242 248 265 482 484
DOUBLE               : 
DOUBLE_AMPERSAND     : 185
DOUBLE_PIPE          : 183
DOUBLE_QUOTE         : 
ELLIPSIS             : 455 459 462
ELSE                 : 331
EMPTY                : 
ENUM                 : 114 363 427 428 438 439 440
EQ_AND_BIT           : 175
EQ_DIV               : 173
EQ_LEFT              : 178
EQ_MINUS             : 171
EQ_MODULO            : 174
EQ_OR_BIT            : 176
EQ_PLUS              : 170
EQ_RIGHT             : 179
EQ_TIMES             : 172
EQ_XOR_BIT           : 177
EXCLAMATION          : 217
EXTERN               : 116 154
FALSE                : 252
FINAL                : 117 155 381 467
FLOAT                : 98
FOR                  : 340
FOREACH              : 351
FOREACH_REVERSE      : 352
FUNCTION             : 108 271
GOTO                 : 389 390 391 392
GREATER              : 199
GREATER_DIFF         : 
GREATER_EQ           : 198
GREATER_EQ_DIFF      : 
IDENTIFIER           : 16 19 30 31 31 32 51 52 53 54 55 56 59 60 64 65 109 110 111 137 145 146 219 241 247 248 263 265 321 322 323 333 334 356 357 382 389 398 399 403 404 418 427 428 436 437 445 449 450 483 484
IF                   : 330 331
IMMUTABLE            : 83 120 158 476
IMPORT               : 20 21 283
INT                  : 93
INUMBER              : 254
IS_EQ                : 195
IS_EQ_DIFF           : 
IdentifierOrTemplateInstance : 
LBRACE               : 161 324 325 402 431 438 439 440
LBRACKET             : 71 72 73 104 105 106 107 111 126 225 270
LEFT_SHIFT           : 202
LESS                 : 197
LESS_DIFF            : 
LESS_EQ              : 200
LESS_EQ_DIFF         : 
LIT_CHAR             : 256
LIT_STR              : 280 281
LONG                 : 95
LPAREN               : 33 61 62 63 89 147 148 219 226 228 236 237 245 246 264 265 266 266 268 282 283 284 285 330 331 338 339 340 349 365 369 381 393 394 395 420 452
MINUS                : 206
MINUS_MINUS          : 213 244
MIXIN                : 33 282 395
MODULO               : 210
NEW                  : 223 225 226 414 415 419
NOT_EQ               : 196
NOT_EQ_DIFF          : 
NULL                 : 250
PIPE                 : 187
PLUS                 : 205
PLUS_PLUS            : 212 243
POST_MINUS_MINUS     : 
POST_PLUS_PLUS       : 
POWER                : 239
PRIVATE              : 162
PROTECTED            : 163
PUBLIC               : 164
QUESTION             : 181
RANGE                : 106 365 371
RBRACE               : 161 324 325 402 431 438 439 440
RBRACKET             : 71 72 73 104 105 106 107 111 126 225 270
RETURN               : 148 159 388 477
RIGHT_SHIFT          : 203
RPAREN               : 33 61 62 63 89 147 148 219 226 228 236 237 245 246 264 265 266 266 268 282 283 284 285 330 331 338 339 340 349 365 369 381 393 394 395 420 452
SCOPE                : 468
SEMICOLON            : 13 20 21 33 40 134 140 141 142 286 291 328 340 341 349 365 378 386 387 388 389 390 391 392 395 398 403 414 416 418 432 447
SHORT                : 91
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 21 115 153
SWITCH               : 369 381
THIS                 : 249 418
TILDE                : 222
TIMES                : 103 208 214
TRUE                 : 251
TYPEDEF              : 
TYPEID               : 284 285
TYPEOF               : 147 148
UAMPERSAND           : 211
UINT                 : 94
ULONG                : 96
UMINUS               : 215
UNION                : 398 399 401
UPLUS                : 216
USHORT               : 92
UTIMES               : 
VOID                 : 99 149
WHILE                : 338 339
WITH                 : 393 394
error                : 

Nonterminals, with rules where they appear

AddExpression        : 201 202 203 205 206
AggregateBody        : 399 401 404 419
AggregateDeclaration : 37
AggregateForeach     : 350
AliasDeclaration     : 36
AliasDeclarationX    : 142 144
AliasDeclarationY    : 143 144
AliasThis            : 11
Allocator            : 9
AllocatorArguments   : 229
AllocatorArguments_opt : 223 225 226 419
AltDeclarator        : 45 46 58 66
AltDeclaratorIdentifier : 50
AltDeclaratorSuffix  : 67 68
AltDeclaratorSuffixes : 55 56 60 63 68 69
AltDeclaratorSuffixes_opt : 53 54
AltDeclaratorX       : 61 62 63
AltFuncDeclaratorSuffix : 62 65
AndAndExpression     : 182 183 185
AndExpression        : 188 189 191
AnonUnionDeclaration : 400
AnonymousEnumDeclaration : 429
AnonymousEnumMember  : 441 442 443
AnonymousEnumMembers : 440 443
ArgumentList         : 231 235 245 370
ArgumentList_opt     : 226 228 246 264 266 270 420
ArrayInitializer     : 124
ArrayLiteral         : 258
ArrayMemberInitialization : 127 128 129
ArrayMemberInitializations : 129 130
ArrayMemberInitializations_opt : 126
AssignExpression     : 33 72 105 106 106 111 125 133 166 167 169 170 171 172 173 174 175 176 177 178 179 225 233 234 235 282 283 372 373 395 437 445 460
Attribute            : 150 151
AttributeSpecifier   : 7
AutoDeclaration      : 
AutoDeclarationX     : 134 136
AutoDeclarationY     : 135 136
AutoFuncDeclaration  : 448
BaseClassList        : 408
BaseClassList_opt    : 404
BasicType            : 40 75 140 141 246 335 355 410 413 446 447 458 459 460
BasicType2           : 53 54 101
BasicType2X          : 100
BasicType2_opt       : 55 56 59 60 61 62 63 64 65 75 100 450
BasicTypeX           : 84 263 264
BlockStatement       : 278 290 293 319 320 478 480
BodyStatement        : 279 479
BreakStatement       : 311
CaseRangeStatement   : 298
CaseStatement        : 297
CastExpression       : 220
ClassArguments       : 421
ClassArguments_opt   : 419
ClassDeclaration     : 396
CmpExpression        : 190 191
CommaExpression      : 165 167
ComplementExpression : 218
ConditionalExpression : 168 169 170 171 172 173 174 175 176 177 178 179 181
ContinueStatement    : 310
Deallocator          : 10
DeclDef              : 3 4 160
DeclDefs             : 4 5
DeclDefs_opt         : 161 402
Declaration          : 1 8 329
DeclarationBlock     : 151
DeclarationStatement : 302
Declaration_mult     : 1 0
Declarator           : 335 355 458 459 460
DeclaratorIdentifier : 47 48
DeclaratorIdentifierList : 42 48
DeclaratorInitializer : 41 42
Declarators          : 40 140
DefaultStatement     : 299
DoStatement          : 305
ElseStatement        : 331
EnumBaseType         : 428 438
EnumBody             : 427 428
EnumDeclaration      : 38
EnumMember           : 433 434 435 444
EnumMembers          : 431 435 438 439
EqualExpression      : 193
ExpInitializer       : 123
Expression           : 147 181 268 285 328 332 333 334 335 338 339 343 346 364 366 367 369 381 384 392 393
ExpressionStatement  : 301
Expression_opt       : 388
FinalSwitchStatement : 309
FirstExp             : 371
ForStatement         : 306
Foreach              : 349
ForeachAggregate     : 349
ForeachRangeStatement : 316
ForeachStatement     : 307
ForeachType          : 353 354 365
ForeachTypeAttribute : 360 361
ForeachTypeAttributes : 358
ForeachTypeAttributes_opt : 355 356 357 361
ForeachTypeList      : 349 354
FuncDeclaration      : 34
FuncDeclarator       : 141 446 447
FuncDeclaratorSuffix : 449 450
FunctionBody         : 415 417 446 449
FunctionLiteral      : 146 259
FunctionLiteralBody  : 271 272 273
GotoStatement        : 313
IDENTIFIER_opt       : 386 387
IdentifierList       : 85 86 88 110 111
IfCondition          : 330 331
IfStatement          : 303
Import               : 22 24 27
ImportBind           : 28 29
ImportBindList       : 27 29
ImportBindings       : 23
ImportDeclaration    : 39 317
ImportExpression     : 261
ImportList           : 20 21 24
InOut                : 464 469
InOutX               : 463 464
InOut_opt            : 458 459 460 461 462
Increment            : 347
Increment_opt        : 340
Initialize           : 340
Initializer          : 44 45 52 54 56 137
Interface            : 411 412
Interfaces           : 406 407 412 425
Interfaces_opt       : 419
LIT_STRPlus          : 257 280
LabeledStatement     : 300
LastExp              : 371
LwrExpression        : 365
MemberFunctionAttribute : 471 472
MemberFunctionAttributes : 472 473
MemberFunctionAttributes_opt : 74 277 451
MixinDeclaration     : 12
MixinExpression      : 260
MixinStatement       : 315
ModuleAliasIdentifier : 26
ModuleFullyQualifiedName : 25 26
ModuleName           : 14 15
MulExpression        : 204 205 206 208 209 210
NewAnonClassExpression : 227
NewExpression        : 242
NewExpressionWithArgs : 224 262
NoScopeNonEmptyStatement : 342 350
NoScopeStatement     : 322
NonEmptyOrScopeBlockStatement : 
NonEmptyStatement    : 287 289 292 294 318
NonEmptyStatementNoCaseNoDefault : 296 379
NonVoidInitializer   : 122 132 133
OrExpression         : 184 185 187
OrOrExpression       : 180 181 183
PackageName          : 17 18
Packages             : 15 18
Parameter            : 453 454
ParameterAttributes  : 
ParameterAttributes_opt : 271 275
ParameterList        : 454 456
ParameterList_opt    : 452
ParameterMemberAttributes : 272
Parameters           : 74 108 274 277 414 415 416 417 451
PostfixExpression    : 238 239 241 242 243 244 245
PowExpression        : 221
PrimaryExpression    : 240
RangeForeach         : 368
RelExpression        : 194
ReturnStatement      : 312
ScopeBlockStatement  : 288 295 380
ScopeStatement       : 336 337 338 339 340 368 369 381 393 394
ScopeStatementList   : 370 371 374
ShiftExpression      : 192 195 195 196 196 197 197 198 198 199 199 200 200 202 203
Statement            : 323 326 327
StatementList        : 325 327
StatementListNoCaseNoDefault : 375 377
StatementNoCaseNoDefault : 376 377
StorageClass         : 112 113
StorageClasses       : 113 134 138 449
StorageClasses_opt   : 40 140 141 145 329 446 447
SuperClass           : 405 406 423
SuperClass_opt       : 419
SwitchStatement      : 308
Symbol               : 394
SymbolTail           : 481 482 484
Test                 : 344
Test_opt             : 340
ThenStatement        : 330 331
Type                 : 73 76 89 107 145 219 223 225 226 236 265 266 284 430 445 461 462
TypeCtor             : 78 79 89 265 266 362 466
TypeCtors            : 79 80 334
TypeCtors_opt        : 75 237 246 335
Type_opt             : 271
TypeidExpression     : 269
Typeof               : 87 88 267
UnaryExpression      : 207 208 209 210 211 212 213 214 215 216 217 222 236 237 239
UnionDeclaration     : 397
UprExpression        : 365
VarDeclarations      : 35
VarDeclarator        : 43 44 57
VarDeclaratorIdentifier : 49
VisibilityAttribute  : 152
VoidInitializer      : 121
WhileStatement       : 304
WithStatement        : 314
XorExpression        : 186 187 189
empty                : 2 6 70 77 81 102 131 139 230 232 276 345 348 359 383 385 409 422 424 426 457 470 474

Parsing method: LALR

state 0

    (0) S' -> . Declaration_mult
    (1) Declaration_mult -> . Declaration Declaration_mult
    (2) Declaration_mult -> . empty
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (485) empty -> .
    (446) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (448) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (140) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (396) AggregateDeclaration -> . ClassDeclaration
    (397) AggregateDeclaration -> . UnionDeclaration
    (427) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (428) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (429) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (449) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (403) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt AggregateBody
    (398) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (400) UnionDeclaration -> . AnonUnionDeclaration
    (438) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (401) AnonUnionDeclaration -> . UNION AggregateBody
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    $end            reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    ALIAS           shift and go to state 19
    ENUM            shift and go to state 18
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    CLASS           shift and go to state 13
    UNION           shift and go to state 17
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 21

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    Declaration_mult               shift and go to state 8
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    Declaration                    shift and go to state 11
    AliasDeclaration               shift and go to state 12
    ClassDeclaration               shift and go to state 26
    VarDeclarations                shift and go to state 23
    empty                          shift and go to state 14
    AutoFuncDeclaration            shift and go to state 16
    StorageClasses                 shift and go to state 1
    AnonymousEnumDeclaration       shift and go to state 20
    AnonUnionDeclaration           shift and go to state 22
    EnumDeclaration                shift and go to state 24
    UnionDeclaration               shift and go to state 25
    StorageClass                   shift and go to state 28

state 1

    (138) StorageClasses_opt -> StorageClasses .
    (449) AutoFuncDeclaration -> StorageClasses . IDENTIFIER FuncDeclaratorSuffix FunctionBody

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    DOT             reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    BOOL            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    SHORT           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    USHORT          reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    INT             reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    UINT            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    LONG            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    ULONG           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    CHAR            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    FLOAT           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    VOID            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    TYPEOF          reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    CONST           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    IMMUTABLE       reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    IDENTIFIER      shift and go to state 29

  ! IDENTIFIER      [ reduce using rule 138 (StorageClasses_opt -> StorageClasses .) ]


state 2

    (118) StorageClass -> AUTO .

    ENUM            reduce using rule 118 (StorageClass -> AUTO .)
    STATIC          reduce using rule 118 (StorageClass -> AUTO .)
    EXTERN          reduce using rule 118 (StorageClass -> AUTO .)
    FINAL           reduce using rule 118 (StorageClass -> AUTO .)
    AUTO            reduce using rule 118 (StorageClass -> AUTO .)
    CONST           reduce using rule 118 (StorageClass -> AUTO .)
    IMMUTABLE       reduce using rule 118 (StorageClass -> AUTO .)
    DOT             reduce using rule 118 (StorageClass -> AUTO .)
    BOOL            reduce using rule 118 (StorageClass -> AUTO .)
    SHORT           reduce using rule 118 (StorageClass -> AUTO .)
    USHORT          reduce using rule 118 (StorageClass -> AUTO .)
    INT             reduce using rule 118 (StorageClass -> AUTO .)
    UINT            reduce using rule 118 (StorageClass -> AUTO .)
    LONG            reduce using rule 118 (StorageClass -> AUTO .)
    ULONG           reduce using rule 118 (StorageClass -> AUTO .)
    CHAR            reduce using rule 118 (StorageClass -> AUTO .)
    FLOAT           reduce using rule 118 (StorageClass -> AUTO .)
    VOID            reduce using rule 118 (StorageClass -> AUTO .)
    IDENTIFIER      reduce using rule 118 (StorageClass -> AUTO .)
    TYPEOF          reduce using rule 118 (StorageClass -> AUTO .)
    ALIAS           reduce using rule 118 (StorageClass -> AUTO .)
    IMPORT          reduce using rule 118 (StorageClass -> AUTO .)
    CLASS           reduce using rule 118 (StorageClass -> AUTO .)
    UNION           reduce using rule 118 (StorageClass -> AUTO .)


state 3

    (119) StorageClass -> CONST .

    ENUM            reduce using rule 119 (StorageClass -> CONST .)
    STATIC          reduce using rule 119 (StorageClass -> CONST .)
    EXTERN          reduce using rule 119 (StorageClass -> CONST .)
    FINAL           reduce using rule 119 (StorageClass -> CONST .)
    AUTO            reduce using rule 119 (StorageClass -> CONST .)
    CONST           reduce using rule 119 (StorageClass -> CONST .)
    IMMUTABLE       reduce using rule 119 (StorageClass -> CONST .)
    DOT             reduce using rule 119 (StorageClass -> CONST .)
    BOOL            reduce using rule 119 (StorageClass -> CONST .)
    SHORT           reduce using rule 119 (StorageClass -> CONST .)
    USHORT          reduce using rule 119 (StorageClass -> CONST .)
    INT             reduce using rule 119 (StorageClass -> CONST .)
    UINT            reduce using rule 119 (StorageClass -> CONST .)
    LONG            reduce using rule 119 (StorageClass -> CONST .)
    ULONG           reduce using rule 119 (StorageClass -> CONST .)
    CHAR            reduce using rule 119 (StorageClass -> CONST .)
    FLOAT           reduce using rule 119 (StorageClass -> CONST .)
    VOID            reduce using rule 119 (StorageClass -> CONST .)
    IDENTIFIER      reduce using rule 119 (StorageClass -> CONST .)
    TYPEOF          reduce using rule 119 (StorageClass -> CONST .)
    ALIAS           reduce using rule 119 (StorageClass -> CONST .)
    IMPORT          reduce using rule 119 (StorageClass -> CONST .)
    CLASS           reduce using rule 119 (StorageClass -> CONST .)
    UNION           reduce using rule 119 (StorageClass -> CONST .)


state 4

    (37) Declaration -> AggregateDeclaration .

    SEMICOLON       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    NEW             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DELETE          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ALIAS           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    MIXIN           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    STATIC          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    EXTERN          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FINAL           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    AUTO            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CONST           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IMMUTABLE       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    RETURN          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ENUM            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IMPORT          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PRIVATE         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PROTECTED       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PUBLIC          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CLASS           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    UNION           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DOT             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    BOOL            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    SHORT           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    USHORT          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    INT             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    UINT            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LONG            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ULONG           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CHAR            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FLOAT           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    VOID            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IDENTIFIER      reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TYPEOF          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    RBRACE          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    $end            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CASE            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DEFAULT         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LBRACE          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IF              reduce using rule 37 (Declaration -> AggregateDeclaration .)
    WHILE           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DO              reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FOR             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    SWITCH          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CONTINUE        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    BREAK           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    GOTO            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    WITH            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LPAREN          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FOREACH         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FOREACH_REVERSE reduce using rule 37 (Declaration -> AggregateDeclaration .)
    UAMPERSAND      reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PLUS_PLUS       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    MINUS_MINUS     reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TIMES           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    UMINUS          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    UPLUS           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    EXCLAMATION     reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TILDE           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CAST            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    THIS            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    NULL            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TRUE            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FALSE           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DOLLAR          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    INUMBER         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DNUMBER         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LIT_CHAR        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LIT_STR         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LBRACKET        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FUNCTION        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TYPEID          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    BODY            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ELSE            reduce using rule 37 (Declaration -> AggregateDeclaration .)


state 5

    (21) ImportDeclaration -> STATIC . IMPORT ImportList SEMICOLON
    (115) StorageClass -> STATIC .

  ! shift/reduce conflict for IMPORT resolved as shift
    IMPORT          shift and go to state 30
    ENUM            reduce using rule 115 (StorageClass -> STATIC .)
    STATIC          reduce using rule 115 (StorageClass -> STATIC .)
    EXTERN          reduce using rule 115 (StorageClass -> STATIC .)
    FINAL           reduce using rule 115 (StorageClass -> STATIC .)
    AUTO            reduce using rule 115 (StorageClass -> STATIC .)
    CONST           reduce using rule 115 (StorageClass -> STATIC .)
    IMMUTABLE       reduce using rule 115 (StorageClass -> STATIC .)
    IDENTIFIER      reduce using rule 115 (StorageClass -> STATIC .)
    DOT             reduce using rule 115 (StorageClass -> STATIC .)
    BOOL            reduce using rule 115 (StorageClass -> STATIC .)
    SHORT           reduce using rule 115 (StorageClass -> STATIC .)
    USHORT          reduce using rule 115 (StorageClass -> STATIC .)
    INT             reduce using rule 115 (StorageClass -> STATIC .)
    UINT            reduce using rule 115 (StorageClass -> STATIC .)
    LONG            reduce using rule 115 (StorageClass -> STATIC .)
    ULONG           reduce using rule 115 (StorageClass -> STATIC .)
    CHAR            reduce using rule 115 (StorageClass -> STATIC .)
    FLOAT           reduce using rule 115 (StorageClass -> STATIC .)
    VOID            reduce using rule 115 (StorageClass -> STATIC .)
    TYPEOF          reduce using rule 115 (StorageClass -> STATIC .)
    ALIAS           reduce using rule 115 (StorageClass -> STATIC .)
    CLASS           reduce using rule 115 (StorageClass -> STATIC .)
    UNION           reduce using rule 115 (StorageClass -> STATIC .)

  ! IMPORT          [ reduce using rule 115 (StorageClass -> STATIC .) ]


state 6

    (34) Declaration -> FuncDeclaration .

    SEMICOLON       reduce using rule 34 (Declaration -> FuncDeclaration .)
    NEW             reduce using rule 34 (Declaration -> FuncDeclaration .)
    DELETE          reduce using rule 34 (Declaration -> FuncDeclaration .)
    ALIAS           reduce using rule 34 (Declaration -> FuncDeclaration .)
    MIXIN           reduce using rule 34 (Declaration -> FuncDeclaration .)
    STATIC          reduce using rule 34 (Declaration -> FuncDeclaration .)
    EXTERN          reduce using rule 34 (Declaration -> FuncDeclaration .)
    FINAL           reduce using rule 34 (Declaration -> FuncDeclaration .)
    AUTO            reduce using rule 34 (Declaration -> FuncDeclaration .)
    CONST           reduce using rule 34 (Declaration -> FuncDeclaration .)
    IMMUTABLE       reduce using rule 34 (Declaration -> FuncDeclaration .)
    RETURN          reduce using rule 34 (Declaration -> FuncDeclaration .)
    ENUM            reduce using rule 34 (Declaration -> FuncDeclaration .)
    IMPORT          reduce using rule 34 (Declaration -> FuncDeclaration .)
    PRIVATE         reduce using rule 34 (Declaration -> FuncDeclaration .)
    PROTECTED       reduce using rule 34 (Declaration -> FuncDeclaration .)
    PUBLIC          reduce using rule 34 (Declaration -> FuncDeclaration .)
    CLASS           reduce using rule 34 (Declaration -> FuncDeclaration .)
    UNION           reduce using rule 34 (Declaration -> FuncDeclaration .)
    DOT             reduce using rule 34 (Declaration -> FuncDeclaration .)
    BOOL            reduce using rule 34 (Declaration -> FuncDeclaration .)
    SHORT           reduce using rule 34 (Declaration -> FuncDeclaration .)
    USHORT          reduce using rule 34 (Declaration -> FuncDeclaration .)
    INT             reduce using rule 34 (Declaration -> FuncDeclaration .)
    UINT            reduce using rule 34 (Declaration -> FuncDeclaration .)
    LONG            reduce using rule 34 (Declaration -> FuncDeclaration .)
    ULONG           reduce using rule 34 (Declaration -> FuncDeclaration .)
    CHAR            reduce using rule 34 (Declaration -> FuncDeclaration .)
    FLOAT           reduce using rule 34 (Declaration -> FuncDeclaration .)
    VOID            reduce using rule 34 (Declaration -> FuncDeclaration .)
    IDENTIFIER      reduce using rule 34 (Declaration -> FuncDeclaration .)
    TYPEOF          reduce using rule 34 (Declaration -> FuncDeclaration .)
    RBRACE          reduce using rule 34 (Declaration -> FuncDeclaration .)
    $end            reduce using rule 34 (Declaration -> FuncDeclaration .)
    CASE            reduce using rule 34 (Declaration -> FuncDeclaration .)
    DEFAULT         reduce using rule 34 (Declaration -> FuncDeclaration .)
    LBRACE          reduce using rule 34 (Declaration -> FuncDeclaration .)
    IF              reduce using rule 34 (Declaration -> FuncDeclaration .)
    WHILE           reduce using rule 34 (Declaration -> FuncDeclaration .)
    DO              reduce using rule 34 (Declaration -> FuncDeclaration .)
    FOR             reduce using rule 34 (Declaration -> FuncDeclaration .)
    SWITCH          reduce using rule 34 (Declaration -> FuncDeclaration .)
    CONTINUE        reduce using rule 34 (Declaration -> FuncDeclaration .)
    BREAK           reduce using rule 34 (Declaration -> FuncDeclaration .)
    GOTO            reduce using rule 34 (Declaration -> FuncDeclaration .)
    WITH            reduce using rule 34 (Declaration -> FuncDeclaration .)
    LPAREN          reduce using rule 34 (Declaration -> FuncDeclaration .)
    FOREACH         reduce using rule 34 (Declaration -> FuncDeclaration .)
    FOREACH_REVERSE reduce using rule 34 (Declaration -> FuncDeclaration .)
    UAMPERSAND      reduce using rule 34 (Declaration -> FuncDeclaration .)
    PLUS_PLUS       reduce using rule 34 (Declaration -> FuncDeclaration .)
    MINUS_MINUS     reduce using rule 34 (Declaration -> FuncDeclaration .)
    TIMES           reduce using rule 34 (Declaration -> FuncDeclaration .)
    UMINUS          reduce using rule 34 (Declaration -> FuncDeclaration .)
    UPLUS           reduce using rule 34 (Declaration -> FuncDeclaration .)
    EXCLAMATION     reduce using rule 34 (Declaration -> FuncDeclaration .)
    TILDE           reduce using rule 34 (Declaration -> FuncDeclaration .)
    CAST            reduce using rule 34 (Declaration -> FuncDeclaration .)
    THIS            reduce using rule 34 (Declaration -> FuncDeclaration .)
    NULL            reduce using rule 34 (Declaration -> FuncDeclaration .)
    TRUE            reduce using rule 34 (Declaration -> FuncDeclaration .)
    FALSE           reduce using rule 34 (Declaration -> FuncDeclaration .)
    DOLLAR          reduce using rule 34 (Declaration -> FuncDeclaration .)
    INUMBER         reduce using rule 34 (Declaration -> FuncDeclaration .)
    DNUMBER         reduce using rule 34 (Declaration -> FuncDeclaration .)
    LIT_CHAR        reduce using rule 34 (Declaration -> FuncDeclaration .)
    LIT_STR         reduce using rule 34 (Declaration -> FuncDeclaration .)
    LBRACKET        reduce using rule 34 (Declaration -> FuncDeclaration .)
    FUNCTION        reduce using rule 34 (Declaration -> FuncDeclaration .)
    TYPEID          reduce using rule 34 (Declaration -> FuncDeclaration .)
    BODY            reduce using rule 34 (Declaration -> FuncDeclaration .)
    ELSE            reduce using rule 34 (Declaration -> FuncDeclaration .)


state 7

    (116) StorageClass -> EXTERN .

    ENUM            reduce using rule 116 (StorageClass -> EXTERN .)
    STATIC          reduce using rule 116 (StorageClass -> EXTERN .)
    EXTERN          reduce using rule 116 (StorageClass -> EXTERN .)
    FINAL           reduce using rule 116 (StorageClass -> EXTERN .)
    AUTO            reduce using rule 116 (StorageClass -> EXTERN .)
    CONST           reduce using rule 116 (StorageClass -> EXTERN .)
    IMMUTABLE       reduce using rule 116 (StorageClass -> EXTERN .)
    DOT             reduce using rule 116 (StorageClass -> EXTERN .)
    BOOL            reduce using rule 116 (StorageClass -> EXTERN .)
    SHORT           reduce using rule 116 (StorageClass -> EXTERN .)
    USHORT          reduce using rule 116 (StorageClass -> EXTERN .)
    INT             reduce using rule 116 (StorageClass -> EXTERN .)
    UINT            reduce using rule 116 (StorageClass -> EXTERN .)
    LONG            reduce using rule 116 (StorageClass -> EXTERN .)
    ULONG           reduce using rule 116 (StorageClass -> EXTERN .)
    CHAR            reduce using rule 116 (StorageClass -> EXTERN .)
    FLOAT           reduce using rule 116 (StorageClass -> EXTERN .)
    VOID            reduce using rule 116 (StorageClass -> EXTERN .)
    IDENTIFIER      reduce using rule 116 (StorageClass -> EXTERN .)
    TYPEOF          reduce using rule 116 (StorageClass -> EXTERN .)
    ALIAS           reduce using rule 116 (StorageClass -> EXTERN .)
    IMPORT          reduce using rule 116 (StorageClass -> EXTERN .)
    CLASS           reduce using rule 116 (StorageClass -> EXTERN .)
    UNION           reduce using rule 116 (StorageClass -> EXTERN .)


state 8

    (0) S' -> Declaration_mult .



state 9

    (446) FuncDeclaration -> StorageClasses_opt . BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> StorageClasses_opt . BasicType FuncDeclarator SEMICOLON
    (40) VarDeclarations -> StorageClasses_opt . BasicType Declarators SEMICOLON
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 38
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34

state 10

    (39) Declaration -> ImportDeclaration .

    SEMICOLON       reduce using rule 39 (Declaration -> ImportDeclaration .)
    NEW             reduce using rule 39 (Declaration -> ImportDeclaration .)
    DELETE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    ALIAS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    MIXIN           reduce using rule 39 (Declaration -> ImportDeclaration .)
    STATIC          reduce using rule 39 (Declaration -> ImportDeclaration .)
    EXTERN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    FINAL           reduce using rule 39 (Declaration -> ImportDeclaration .)
    AUTO            reduce using rule 39 (Declaration -> ImportDeclaration .)
    CONST           reduce using rule 39 (Declaration -> ImportDeclaration .)
    IMMUTABLE       reduce using rule 39 (Declaration -> ImportDeclaration .)
    RETURN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    ENUM            reduce using rule 39 (Declaration -> ImportDeclaration .)
    IMPORT          reduce using rule 39 (Declaration -> ImportDeclaration .)
    PRIVATE         reduce using rule 39 (Declaration -> ImportDeclaration .)
    PROTECTED       reduce using rule 39 (Declaration -> ImportDeclaration .)
    PUBLIC          reduce using rule 39 (Declaration -> ImportDeclaration .)
    CLASS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    UNION           reduce using rule 39 (Declaration -> ImportDeclaration .)
    DOT             reduce using rule 39 (Declaration -> ImportDeclaration .)
    BOOL            reduce using rule 39 (Declaration -> ImportDeclaration .)
    SHORT           reduce using rule 39 (Declaration -> ImportDeclaration .)
    USHORT          reduce using rule 39 (Declaration -> ImportDeclaration .)
    INT             reduce using rule 39 (Declaration -> ImportDeclaration .)
    UINT            reduce using rule 39 (Declaration -> ImportDeclaration .)
    LONG            reduce using rule 39 (Declaration -> ImportDeclaration .)
    ULONG           reduce using rule 39 (Declaration -> ImportDeclaration .)
    CHAR            reduce using rule 39 (Declaration -> ImportDeclaration .)
    FLOAT           reduce using rule 39 (Declaration -> ImportDeclaration .)
    VOID            reduce using rule 39 (Declaration -> ImportDeclaration .)
    IDENTIFIER      reduce using rule 39 (Declaration -> ImportDeclaration .)
    TYPEOF          reduce using rule 39 (Declaration -> ImportDeclaration .)
    RBRACE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    $end            reduce using rule 39 (Declaration -> ImportDeclaration .)
    CASE            reduce using rule 39 (Declaration -> ImportDeclaration .)
    DEFAULT         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LBRACE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    IF              reduce using rule 39 (Declaration -> ImportDeclaration .)
    WHILE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    DO              reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOR             reduce using rule 39 (Declaration -> ImportDeclaration .)
    SWITCH          reduce using rule 39 (Declaration -> ImportDeclaration .)
    CONTINUE        reduce using rule 39 (Declaration -> ImportDeclaration .)
    BREAK           reduce using rule 39 (Declaration -> ImportDeclaration .)
    GOTO            reduce using rule 39 (Declaration -> ImportDeclaration .)
    WITH            reduce using rule 39 (Declaration -> ImportDeclaration .)
    LPAREN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOREACH         reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOREACH_REVERSE reduce using rule 39 (Declaration -> ImportDeclaration .)
    UAMPERSAND      reduce using rule 39 (Declaration -> ImportDeclaration .)
    PLUS_PLUS       reduce using rule 39 (Declaration -> ImportDeclaration .)
    MINUS_MINUS     reduce using rule 39 (Declaration -> ImportDeclaration .)
    TIMES           reduce using rule 39 (Declaration -> ImportDeclaration .)
    UMINUS          reduce using rule 39 (Declaration -> ImportDeclaration .)
    UPLUS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    EXCLAMATION     reduce using rule 39 (Declaration -> ImportDeclaration .)
    TILDE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    CAST            reduce using rule 39 (Declaration -> ImportDeclaration .)
    THIS            reduce using rule 39 (Declaration -> ImportDeclaration .)
    NULL            reduce using rule 39 (Declaration -> ImportDeclaration .)
    TRUE            reduce using rule 39 (Declaration -> ImportDeclaration .)
    FALSE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    DOLLAR          reduce using rule 39 (Declaration -> ImportDeclaration .)
    INUMBER         reduce using rule 39 (Declaration -> ImportDeclaration .)
    DNUMBER         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LIT_CHAR        reduce using rule 39 (Declaration -> ImportDeclaration .)
    LIT_STR         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LBRACKET        reduce using rule 39 (Declaration -> ImportDeclaration .)
    FUNCTION        reduce using rule 39 (Declaration -> ImportDeclaration .)
    TYPEID          reduce using rule 39 (Declaration -> ImportDeclaration .)
    BODY            reduce using rule 39 (Declaration -> ImportDeclaration .)
    ELSE            reduce using rule 39 (Declaration -> ImportDeclaration .)


state 11

    (1) Declaration_mult -> Declaration . Declaration_mult
    (1) Declaration_mult -> . Declaration Declaration_mult
    (2) Declaration_mult -> . empty
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (485) empty -> .
    (446) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (448) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (140) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (396) AggregateDeclaration -> . ClassDeclaration
    (397) AggregateDeclaration -> . UnionDeclaration
    (427) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (428) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (429) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (449) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (403) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt AggregateBody
    (398) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (400) UnionDeclaration -> . AnonUnionDeclaration
    (438) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (401) AnonUnionDeclaration -> . UNION AggregateBody
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    $end            reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    ALIAS           shift and go to state 19
    ENUM            shift and go to state 18
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    CLASS           shift and go to state 13
    UNION           shift and go to state 17
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 21

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    Declaration_mult               shift and go to state 51
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    Declaration                    shift and go to state 11
    AliasDeclaration               shift and go to state 12
    ClassDeclaration               shift and go to state 26
    VarDeclarations                shift and go to state 23
    empty                          shift and go to state 14
    AutoFuncDeclaration            shift and go to state 16
    StorageClasses                 shift and go to state 1
    AnonymousEnumDeclaration       shift and go to state 20
    AnonUnionDeclaration           shift and go to state 22
    EnumDeclaration                shift and go to state 24
    UnionDeclaration               shift and go to state 25
    StorageClass                   shift and go to state 28

state 12

    (36) Declaration -> AliasDeclaration .

    SEMICOLON       reduce using rule 36 (Declaration -> AliasDeclaration .)
    NEW             reduce using rule 36 (Declaration -> AliasDeclaration .)
    DELETE          reduce using rule 36 (Declaration -> AliasDeclaration .)
    ALIAS           reduce using rule 36 (Declaration -> AliasDeclaration .)
    MIXIN           reduce using rule 36 (Declaration -> AliasDeclaration .)
    STATIC          reduce using rule 36 (Declaration -> AliasDeclaration .)
    EXTERN          reduce using rule 36 (Declaration -> AliasDeclaration .)
    FINAL           reduce using rule 36 (Declaration -> AliasDeclaration .)
    AUTO            reduce using rule 36 (Declaration -> AliasDeclaration .)
    CONST           reduce using rule 36 (Declaration -> AliasDeclaration .)
    IMMUTABLE       reduce using rule 36 (Declaration -> AliasDeclaration .)
    RETURN          reduce using rule 36 (Declaration -> AliasDeclaration .)
    ENUM            reduce using rule 36 (Declaration -> AliasDeclaration .)
    IMPORT          reduce using rule 36 (Declaration -> AliasDeclaration .)
    PRIVATE         reduce using rule 36 (Declaration -> AliasDeclaration .)
    PROTECTED       reduce using rule 36 (Declaration -> AliasDeclaration .)
    PUBLIC          reduce using rule 36 (Declaration -> AliasDeclaration .)
    CLASS           reduce using rule 36 (Declaration -> AliasDeclaration .)
    UNION           reduce using rule 36 (Declaration -> AliasDeclaration .)
    DOT             reduce using rule 36 (Declaration -> AliasDeclaration .)
    BOOL            reduce using rule 36 (Declaration -> AliasDeclaration .)
    SHORT           reduce using rule 36 (Declaration -> AliasDeclaration .)
    USHORT          reduce using rule 36 (Declaration -> AliasDeclaration .)
    INT             reduce using rule 36 (Declaration -> AliasDeclaration .)
    UINT            reduce using rule 36 (Declaration -> AliasDeclaration .)
    LONG            reduce using rule 36 (Declaration -> AliasDeclaration .)
    ULONG           reduce using rule 36 (Declaration -> AliasDeclaration .)
    CHAR            reduce using rule 36 (Declaration -> AliasDeclaration .)
    FLOAT           reduce using rule 36 (Declaration -> AliasDeclaration .)
    VOID            reduce using rule 36 (Declaration -> AliasDeclaration .)
    IDENTIFIER      reduce using rule 36 (Declaration -> AliasDeclaration .)
    TYPEOF          reduce using rule 36 (Declaration -> AliasDeclaration .)
    RBRACE          reduce using rule 36 (Declaration -> AliasDeclaration .)
    $end            reduce using rule 36 (Declaration -> AliasDeclaration .)
    CASE            reduce using rule 36 (Declaration -> AliasDeclaration .)
    DEFAULT         reduce using rule 36 (Declaration -> AliasDeclaration .)
    LBRACE          reduce using rule 36 (Declaration -> AliasDeclaration .)
    IF              reduce using rule 36 (Declaration -> AliasDeclaration .)
    WHILE           reduce using rule 36 (Declaration -> AliasDeclaration .)
    DO              reduce using rule 36 (Declaration -> AliasDeclaration .)
    FOR             reduce using rule 36 (Declaration -> AliasDeclaration .)
    SWITCH          reduce using rule 36 (Declaration -> AliasDeclaration .)
    CONTINUE        reduce using rule 36 (Declaration -> AliasDeclaration .)
    BREAK           reduce using rule 36 (Declaration -> AliasDeclaration .)
    GOTO            reduce using rule 36 (Declaration -> AliasDeclaration .)
    WITH            reduce using rule 36 (Declaration -> AliasDeclaration .)
    LPAREN          reduce using rule 36 (Declaration -> AliasDeclaration .)
    FOREACH         reduce using rule 36 (Declaration -> AliasDeclaration .)
    FOREACH_REVERSE reduce using rule 36 (Declaration -> AliasDeclaration .)
    UAMPERSAND      reduce using rule 36 (Declaration -> AliasDeclaration .)
    PLUS_PLUS       reduce using rule 36 (Declaration -> AliasDeclaration .)
    MINUS_MINUS     reduce using rule 36 (Declaration -> AliasDeclaration .)
    TIMES           reduce using rule 36 (Declaration -> AliasDeclaration .)
    UMINUS          reduce using rule 36 (Declaration -> AliasDeclaration .)
    UPLUS           reduce using rule 36 (Declaration -> AliasDeclaration .)
    EXCLAMATION     reduce using rule 36 (Declaration -> AliasDeclaration .)
    TILDE           reduce using rule 36 (Declaration -> AliasDeclaration .)
    CAST            reduce using rule 36 (Declaration -> AliasDeclaration .)
    THIS            reduce using rule 36 (Declaration -> AliasDeclaration .)
    NULL            reduce using rule 36 (Declaration -> AliasDeclaration .)
    TRUE            reduce using rule 36 (Declaration -> AliasDeclaration .)
    FALSE           reduce using rule 36 (Declaration -> AliasDeclaration .)
    DOLLAR          reduce using rule 36 (Declaration -> AliasDeclaration .)
    INUMBER         reduce using rule 36 (Declaration -> AliasDeclaration .)
    DNUMBER         reduce using rule 36 (Declaration -> AliasDeclaration .)
    LIT_CHAR        reduce using rule 36 (Declaration -> AliasDeclaration .)
    LIT_STR         reduce using rule 36 (Declaration -> AliasDeclaration .)
    LBRACKET        reduce using rule 36 (Declaration -> AliasDeclaration .)
    FUNCTION        reduce using rule 36 (Declaration -> AliasDeclaration .)
    TYPEID          reduce using rule 36 (Declaration -> AliasDeclaration .)
    BODY            reduce using rule 36 (Declaration -> AliasDeclaration .)
    ELSE            reduce using rule 36 (Declaration -> AliasDeclaration .)


state 13

    (403) ClassDeclaration -> CLASS . IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> CLASS . IDENTIFIER BaseClassList_opt AggregateBody

    IDENTIFIER      shift and go to state 52


state 14

    (2) Declaration_mult -> empty .
    (139) StorageClasses_opt -> empty .

    $end            reduce using rule 2 (Declaration_mult -> empty .)
    DOT             reduce using rule 139 (StorageClasses_opt -> empty .)
    BOOL            reduce using rule 139 (StorageClasses_opt -> empty .)
    SHORT           reduce using rule 139 (StorageClasses_opt -> empty .)
    USHORT          reduce using rule 139 (StorageClasses_opt -> empty .)
    INT             reduce using rule 139 (StorageClasses_opt -> empty .)
    UINT            reduce using rule 139 (StorageClasses_opt -> empty .)
    LONG            reduce using rule 139 (StorageClasses_opt -> empty .)
    ULONG           reduce using rule 139 (StorageClasses_opt -> empty .)
    CHAR            reduce using rule 139 (StorageClasses_opt -> empty .)
    FLOAT           reduce using rule 139 (StorageClasses_opt -> empty .)
    VOID            reduce using rule 139 (StorageClasses_opt -> empty .)
    IDENTIFIER      reduce using rule 139 (StorageClasses_opt -> empty .)
    TYPEOF          reduce using rule 139 (StorageClasses_opt -> empty .)
    CONST           reduce using rule 139 (StorageClasses_opt -> empty .)
    IMMUTABLE       reduce using rule 139 (StorageClasses_opt -> empty .)


state 15

    (117) StorageClass -> FINAL .

    ENUM            reduce using rule 117 (StorageClass -> FINAL .)
    STATIC          reduce using rule 117 (StorageClass -> FINAL .)
    EXTERN          reduce using rule 117 (StorageClass -> FINAL .)
    FINAL           reduce using rule 117 (StorageClass -> FINAL .)
    AUTO            reduce using rule 117 (StorageClass -> FINAL .)
    CONST           reduce using rule 117 (StorageClass -> FINAL .)
    IMMUTABLE       reduce using rule 117 (StorageClass -> FINAL .)
    DOT             reduce using rule 117 (StorageClass -> FINAL .)
    BOOL            reduce using rule 117 (StorageClass -> FINAL .)
    SHORT           reduce using rule 117 (StorageClass -> FINAL .)
    USHORT          reduce using rule 117 (StorageClass -> FINAL .)
    INT             reduce using rule 117 (StorageClass -> FINAL .)
    UINT            reduce using rule 117 (StorageClass -> FINAL .)
    LONG            reduce using rule 117 (StorageClass -> FINAL .)
    ULONG           reduce using rule 117 (StorageClass -> FINAL .)
    CHAR            reduce using rule 117 (StorageClass -> FINAL .)
    FLOAT           reduce using rule 117 (StorageClass -> FINAL .)
    VOID            reduce using rule 117 (StorageClass -> FINAL .)
    IDENTIFIER      reduce using rule 117 (StorageClass -> FINAL .)
    TYPEOF          reduce using rule 117 (StorageClass -> FINAL .)
    ALIAS           reduce using rule 117 (StorageClass -> FINAL .)
    IMPORT          reduce using rule 117 (StorageClass -> FINAL .)
    CLASS           reduce using rule 117 (StorageClass -> FINAL .)
    UNION           reduce using rule 117 (StorageClass -> FINAL .)


state 16

    (448) FuncDeclaration -> AutoFuncDeclaration .

    ALIAS           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    ENUM            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    IMPORT          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    STATIC          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    CLASS           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    UNION           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    EXTERN          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    FINAL           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    AUTO            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    CONST           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    IMMUTABLE       reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    DOT             reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    BOOL            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    SHORT           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    USHORT          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    INT             reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    UINT            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    LONG            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    ULONG           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    CHAR            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    FLOAT           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    VOID            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    IDENTIFIER      reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    TYPEOF          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    $end            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    SEMICOLON       reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    NEW             reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    DELETE          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    MIXIN           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    RETURN          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    PRIVATE         reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    PROTECTED       reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    PUBLIC          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    RBRACE          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    CASE            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    DEFAULT         reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    LBRACE          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    IF              reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    WHILE           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    DO              reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    FOR             reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    SWITCH          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    CONTINUE        reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    BREAK           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    GOTO            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    WITH            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    LPAREN          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    FOREACH         reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    FOREACH_REVERSE reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    UAMPERSAND      reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    PLUS_PLUS       reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    MINUS_MINUS     reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    TIMES           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    UMINUS          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    UPLUS           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    EXCLAMATION     reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    TILDE           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    CAST            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    THIS            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    NULL            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    TRUE            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    FALSE           reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    DOLLAR          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    INUMBER         reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    DNUMBER         reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    LIT_CHAR        reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    LIT_STR         reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    LBRACKET        reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    FUNCTION        reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    TYPEID          reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    BODY            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)
    ELSE            reduce using rule 448 (FuncDeclaration -> AutoFuncDeclaration .)


state 17

    (398) UnionDeclaration -> UNION . IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> UNION . IDENTIFIER AggregateBody
    (401) AnonUnionDeclaration -> UNION . AggregateBody
    (402) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    IDENTIFIER      shift and go to state 55
    LBRACE          shift and go to state 53

    AggregateBody                  shift and go to state 54

state 18

    (427) EnumDeclaration -> ENUM . IDENTIFIER EnumBody
    (428) EnumDeclaration -> ENUM . IDENTIFIER COLON EnumBaseType EnumBody
    (438) AnonymousEnumDeclaration -> ENUM . COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> ENUM . LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> ENUM . LBRACE AnonymousEnumMembers RBRACE
    (114) StorageClass -> ENUM .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 58
    COLON           shift and go to state 57
    LBRACE          shift and go to state 56
    ENUM            reduce using rule 114 (StorageClass -> ENUM .)
    STATIC          reduce using rule 114 (StorageClass -> ENUM .)
    EXTERN          reduce using rule 114 (StorageClass -> ENUM .)
    FINAL           reduce using rule 114 (StorageClass -> ENUM .)
    AUTO            reduce using rule 114 (StorageClass -> ENUM .)
    CONST           reduce using rule 114 (StorageClass -> ENUM .)
    IMMUTABLE       reduce using rule 114 (StorageClass -> ENUM .)
    DOT             reduce using rule 114 (StorageClass -> ENUM .)
    BOOL            reduce using rule 114 (StorageClass -> ENUM .)
    SHORT           reduce using rule 114 (StorageClass -> ENUM .)
    USHORT          reduce using rule 114 (StorageClass -> ENUM .)
    INT             reduce using rule 114 (StorageClass -> ENUM .)
    UINT            reduce using rule 114 (StorageClass -> ENUM .)
    LONG            reduce using rule 114 (StorageClass -> ENUM .)
    ULONG           reduce using rule 114 (StorageClass -> ENUM .)
    CHAR            reduce using rule 114 (StorageClass -> ENUM .)
    FLOAT           reduce using rule 114 (StorageClass -> ENUM .)
    VOID            reduce using rule 114 (StorageClass -> ENUM .)
    TYPEOF          reduce using rule 114 (StorageClass -> ENUM .)

  ! IDENTIFIER      [ reduce using rule 114 (StorageClass -> ENUM .) ]


state 19

    (140) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> ALIAS . AliasDeclarationX SEMICOLON
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (143) AliasDeclarationX -> . AliasDeclarationY
    (144) AliasDeclarationX -> . AliasDeclarationX COMMA AliasDeclarationY
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (145) AliasDeclarationY -> . IDENTIFIER ASSIGN StorageClasses_opt Type
    (146) AliasDeclarationY -> . IDENTIFIER ASSIGN FunctionLiteral
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    IDENTIFIER      shift and go to state 64
    ENUM            shift and go to state 66
    STATIC          shift and go to state 59
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 21

  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    AliasDeclarationY              shift and go to state 61
    AliasDeclarationX              shift and go to state 62
    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 63
    StorageClasses_opt             shift and go to state 60
    empty                          shift and go to state 65

state 20

    (429) EnumDeclaration -> AnonymousEnumDeclaration .

    SEMICOLON       reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    NEW             reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DELETE          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ALIAS           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    MIXIN           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    STATIC          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    EXTERN          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FINAL           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    AUTO            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CONST           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IMMUTABLE       reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    RETURN          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ENUM            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IMPORT          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PRIVATE         reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PROTECTED       reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PUBLIC          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CLASS           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    UNION           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DOT             reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    BOOL            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    SHORT           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    USHORT          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    INT             reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    UINT            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LONG            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ULONG           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CHAR            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FLOAT           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    VOID            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IDENTIFIER      reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TYPEOF          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    RBRACE          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    $end            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CASE            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DEFAULT         reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LBRACE          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IF              reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    WHILE           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DO              reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FOR             reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    SWITCH          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CONTINUE        reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    BREAK           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    GOTO            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    WITH            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LPAREN          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FOREACH         reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FOREACH_REVERSE reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    UAMPERSAND      reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PLUS_PLUS       reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    MINUS_MINUS     reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TIMES           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    UMINUS          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    UPLUS           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    EXCLAMATION     reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TILDE           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CAST            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    THIS            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    NULL            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TRUE            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FALSE           reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DOLLAR          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    INUMBER         reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DNUMBER         reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LIT_CHAR        reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LIT_STR         reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LBRACKET        reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FUNCTION        reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TYPEID          reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    BODY            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ELSE            reduce using rule 429 (EnumDeclaration -> AnonymousEnumDeclaration .)


state 21

    (120) StorageClass -> IMMUTABLE .

    ENUM            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    STATIC          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    EXTERN          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    FINAL           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    AUTO            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    CONST           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 120 (StorageClass -> IMMUTABLE .)
    DOT             reduce using rule 120 (StorageClass -> IMMUTABLE .)
    BOOL            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    SHORT           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    USHORT          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    INT             reduce using rule 120 (StorageClass -> IMMUTABLE .)
    UINT            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    LONG            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    ULONG           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    CHAR            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    FLOAT           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    VOID            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 120 (StorageClass -> IMMUTABLE .)
    TYPEOF          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    ALIAS           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    IMPORT          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    CLASS           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    UNION           reduce using rule 120 (StorageClass -> IMMUTABLE .)


state 22

    (400) UnionDeclaration -> AnonUnionDeclaration .

    SEMICOLON       reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    NEW             reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    DELETE          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    ALIAS           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    MIXIN           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    STATIC          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    EXTERN          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    FINAL           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    AUTO            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    CONST           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    IMMUTABLE       reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    RETURN          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    ENUM            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    IMPORT          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    PRIVATE         reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    PROTECTED       reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    PUBLIC          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    CLASS           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    UNION           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    DOT             reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    BOOL            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    SHORT           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    USHORT          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    INT             reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    UINT            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    LONG            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    ULONG           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    CHAR            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    FLOAT           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    VOID            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    IDENTIFIER      reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    TYPEOF          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    RBRACE          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    $end            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    CASE            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    DEFAULT         reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    LBRACE          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    IF              reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    WHILE           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    DO              reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    FOR             reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    SWITCH          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    CONTINUE        reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    BREAK           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    GOTO            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    WITH            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    LPAREN          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    FOREACH         reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    FOREACH_REVERSE reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    UAMPERSAND      reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    PLUS_PLUS       reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    MINUS_MINUS     reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    TIMES           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    UMINUS          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    UPLUS           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    EXCLAMATION     reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    TILDE           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    CAST            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    THIS            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    NULL            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    TRUE            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    FALSE           reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    DOLLAR          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    INUMBER         reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    DNUMBER         reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    LIT_CHAR        reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    LIT_STR         reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    LBRACKET        reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    FUNCTION        reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    TYPEID          reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    BODY            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)
    ELSE            reduce using rule 400 (UnionDeclaration -> AnonUnionDeclaration .)


state 23

    (35) Declaration -> VarDeclarations .

    SEMICOLON       reduce using rule 35 (Declaration -> VarDeclarations .)
    NEW             reduce using rule 35 (Declaration -> VarDeclarations .)
    DELETE          reduce using rule 35 (Declaration -> VarDeclarations .)
    ALIAS           reduce using rule 35 (Declaration -> VarDeclarations .)
    MIXIN           reduce using rule 35 (Declaration -> VarDeclarations .)
    STATIC          reduce using rule 35 (Declaration -> VarDeclarations .)
    EXTERN          reduce using rule 35 (Declaration -> VarDeclarations .)
    FINAL           reduce using rule 35 (Declaration -> VarDeclarations .)
    AUTO            reduce using rule 35 (Declaration -> VarDeclarations .)
    CONST           reduce using rule 35 (Declaration -> VarDeclarations .)
    IMMUTABLE       reduce using rule 35 (Declaration -> VarDeclarations .)
    RETURN          reduce using rule 35 (Declaration -> VarDeclarations .)
    ENUM            reduce using rule 35 (Declaration -> VarDeclarations .)
    IMPORT          reduce using rule 35 (Declaration -> VarDeclarations .)
    PRIVATE         reduce using rule 35 (Declaration -> VarDeclarations .)
    PROTECTED       reduce using rule 35 (Declaration -> VarDeclarations .)
    PUBLIC          reduce using rule 35 (Declaration -> VarDeclarations .)
    CLASS           reduce using rule 35 (Declaration -> VarDeclarations .)
    UNION           reduce using rule 35 (Declaration -> VarDeclarations .)
    DOT             reduce using rule 35 (Declaration -> VarDeclarations .)
    BOOL            reduce using rule 35 (Declaration -> VarDeclarations .)
    SHORT           reduce using rule 35 (Declaration -> VarDeclarations .)
    USHORT          reduce using rule 35 (Declaration -> VarDeclarations .)
    INT             reduce using rule 35 (Declaration -> VarDeclarations .)
    UINT            reduce using rule 35 (Declaration -> VarDeclarations .)
    LONG            reduce using rule 35 (Declaration -> VarDeclarations .)
    ULONG           reduce using rule 35 (Declaration -> VarDeclarations .)
    CHAR            reduce using rule 35 (Declaration -> VarDeclarations .)
    FLOAT           reduce using rule 35 (Declaration -> VarDeclarations .)
    VOID            reduce using rule 35 (Declaration -> VarDeclarations .)
    IDENTIFIER      reduce using rule 35 (Declaration -> VarDeclarations .)
    TYPEOF          reduce using rule 35 (Declaration -> VarDeclarations .)
    RBRACE          reduce using rule 35 (Declaration -> VarDeclarations .)
    $end            reduce using rule 35 (Declaration -> VarDeclarations .)
    CASE            reduce using rule 35 (Declaration -> VarDeclarations .)
    DEFAULT         reduce using rule 35 (Declaration -> VarDeclarations .)
    LBRACE          reduce using rule 35 (Declaration -> VarDeclarations .)
    IF              reduce using rule 35 (Declaration -> VarDeclarations .)
    WHILE           reduce using rule 35 (Declaration -> VarDeclarations .)
    DO              reduce using rule 35 (Declaration -> VarDeclarations .)
    FOR             reduce using rule 35 (Declaration -> VarDeclarations .)
    SWITCH          reduce using rule 35 (Declaration -> VarDeclarations .)
    CONTINUE        reduce using rule 35 (Declaration -> VarDeclarations .)
    BREAK           reduce using rule 35 (Declaration -> VarDeclarations .)
    GOTO            reduce using rule 35 (Declaration -> VarDeclarations .)
    WITH            reduce using rule 35 (Declaration -> VarDeclarations .)
    LPAREN          reduce using rule 35 (Declaration -> VarDeclarations .)
    FOREACH         reduce using rule 35 (Declaration -> VarDeclarations .)
    FOREACH_REVERSE reduce using rule 35 (Declaration -> VarDeclarations .)
    UAMPERSAND      reduce using rule 35 (Declaration -> VarDeclarations .)
    PLUS_PLUS       reduce using rule 35 (Declaration -> VarDeclarations .)
    MINUS_MINUS     reduce using rule 35 (Declaration -> VarDeclarations .)
    TIMES           reduce using rule 35 (Declaration -> VarDeclarations .)
    UMINUS          reduce using rule 35 (Declaration -> VarDeclarations .)
    UPLUS           reduce using rule 35 (Declaration -> VarDeclarations .)
    EXCLAMATION     reduce using rule 35 (Declaration -> VarDeclarations .)
    TILDE           reduce using rule 35 (Declaration -> VarDeclarations .)
    CAST            reduce using rule 35 (Declaration -> VarDeclarations .)
    THIS            reduce using rule 35 (Declaration -> VarDeclarations .)
    NULL            reduce using rule 35 (Declaration -> VarDeclarations .)
    TRUE            reduce using rule 35 (Declaration -> VarDeclarations .)
    FALSE           reduce using rule 35 (Declaration -> VarDeclarations .)
    DOLLAR          reduce using rule 35 (Declaration -> VarDeclarations .)
    INUMBER         reduce using rule 35 (Declaration -> VarDeclarations .)
    DNUMBER         reduce using rule 35 (Declaration -> VarDeclarations .)
    LIT_CHAR        reduce using rule 35 (Declaration -> VarDeclarations .)
    LIT_STR         reduce using rule 35 (Declaration -> VarDeclarations .)
    LBRACKET        reduce using rule 35 (Declaration -> VarDeclarations .)
    FUNCTION        reduce using rule 35 (Declaration -> VarDeclarations .)
    TYPEID          reduce using rule 35 (Declaration -> VarDeclarations .)
    BODY            reduce using rule 35 (Declaration -> VarDeclarations .)
    ELSE            reduce using rule 35 (Declaration -> VarDeclarations .)


state 24

    (38) Declaration -> EnumDeclaration .

    SEMICOLON       reduce using rule 38 (Declaration -> EnumDeclaration .)
    NEW             reduce using rule 38 (Declaration -> EnumDeclaration .)
    DELETE          reduce using rule 38 (Declaration -> EnumDeclaration .)
    ALIAS           reduce using rule 38 (Declaration -> EnumDeclaration .)
    MIXIN           reduce using rule 38 (Declaration -> EnumDeclaration .)
    STATIC          reduce using rule 38 (Declaration -> EnumDeclaration .)
    EXTERN          reduce using rule 38 (Declaration -> EnumDeclaration .)
    FINAL           reduce using rule 38 (Declaration -> EnumDeclaration .)
    AUTO            reduce using rule 38 (Declaration -> EnumDeclaration .)
    CONST           reduce using rule 38 (Declaration -> EnumDeclaration .)
    IMMUTABLE       reduce using rule 38 (Declaration -> EnumDeclaration .)
    RETURN          reduce using rule 38 (Declaration -> EnumDeclaration .)
    ENUM            reduce using rule 38 (Declaration -> EnumDeclaration .)
    IMPORT          reduce using rule 38 (Declaration -> EnumDeclaration .)
    PRIVATE         reduce using rule 38 (Declaration -> EnumDeclaration .)
    PROTECTED       reduce using rule 38 (Declaration -> EnumDeclaration .)
    PUBLIC          reduce using rule 38 (Declaration -> EnumDeclaration .)
    CLASS           reduce using rule 38 (Declaration -> EnumDeclaration .)
    UNION           reduce using rule 38 (Declaration -> EnumDeclaration .)
    DOT             reduce using rule 38 (Declaration -> EnumDeclaration .)
    BOOL            reduce using rule 38 (Declaration -> EnumDeclaration .)
    SHORT           reduce using rule 38 (Declaration -> EnumDeclaration .)
    USHORT          reduce using rule 38 (Declaration -> EnumDeclaration .)
    INT             reduce using rule 38 (Declaration -> EnumDeclaration .)
    UINT            reduce using rule 38 (Declaration -> EnumDeclaration .)
    LONG            reduce using rule 38 (Declaration -> EnumDeclaration .)
    ULONG           reduce using rule 38 (Declaration -> EnumDeclaration .)
    CHAR            reduce using rule 38 (Declaration -> EnumDeclaration .)
    FLOAT           reduce using rule 38 (Declaration -> EnumDeclaration .)
    VOID            reduce using rule 38 (Declaration -> EnumDeclaration .)
    IDENTIFIER      reduce using rule 38 (Declaration -> EnumDeclaration .)
    TYPEOF          reduce using rule 38 (Declaration -> EnumDeclaration .)
    RBRACE          reduce using rule 38 (Declaration -> EnumDeclaration .)
    $end            reduce using rule 38 (Declaration -> EnumDeclaration .)
    CASE            reduce using rule 38 (Declaration -> EnumDeclaration .)
    DEFAULT         reduce using rule 38 (Declaration -> EnumDeclaration .)
    LBRACE          reduce using rule 38 (Declaration -> EnumDeclaration .)
    IF              reduce using rule 38 (Declaration -> EnumDeclaration .)
    WHILE           reduce using rule 38 (Declaration -> EnumDeclaration .)
    DO              reduce using rule 38 (Declaration -> EnumDeclaration .)
    FOR             reduce using rule 38 (Declaration -> EnumDeclaration .)
    SWITCH          reduce using rule 38 (Declaration -> EnumDeclaration .)
    CONTINUE        reduce using rule 38 (Declaration -> EnumDeclaration .)
    BREAK           reduce using rule 38 (Declaration -> EnumDeclaration .)
    GOTO            reduce using rule 38 (Declaration -> EnumDeclaration .)
    WITH            reduce using rule 38 (Declaration -> EnumDeclaration .)
    LPAREN          reduce using rule 38 (Declaration -> EnumDeclaration .)
    FOREACH         reduce using rule 38 (Declaration -> EnumDeclaration .)
    FOREACH_REVERSE reduce using rule 38 (Declaration -> EnumDeclaration .)
    UAMPERSAND      reduce using rule 38 (Declaration -> EnumDeclaration .)
    PLUS_PLUS       reduce using rule 38 (Declaration -> EnumDeclaration .)
    MINUS_MINUS     reduce using rule 38 (Declaration -> EnumDeclaration .)
    TIMES           reduce using rule 38 (Declaration -> EnumDeclaration .)
    UMINUS          reduce using rule 38 (Declaration -> EnumDeclaration .)
    UPLUS           reduce using rule 38 (Declaration -> EnumDeclaration .)
    EXCLAMATION     reduce using rule 38 (Declaration -> EnumDeclaration .)
    TILDE           reduce using rule 38 (Declaration -> EnumDeclaration .)
    CAST            reduce using rule 38 (Declaration -> EnumDeclaration .)
    THIS            reduce using rule 38 (Declaration -> EnumDeclaration .)
    NULL            reduce using rule 38 (Declaration -> EnumDeclaration .)
    TRUE            reduce using rule 38 (Declaration -> EnumDeclaration .)
    FALSE           reduce using rule 38 (Declaration -> EnumDeclaration .)
    DOLLAR          reduce using rule 38 (Declaration -> EnumDeclaration .)
    INUMBER         reduce using rule 38 (Declaration -> EnumDeclaration .)
    DNUMBER         reduce using rule 38 (Declaration -> EnumDeclaration .)
    LIT_CHAR        reduce using rule 38 (Declaration -> EnumDeclaration .)
    LIT_STR         reduce using rule 38 (Declaration -> EnumDeclaration .)
    LBRACKET        reduce using rule 38 (Declaration -> EnumDeclaration .)
    FUNCTION        reduce using rule 38 (Declaration -> EnumDeclaration .)
    TYPEID          reduce using rule 38 (Declaration -> EnumDeclaration .)
    BODY            reduce using rule 38 (Declaration -> EnumDeclaration .)
    ELSE            reduce using rule 38 (Declaration -> EnumDeclaration .)


state 25

    (397) AggregateDeclaration -> UnionDeclaration .

    SEMICOLON       reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    NEW             reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    DELETE          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    ALIAS           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    MIXIN           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    STATIC          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    EXTERN          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    FINAL           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    AUTO            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    CONST           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    IMMUTABLE       reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    RETURN          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    ENUM            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    IMPORT          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    PRIVATE         reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    PROTECTED       reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    PUBLIC          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    CLASS           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    UNION           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    DOT             reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    BOOL            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    SHORT           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    USHORT          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    INT             reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    UINT            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    LONG            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    ULONG           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    CHAR            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    FLOAT           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    VOID            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    IDENTIFIER      reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    TYPEOF          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    RBRACE          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    CASE            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    DEFAULT         reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    LBRACE          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    IF              reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    WHILE           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    DO              reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    FOR             reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    SWITCH          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    CONTINUE        reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    BREAK           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    GOTO            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    WITH            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    LPAREN          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    FOREACH         reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    FOREACH_REVERSE reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    UAMPERSAND      reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    PLUS_PLUS       reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    MINUS_MINUS     reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    TIMES           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    UMINUS          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    UPLUS           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    EXCLAMATION     reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    TILDE           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    CAST            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    THIS            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    NULL            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    TRUE            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    FALSE           reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    DOLLAR          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    INUMBER         reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    DNUMBER         reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    LIT_CHAR        reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    LIT_STR         reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    LBRACKET        reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    FUNCTION        reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    TYPEID          reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    BODY            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    ELSE            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)
    $end            reduce using rule 397 (AggregateDeclaration -> UnionDeclaration .)


state 26

    (396) AggregateDeclaration -> ClassDeclaration .

    SEMICOLON       reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    NEW             reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    DELETE          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    ALIAS           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    MIXIN           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    STATIC          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    EXTERN          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    FINAL           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    AUTO            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    CONST           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    IMMUTABLE       reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    RETURN          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    ENUM            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    IMPORT          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    PRIVATE         reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    PROTECTED       reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    PUBLIC          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    CLASS           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    UNION           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    DOT             reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    BOOL            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    SHORT           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    USHORT          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    INT             reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    UINT            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    LONG            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    ULONG           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    CHAR            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    FLOAT           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    VOID            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    IDENTIFIER      reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    TYPEOF          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    RBRACE          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    CASE            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    DEFAULT         reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    LBRACE          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    IF              reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    WHILE           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    DO              reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    FOR             reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    SWITCH          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    CONTINUE        reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    BREAK           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    GOTO            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    WITH            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    LPAREN          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    FOREACH         reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    FOREACH_REVERSE reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    UAMPERSAND      reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    PLUS_PLUS       reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    MINUS_MINUS     reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    TIMES           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    UMINUS          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    UPLUS           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    EXCLAMATION     reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    TILDE           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    CAST            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    THIS            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    NULL            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    TRUE            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    FALSE           reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    DOLLAR          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    INUMBER         reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    DNUMBER         reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    LIT_CHAR        reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    LIT_STR         reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    LBRACKET        reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    FUNCTION        reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    TYPEID          reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    BODY            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    ELSE            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)
    $end            reduce using rule 396 (AggregateDeclaration -> ClassDeclaration .)


state 27

    (20) ImportDeclaration -> IMPORT . ImportList SEMICOLON
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 72

    ModuleFullyQualifiedName       shift and go to state 67
    ImportBindings                 shift and go to state 68
    ModuleAliasIdentifier          shift and go to state 69
    ImportList                     shift and go to state 70
    PackageName                    shift and go to state 71
    ModuleName                     shift and go to state 75
    Import                         shift and go to state 73
    Packages                       shift and go to state 74

state 28

    (112) StorageClasses -> StorageClass .
    (113) StorageClasses -> StorageClass . StorageClasses
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      reduce using rule 112 (StorageClasses -> StorageClass .)
    DOT             reduce using rule 112 (StorageClasses -> StorageClass .)
    BOOL            reduce using rule 112 (StorageClasses -> StorageClass .)
    SHORT           reduce using rule 112 (StorageClasses -> StorageClass .)
    USHORT          reduce using rule 112 (StorageClasses -> StorageClass .)
    INT             reduce using rule 112 (StorageClasses -> StorageClass .)
    UINT            reduce using rule 112 (StorageClasses -> StorageClass .)
    LONG            reduce using rule 112 (StorageClasses -> StorageClass .)
    ULONG           reduce using rule 112 (StorageClasses -> StorageClass .)
    CHAR            reduce using rule 112 (StorageClasses -> StorageClass .)
    FLOAT           reduce using rule 112 (StorageClasses -> StorageClass .)
    VOID            reduce using rule 112 (StorageClasses -> StorageClass .)
    TYPEOF          reduce using rule 112 (StorageClasses -> StorageClass .)
    ALIAS           reduce using rule 112 (StorageClasses -> StorageClass .)
    IMPORT          reduce using rule 112 (StorageClasses -> StorageClass .)
    CLASS           reduce using rule 112 (StorageClasses -> StorageClass .)
    UNION           reduce using rule 112 (StorageClasses -> StorageClass .)
    ENUM            shift and go to state 66
    STATIC          shift and go to state 59
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 21

  ! CONST           [ reduce using rule 112 (StorageClasses -> StorageClass .) ]
  ! IMMUTABLE       [ reduce using rule 112 (StorageClasses -> StorageClass .) ]
  ! ENUM            [ reduce using rule 112 (StorageClasses -> StorageClass .) ]
  ! STATIC          [ reduce using rule 112 (StorageClasses -> StorageClass .) ]
  ! EXTERN          [ reduce using rule 112 (StorageClasses -> StorageClass .) ]
  ! FINAL           [ reduce using rule 112 (StorageClasses -> StorageClass .) ]
  ! AUTO            [ reduce using rule 112 (StorageClasses -> StorageClass .) ]

    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 76

state 29

    (449) AutoFuncDeclaration -> StorageClasses IDENTIFIER . FuncDeclaratorSuffix FunctionBody
    (451) FuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 79

    FuncDeclaratorSuffix           shift and go to state 77
    Parameters                     shift and go to state 78

state 30

    (21) ImportDeclaration -> STATIC IMPORT . ImportList SEMICOLON
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 72

    ModuleFullyQualifiedName       shift and go to state 67
    ImportBindings                 shift and go to state 68
    ModuleAliasIdentifier          shift and go to state 69
    ImportList                     shift and go to state 80
    PackageName                    shift and go to state 71
    ModuleName                     shift and go to state 75
    Import                         shift and go to state 73
    Packages                       shift and go to state 74

state 31

    (91) BasicTypeX -> SHORT .

    IDENTIFIER      reduce using rule 91 (BasicTypeX -> SHORT .)
    LPAREN          reduce using rule 91 (BasicTypeX -> SHORT .)
    TIMES           reduce using rule 91 (BasicTypeX -> SHORT .)
    LBRACKET        reduce using rule 91 (BasicTypeX -> SHORT .)
    FUNCTION        reduce using rule 91 (BasicTypeX -> SHORT .)
    DOT             reduce using rule 91 (BasicTypeX -> SHORT .)
    BOOL            reduce using rule 91 (BasicTypeX -> SHORT .)
    SHORT           reduce using rule 91 (BasicTypeX -> SHORT .)
    USHORT          reduce using rule 91 (BasicTypeX -> SHORT .)
    INT             reduce using rule 91 (BasicTypeX -> SHORT .)
    UINT            reduce using rule 91 (BasicTypeX -> SHORT .)
    LONG            reduce using rule 91 (BasicTypeX -> SHORT .)
    ULONG           reduce using rule 91 (BasicTypeX -> SHORT .)
    CHAR            reduce using rule 91 (BasicTypeX -> SHORT .)
    FLOAT           reduce using rule 91 (BasicTypeX -> SHORT .)
    VOID            reduce using rule 91 (BasicTypeX -> SHORT .)
    TYPEOF          reduce using rule 91 (BasicTypeX -> SHORT .)
    CONST           reduce using rule 91 (BasicTypeX -> SHORT .)
    IMMUTABLE       reduce using rule 91 (BasicTypeX -> SHORT .)
    LBRACE          reduce using rule 91 (BasicTypeX -> SHORT .)
    COMMA           reduce using rule 91 (BasicTypeX -> SHORT .)
    RBRACKET        reduce using rule 91 (BasicTypeX -> SHORT .)
    RPAREN          reduce using rule 91 (BasicTypeX -> SHORT .)
    SEMICOLON       reduce using rule 91 (BasicTypeX -> SHORT .)
    ELLIPSIS        reduce using rule 91 (BasicTypeX -> SHORT .)
    BODY            reduce using rule 91 (BasicTypeX -> SHORT .)
    POWER           reduce using rule 91 (BasicTypeX -> SHORT .)
    PLUS_PLUS       reduce using rule 91 (BasicTypeX -> SHORT .)
    MINUS_MINUS     reduce using rule 91 (BasicTypeX -> SHORT .)
    DIV             reduce using rule 91 (BasicTypeX -> SHORT .)
    MODULO          reduce using rule 91 (BasicTypeX -> SHORT .)
    PLUS            reduce using rule 91 (BasicTypeX -> SHORT .)
    MINUS           reduce using rule 91 (BasicTypeX -> SHORT .)
    LEFT_SHIFT      reduce using rule 91 (BasicTypeX -> SHORT .)
    RIGHT_SHIFT     reduce using rule 91 (BasicTypeX -> SHORT .)
    IS_EQ           reduce using rule 91 (BasicTypeX -> SHORT .)
    NOT_EQ          reduce using rule 91 (BasicTypeX -> SHORT .)
    LESS            reduce using rule 91 (BasicTypeX -> SHORT .)
    GREATER_EQ      reduce using rule 91 (BasicTypeX -> SHORT .)
    GREATER         reduce using rule 91 (BasicTypeX -> SHORT .)
    LESS_EQ         reduce using rule 91 (BasicTypeX -> SHORT .)
    AMPERSAND       reduce using rule 91 (BasicTypeX -> SHORT .)
    CARET           reduce using rule 91 (BasicTypeX -> SHORT .)
    PIPE            reduce using rule 91 (BasicTypeX -> SHORT .)
    DOUBLE_AMPERSAND reduce using rule 91 (BasicTypeX -> SHORT .)
    QUESTION        reduce using rule 91 (BasicTypeX -> SHORT .)
    DOUBLE_PIPE     reduce using rule 91 (BasicTypeX -> SHORT .)
    ASSIGN          reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_PLUS         reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_MINUS        reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_TIMES        reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_DIV          reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_MODULO       reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_AND_BIT      reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_OR_BIT       reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_XOR_BIT      reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_LEFT         reduce using rule 91 (BasicTypeX -> SHORT .)
    EQ_RIGHT        reduce using rule 91 (BasicTypeX -> SHORT .)
    RANGE           reduce using rule 91 (BasicTypeX -> SHORT .)
    RBRACE          reduce using rule 91 (BasicTypeX -> SHORT .)
    COLON           reduce using rule 91 (BasicTypeX -> SHORT .)


state 32

    (99) BasicTypeX -> VOID .

    IDENTIFIER      reduce using rule 99 (BasicTypeX -> VOID .)
    LPAREN          reduce using rule 99 (BasicTypeX -> VOID .)
    TIMES           reduce using rule 99 (BasicTypeX -> VOID .)
    LBRACKET        reduce using rule 99 (BasicTypeX -> VOID .)
    FUNCTION        reduce using rule 99 (BasicTypeX -> VOID .)
    DOT             reduce using rule 99 (BasicTypeX -> VOID .)
    BOOL            reduce using rule 99 (BasicTypeX -> VOID .)
    SHORT           reduce using rule 99 (BasicTypeX -> VOID .)
    USHORT          reduce using rule 99 (BasicTypeX -> VOID .)
    INT             reduce using rule 99 (BasicTypeX -> VOID .)
    UINT            reduce using rule 99 (BasicTypeX -> VOID .)
    LONG            reduce using rule 99 (BasicTypeX -> VOID .)
    ULONG           reduce using rule 99 (BasicTypeX -> VOID .)
    CHAR            reduce using rule 99 (BasicTypeX -> VOID .)
    FLOAT           reduce using rule 99 (BasicTypeX -> VOID .)
    VOID            reduce using rule 99 (BasicTypeX -> VOID .)
    TYPEOF          reduce using rule 99 (BasicTypeX -> VOID .)
    CONST           reduce using rule 99 (BasicTypeX -> VOID .)
    IMMUTABLE       reduce using rule 99 (BasicTypeX -> VOID .)
    LBRACE          reduce using rule 99 (BasicTypeX -> VOID .)
    COMMA           reduce using rule 99 (BasicTypeX -> VOID .)
    RBRACKET        reduce using rule 99 (BasicTypeX -> VOID .)
    RPAREN          reduce using rule 99 (BasicTypeX -> VOID .)
    SEMICOLON       reduce using rule 99 (BasicTypeX -> VOID .)
    ELLIPSIS        reduce using rule 99 (BasicTypeX -> VOID .)
    BODY            reduce using rule 99 (BasicTypeX -> VOID .)
    POWER           reduce using rule 99 (BasicTypeX -> VOID .)
    PLUS_PLUS       reduce using rule 99 (BasicTypeX -> VOID .)
    MINUS_MINUS     reduce using rule 99 (BasicTypeX -> VOID .)
    DIV             reduce using rule 99 (BasicTypeX -> VOID .)
    MODULO          reduce using rule 99 (BasicTypeX -> VOID .)
    PLUS            reduce using rule 99 (BasicTypeX -> VOID .)
    MINUS           reduce using rule 99 (BasicTypeX -> VOID .)
    LEFT_SHIFT      reduce using rule 99 (BasicTypeX -> VOID .)
    RIGHT_SHIFT     reduce using rule 99 (BasicTypeX -> VOID .)
    IS_EQ           reduce using rule 99 (BasicTypeX -> VOID .)
    NOT_EQ          reduce using rule 99 (BasicTypeX -> VOID .)
    LESS            reduce using rule 99 (BasicTypeX -> VOID .)
    GREATER_EQ      reduce using rule 99 (BasicTypeX -> VOID .)
    GREATER         reduce using rule 99 (BasicTypeX -> VOID .)
    LESS_EQ         reduce using rule 99 (BasicTypeX -> VOID .)
    AMPERSAND       reduce using rule 99 (BasicTypeX -> VOID .)
    CARET           reduce using rule 99 (BasicTypeX -> VOID .)
    PIPE            reduce using rule 99 (BasicTypeX -> VOID .)
    DOUBLE_AMPERSAND reduce using rule 99 (BasicTypeX -> VOID .)
    QUESTION        reduce using rule 99 (BasicTypeX -> VOID .)
    DOUBLE_PIPE     reduce using rule 99 (BasicTypeX -> VOID .)
    ASSIGN          reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_PLUS         reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_MINUS        reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_TIMES        reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_DIV          reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_MODULO       reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_AND_BIT      reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_OR_BIT       reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_XOR_BIT      reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_LEFT         reduce using rule 99 (BasicTypeX -> VOID .)
    EQ_RIGHT        reduce using rule 99 (BasicTypeX -> VOID .)
    RANGE           reduce using rule 99 (BasicTypeX -> VOID .)
    RBRACE          reduce using rule 99 (BasicTypeX -> VOID .)
    COLON           reduce using rule 99 (BasicTypeX -> VOID .)


state 33

    (97) BasicTypeX -> CHAR .

    IDENTIFIER      reduce using rule 97 (BasicTypeX -> CHAR .)
    LPAREN          reduce using rule 97 (BasicTypeX -> CHAR .)
    TIMES           reduce using rule 97 (BasicTypeX -> CHAR .)
    LBRACKET        reduce using rule 97 (BasicTypeX -> CHAR .)
    FUNCTION        reduce using rule 97 (BasicTypeX -> CHAR .)
    DOT             reduce using rule 97 (BasicTypeX -> CHAR .)
    BOOL            reduce using rule 97 (BasicTypeX -> CHAR .)
    SHORT           reduce using rule 97 (BasicTypeX -> CHAR .)
    USHORT          reduce using rule 97 (BasicTypeX -> CHAR .)
    INT             reduce using rule 97 (BasicTypeX -> CHAR .)
    UINT            reduce using rule 97 (BasicTypeX -> CHAR .)
    LONG            reduce using rule 97 (BasicTypeX -> CHAR .)
    ULONG           reduce using rule 97 (BasicTypeX -> CHAR .)
    CHAR            reduce using rule 97 (BasicTypeX -> CHAR .)
    FLOAT           reduce using rule 97 (BasicTypeX -> CHAR .)
    VOID            reduce using rule 97 (BasicTypeX -> CHAR .)
    TYPEOF          reduce using rule 97 (BasicTypeX -> CHAR .)
    CONST           reduce using rule 97 (BasicTypeX -> CHAR .)
    IMMUTABLE       reduce using rule 97 (BasicTypeX -> CHAR .)
    LBRACE          reduce using rule 97 (BasicTypeX -> CHAR .)
    COMMA           reduce using rule 97 (BasicTypeX -> CHAR .)
    RBRACKET        reduce using rule 97 (BasicTypeX -> CHAR .)
    RPAREN          reduce using rule 97 (BasicTypeX -> CHAR .)
    SEMICOLON       reduce using rule 97 (BasicTypeX -> CHAR .)
    ELLIPSIS        reduce using rule 97 (BasicTypeX -> CHAR .)
    BODY            reduce using rule 97 (BasicTypeX -> CHAR .)
    POWER           reduce using rule 97 (BasicTypeX -> CHAR .)
    PLUS_PLUS       reduce using rule 97 (BasicTypeX -> CHAR .)
    MINUS_MINUS     reduce using rule 97 (BasicTypeX -> CHAR .)
    DIV             reduce using rule 97 (BasicTypeX -> CHAR .)
    MODULO          reduce using rule 97 (BasicTypeX -> CHAR .)
    PLUS            reduce using rule 97 (BasicTypeX -> CHAR .)
    MINUS           reduce using rule 97 (BasicTypeX -> CHAR .)
    LEFT_SHIFT      reduce using rule 97 (BasicTypeX -> CHAR .)
    RIGHT_SHIFT     reduce using rule 97 (BasicTypeX -> CHAR .)
    IS_EQ           reduce using rule 97 (BasicTypeX -> CHAR .)
    NOT_EQ          reduce using rule 97 (BasicTypeX -> CHAR .)
    LESS            reduce using rule 97 (BasicTypeX -> CHAR .)
    GREATER_EQ      reduce using rule 97 (BasicTypeX -> CHAR .)
    GREATER         reduce using rule 97 (BasicTypeX -> CHAR .)
    LESS_EQ         reduce using rule 97 (BasicTypeX -> CHAR .)
    AMPERSAND       reduce using rule 97 (BasicTypeX -> CHAR .)
    CARET           reduce using rule 97 (BasicTypeX -> CHAR .)
    PIPE            reduce using rule 97 (BasicTypeX -> CHAR .)
    DOUBLE_AMPERSAND reduce using rule 97 (BasicTypeX -> CHAR .)
    QUESTION        reduce using rule 97 (BasicTypeX -> CHAR .)
    DOUBLE_PIPE     reduce using rule 97 (BasicTypeX -> CHAR .)
    ASSIGN          reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_PLUS         reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_MINUS        reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_TIMES        reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_DIV          reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_MODULO       reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_AND_BIT      reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_OR_BIT       reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_XOR_BIT      reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_LEFT         reduce using rule 97 (BasicTypeX -> CHAR .)
    EQ_RIGHT        reduce using rule 97 (BasicTypeX -> CHAR .)
    RANGE           reduce using rule 97 (BasicTypeX -> CHAR .)
    RBRACE          reduce using rule 97 (BasicTypeX -> CHAR .)
    COLON           reduce using rule 97 (BasicTypeX -> CHAR .)


state 34

    (86) BasicType -> IdentifierList .

    TIMES           reduce using rule 86 (BasicType -> IdentifierList .)
    LBRACKET        reduce using rule 86 (BasicType -> IdentifierList .)
    FUNCTION        reduce using rule 86 (BasicType -> IdentifierList .)
    IDENTIFIER      reduce using rule 86 (BasicType -> IdentifierList .)
    LBRACE          reduce using rule 86 (BasicType -> IdentifierList .)
    RPAREN          reduce using rule 86 (BasicType -> IdentifierList .)
    SEMICOLON       reduce using rule 86 (BasicType -> IdentifierList .)
    ELLIPSIS        reduce using rule 86 (BasicType -> IdentifierList .)
    COMMA           reduce using rule 86 (BasicType -> IdentifierList .)
    BODY            reduce using rule 86 (BasicType -> IdentifierList .)
    LPAREN          reduce using rule 86 (BasicType -> IdentifierList .)
    POWER           reduce using rule 86 (BasicType -> IdentifierList .)
    DOT             reduce using rule 86 (BasicType -> IdentifierList .)
    PLUS_PLUS       reduce using rule 86 (BasicType -> IdentifierList .)
    MINUS_MINUS     reduce using rule 86 (BasicType -> IdentifierList .)
    DIV             reduce using rule 86 (BasicType -> IdentifierList .)
    MODULO          reduce using rule 86 (BasicType -> IdentifierList .)
    PLUS            reduce using rule 86 (BasicType -> IdentifierList .)
    MINUS           reduce using rule 86 (BasicType -> IdentifierList .)
    LEFT_SHIFT      reduce using rule 86 (BasicType -> IdentifierList .)
    RIGHT_SHIFT     reduce using rule 86 (BasicType -> IdentifierList .)
    IS_EQ           reduce using rule 86 (BasicType -> IdentifierList .)
    NOT_EQ          reduce using rule 86 (BasicType -> IdentifierList .)
    LESS            reduce using rule 86 (BasicType -> IdentifierList .)
    GREATER_EQ      reduce using rule 86 (BasicType -> IdentifierList .)
    GREATER         reduce using rule 86 (BasicType -> IdentifierList .)
    LESS_EQ         reduce using rule 86 (BasicType -> IdentifierList .)
    AMPERSAND       reduce using rule 86 (BasicType -> IdentifierList .)
    CARET           reduce using rule 86 (BasicType -> IdentifierList .)
    PIPE            reduce using rule 86 (BasicType -> IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 86 (BasicType -> IdentifierList .)
    QUESTION        reduce using rule 86 (BasicType -> IdentifierList .)
    DOUBLE_PIPE     reduce using rule 86 (BasicType -> IdentifierList .)
    ASSIGN          reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_PLUS         reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_MINUS        reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_TIMES        reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_DIV          reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_MODULO       reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_AND_BIT      reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_OR_BIT       reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_XOR_BIT      reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_LEFT         reduce using rule 86 (BasicType -> IdentifierList .)
    EQ_RIGHT        reduce using rule 86 (BasicType -> IdentifierList .)
    RBRACKET        reduce using rule 86 (BasicType -> IdentifierList .)
    RANGE           reduce using rule 86 (BasicType -> IdentifierList .)
    RBRACE          reduce using rule 86 (BasicType -> IdentifierList .)
    COLON           reduce using rule 86 (BasicType -> IdentifierList .)
    BOOL            reduce using rule 86 (BasicType -> IdentifierList .)
    SHORT           reduce using rule 86 (BasicType -> IdentifierList .)
    USHORT          reduce using rule 86 (BasicType -> IdentifierList .)
    INT             reduce using rule 86 (BasicType -> IdentifierList .)
    UINT            reduce using rule 86 (BasicType -> IdentifierList .)
    LONG            reduce using rule 86 (BasicType -> IdentifierList .)
    ULONG           reduce using rule 86 (BasicType -> IdentifierList .)
    CHAR            reduce using rule 86 (BasicType -> IdentifierList .)
    FLOAT           reduce using rule 86 (BasicType -> IdentifierList .)
    VOID            reduce using rule 86 (BasicType -> IdentifierList .)
    TYPEOF          reduce using rule 86 (BasicType -> IdentifierList .)
    CONST           reduce using rule 86 (BasicType -> IdentifierList .)
    IMMUTABLE       reduce using rule 86 (BasicType -> IdentifierList .)


state 35

    (82) TypeCtor -> CONST .

    LPAREN          reduce using rule 82 (TypeCtor -> CONST .)
    CONST           reduce using rule 82 (TypeCtor -> CONST .)
    IMMUTABLE       reduce using rule 82 (TypeCtor -> CONST .)
    DOT             reduce using rule 82 (TypeCtor -> CONST .)
    BOOL            reduce using rule 82 (TypeCtor -> CONST .)
    SHORT           reduce using rule 82 (TypeCtor -> CONST .)
    USHORT          reduce using rule 82 (TypeCtor -> CONST .)
    INT             reduce using rule 82 (TypeCtor -> CONST .)
    UINT            reduce using rule 82 (TypeCtor -> CONST .)
    LONG            reduce using rule 82 (TypeCtor -> CONST .)
    ULONG           reduce using rule 82 (TypeCtor -> CONST .)
    CHAR            reduce using rule 82 (TypeCtor -> CONST .)
    FLOAT           reduce using rule 82 (TypeCtor -> CONST .)
    VOID            reduce using rule 82 (TypeCtor -> CONST .)
    IDENTIFIER      reduce using rule 82 (TypeCtor -> CONST .)
    TYPEOF          reduce using rule 82 (TypeCtor -> CONST .)
    ENUM            reduce using rule 82 (TypeCtor -> CONST .)
    ALIAS           reduce using rule 82 (TypeCtor -> CONST .)
    AUTO            reduce using rule 82 (TypeCtor -> CONST .)
    FINAL           reduce using rule 82 (TypeCtor -> CONST .)
    SCOPE           reduce using rule 82 (TypeCtor -> CONST .)
    RPAREN          reduce using rule 82 (TypeCtor -> CONST .)


state 36

    (85) BasicType -> DOT . IdentifierList
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 41

    IdentifierList                 shift and go to state 81

state 37

    (96) BasicTypeX -> ULONG .

    IDENTIFIER      reduce using rule 96 (BasicTypeX -> ULONG .)
    LPAREN          reduce using rule 96 (BasicTypeX -> ULONG .)
    TIMES           reduce using rule 96 (BasicTypeX -> ULONG .)
    LBRACKET        reduce using rule 96 (BasicTypeX -> ULONG .)
    FUNCTION        reduce using rule 96 (BasicTypeX -> ULONG .)
    DOT             reduce using rule 96 (BasicTypeX -> ULONG .)
    BOOL            reduce using rule 96 (BasicTypeX -> ULONG .)
    SHORT           reduce using rule 96 (BasicTypeX -> ULONG .)
    USHORT          reduce using rule 96 (BasicTypeX -> ULONG .)
    INT             reduce using rule 96 (BasicTypeX -> ULONG .)
    UINT            reduce using rule 96 (BasicTypeX -> ULONG .)
    LONG            reduce using rule 96 (BasicTypeX -> ULONG .)
    ULONG           reduce using rule 96 (BasicTypeX -> ULONG .)
    CHAR            reduce using rule 96 (BasicTypeX -> ULONG .)
    FLOAT           reduce using rule 96 (BasicTypeX -> ULONG .)
    VOID            reduce using rule 96 (BasicTypeX -> ULONG .)
    TYPEOF          reduce using rule 96 (BasicTypeX -> ULONG .)
    CONST           reduce using rule 96 (BasicTypeX -> ULONG .)
    IMMUTABLE       reduce using rule 96 (BasicTypeX -> ULONG .)
    LBRACE          reduce using rule 96 (BasicTypeX -> ULONG .)
    COMMA           reduce using rule 96 (BasicTypeX -> ULONG .)
    RBRACKET        reduce using rule 96 (BasicTypeX -> ULONG .)
    RPAREN          reduce using rule 96 (BasicTypeX -> ULONG .)
    SEMICOLON       reduce using rule 96 (BasicTypeX -> ULONG .)
    ELLIPSIS        reduce using rule 96 (BasicTypeX -> ULONG .)
    BODY            reduce using rule 96 (BasicTypeX -> ULONG .)
    POWER           reduce using rule 96 (BasicTypeX -> ULONG .)
    PLUS_PLUS       reduce using rule 96 (BasicTypeX -> ULONG .)
    MINUS_MINUS     reduce using rule 96 (BasicTypeX -> ULONG .)
    DIV             reduce using rule 96 (BasicTypeX -> ULONG .)
    MODULO          reduce using rule 96 (BasicTypeX -> ULONG .)
    PLUS            reduce using rule 96 (BasicTypeX -> ULONG .)
    MINUS           reduce using rule 96 (BasicTypeX -> ULONG .)
    LEFT_SHIFT      reduce using rule 96 (BasicTypeX -> ULONG .)
    RIGHT_SHIFT     reduce using rule 96 (BasicTypeX -> ULONG .)
    IS_EQ           reduce using rule 96 (BasicTypeX -> ULONG .)
    NOT_EQ          reduce using rule 96 (BasicTypeX -> ULONG .)
    LESS            reduce using rule 96 (BasicTypeX -> ULONG .)
    GREATER_EQ      reduce using rule 96 (BasicTypeX -> ULONG .)
    GREATER         reduce using rule 96 (BasicTypeX -> ULONG .)
    LESS_EQ         reduce using rule 96 (BasicTypeX -> ULONG .)
    AMPERSAND       reduce using rule 96 (BasicTypeX -> ULONG .)
    CARET           reduce using rule 96 (BasicTypeX -> ULONG .)
    PIPE            reduce using rule 96 (BasicTypeX -> ULONG .)
    DOUBLE_AMPERSAND reduce using rule 96 (BasicTypeX -> ULONG .)
    QUESTION        reduce using rule 96 (BasicTypeX -> ULONG .)
    DOUBLE_PIPE     reduce using rule 96 (BasicTypeX -> ULONG .)
    ASSIGN          reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_PLUS         reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_MINUS        reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_TIMES        reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_DIV          reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_MODULO       reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_AND_BIT      reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_OR_BIT       reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_XOR_BIT      reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_LEFT         reduce using rule 96 (BasicTypeX -> ULONG .)
    EQ_RIGHT        reduce using rule 96 (BasicTypeX -> ULONG .)
    RANGE           reduce using rule 96 (BasicTypeX -> ULONG .)
    RBRACE          reduce using rule 96 (BasicTypeX -> ULONG .)
    COLON           reduce using rule 96 (BasicTypeX -> ULONG .)


state 38

    (446) FuncDeclaration -> StorageClasses_opt BasicType . FuncDeclarator FunctionBody
    (447) FuncDeclaration -> StorageClasses_opt BasicType . FuncDeclarator SEMICOLON
    (40) VarDeclarations -> StorageClasses_opt BasicType . Declarators SEMICOLON
    (450) FuncDeclarator -> . BasicType2_opt IDENTIFIER FuncDeclaratorSuffix
    (41) Declarators -> . DeclaratorInitializer
    (42) Declarators -> . DeclaratorInitializer COMMA DeclaratorIdentifierList
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (43) DeclaratorInitializer -> . VarDeclarator
    (44) DeclaratorInitializer -> . VarDeclarator ASSIGN Initializer
    (45) DeclaratorInitializer -> . AltDeclarator ASSIGN Initializer
    (46) DeclaratorInitializer -> . AltDeclarator
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (59) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (60) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 485 (empty -> .)
    LPAREN          reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

    VarDeclarator                  shift and go to state 82
    BasicType2X                    shift and go to state 84
    DeclaratorInitializer          shift and go to state 86
    Declarators                    shift and go to state 87
    AltDeclarator                  shift and go to state 88
    empty                          shift and go to state 89
    FuncDeclarator                 shift and go to state 92
    BasicType2_opt                 shift and go to state 85
    BasicType2                     shift and go to state 93

state 39

    (95) BasicTypeX -> LONG .

    IDENTIFIER      reduce using rule 95 (BasicTypeX -> LONG .)
    LPAREN          reduce using rule 95 (BasicTypeX -> LONG .)
    TIMES           reduce using rule 95 (BasicTypeX -> LONG .)
    LBRACKET        reduce using rule 95 (BasicTypeX -> LONG .)
    FUNCTION        reduce using rule 95 (BasicTypeX -> LONG .)
    DOT             reduce using rule 95 (BasicTypeX -> LONG .)
    BOOL            reduce using rule 95 (BasicTypeX -> LONG .)
    SHORT           reduce using rule 95 (BasicTypeX -> LONG .)
    USHORT          reduce using rule 95 (BasicTypeX -> LONG .)
    INT             reduce using rule 95 (BasicTypeX -> LONG .)
    UINT            reduce using rule 95 (BasicTypeX -> LONG .)
    LONG            reduce using rule 95 (BasicTypeX -> LONG .)
    ULONG           reduce using rule 95 (BasicTypeX -> LONG .)
    CHAR            reduce using rule 95 (BasicTypeX -> LONG .)
    FLOAT           reduce using rule 95 (BasicTypeX -> LONG .)
    VOID            reduce using rule 95 (BasicTypeX -> LONG .)
    TYPEOF          reduce using rule 95 (BasicTypeX -> LONG .)
    CONST           reduce using rule 95 (BasicTypeX -> LONG .)
    IMMUTABLE       reduce using rule 95 (BasicTypeX -> LONG .)
    LBRACE          reduce using rule 95 (BasicTypeX -> LONG .)
    COMMA           reduce using rule 95 (BasicTypeX -> LONG .)
    RBRACKET        reduce using rule 95 (BasicTypeX -> LONG .)
    RPAREN          reduce using rule 95 (BasicTypeX -> LONG .)
    SEMICOLON       reduce using rule 95 (BasicTypeX -> LONG .)
    ELLIPSIS        reduce using rule 95 (BasicTypeX -> LONG .)
    BODY            reduce using rule 95 (BasicTypeX -> LONG .)
    POWER           reduce using rule 95 (BasicTypeX -> LONG .)
    PLUS_PLUS       reduce using rule 95 (BasicTypeX -> LONG .)
    MINUS_MINUS     reduce using rule 95 (BasicTypeX -> LONG .)
    DIV             reduce using rule 95 (BasicTypeX -> LONG .)
    MODULO          reduce using rule 95 (BasicTypeX -> LONG .)
    PLUS            reduce using rule 95 (BasicTypeX -> LONG .)
    MINUS           reduce using rule 95 (BasicTypeX -> LONG .)
    LEFT_SHIFT      reduce using rule 95 (BasicTypeX -> LONG .)
    RIGHT_SHIFT     reduce using rule 95 (BasicTypeX -> LONG .)
    IS_EQ           reduce using rule 95 (BasicTypeX -> LONG .)
    NOT_EQ          reduce using rule 95 (BasicTypeX -> LONG .)
    LESS            reduce using rule 95 (BasicTypeX -> LONG .)
    GREATER_EQ      reduce using rule 95 (BasicTypeX -> LONG .)
    GREATER         reduce using rule 95 (BasicTypeX -> LONG .)
    LESS_EQ         reduce using rule 95 (BasicTypeX -> LONG .)
    AMPERSAND       reduce using rule 95 (BasicTypeX -> LONG .)
    CARET           reduce using rule 95 (BasicTypeX -> LONG .)
    PIPE            reduce using rule 95 (BasicTypeX -> LONG .)
    DOUBLE_AMPERSAND reduce using rule 95 (BasicTypeX -> LONG .)
    QUESTION        reduce using rule 95 (BasicTypeX -> LONG .)
    DOUBLE_PIPE     reduce using rule 95 (BasicTypeX -> LONG .)
    ASSIGN          reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_PLUS         reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_MINUS        reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_TIMES        reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_DIV          reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_MODULO       reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_AND_BIT      reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_OR_BIT       reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_XOR_BIT      reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_LEFT         reduce using rule 95 (BasicTypeX -> LONG .)
    EQ_RIGHT        reduce using rule 95 (BasicTypeX -> LONG .)
    RANGE           reduce using rule 95 (BasicTypeX -> LONG .)
    RBRACE          reduce using rule 95 (BasicTypeX -> LONG .)
    COLON           reduce using rule 95 (BasicTypeX -> LONG .)


state 40

    (84) BasicType -> BasicTypeX .

    TIMES           reduce using rule 84 (BasicType -> BasicTypeX .)
    LBRACKET        reduce using rule 84 (BasicType -> BasicTypeX .)
    FUNCTION        reduce using rule 84 (BasicType -> BasicTypeX .)
    IDENTIFIER      reduce using rule 84 (BasicType -> BasicTypeX .)
    LBRACE          reduce using rule 84 (BasicType -> BasicTypeX .)
    RPAREN          reduce using rule 84 (BasicType -> BasicTypeX .)
    SEMICOLON       reduce using rule 84 (BasicType -> BasicTypeX .)
    ELLIPSIS        reduce using rule 84 (BasicType -> BasicTypeX .)
    COMMA           reduce using rule 84 (BasicType -> BasicTypeX .)
    BODY            reduce using rule 84 (BasicType -> BasicTypeX .)
    LPAREN          reduce using rule 84 (BasicType -> BasicTypeX .)
    POWER           reduce using rule 84 (BasicType -> BasicTypeX .)
    DOT             reduce using rule 84 (BasicType -> BasicTypeX .)
    PLUS_PLUS       reduce using rule 84 (BasicType -> BasicTypeX .)
    MINUS_MINUS     reduce using rule 84 (BasicType -> BasicTypeX .)
    DIV             reduce using rule 84 (BasicType -> BasicTypeX .)
    MODULO          reduce using rule 84 (BasicType -> BasicTypeX .)
    PLUS            reduce using rule 84 (BasicType -> BasicTypeX .)
    MINUS           reduce using rule 84 (BasicType -> BasicTypeX .)
    LEFT_SHIFT      reduce using rule 84 (BasicType -> BasicTypeX .)
    RIGHT_SHIFT     reduce using rule 84 (BasicType -> BasicTypeX .)
    IS_EQ           reduce using rule 84 (BasicType -> BasicTypeX .)
    NOT_EQ          reduce using rule 84 (BasicType -> BasicTypeX .)
    LESS            reduce using rule 84 (BasicType -> BasicTypeX .)
    GREATER_EQ      reduce using rule 84 (BasicType -> BasicTypeX .)
    GREATER         reduce using rule 84 (BasicType -> BasicTypeX .)
    LESS_EQ         reduce using rule 84 (BasicType -> BasicTypeX .)
    AMPERSAND       reduce using rule 84 (BasicType -> BasicTypeX .)
    CARET           reduce using rule 84 (BasicType -> BasicTypeX .)
    PIPE            reduce using rule 84 (BasicType -> BasicTypeX .)
    DOUBLE_AMPERSAND reduce using rule 84 (BasicType -> BasicTypeX .)
    QUESTION        reduce using rule 84 (BasicType -> BasicTypeX .)
    DOUBLE_PIPE     reduce using rule 84 (BasicType -> BasicTypeX .)
    ASSIGN          reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_PLUS         reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_MINUS        reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_TIMES        reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_DIV          reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_MODULO       reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_AND_BIT      reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_OR_BIT       reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_XOR_BIT      reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_LEFT         reduce using rule 84 (BasicType -> BasicTypeX .)
    EQ_RIGHT        reduce using rule 84 (BasicType -> BasicTypeX .)
    RBRACKET        reduce using rule 84 (BasicType -> BasicTypeX .)
    RANGE           reduce using rule 84 (BasicType -> BasicTypeX .)
    RBRACE          reduce using rule 84 (BasicType -> BasicTypeX .)
    COLON           reduce using rule 84 (BasicType -> BasicTypeX .)
    BOOL            reduce using rule 84 (BasicType -> BasicTypeX .)
    SHORT           reduce using rule 84 (BasicType -> BasicTypeX .)
    USHORT          reduce using rule 84 (BasicType -> BasicTypeX .)
    INT             reduce using rule 84 (BasicType -> BasicTypeX .)
    UINT            reduce using rule 84 (BasicType -> BasicTypeX .)
    LONG            reduce using rule 84 (BasicType -> BasicTypeX .)
    ULONG           reduce using rule 84 (BasicType -> BasicTypeX .)
    CHAR            reduce using rule 84 (BasicType -> BasicTypeX .)
    FLOAT           reduce using rule 84 (BasicType -> BasicTypeX .)
    VOID            reduce using rule 84 (BasicType -> BasicTypeX .)
    TYPEOF          reduce using rule 84 (BasicType -> BasicTypeX .)
    CONST           reduce using rule 84 (BasicType -> BasicTypeX .)
    IMMUTABLE       reduce using rule 84 (BasicType -> BasicTypeX .)


state 41

    (109) IdentifierList -> IDENTIFIER .
    (110) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (111) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    FUNCTION        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    RPAREN          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    COMMA           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    LBRACE          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    SEMICOLON       reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    BODY            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    POWER           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    DIV             reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    MODULO          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    PLUS            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    MINUS           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    IS_EQ           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    NOT_EQ          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    LESS            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    GREATER         reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    LESS_EQ         reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    AMPERSAND       reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    CARET           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    PIPE            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    QUESTION        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_DIV          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    RBRACKET        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    RANGE           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    RBRACE          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    COLON           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    BOOL            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    SHORT           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    USHORT          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    INT             reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    UINT            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    LONG            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    ULONG           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    CHAR            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    FLOAT           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    VOID            reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    TYPEOF          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    CONST           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    IMMUTABLE       reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 95
    LBRACKET        shift and go to state 94

  ! LBRACKET        [ reduce using rule 109 (IdentifierList -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 109 (IdentifierList -> IDENTIFIER .) ]


state 42

    (89) BasicType -> TypeCtor . LPAREN Type RPAREN

    LPAREN          shift and go to state 96


state 43

    (94) BasicTypeX -> UINT .

    IDENTIFIER      reduce using rule 94 (BasicTypeX -> UINT .)
    LPAREN          reduce using rule 94 (BasicTypeX -> UINT .)
    TIMES           reduce using rule 94 (BasicTypeX -> UINT .)
    LBRACKET        reduce using rule 94 (BasicTypeX -> UINT .)
    FUNCTION        reduce using rule 94 (BasicTypeX -> UINT .)
    DOT             reduce using rule 94 (BasicTypeX -> UINT .)
    BOOL            reduce using rule 94 (BasicTypeX -> UINT .)
    SHORT           reduce using rule 94 (BasicTypeX -> UINT .)
    USHORT          reduce using rule 94 (BasicTypeX -> UINT .)
    INT             reduce using rule 94 (BasicTypeX -> UINT .)
    UINT            reduce using rule 94 (BasicTypeX -> UINT .)
    LONG            reduce using rule 94 (BasicTypeX -> UINT .)
    ULONG           reduce using rule 94 (BasicTypeX -> UINT .)
    CHAR            reduce using rule 94 (BasicTypeX -> UINT .)
    FLOAT           reduce using rule 94 (BasicTypeX -> UINT .)
    VOID            reduce using rule 94 (BasicTypeX -> UINT .)
    TYPEOF          reduce using rule 94 (BasicTypeX -> UINT .)
    CONST           reduce using rule 94 (BasicTypeX -> UINT .)
    IMMUTABLE       reduce using rule 94 (BasicTypeX -> UINT .)
    LBRACE          reduce using rule 94 (BasicTypeX -> UINT .)
    COMMA           reduce using rule 94 (BasicTypeX -> UINT .)
    RBRACKET        reduce using rule 94 (BasicTypeX -> UINT .)
    RPAREN          reduce using rule 94 (BasicTypeX -> UINT .)
    SEMICOLON       reduce using rule 94 (BasicTypeX -> UINT .)
    ELLIPSIS        reduce using rule 94 (BasicTypeX -> UINT .)
    BODY            reduce using rule 94 (BasicTypeX -> UINT .)
    POWER           reduce using rule 94 (BasicTypeX -> UINT .)
    PLUS_PLUS       reduce using rule 94 (BasicTypeX -> UINT .)
    MINUS_MINUS     reduce using rule 94 (BasicTypeX -> UINT .)
    DIV             reduce using rule 94 (BasicTypeX -> UINT .)
    MODULO          reduce using rule 94 (BasicTypeX -> UINT .)
    PLUS            reduce using rule 94 (BasicTypeX -> UINT .)
    MINUS           reduce using rule 94 (BasicTypeX -> UINT .)
    LEFT_SHIFT      reduce using rule 94 (BasicTypeX -> UINT .)
    RIGHT_SHIFT     reduce using rule 94 (BasicTypeX -> UINT .)
    IS_EQ           reduce using rule 94 (BasicTypeX -> UINT .)
    NOT_EQ          reduce using rule 94 (BasicTypeX -> UINT .)
    LESS            reduce using rule 94 (BasicTypeX -> UINT .)
    GREATER_EQ      reduce using rule 94 (BasicTypeX -> UINT .)
    GREATER         reduce using rule 94 (BasicTypeX -> UINT .)
    LESS_EQ         reduce using rule 94 (BasicTypeX -> UINT .)
    AMPERSAND       reduce using rule 94 (BasicTypeX -> UINT .)
    CARET           reduce using rule 94 (BasicTypeX -> UINT .)
    PIPE            reduce using rule 94 (BasicTypeX -> UINT .)
    DOUBLE_AMPERSAND reduce using rule 94 (BasicTypeX -> UINT .)
    QUESTION        reduce using rule 94 (BasicTypeX -> UINT .)
    DOUBLE_PIPE     reduce using rule 94 (BasicTypeX -> UINT .)
    ASSIGN          reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_PLUS         reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_MINUS        reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_TIMES        reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_DIV          reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_MODULO       reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_AND_BIT      reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_OR_BIT       reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_XOR_BIT      reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_LEFT         reduce using rule 94 (BasicTypeX -> UINT .)
    EQ_RIGHT        reduce using rule 94 (BasicTypeX -> UINT .)
    RANGE           reduce using rule 94 (BasicTypeX -> UINT .)
    RBRACE          reduce using rule 94 (BasicTypeX -> UINT .)
    COLON           reduce using rule 94 (BasicTypeX -> UINT .)


state 44

    (87) BasicType -> Typeof .
    (88) BasicType -> Typeof . DOT IdentifierList

  ! shift/reduce conflict for DOT resolved as shift
    TIMES           reduce using rule 87 (BasicType -> Typeof .)
    LBRACKET        reduce using rule 87 (BasicType -> Typeof .)
    FUNCTION        reduce using rule 87 (BasicType -> Typeof .)
    IDENTIFIER      reduce using rule 87 (BasicType -> Typeof .)
    LBRACE          reduce using rule 87 (BasicType -> Typeof .)
    RPAREN          reduce using rule 87 (BasicType -> Typeof .)
    SEMICOLON       reduce using rule 87 (BasicType -> Typeof .)
    ELLIPSIS        reduce using rule 87 (BasicType -> Typeof .)
    COMMA           reduce using rule 87 (BasicType -> Typeof .)
    BODY            reduce using rule 87 (BasicType -> Typeof .)
    LPAREN          reduce using rule 87 (BasicType -> Typeof .)
    POWER           reduce using rule 87 (BasicType -> Typeof .)
    PLUS_PLUS       reduce using rule 87 (BasicType -> Typeof .)
    MINUS_MINUS     reduce using rule 87 (BasicType -> Typeof .)
    DIV             reduce using rule 87 (BasicType -> Typeof .)
    MODULO          reduce using rule 87 (BasicType -> Typeof .)
    PLUS            reduce using rule 87 (BasicType -> Typeof .)
    MINUS           reduce using rule 87 (BasicType -> Typeof .)
    LEFT_SHIFT      reduce using rule 87 (BasicType -> Typeof .)
    RIGHT_SHIFT     reduce using rule 87 (BasicType -> Typeof .)
    IS_EQ           reduce using rule 87 (BasicType -> Typeof .)
    NOT_EQ          reduce using rule 87 (BasicType -> Typeof .)
    LESS            reduce using rule 87 (BasicType -> Typeof .)
    GREATER_EQ      reduce using rule 87 (BasicType -> Typeof .)
    GREATER         reduce using rule 87 (BasicType -> Typeof .)
    LESS_EQ         reduce using rule 87 (BasicType -> Typeof .)
    AMPERSAND       reduce using rule 87 (BasicType -> Typeof .)
    CARET           reduce using rule 87 (BasicType -> Typeof .)
    PIPE            reduce using rule 87 (BasicType -> Typeof .)
    DOUBLE_AMPERSAND reduce using rule 87 (BasicType -> Typeof .)
    QUESTION        reduce using rule 87 (BasicType -> Typeof .)
    DOUBLE_PIPE     reduce using rule 87 (BasicType -> Typeof .)
    ASSIGN          reduce using rule 87 (BasicType -> Typeof .)
    EQ_PLUS         reduce using rule 87 (BasicType -> Typeof .)
    EQ_MINUS        reduce using rule 87 (BasicType -> Typeof .)
    EQ_TIMES        reduce using rule 87 (BasicType -> Typeof .)
    EQ_DIV          reduce using rule 87 (BasicType -> Typeof .)
    EQ_MODULO       reduce using rule 87 (BasicType -> Typeof .)
    EQ_AND_BIT      reduce using rule 87 (BasicType -> Typeof .)
    EQ_OR_BIT       reduce using rule 87 (BasicType -> Typeof .)
    EQ_XOR_BIT      reduce using rule 87 (BasicType -> Typeof .)
    EQ_LEFT         reduce using rule 87 (BasicType -> Typeof .)
    EQ_RIGHT        reduce using rule 87 (BasicType -> Typeof .)
    RBRACKET        reduce using rule 87 (BasicType -> Typeof .)
    RANGE           reduce using rule 87 (BasicType -> Typeof .)
    RBRACE          reduce using rule 87 (BasicType -> Typeof .)
    COLON           reduce using rule 87 (BasicType -> Typeof .)
    BOOL            reduce using rule 87 (BasicType -> Typeof .)
    SHORT           reduce using rule 87 (BasicType -> Typeof .)
    USHORT          reduce using rule 87 (BasicType -> Typeof .)
    INT             reduce using rule 87 (BasicType -> Typeof .)
    UINT            reduce using rule 87 (BasicType -> Typeof .)
    LONG            reduce using rule 87 (BasicType -> Typeof .)
    ULONG           reduce using rule 87 (BasicType -> Typeof .)
    CHAR            reduce using rule 87 (BasicType -> Typeof .)
    FLOAT           reduce using rule 87 (BasicType -> Typeof .)
    VOID            reduce using rule 87 (BasicType -> Typeof .)
    TYPEOF          reduce using rule 87 (BasicType -> Typeof .)
    CONST           reduce using rule 87 (BasicType -> Typeof .)
    IMMUTABLE       reduce using rule 87 (BasicType -> Typeof .)
    DOT             shift and go to state 97

  ! DOT             [ reduce using rule 87 (BasicType -> Typeof .) ]


state 45

    (83) TypeCtor -> IMMUTABLE .

    LPAREN          reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    CONST           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    DOT             reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    BOOL            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    SHORT           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    USHORT          reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    INT             reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    UINT            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    LONG            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    ULONG           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    CHAR            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    FLOAT           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    VOID            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    TYPEOF          reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    ENUM            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    ALIAS           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    AUTO            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    FINAL           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    SCOPE           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    RPAREN          reduce using rule 83 (TypeCtor -> IMMUTABLE .)


state 46

    (93) BasicTypeX -> INT .

    IDENTIFIER      reduce using rule 93 (BasicTypeX -> INT .)
    LPAREN          reduce using rule 93 (BasicTypeX -> INT .)
    TIMES           reduce using rule 93 (BasicTypeX -> INT .)
    LBRACKET        reduce using rule 93 (BasicTypeX -> INT .)
    FUNCTION        reduce using rule 93 (BasicTypeX -> INT .)
    DOT             reduce using rule 93 (BasicTypeX -> INT .)
    BOOL            reduce using rule 93 (BasicTypeX -> INT .)
    SHORT           reduce using rule 93 (BasicTypeX -> INT .)
    USHORT          reduce using rule 93 (BasicTypeX -> INT .)
    INT             reduce using rule 93 (BasicTypeX -> INT .)
    UINT            reduce using rule 93 (BasicTypeX -> INT .)
    LONG            reduce using rule 93 (BasicTypeX -> INT .)
    ULONG           reduce using rule 93 (BasicTypeX -> INT .)
    CHAR            reduce using rule 93 (BasicTypeX -> INT .)
    FLOAT           reduce using rule 93 (BasicTypeX -> INT .)
    VOID            reduce using rule 93 (BasicTypeX -> INT .)
    TYPEOF          reduce using rule 93 (BasicTypeX -> INT .)
    CONST           reduce using rule 93 (BasicTypeX -> INT .)
    IMMUTABLE       reduce using rule 93 (BasicTypeX -> INT .)
    LBRACE          reduce using rule 93 (BasicTypeX -> INT .)
    COMMA           reduce using rule 93 (BasicTypeX -> INT .)
    RBRACKET        reduce using rule 93 (BasicTypeX -> INT .)
    RPAREN          reduce using rule 93 (BasicTypeX -> INT .)
    SEMICOLON       reduce using rule 93 (BasicTypeX -> INT .)
    ELLIPSIS        reduce using rule 93 (BasicTypeX -> INT .)
    BODY            reduce using rule 93 (BasicTypeX -> INT .)
    POWER           reduce using rule 93 (BasicTypeX -> INT .)
    PLUS_PLUS       reduce using rule 93 (BasicTypeX -> INT .)
    MINUS_MINUS     reduce using rule 93 (BasicTypeX -> INT .)
    DIV             reduce using rule 93 (BasicTypeX -> INT .)
    MODULO          reduce using rule 93 (BasicTypeX -> INT .)
    PLUS            reduce using rule 93 (BasicTypeX -> INT .)
    MINUS           reduce using rule 93 (BasicTypeX -> INT .)
    LEFT_SHIFT      reduce using rule 93 (BasicTypeX -> INT .)
    RIGHT_SHIFT     reduce using rule 93 (BasicTypeX -> INT .)
    IS_EQ           reduce using rule 93 (BasicTypeX -> INT .)
    NOT_EQ          reduce using rule 93 (BasicTypeX -> INT .)
    LESS            reduce using rule 93 (BasicTypeX -> INT .)
    GREATER_EQ      reduce using rule 93 (BasicTypeX -> INT .)
    GREATER         reduce using rule 93 (BasicTypeX -> INT .)
    LESS_EQ         reduce using rule 93 (BasicTypeX -> INT .)
    AMPERSAND       reduce using rule 93 (BasicTypeX -> INT .)
    CARET           reduce using rule 93 (BasicTypeX -> INT .)
    PIPE            reduce using rule 93 (BasicTypeX -> INT .)
    DOUBLE_AMPERSAND reduce using rule 93 (BasicTypeX -> INT .)
    QUESTION        reduce using rule 93 (BasicTypeX -> INT .)
    DOUBLE_PIPE     reduce using rule 93 (BasicTypeX -> INT .)
    ASSIGN          reduce using rule 93 (BasicTypeX -> INT .)
    EQ_PLUS         reduce using rule 93 (BasicTypeX -> INT .)
    EQ_MINUS        reduce using rule 93 (BasicTypeX -> INT .)
    EQ_TIMES        reduce using rule 93 (BasicTypeX -> INT .)
    EQ_DIV          reduce using rule 93 (BasicTypeX -> INT .)
    EQ_MODULO       reduce using rule 93 (BasicTypeX -> INT .)
    EQ_AND_BIT      reduce using rule 93 (BasicTypeX -> INT .)
    EQ_OR_BIT       reduce using rule 93 (BasicTypeX -> INT .)
    EQ_XOR_BIT      reduce using rule 93 (BasicTypeX -> INT .)
    EQ_LEFT         reduce using rule 93 (BasicTypeX -> INT .)
    EQ_RIGHT        reduce using rule 93 (BasicTypeX -> INT .)
    RANGE           reduce using rule 93 (BasicTypeX -> INT .)
    RBRACE          reduce using rule 93 (BasicTypeX -> INT .)
    COLON           reduce using rule 93 (BasicTypeX -> INT .)


state 47

    (92) BasicTypeX -> USHORT .

    IDENTIFIER      reduce using rule 92 (BasicTypeX -> USHORT .)
    LPAREN          reduce using rule 92 (BasicTypeX -> USHORT .)
    TIMES           reduce using rule 92 (BasicTypeX -> USHORT .)
    LBRACKET        reduce using rule 92 (BasicTypeX -> USHORT .)
    FUNCTION        reduce using rule 92 (BasicTypeX -> USHORT .)
    DOT             reduce using rule 92 (BasicTypeX -> USHORT .)
    BOOL            reduce using rule 92 (BasicTypeX -> USHORT .)
    SHORT           reduce using rule 92 (BasicTypeX -> USHORT .)
    USHORT          reduce using rule 92 (BasicTypeX -> USHORT .)
    INT             reduce using rule 92 (BasicTypeX -> USHORT .)
    UINT            reduce using rule 92 (BasicTypeX -> USHORT .)
    LONG            reduce using rule 92 (BasicTypeX -> USHORT .)
    ULONG           reduce using rule 92 (BasicTypeX -> USHORT .)
    CHAR            reduce using rule 92 (BasicTypeX -> USHORT .)
    FLOAT           reduce using rule 92 (BasicTypeX -> USHORT .)
    VOID            reduce using rule 92 (BasicTypeX -> USHORT .)
    TYPEOF          reduce using rule 92 (BasicTypeX -> USHORT .)
    CONST           reduce using rule 92 (BasicTypeX -> USHORT .)
    IMMUTABLE       reduce using rule 92 (BasicTypeX -> USHORT .)
    LBRACE          reduce using rule 92 (BasicTypeX -> USHORT .)
    COMMA           reduce using rule 92 (BasicTypeX -> USHORT .)
    RBRACKET        reduce using rule 92 (BasicTypeX -> USHORT .)
    RPAREN          reduce using rule 92 (BasicTypeX -> USHORT .)
    SEMICOLON       reduce using rule 92 (BasicTypeX -> USHORT .)
    ELLIPSIS        reduce using rule 92 (BasicTypeX -> USHORT .)
    BODY            reduce using rule 92 (BasicTypeX -> USHORT .)
    POWER           reduce using rule 92 (BasicTypeX -> USHORT .)
    PLUS_PLUS       reduce using rule 92 (BasicTypeX -> USHORT .)
    MINUS_MINUS     reduce using rule 92 (BasicTypeX -> USHORT .)
    DIV             reduce using rule 92 (BasicTypeX -> USHORT .)
    MODULO          reduce using rule 92 (BasicTypeX -> USHORT .)
    PLUS            reduce using rule 92 (BasicTypeX -> USHORT .)
    MINUS           reduce using rule 92 (BasicTypeX -> USHORT .)
    LEFT_SHIFT      reduce using rule 92 (BasicTypeX -> USHORT .)
    RIGHT_SHIFT     reduce using rule 92 (BasicTypeX -> USHORT .)
    IS_EQ           reduce using rule 92 (BasicTypeX -> USHORT .)
    NOT_EQ          reduce using rule 92 (BasicTypeX -> USHORT .)
    LESS            reduce using rule 92 (BasicTypeX -> USHORT .)
    GREATER_EQ      reduce using rule 92 (BasicTypeX -> USHORT .)
    GREATER         reduce using rule 92 (BasicTypeX -> USHORT .)
    LESS_EQ         reduce using rule 92 (BasicTypeX -> USHORT .)
    AMPERSAND       reduce using rule 92 (BasicTypeX -> USHORT .)
    CARET           reduce using rule 92 (BasicTypeX -> USHORT .)
    PIPE            reduce using rule 92 (BasicTypeX -> USHORT .)
    DOUBLE_AMPERSAND reduce using rule 92 (BasicTypeX -> USHORT .)
    QUESTION        reduce using rule 92 (BasicTypeX -> USHORT .)
    DOUBLE_PIPE     reduce using rule 92 (BasicTypeX -> USHORT .)
    ASSIGN          reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_PLUS         reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_MINUS        reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_TIMES        reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_DIV          reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_MODULO       reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_AND_BIT      reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_OR_BIT       reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_XOR_BIT      reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_LEFT         reduce using rule 92 (BasicTypeX -> USHORT .)
    EQ_RIGHT        reduce using rule 92 (BasicTypeX -> USHORT .)
    RANGE           reduce using rule 92 (BasicTypeX -> USHORT .)
    RBRACE          reduce using rule 92 (BasicTypeX -> USHORT .)
    COLON           reduce using rule 92 (BasicTypeX -> USHORT .)


state 48

    (98) BasicTypeX -> FLOAT .

    IDENTIFIER      reduce using rule 98 (BasicTypeX -> FLOAT .)
    LPAREN          reduce using rule 98 (BasicTypeX -> FLOAT .)
    TIMES           reduce using rule 98 (BasicTypeX -> FLOAT .)
    LBRACKET        reduce using rule 98 (BasicTypeX -> FLOAT .)
    FUNCTION        reduce using rule 98 (BasicTypeX -> FLOAT .)
    DOT             reduce using rule 98 (BasicTypeX -> FLOAT .)
    BOOL            reduce using rule 98 (BasicTypeX -> FLOAT .)
    SHORT           reduce using rule 98 (BasicTypeX -> FLOAT .)
    USHORT          reduce using rule 98 (BasicTypeX -> FLOAT .)
    INT             reduce using rule 98 (BasicTypeX -> FLOAT .)
    UINT            reduce using rule 98 (BasicTypeX -> FLOAT .)
    LONG            reduce using rule 98 (BasicTypeX -> FLOAT .)
    ULONG           reduce using rule 98 (BasicTypeX -> FLOAT .)
    CHAR            reduce using rule 98 (BasicTypeX -> FLOAT .)
    FLOAT           reduce using rule 98 (BasicTypeX -> FLOAT .)
    VOID            reduce using rule 98 (BasicTypeX -> FLOAT .)
    TYPEOF          reduce using rule 98 (BasicTypeX -> FLOAT .)
    CONST           reduce using rule 98 (BasicTypeX -> FLOAT .)
    IMMUTABLE       reduce using rule 98 (BasicTypeX -> FLOAT .)
    LBRACE          reduce using rule 98 (BasicTypeX -> FLOAT .)
    COMMA           reduce using rule 98 (BasicTypeX -> FLOAT .)
    RBRACKET        reduce using rule 98 (BasicTypeX -> FLOAT .)
    RPAREN          reduce using rule 98 (BasicTypeX -> FLOAT .)
    SEMICOLON       reduce using rule 98 (BasicTypeX -> FLOAT .)
    ELLIPSIS        reduce using rule 98 (BasicTypeX -> FLOAT .)
    BODY            reduce using rule 98 (BasicTypeX -> FLOAT .)
    POWER           reduce using rule 98 (BasicTypeX -> FLOAT .)
    PLUS_PLUS       reduce using rule 98 (BasicTypeX -> FLOAT .)
    MINUS_MINUS     reduce using rule 98 (BasicTypeX -> FLOAT .)
    DIV             reduce using rule 98 (BasicTypeX -> FLOAT .)
    MODULO          reduce using rule 98 (BasicTypeX -> FLOAT .)
    PLUS            reduce using rule 98 (BasicTypeX -> FLOAT .)
    MINUS           reduce using rule 98 (BasicTypeX -> FLOAT .)
    LEFT_SHIFT      reduce using rule 98 (BasicTypeX -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 98 (BasicTypeX -> FLOAT .)
    IS_EQ           reduce using rule 98 (BasicTypeX -> FLOAT .)
    NOT_EQ          reduce using rule 98 (BasicTypeX -> FLOAT .)
    LESS            reduce using rule 98 (BasicTypeX -> FLOAT .)
    GREATER_EQ      reduce using rule 98 (BasicTypeX -> FLOAT .)
    GREATER         reduce using rule 98 (BasicTypeX -> FLOAT .)
    LESS_EQ         reduce using rule 98 (BasicTypeX -> FLOAT .)
    AMPERSAND       reduce using rule 98 (BasicTypeX -> FLOAT .)
    CARET           reduce using rule 98 (BasicTypeX -> FLOAT .)
    PIPE            reduce using rule 98 (BasicTypeX -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 98 (BasicTypeX -> FLOAT .)
    QUESTION        reduce using rule 98 (BasicTypeX -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 98 (BasicTypeX -> FLOAT .)
    ASSIGN          reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_PLUS         reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_MINUS        reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_TIMES        reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_DIV          reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_MODULO       reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_AND_BIT      reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_OR_BIT       reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_XOR_BIT      reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_LEFT         reduce using rule 98 (BasicTypeX -> FLOAT .)
    EQ_RIGHT        reduce using rule 98 (BasicTypeX -> FLOAT .)
    RANGE           reduce using rule 98 (BasicTypeX -> FLOAT .)
    RBRACE          reduce using rule 98 (BasicTypeX -> FLOAT .)
    COLON           reduce using rule 98 (BasicTypeX -> FLOAT .)


state 49

    (90) BasicTypeX -> BOOL .

    IDENTIFIER      reduce using rule 90 (BasicTypeX -> BOOL .)
    LPAREN          reduce using rule 90 (BasicTypeX -> BOOL .)
    TIMES           reduce using rule 90 (BasicTypeX -> BOOL .)
    LBRACKET        reduce using rule 90 (BasicTypeX -> BOOL .)
    FUNCTION        reduce using rule 90 (BasicTypeX -> BOOL .)
    DOT             reduce using rule 90 (BasicTypeX -> BOOL .)
    BOOL            reduce using rule 90 (BasicTypeX -> BOOL .)
    SHORT           reduce using rule 90 (BasicTypeX -> BOOL .)
    USHORT          reduce using rule 90 (BasicTypeX -> BOOL .)
    INT             reduce using rule 90 (BasicTypeX -> BOOL .)
    UINT            reduce using rule 90 (BasicTypeX -> BOOL .)
    LONG            reduce using rule 90 (BasicTypeX -> BOOL .)
    ULONG           reduce using rule 90 (BasicTypeX -> BOOL .)
    CHAR            reduce using rule 90 (BasicTypeX -> BOOL .)
    FLOAT           reduce using rule 90 (BasicTypeX -> BOOL .)
    VOID            reduce using rule 90 (BasicTypeX -> BOOL .)
    TYPEOF          reduce using rule 90 (BasicTypeX -> BOOL .)
    CONST           reduce using rule 90 (BasicTypeX -> BOOL .)
    IMMUTABLE       reduce using rule 90 (BasicTypeX -> BOOL .)
    LBRACE          reduce using rule 90 (BasicTypeX -> BOOL .)
    COMMA           reduce using rule 90 (BasicTypeX -> BOOL .)
    RBRACKET        reduce using rule 90 (BasicTypeX -> BOOL .)
    RPAREN          reduce using rule 90 (BasicTypeX -> BOOL .)
    SEMICOLON       reduce using rule 90 (BasicTypeX -> BOOL .)
    ELLIPSIS        reduce using rule 90 (BasicTypeX -> BOOL .)
    BODY            reduce using rule 90 (BasicTypeX -> BOOL .)
    POWER           reduce using rule 90 (BasicTypeX -> BOOL .)
    PLUS_PLUS       reduce using rule 90 (BasicTypeX -> BOOL .)
    MINUS_MINUS     reduce using rule 90 (BasicTypeX -> BOOL .)
    DIV             reduce using rule 90 (BasicTypeX -> BOOL .)
    MODULO          reduce using rule 90 (BasicTypeX -> BOOL .)
    PLUS            reduce using rule 90 (BasicTypeX -> BOOL .)
    MINUS           reduce using rule 90 (BasicTypeX -> BOOL .)
    LEFT_SHIFT      reduce using rule 90 (BasicTypeX -> BOOL .)
    RIGHT_SHIFT     reduce using rule 90 (BasicTypeX -> BOOL .)
    IS_EQ           reduce using rule 90 (BasicTypeX -> BOOL .)
    NOT_EQ          reduce using rule 90 (BasicTypeX -> BOOL .)
    LESS            reduce using rule 90 (BasicTypeX -> BOOL .)
    GREATER_EQ      reduce using rule 90 (BasicTypeX -> BOOL .)
    GREATER         reduce using rule 90 (BasicTypeX -> BOOL .)
    LESS_EQ         reduce using rule 90 (BasicTypeX -> BOOL .)
    AMPERSAND       reduce using rule 90 (BasicTypeX -> BOOL .)
    CARET           reduce using rule 90 (BasicTypeX -> BOOL .)
    PIPE            reduce using rule 90 (BasicTypeX -> BOOL .)
    DOUBLE_AMPERSAND reduce using rule 90 (BasicTypeX -> BOOL .)
    QUESTION        reduce using rule 90 (BasicTypeX -> BOOL .)
    DOUBLE_PIPE     reduce using rule 90 (BasicTypeX -> BOOL .)
    ASSIGN          reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_PLUS         reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_MINUS        reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_TIMES        reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_DIV          reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_MODULO       reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_AND_BIT      reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_OR_BIT       reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_XOR_BIT      reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_LEFT         reduce using rule 90 (BasicTypeX -> BOOL .)
    EQ_RIGHT        reduce using rule 90 (BasicTypeX -> BOOL .)
    RANGE           reduce using rule 90 (BasicTypeX -> BOOL .)
    RBRACE          reduce using rule 90 (BasicTypeX -> BOOL .)
    COLON           reduce using rule 90 (BasicTypeX -> BOOL .)


state 50

    (147) Typeof -> TYPEOF . LPAREN Expression RPAREN
    (148) Typeof -> TYPEOF . LPAREN RETURN RPAREN

    LPAREN          shift and go to state 98


state 51

    (1) Declaration_mult -> Declaration Declaration_mult .

    $end            reduce using rule 1 (Declaration_mult -> Declaration Declaration_mult .)


state 52

    (403) ClassDeclaration -> CLASS IDENTIFIER . SEMICOLON
    (404) ClassDeclaration -> CLASS IDENTIFIER . BaseClassList_opt AggregateBody
    (408) BaseClassList_opt -> . BaseClassList
    (409) BaseClassList_opt -> . empty
    (405) BaseClassList -> . COLON SuperClass
    (406) BaseClassList -> . COLON SuperClass COMMA Interfaces
    (407) BaseClassList -> . COLON Interfaces
    (485) empty -> .

    SEMICOLON       shift and go to state 99
    COLON           shift and go to state 101
    LBRACE          reduce using rule 485 (empty -> .)

    BaseClassList                  shift and go to state 100
    BaseClassList_opt              shift and go to state 102
    empty                          shift and go to state 103

state 53

    (402) AggregateBody -> LBRACE . DeclDefs_opt RBRACE
    (5) DeclDefs_opt -> . DeclDefs
    (6) DeclDefs_opt -> . empty
    (3) DeclDefs -> . DeclDef
    (4) DeclDefs -> . DeclDef DeclDefs
    (485) empty -> .
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (150) AttributeSpecifier -> . Attribute COLON
    (151) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (414) Allocator -> . NEW Parameters SEMICOLON
    (415) Allocator -> . NEW Parameters FunctionBody
    (416) Deallocator -> . DELETE Parameters SEMICOLON
    (417) Deallocator -> . DELETE Parameters FunctionBody
    (418) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (152) Attribute -> . VisibilityAttribute
    (153) Attribute -> . STATIC
    (154) Attribute -> . EXTERN
    (155) Attribute -> . FINAL
    (156) Attribute -> . AUTO
    (157) Attribute -> . CONST
    (158) Attribute -> . IMMUTABLE
    (159) Attribute -> . RETURN
    (446) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (448) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (140) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (396) AggregateDeclaration -> . ClassDeclaration
    (397) AggregateDeclaration -> . UnionDeclaration
    (427) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (428) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (429) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (162) VisibilityAttribute -> . PRIVATE
    (163) VisibilityAttribute -> . PROTECTED
    (164) VisibilityAttribute -> . PUBLIC
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (449) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (403) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt AggregateBody
    (398) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (400) UnionDeclaration -> . AnonUnionDeclaration
    (438) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (401) AnonUnionDeclaration -> . UNION AggregateBody
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    SEMICOLON       shift and go to state 111
    NEW             shift and go to state 107
    DELETE          shift and go to state 130
    ALIAS           shift and go to state 122
    MIXIN           shift and go to state 128
    STATIC          shift and go to state 105
    EXTERN          shift and go to state 106
    FINAL           shift and go to state 109
    AUTO            shift and go to state 120
    CONST           shift and go to state 104
    IMMUTABLE       shift and go to state 123
    RETURN          shift and go to state 124
    ENUM            shift and go to state 18
    IMPORT          shift and go to state 27
    PRIVATE         shift and go to state 115
    PROTECTED       shift and go to state 127
    PUBLIC          shift and go to state 126
    CLASS           shift and go to state 13
    UNION           shift and go to state 17

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 108
    StorageClasses_opt             shift and go to state 9
    DeclDefs                       shift and go to state 112
    VisibilityAttribute            shift and go to state 113
    DeclDefs_opt                   shift and go to state 114
    AliasThis                      shift and go to state 116
    DeclDef                        shift and go to state 117
    Deallocator                    shift and go to state 118
    AliasDeclaration               shift and go to state 12
    VarDeclarations                shift and go to state 23
    empty                          shift and go to state 119
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 110
    Declaration                    shift and go to state 121
    AnonymousEnumDeclaration       shift and go to state 20
    AnonUnionDeclaration           shift and go to state 22
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 125
    UnionDeclaration               shift and go to state 25
    ImportDeclaration              shift and go to state 10
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 129
    StorageClass                   shift and go to state 28

state 54

    (401) AnonUnionDeclaration -> UNION AggregateBody .

    SEMICOLON       reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    CASE            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    DEFAULT         reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    LBRACE          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    IDENTIFIER      reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    IF              reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    WHILE           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    DO              reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    FOR             reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    SWITCH          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    FINAL           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    CONTINUE        reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    BREAK           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    RETURN          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    GOTO            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    WITH            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    MIXIN           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    IMPORT          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    STATIC          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    LPAREN          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    FOREACH         reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    FOREACH_REVERSE reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    ENUM            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    EXTERN          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    AUTO            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    CONST           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    IMMUTABLE       reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    UAMPERSAND      reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    PLUS_PLUS       reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    MINUS_MINUS     reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    TIMES           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    UMINUS          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    UPLUS           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    EXCLAMATION     reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    TILDE           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    CAST            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    DOT             reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    THIS            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    NULL            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    TRUE            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    FALSE           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    DOLLAR          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    INUMBER         reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    DNUMBER         reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    LIT_CHAR        reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    LIT_STR         reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    LBRACKET        reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    FUNCTION        reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    NEW             reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    BOOL            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    SHORT           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    USHORT          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    INT             reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    UINT            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    LONG            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    ULONG           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    CHAR            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    FLOAT           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    VOID            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    TYPEOF          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    TYPEID          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    BODY            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    ALIAS           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    CLASS           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    UNION           reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    RBRACE          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    ELSE            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    DELETE          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    PRIVATE         reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    PROTECTED       reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    PUBLIC          reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)
    $end            reduce using rule 401 (AnonUnionDeclaration -> UNION AggregateBody .)


state 55

    (398) UnionDeclaration -> UNION IDENTIFIER . SEMICOLON
    (399) UnionDeclaration -> UNION IDENTIFIER . AggregateBody
    (402) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    SEMICOLON       shift and go to state 132
    LBRACE          shift and go to state 53

    AggregateBody                  shift and go to state 131

state 56

    (439) AnonymousEnumDeclaration -> ENUM LBRACE . EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> ENUM LBRACE . AnonymousEnumMembers RBRACE
    (433) EnumMembers -> . EnumMember
    (434) EnumMembers -> . EnumMember COMMA
    (435) EnumMembers -> . EnumMember COMMA EnumMembers
    (441) AnonymousEnumMembers -> . AnonymousEnumMember
    (442) AnonymousEnumMembers -> . AnonymousEnumMember COMMA
    (443) AnonymousEnumMembers -> . AnonymousEnumMember COMMA AnonymousEnumMembers
    (436) EnumMember -> . IDENTIFIER
    (437) EnumMember -> . IDENTIFIER ASSIGN AssignExpression
    (444) AnonymousEnumMember -> . EnumMember
    (445) AnonymousEnumMember -> . Type IDENTIFIER ASSIGN AssignExpression
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      shift and go to state 139
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    EnumMembers                    shift and go to state 133
    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    AnonymousEnumMembers           shift and go to state 136
    TypeCtors_opt                  shift and go to state 137
    AnonymousEnumMember            shift and go to state 141
    EnumMember                     shift and go to state 138
    Type                           shift and go to state 140
    empty                          shift and go to state 142

state 57

    (438) AnonymousEnumDeclaration -> ENUM COLON . EnumBaseType LBRACE EnumMembers RBRACE
    (430) EnumBaseType -> . Type
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    EnumBaseType                   shift and go to state 143
    Type                           shift and go to state 144
    empty                          shift and go to state 142

state 58

    (427) EnumDeclaration -> ENUM IDENTIFIER . EnumBody
    (428) EnumDeclaration -> ENUM IDENTIFIER . COLON EnumBaseType EnumBody
    (431) EnumBody -> . LBRACE EnumMembers RBRACE
    (432) EnumBody -> . SEMICOLON

    COLON           shift and go to state 147
    LBRACE          shift and go to state 145
    SEMICOLON       shift and go to state 146

    EnumBody                       shift and go to state 148

state 59

    (115) StorageClass -> STATIC .

    ENUM            reduce using rule 115 (StorageClass -> STATIC .)
    STATIC          reduce using rule 115 (StorageClass -> STATIC .)
    EXTERN          reduce using rule 115 (StorageClass -> STATIC .)
    FINAL           reduce using rule 115 (StorageClass -> STATIC .)
    AUTO            reduce using rule 115 (StorageClass -> STATIC .)
    CONST           reduce using rule 115 (StorageClass -> STATIC .)
    IMMUTABLE       reduce using rule 115 (StorageClass -> STATIC .)
    DOT             reduce using rule 115 (StorageClass -> STATIC .)
    BOOL            reduce using rule 115 (StorageClass -> STATIC .)
    SHORT           reduce using rule 115 (StorageClass -> STATIC .)
    USHORT          reduce using rule 115 (StorageClass -> STATIC .)
    INT             reduce using rule 115 (StorageClass -> STATIC .)
    UINT            reduce using rule 115 (StorageClass -> STATIC .)
    LONG            reduce using rule 115 (StorageClass -> STATIC .)
    ULONG           reduce using rule 115 (StorageClass -> STATIC .)
    CHAR            reduce using rule 115 (StorageClass -> STATIC .)
    FLOAT           reduce using rule 115 (StorageClass -> STATIC .)
    VOID            reduce using rule 115 (StorageClass -> STATIC .)
    IDENTIFIER      reduce using rule 115 (StorageClass -> STATIC .)
    TYPEOF          reduce using rule 115 (StorageClass -> STATIC .)
    ALIAS           reduce using rule 115 (StorageClass -> STATIC .)
    IMPORT          reduce using rule 115 (StorageClass -> STATIC .)
    CLASS           reduce using rule 115 (StorageClass -> STATIC .)
    UNION           reduce using rule 115 (StorageClass -> STATIC .)


state 60

    (140) AliasDeclaration -> ALIAS StorageClasses_opt . BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> ALIAS StorageClasses_opt . BasicType FuncDeclarator SEMICOLON
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 149
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34

state 61

    (143) AliasDeclarationX -> AliasDeclarationY .

    SEMICOLON       reduce using rule 143 (AliasDeclarationX -> AliasDeclarationY .)
    COMMA           reduce using rule 143 (AliasDeclarationX -> AliasDeclarationY .)


state 62

    (142) AliasDeclaration -> ALIAS AliasDeclarationX . SEMICOLON
    (144) AliasDeclarationX -> AliasDeclarationX . COMMA AliasDeclarationY

    SEMICOLON       shift and go to state 151
    COMMA           shift and go to state 150


state 63

    (138) StorageClasses_opt -> StorageClasses .

    ALIAS           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    ENUM            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    IMPORT          reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    STATIC          reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    CLASS           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    UNION           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    EXTERN          reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    FINAL           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    AUTO            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    CONST           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    IMMUTABLE       reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    DOT             reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    BOOL            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    SHORT           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    USHORT          reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    INT             reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    UINT            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    LONG            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    ULONG           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    CHAR            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    FLOAT           reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    VOID            reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    IDENTIFIER      reduce using rule 138 (StorageClasses_opt -> StorageClasses .)
    TYPEOF          reduce using rule 138 (StorageClasses_opt -> StorageClasses .)


state 64

    (145) AliasDeclarationY -> IDENTIFIER . ASSIGN StorageClasses_opt Type
    (146) AliasDeclarationY -> IDENTIFIER . ASSIGN FunctionLiteral

    ASSIGN          shift and go to state 152


state 65

    (139) StorageClasses_opt -> empty .

    CONST           reduce using rule 139 (StorageClasses_opt -> empty .)
    IMMUTABLE       reduce using rule 139 (StorageClasses_opt -> empty .)
    DOT             reduce using rule 139 (StorageClasses_opt -> empty .)
    BOOL            reduce using rule 139 (StorageClasses_opt -> empty .)
    SHORT           reduce using rule 139 (StorageClasses_opt -> empty .)
    USHORT          reduce using rule 139 (StorageClasses_opt -> empty .)
    INT             reduce using rule 139 (StorageClasses_opt -> empty .)
    UINT            reduce using rule 139 (StorageClasses_opt -> empty .)
    LONG            reduce using rule 139 (StorageClasses_opt -> empty .)
    ULONG           reduce using rule 139 (StorageClasses_opt -> empty .)
    CHAR            reduce using rule 139 (StorageClasses_opt -> empty .)
    FLOAT           reduce using rule 139 (StorageClasses_opt -> empty .)
    VOID            reduce using rule 139 (StorageClasses_opt -> empty .)
    IDENTIFIER      reduce using rule 139 (StorageClasses_opt -> empty .)
    TYPEOF          reduce using rule 139 (StorageClasses_opt -> empty .)


state 66

    (114) StorageClass -> ENUM .

    ENUM            reduce using rule 114 (StorageClass -> ENUM .)
    STATIC          reduce using rule 114 (StorageClass -> ENUM .)
    EXTERN          reduce using rule 114 (StorageClass -> ENUM .)
    FINAL           reduce using rule 114 (StorageClass -> ENUM .)
    AUTO            reduce using rule 114 (StorageClass -> ENUM .)
    CONST           reduce using rule 114 (StorageClass -> ENUM .)
    IMMUTABLE       reduce using rule 114 (StorageClass -> ENUM .)
    DOT             reduce using rule 114 (StorageClass -> ENUM .)
    BOOL            reduce using rule 114 (StorageClass -> ENUM .)
    SHORT           reduce using rule 114 (StorageClass -> ENUM .)
    USHORT          reduce using rule 114 (StorageClass -> ENUM .)
    INT             reduce using rule 114 (StorageClass -> ENUM .)
    UINT            reduce using rule 114 (StorageClass -> ENUM .)
    LONG            reduce using rule 114 (StorageClass -> ENUM .)
    ULONG           reduce using rule 114 (StorageClass -> ENUM .)
    CHAR            reduce using rule 114 (StorageClass -> ENUM .)
    FLOAT           reduce using rule 114 (StorageClass -> ENUM .)
    VOID            reduce using rule 114 (StorageClass -> ENUM .)
    IDENTIFIER      reduce using rule 114 (StorageClass -> ENUM .)
    TYPEOF          reduce using rule 114 (StorageClass -> ENUM .)
    ALIAS           reduce using rule 114 (StorageClass -> ENUM .)
    IMPORT          reduce using rule 114 (StorageClass -> ENUM .)
    CLASS           reduce using rule 114 (StorageClass -> ENUM .)
    UNION           reduce using rule 114 (StorageClass -> ENUM .)


state 67

    (25) Import -> ModuleFullyQualifiedName .

    COMMA           reduce using rule 25 (Import -> ModuleFullyQualifiedName .)
    COLON           reduce using rule 25 (Import -> ModuleFullyQualifiedName .)
    SEMICOLON       reduce using rule 25 (Import -> ModuleFullyQualifiedName .)


state 68

    (23) ImportList -> ImportBindings .

    SEMICOLON       reduce using rule 23 (ImportList -> ImportBindings .)


state 69

    (26) Import -> ModuleAliasIdentifier . ASSIGN ModuleFullyQualifiedName

    ASSIGN          shift and go to state 153


state 70

    (20) ImportDeclaration -> IMPORT ImportList . SEMICOLON

    SEMICOLON       shift and go to state 154


state 71

    (17) Packages -> PackageName .

    DOT             reduce using rule 17 (Packages -> PackageName .)


state 72

    (32) ModuleAliasIdentifier -> IDENTIFIER .
    (16) ModuleName -> IDENTIFIER .
    (19) PackageName -> IDENTIFIER .

    ASSIGN          reduce using rule 32 (ModuleAliasIdentifier -> IDENTIFIER .)
    COMMA           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    COLON           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 16 (ModuleName -> IDENTIFIER .)
    DOT             reduce using rule 19 (PackageName -> IDENTIFIER .)


state 73

    (22) ImportList -> Import .
    (24) ImportList -> Import . COMMA ImportList
    (27) ImportBindings -> Import . COLON ImportBindList

    SEMICOLON       reduce using rule 22 (ImportList -> Import .)
    COMMA           shift and go to state 156
    COLON           shift and go to state 155


state 74

    (15) ModuleFullyQualifiedName -> Packages . DOT ModuleName
    (18) Packages -> Packages . DOT PackageName

    DOT             shift and go to state 157


state 75

    (14) ModuleFullyQualifiedName -> ModuleName .

    COMMA           reduce using rule 14 (ModuleFullyQualifiedName -> ModuleName .)
    COLON           reduce using rule 14 (ModuleFullyQualifiedName -> ModuleName .)
    SEMICOLON       reduce using rule 14 (ModuleFullyQualifiedName -> ModuleName .)


state 76

    (113) StorageClasses -> StorageClass StorageClasses .

    IDENTIFIER      reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    DOT             reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    BOOL            reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    SHORT           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    USHORT          reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    INT             reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    UINT            reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    LONG            reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    ULONG           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    CHAR            reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    FLOAT           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    VOID            reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    TYPEOF          reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    CONST           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    IMMUTABLE       reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    ALIAS           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    ENUM            reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    IMPORT          reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    STATIC          reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    CLASS           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    UNION           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    EXTERN          reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    FINAL           reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)
    AUTO            reduce using rule 113 (StorageClasses -> StorageClass StorageClasses .)


state 77

    (449) AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix . FunctionBody
    (478) FunctionBody -> . BlockStatement
    (479) FunctionBody -> . BodyStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

    FunctionBody                   shift and go to state 158
    BlockStatement                 shift and go to state 161
    BodyStatement                  shift and go to state 162

state 78

    (451) FuncDeclaratorSuffix -> Parameters . MemberFunctionAttributes_opt
    (473) MemberFunctionAttributes_opt -> . MemberFunctionAttributes
    (474) MemberFunctionAttributes_opt -> . empty
    (471) MemberFunctionAttributes -> . MemberFunctionAttribute
    (472) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (485) empty -> .
    (475) MemberFunctionAttribute -> . CONST
    (476) MemberFunctionAttribute -> . IMMUTABLE
    (477) MemberFunctionAttribute -> . RETURN

    LBRACE          reduce using rule 485 (empty -> .)
    BODY            reduce using rule 485 (empty -> .)
    SEMICOLON       reduce using rule 485 (empty -> .)
    CONST           shift and go to state 164
    IMMUTABLE       shift and go to state 168
    RETURN          shift and go to state 163

    MemberFunctionAttributes       shift and go to state 167
    MemberFunctionAttributes_opt   shift and go to state 165
    empty                          shift and go to state 169
    MemberFunctionAttribute        shift and go to state 166

state 79

    (452) Parameters -> LPAREN . ParameterList_opt RPAREN
    (456) ParameterList_opt -> . ParameterList
    (457) ParameterList_opt -> . empty
    (453) ParameterList -> . Parameter
    (454) ParameterList -> . Parameter COMMA ParameterList
    (455) ParameterList -> . ELLIPSIS
    (485) empty -> .
    (458) Parameter -> . InOut_opt BasicType Declarator
    (459) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (460) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (461) Parameter -> . InOut_opt Type
    (462) Parameter -> . InOut_opt Type ELLIPSIS
    (469) InOut_opt -> . InOut
    (470) InOut_opt -> . empty
    (463) InOut -> . InOutX
    (464) InOut -> . InOut InOutX
    (465) InOutX -> . AUTO
    (466) InOutX -> . TypeCtor
    (467) InOutX -> . FINAL
    (468) InOutX -> . SCOPE
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    ELLIPSIS        shift and go to state 175
    RPAREN          reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    AUTO            shift and go to state 177
    FINAL           shift and go to state 172
    SCOPE           shift and go to state 179
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    InOut_opt                      shift and go to state 180
    TypeCtor                       shift and go to state 178
    InOutX                         shift and go to state 174
    ParameterList                  shift and go to state 170
    InOut                          shift and go to state 176
    ParameterList_opt              shift and go to state 171
    Parameter                      shift and go to state 173
    empty                          shift and go to state 181

state 80

    (21) ImportDeclaration -> STATIC IMPORT ImportList . SEMICOLON

    SEMICOLON       shift and go to state 182


state 81

    (85) BasicType -> DOT IdentifierList .

    TIMES           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    LBRACKET        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    FUNCTION        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    IDENTIFIER      reduce using rule 85 (BasicType -> DOT IdentifierList .)
    LBRACE          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    RPAREN          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    SEMICOLON       reduce using rule 85 (BasicType -> DOT IdentifierList .)
    ELLIPSIS        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    COMMA           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    BODY            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    LPAREN          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    POWER           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    DOT             reduce using rule 85 (BasicType -> DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 85 (BasicType -> DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 85 (BasicType -> DOT IdentifierList .)
    DIV             reduce using rule 85 (BasicType -> DOT IdentifierList .)
    MODULO          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    PLUS            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    MINUS           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 85 (BasicType -> DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 85 (BasicType -> DOT IdentifierList .)
    IS_EQ           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    NOT_EQ          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    LESS            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    GREATER_EQ      reduce using rule 85 (BasicType -> DOT IdentifierList .)
    GREATER         reduce using rule 85 (BasicType -> DOT IdentifierList .)
    LESS_EQ         reduce using rule 85 (BasicType -> DOT IdentifierList .)
    AMPERSAND       reduce using rule 85 (BasicType -> DOT IdentifierList .)
    CARET           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    PIPE            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 85 (BasicType -> DOT IdentifierList .)
    QUESTION        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 85 (BasicType -> DOT IdentifierList .)
    ASSIGN          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_PLUS         reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_MINUS        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_TIMES        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_DIV          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_MODULO       reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_LEFT         reduce using rule 85 (BasicType -> DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    RBRACKET        reduce using rule 85 (BasicType -> DOT IdentifierList .)
    RANGE           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    RBRACE          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    COLON           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    BOOL            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    SHORT           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    USHORT          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    INT             reduce using rule 85 (BasicType -> DOT IdentifierList .)
    UINT            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    LONG            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    ULONG           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    CHAR            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    FLOAT           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    VOID            reduce using rule 85 (BasicType -> DOT IdentifierList .)
    TYPEOF          reduce using rule 85 (BasicType -> DOT IdentifierList .)
    CONST           reduce using rule 85 (BasicType -> DOT IdentifierList .)
    IMMUTABLE       reduce using rule 85 (BasicType -> DOT IdentifierList .)


state 82

    (43) DeclaratorInitializer -> VarDeclarator .
    (44) DeclaratorInitializer -> VarDeclarator . ASSIGN Initializer

    COMMA           reduce using rule 43 (DeclaratorInitializer -> VarDeclarator .)
    SEMICOLON       reduce using rule 43 (DeclaratorInitializer -> VarDeclarator .)
    ASSIGN          shift and go to state 183


state 83

    (104) BasicType2X -> LBRACKET . RBRACKET
    (105) BasicType2X -> LBRACKET . AssignExpression RBRACKET
    (106) BasicType2X -> LBRACKET . AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> LBRACKET . Type RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACKET        shift and go to state 247
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    Type                           shift and go to state 205
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    TypeCtors                      shift and go to state 134
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    LIT_STRPlus                    shift and go to state 239
    ArrayLiteral                   shift and go to state 240
    TypeCtor                       shift and go to state 193
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 223
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 248

state 84

    (100) BasicType2 -> BasicType2X . BasicType2_opt
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    IDENTIFIER      reduce using rule 485 (empty -> .)
    LPAREN          reduce using rule 485 (empty -> .)
    LBRACE          reduce using rule 485 (empty -> .)
    RPAREN          reduce using rule 485 (empty -> .)
    SEMICOLON       reduce using rule 485 (empty -> .)
    ELLIPSIS        reduce using rule 485 (empty -> .)
    COMMA           reduce using rule 485 (empty -> .)
    BODY            reduce using rule 485 (empty -> .)
    POWER           reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    PLUS_PLUS       reduce using rule 485 (empty -> .)
    MINUS_MINUS     reduce using rule 485 (empty -> .)
    DIV             reduce using rule 485 (empty -> .)
    MODULO          reduce using rule 485 (empty -> .)
    PLUS            reduce using rule 485 (empty -> .)
    MINUS           reduce using rule 485 (empty -> .)
    LEFT_SHIFT      reduce using rule 485 (empty -> .)
    RIGHT_SHIFT     reduce using rule 485 (empty -> .)
    IS_EQ           reduce using rule 485 (empty -> .)
    NOT_EQ          reduce using rule 485 (empty -> .)
    LESS            reduce using rule 485 (empty -> .)
    GREATER_EQ      reduce using rule 485 (empty -> .)
    GREATER         reduce using rule 485 (empty -> .)
    LESS_EQ         reduce using rule 485 (empty -> .)
    AMPERSAND       reduce using rule 485 (empty -> .)
    CARET           reduce using rule 485 (empty -> .)
    PIPE            reduce using rule 485 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 485 (empty -> .)
    QUESTION        reduce using rule 485 (empty -> .)
    DOUBLE_PIPE     reduce using rule 485 (empty -> .)
    ASSIGN          reduce using rule 485 (empty -> .)
    EQ_PLUS         reduce using rule 485 (empty -> .)
    EQ_MINUS        reduce using rule 485 (empty -> .)
    EQ_TIMES        reduce using rule 485 (empty -> .)
    EQ_DIV          reduce using rule 485 (empty -> .)
    EQ_MODULO       reduce using rule 485 (empty -> .)
    EQ_AND_BIT      reduce using rule 485 (empty -> .)
    EQ_OR_BIT       reduce using rule 485 (empty -> .)
    EQ_XOR_BIT      reduce using rule 485 (empty -> .)
    EQ_LEFT         reduce using rule 485 (empty -> .)
    EQ_RIGHT        reduce using rule 485 (empty -> .)
    RBRACKET        reduce using rule 485 (empty -> .)
    RANGE           reduce using rule 485 (empty -> .)
    RBRACE          reduce using rule 485 (empty -> .)
    COLON           reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

  ! LBRACKET        [ reduce using rule 485 (empty -> .) ]
  ! TIMES           [ reduce using rule 485 (empty -> .) ]

    BasicType2_opt                 shift and go to state 249
    BasicType2X                    shift and go to state 84
    BasicType2                     shift and go to state 93
    empty                          shift and go to state 89

state 85

    (450) FuncDeclarator -> BasicType2_opt . IDENTIFIER FuncDeclaratorSuffix
    (59) VarDeclarator -> BasicType2_opt . IDENTIFIER
    (60) AltDeclarator -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes

    IDENTIFIER      shift and go to state 251
    LPAREN          shift and go to state 250


state 86

    (41) Declarators -> DeclaratorInitializer .
    (42) Declarators -> DeclaratorInitializer . COMMA DeclaratorIdentifierList

    SEMICOLON       reduce using rule 41 (Declarators -> DeclaratorInitializer .)
    COMMA           shift and go to state 252


state 87

    (40) VarDeclarations -> StorageClasses_opt BasicType Declarators . SEMICOLON

    SEMICOLON       shift and go to state 253


state 88

    (45) DeclaratorInitializer -> AltDeclarator . ASSIGN Initializer
    (46) DeclaratorInitializer -> AltDeclarator .

    ASSIGN          shift and go to state 254
    COMMA           reduce using rule 46 (DeclaratorInitializer -> AltDeclarator .)
    SEMICOLON       reduce using rule 46 (DeclaratorInitializer -> AltDeclarator .)


state 89

    (102) BasicType2_opt -> empty .

    IDENTIFIER      reduce using rule 102 (BasicType2_opt -> empty .)
    LPAREN          reduce using rule 102 (BasicType2_opt -> empty .)
    LBRACE          reduce using rule 102 (BasicType2_opt -> empty .)
    RPAREN          reduce using rule 102 (BasicType2_opt -> empty .)
    SEMICOLON       reduce using rule 102 (BasicType2_opt -> empty .)
    ELLIPSIS        reduce using rule 102 (BasicType2_opt -> empty .)
    COMMA           reduce using rule 102 (BasicType2_opt -> empty .)
    BODY            reduce using rule 102 (BasicType2_opt -> empty .)
    LBRACKET        reduce using rule 102 (BasicType2_opt -> empty .)
    POWER           reduce using rule 102 (BasicType2_opt -> empty .)
    DOT             reduce using rule 102 (BasicType2_opt -> empty .)
    PLUS_PLUS       reduce using rule 102 (BasicType2_opt -> empty .)
    MINUS_MINUS     reduce using rule 102 (BasicType2_opt -> empty .)
    TIMES           reduce using rule 102 (BasicType2_opt -> empty .)
    DIV             reduce using rule 102 (BasicType2_opt -> empty .)
    MODULO          reduce using rule 102 (BasicType2_opt -> empty .)
    PLUS            reduce using rule 102 (BasicType2_opt -> empty .)
    MINUS           reduce using rule 102 (BasicType2_opt -> empty .)
    LEFT_SHIFT      reduce using rule 102 (BasicType2_opt -> empty .)
    RIGHT_SHIFT     reduce using rule 102 (BasicType2_opt -> empty .)
    IS_EQ           reduce using rule 102 (BasicType2_opt -> empty .)
    NOT_EQ          reduce using rule 102 (BasicType2_opt -> empty .)
    LESS            reduce using rule 102 (BasicType2_opt -> empty .)
    GREATER_EQ      reduce using rule 102 (BasicType2_opt -> empty .)
    GREATER         reduce using rule 102 (BasicType2_opt -> empty .)
    LESS_EQ         reduce using rule 102 (BasicType2_opt -> empty .)
    AMPERSAND       reduce using rule 102 (BasicType2_opt -> empty .)
    CARET           reduce using rule 102 (BasicType2_opt -> empty .)
    PIPE            reduce using rule 102 (BasicType2_opt -> empty .)
    DOUBLE_AMPERSAND reduce using rule 102 (BasicType2_opt -> empty .)
    QUESTION        reduce using rule 102 (BasicType2_opt -> empty .)
    DOUBLE_PIPE     reduce using rule 102 (BasicType2_opt -> empty .)
    ASSIGN          reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_PLUS         reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_MINUS        reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_TIMES        reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_DIV          reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_MODULO       reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_AND_BIT      reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_OR_BIT       reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_XOR_BIT      reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_LEFT         reduce using rule 102 (BasicType2_opt -> empty .)
    EQ_RIGHT        reduce using rule 102 (BasicType2_opt -> empty .)
    RBRACKET        reduce using rule 102 (BasicType2_opt -> empty .)
    RANGE           reduce using rule 102 (BasicType2_opt -> empty .)
    RBRACE          reduce using rule 102 (BasicType2_opt -> empty .)
    COLON           reduce using rule 102 (BasicType2_opt -> empty .)


state 90

    (108) BasicType2X -> FUNCTION . Parameters
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 79

    Parameters                     shift and go to state 255

state 91

    (103) BasicType2X -> TIMES .

    TIMES           reduce using rule 103 (BasicType2X -> TIMES .)
    LBRACKET        reduce using rule 103 (BasicType2X -> TIMES .)
    FUNCTION        reduce using rule 103 (BasicType2X -> TIMES .)
    IDENTIFIER      reduce using rule 103 (BasicType2X -> TIMES .)
    LPAREN          reduce using rule 103 (BasicType2X -> TIMES .)
    LBRACE          reduce using rule 103 (BasicType2X -> TIMES .)
    RPAREN          reduce using rule 103 (BasicType2X -> TIMES .)
    SEMICOLON       reduce using rule 103 (BasicType2X -> TIMES .)
    ELLIPSIS        reduce using rule 103 (BasicType2X -> TIMES .)
    COMMA           reduce using rule 103 (BasicType2X -> TIMES .)
    BODY            reduce using rule 103 (BasicType2X -> TIMES .)
    POWER           reduce using rule 103 (BasicType2X -> TIMES .)
    DOT             reduce using rule 103 (BasicType2X -> TIMES .)
    PLUS_PLUS       reduce using rule 103 (BasicType2X -> TIMES .)
    MINUS_MINUS     reduce using rule 103 (BasicType2X -> TIMES .)
    DIV             reduce using rule 103 (BasicType2X -> TIMES .)
    MODULO          reduce using rule 103 (BasicType2X -> TIMES .)
    PLUS            reduce using rule 103 (BasicType2X -> TIMES .)
    MINUS           reduce using rule 103 (BasicType2X -> TIMES .)
    LEFT_SHIFT      reduce using rule 103 (BasicType2X -> TIMES .)
    RIGHT_SHIFT     reduce using rule 103 (BasicType2X -> TIMES .)
    IS_EQ           reduce using rule 103 (BasicType2X -> TIMES .)
    NOT_EQ          reduce using rule 103 (BasicType2X -> TIMES .)
    LESS            reduce using rule 103 (BasicType2X -> TIMES .)
    GREATER_EQ      reduce using rule 103 (BasicType2X -> TIMES .)
    GREATER         reduce using rule 103 (BasicType2X -> TIMES .)
    LESS_EQ         reduce using rule 103 (BasicType2X -> TIMES .)
    AMPERSAND       reduce using rule 103 (BasicType2X -> TIMES .)
    CARET           reduce using rule 103 (BasicType2X -> TIMES .)
    PIPE            reduce using rule 103 (BasicType2X -> TIMES .)
    DOUBLE_AMPERSAND reduce using rule 103 (BasicType2X -> TIMES .)
    QUESTION        reduce using rule 103 (BasicType2X -> TIMES .)
    DOUBLE_PIPE     reduce using rule 103 (BasicType2X -> TIMES .)
    ASSIGN          reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_PLUS         reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_MINUS        reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_TIMES        reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_DIV          reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_MODULO       reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_AND_BIT      reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_OR_BIT       reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_XOR_BIT      reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_LEFT         reduce using rule 103 (BasicType2X -> TIMES .)
    EQ_RIGHT        reduce using rule 103 (BasicType2X -> TIMES .)
    RBRACKET        reduce using rule 103 (BasicType2X -> TIMES .)
    RANGE           reduce using rule 103 (BasicType2X -> TIMES .)
    RBRACE          reduce using rule 103 (BasicType2X -> TIMES .)
    COLON           reduce using rule 103 (BasicType2X -> TIMES .)


state 92

    (446) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator . FunctionBody
    (447) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator . SEMICOLON
    (478) FunctionBody -> . BlockStatement
    (479) FunctionBody -> . BodyStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

    SEMICOLON       shift and go to state 257
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

    FunctionBody                   shift and go to state 256
    BlockStatement                 shift and go to state 161
    BodyStatement                  shift and go to state 162

state 93

    (101) BasicType2_opt -> BasicType2 .

    IDENTIFIER      reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    LPAREN          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    LBRACE          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    RPAREN          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    SEMICOLON       reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    ELLIPSIS        reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    COMMA           reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    BODY            reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    LBRACKET        reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    POWER           reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    DOT             reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    PLUS_PLUS       reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    MINUS_MINUS     reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    TIMES           reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    DIV             reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    MODULO          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    PLUS            reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    MINUS           reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    LEFT_SHIFT      reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    RIGHT_SHIFT     reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    IS_EQ           reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    NOT_EQ          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    LESS            reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    GREATER_EQ      reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    GREATER         reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    LESS_EQ         reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    AMPERSAND       reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    CARET           reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    PIPE            reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    DOUBLE_AMPERSAND reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    QUESTION        reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    DOUBLE_PIPE     reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    ASSIGN          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_PLUS         reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_MINUS        reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_TIMES        reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_DIV          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_MODULO       reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_AND_BIT      reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_OR_BIT       reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_XOR_BIT      reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_LEFT         reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    EQ_RIGHT        reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    RBRACKET        reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    RANGE           reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    RBRACE          reduce using rule 101 (BasicType2_opt -> BasicType2 .)
    COLON           reduce using rule 101 (BasicType2_opt -> BasicType2 .)


state 94

    (111) IdentifierList -> IDENTIFIER LBRACKET . AssignExpression RBRACKET DOT IdentifierList
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 260

state 95

    (110) IdentifierList -> IDENTIFIER DOT . IdentifierList
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 41

    IdentifierList                 shift and go to state 261

state 96

    (89) BasicType -> TypeCtor LPAREN . Type RPAREN
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    Type                           shift and go to state 262
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    empty                          shift and go to state 142

state 97

    (88) BasicType -> Typeof DOT . IdentifierList
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 41

    IdentifierList                 shift and go to state 263

state 98

    (147) Typeof -> TYPEOF LPAREN . Expression RPAREN
    (148) Typeof -> TYPEOF LPAREN . RETURN RPAREN
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RETURN          shift and go to state 264
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 265
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 99

    (403) ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .

    SEMICOLON       reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IF              reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DO              reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INT             reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TYPEID          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BODY            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    $end            reduce using rule 403 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)


state 100

    (408) BaseClassList_opt -> BaseClassList .

    LBRACE          reduce using rule 408 (BaseClassList_opt -> BaseClassList .)


state 101

    (405) BaseClassList -> COLON . SuperClass
    (406) BaseClassList -> COLON . SuperClass COMMA Interfaces
    (407) BaseClassList -> COLON . Interfaces
    (410) SuperClass -> . BasicType
    (411) Interfaces -> . Interface
    (412) Interfaces -> . Interface COMMA Interfaces
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (413) Interface -> . BasicType
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    Interfaces                     shift and go to state 269
    BasicType                      shift and go to state 270
    BasicTypeX                     shift and go to state 40
    SuperClass                     shift and go to state 268
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 271
    TypeCtor                       shift and go to state 42
    Typeof                         shift and go to state 44

state 102

    (404) ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt . AggregateBody
    (402) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    LBRACE          shift and go to state 53

    AggregateBody                  shift and go to state 272

state 103

    (409) BaseClassList_opt -> empty .

    LBRACE          reduce using rule 409 (BaseClassList_opt -> empty .)


state 104

    (157) Attribute -> CONST .
    (119) StorageClass -> CONST .

  ! reduce/reduce conflict for ENUM resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for STATIC resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for EXTERN resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for FINAL resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for AUTO resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for CONST resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for DOT resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for BOOL resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for SHORT resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for USHORT resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for INT resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for UINT resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for LONG resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for ULONG resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for CHAR resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for FLOAT resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for VOID resolved using rule 119 (StorageClass -> CONST .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 119 (StorageClass -> CONST .)
    COLON           reduce using rule 157 (Attribute -> CONST .)
    LBRACE          reduce using rule 157 (Attribute -> CONST .)
    SEMICOLON       reduce using rule 157 (Attribute -> CONST .)
    NEW             reduce using rule 157 (Attribute -> CONST .)
    DELETE          reduce using rule 157 (Attribute -> CONST .)
    ALIAS           reduce using rule 157 (Attribute -> CONST .)
    MIXIN           reduce using rule 157 (Attribute -> CONST .)
    RETURN          reduce using rule 157 (Attribute -> CONST .)
    IMPORT          reduce using rule 157 (Attribute -> CONST .)
    PRIVATE         reduce using rule 157 (Attribute -> CONST .)
    PROTECTED       reduce using rule 157 (Attribute -> CONST .)
    PUBLIC          reduce using rule 157 (Attribute -> CONST .)
    CLASS           reduce using rule 157 (Attribute -> CONST .)
    UNION           reduce using rule 157 (Attribute -> CONST .)
    ENUM            reduce using rule 119 (StorageClass -> CONST .)
    STATIC          reduce using rule 119 (StorageClass -> CONST .)
    EXTERN          reduce using rule 119 (StorageClass -> CONST .)
    FINAL           reduce using rule 119 (StorageClass -> CONST .)
    AUTO            reduce using rule 119 (StorageClass -> CONST .)
    CONST           reduce using rule 119 (StorageClass -> CONST .)
    IMMUTABLE       reduce using rule 119 (StorageClass -> CONST .)
    IDENTIFIER      reduce using rule 119 (StorageClass -> CONST .)
    DOT             reduce using rule 119 (StorageClass -> CONST .)
    BOOL            reduce using rule 119 (StorageClass -> CONST .)
    SHORT           reduce using rule 119 (StorageClass -> CONST .)
    USHORT          reduce using rule 119 (StorageClass -> CONST .)
    INT             reduce using rule 119 (StorageClass -> CONST .)
    UINT            reduce using rule 119 (StorageClass -> CONST .)
    LONG            reduce using rule 119 (StorageClass -> CONST .)
    ULONG           reduce using rule 119 (StorageClass -> CONST .)
    CHAR            reduce using rule 119 (StorageClass -> CONST .)
    FLOAT           reduce using rule 119 (StorageClass -> CONST .)
    VOID            reduce using rule 119 (StorageClass -> CONST .)
    TYPEOF          reduce using rule 119 (StorageClass -> CONST .)

  ! STATIC          [ reduce using rule 157 (Attribute -> CONST .) ]
  ! EXTERN          [ reduce using rule 157 (Attribute -> CONST .) ]
  ! FINAL           [ reduce using rule 157 (Attribute -> CONST .) ]
  ! AUTO            [ reduce using rule 157 (Attribute -> CONST .) ]
  ! CONST           [ reduce using rule 157 (Attribute -> CONST .) ]
  ! IMMUTABLE       [ reduce using rule 157 (Attribute -> CONST .) ]
  ! ENUM            [ reduce using rule 157 (Attribute -> CONST .) ]
  ! DOT             [ reduce using rule 157 (Attribute -> CONST .) ]
  ! BOOL            [ reduce using rule 157 (Attribute -> CONST .) ]
  ! SHORT           [ reduce using rule 157 (Attribute -> CONST .) ]
  ! USHORT          [ reduce using rule 157 (Attribute -> CONST .) ]
  ! INT             [ reduce using rule 157 (Attribute -> CONST .) ]
  ! UINT            [ reduce using rule 157 (Attribute -> CONST .) ]
  ! LONG            [ reduce using rule 157 (Attribute -> CONST .) ]
  ! ULONG           [ reduce using rule 157 (Attribute -> CONST .) ]
  ! CHAR            [ reduce using rule 157 (Attribute -> CONST .) ]
  ! FLOAT           [ reduce using rule 157 (Attribute -> CONST .) ]
  ! VOID            [ reduce using rule 157 (Attribute -> CONST .) ]
  ! IDENTIFIER      [ reduce using rule 157 (Attribute -> CONST .) ]
  ! TYPEOF          [ reduce using rule 157 (Attribute -> CONST .) ]


state 105

    (153) Attribute -> STATIC .
    (21) ImportDeclaration -> STATIC . IMPORT ImportList SEMICOLON
    (115) StorageClass -> STATIC .

  ! shift/reduce conflict for IMPORT resolved as shift
  ! reduce/reduce conflict for ENUM resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for STATIC resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for EXTERN resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for FINAL resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for AUTO resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for CONST resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for DOT resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for BOOL resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for SHORT resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for USHORT resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for INT resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for UINT resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for LONG resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for ULONG resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for CHAR resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for FLOAT resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for VOID resolved using rule 115 (StorageClass -> STATIC .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 115 (StorageClass -> STATIC .)
    COLON           reduce using rule 153 (Attribute -> STATIC .)
    LBRACE          reduce using rule 153 (Attribute -> STATIC .)
    SEMICOLON       reduce using rule 153 (Attribute -> STATIC .)
    NEW             reduce using rule 153 (Attribute -> STATIC .)
    DELETE          reduce using rule 153 (Attribute -> STATIC .)
    ALIAS           reduce using rule 153 (Attribute -> STATIC .)
    MIXIN           reduce using rule 153 (Attribute -> STATIC .)
    RETURN          reduce using rule 153 (Attribute -> STATIC .)
    PRIVATE         reduce using rule 153 (Attribute -> STATIC .)
    PROTECTED       reduce using rule 153 (Attribute -> STATIC .)
    PUBLIC          reduce using rule 153 (Attribute -> STATIC .)
    CLASS           reduce using rule 153 (Attribute -> STATIC .)
    UNION           reduce using rule 153 (Attribute -> STATIC .)
    IMPORT          shift and go to state 30
    ENUM            reduce using rule 115 (StorageClass -> STATIC .)
    STATIC          reduce using rule 115 (StorageClass -> STATIC .)
    EXTERN          reduce using rule 115 (StorageClass -> STATIC .)
    FINAL           reduce using rule 115 (StorageClass -> STATIC .)
    AUTO            reduce using rule 115 (StorageClass -> STATIC .)
    CONST           reduce using rule 115 (StorageClass -> STATIC .)
    IMMUTABLE       reduce using rule 115 (StorageClass -> STATIC .)
    IDENTIFIER      reduce using rule 115 (StorageClass -> STATIC .)
    DOT             reduce using rule 115 (StorageClass -> STATIC .)
    BOOL            reduce using rule 115 (StorageClass -> STATIC .)
    SHORT           reduce using rule 115 (StorageClass -> STATIC .)
    USHORT          reduce using rule 115 (StorageClass -> STATIC .)
    INT             reduce using rule 115 (StorageClass -> STATIC .)
    UINT            reduce using rule 115 (StorageClass -> STATIC .)
    LONG            reduce using rule 115 (StorageClass -> STATIC .)
    ULONG           reduce using rule 115 (StorageClass -> STATIC .)
    CHAR            reduce using rule 115 (StorageClass -> STATIC .)
    FLOAT           reduce using rule 115 (StorageClass -> STATIC .)
    VOID            reduce using rule 115 (StorageClass -> STATIC .)
    TYPEOF          reduce using rule 115 (StorageClass -> STATIC .)

  ! STATIC          [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! EXTERN          [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! FINAL           [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! AUTO            [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! CONST           [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! IMMUTABLE       [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! ENUM            [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! IMPORT          [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! DOT             [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! BOOL            [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! SHORT           [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! USHORT          [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! INT             [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! UINT            [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! LONG            [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! ULONG           [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! CHAR            [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! FLOAT           [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! VOID            [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! IDENTIFIER      [ reduce using rule 153 (Attribute -> STATIC .) ]
  ! TYPEOF          [ reduce using rule 153 (Attribute -> STATIC .) ]


state 106

    (154) Attribute -> EXTERN .
    (116) StorageClass -> EXTERN .

  ! reduce/reduce conflict for ENUM resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for STATIC resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for EXTERN resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for FINAL resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for AUTO resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for CONST resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for DOT resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for BOOL resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for SHORT resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for USHORT resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for INT resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for UINT resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for LONG resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for ULONG resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for CHAR resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for FLOAT resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for VOID resolved using rule 116 (StorageClass -> EXTERN .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 116 (StorageClass -> EXTERN .)
    COLON           reduce using rule 154 (Attribute -> EXTERN .)
    LBRACE          reduce using rule 154 (Attribute -> EXTERN .)
    SEMICOLON       reduce using rule 154 (Attribute -> EXTERN .)
    NEW             reduce using rule 154 (Attribute -> EXTERN .)
    DELETE          reduce using rule 154 (Attribute -> EXTERN .)
    ALIAS           reduce using rule 154 (Attribute -> EXTERN .)
    MIXIN           reduce using rule 154 (Attribute -> EXTERN .)
    RETURN          reduce using rule 154 (Attribute -> EXTERN .)
    IMPORT          reduce using rule 154 (Attribute -> EXTERN .)
    PRIVATE         reduce using rule 154 (Attribute -> EXTERN .)
    PROTECTED       reduce using rule 154 (Attribute -> EXTERN .)
    PUBLIC          reduce using rule 154 (Attribute -> EXTERN .)
    CLASS           reduce using rule 154 (Attribute -> EXTERN .)
    UNION           reduce using rule 154 (Attribute -> EXTERN .)
    ENUM            reduce using rule 116 (StorageClass -> EXTERN .)
    STATIC          reduce using rule 116 (StorageClass -> EXTERN .)
    EXTERN          reduce using rule 116 (StorageClass -> EXTERN .)
    FINAL           reduce using rule 116 (StorageClass -> EXTERN .)
    AUTO            reduce using rule 116 (StorageClass -> EXTERN .)
    CONST           reduce using rule 116 (StorageClass -> EXTERN .)
    IMMUTABLE       reduce using rule 116 (StorageClass -> EXTERN .)
    IDENTIFIER      reduce using rule 116 (StorageClass -> EXTERN .)
    DOT             reduce using rule 116 (StorageClass -> EXTERN .)
    BOOL            reduce using rule 116 (StorageClass -> EXTERN .)
    SHORT           reduce using rule 116 (StorageClass -> EXTERN .)
    USHORT          reduce using rule 116 (StorageClass -> EXTERN .)
    INT             reduce using rule 116 (StorageClass -> EXTERN .)
    UINT            reduce using rule 116 (StorageClass -> EXTERN .)
    LONG            reduce using rule 116 (StorageClass -> EXTERN .)
    ULONG           reduce using rule 116 (StorageClass -> EXTERN .)
    CHAR            reduce using rule 116 (StorageClass -> EXTERN .)
    FLOAT           reduce using rule 116 (StorageClass -> EXTERN .)
    VOID            reduce using rule 116 (StorageClass -> EXTERN .)
    TYPEOF          reduce using rule 116 (StorageClass -> EXTERN .)

  ! STATIC          [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! EXTERN          [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! FINAL           [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! AUTO            [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! CONST           [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! IMMUTABLE       [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! ENUM            [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! DOT             [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! BOOL            [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! SHORT           [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! USHORT          [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! INT             [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! UINT            [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! LONG            [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! ULONG           [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! CHAR            [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! FLOAT           [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! VOID            [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! IDENTIFIER      [ reduce using rule 154 (Attribute -> EXTERN .) ]
  ! TYPEOF          [ reduce using rule 154 (Attribute -> EXTERN .) ]


state 107

    (414) Allocator -> NEW . Parameters SEMICOLON
    (415) Allocator -> NEW . Parameters FunctionBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 79

    Parameters                     shift and go to state 273

state 108

    (7) DeclDef -> AttributeSpecifier .

    SEMICOLON       reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    NEW             reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    DELETE          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    ALIAS           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    MIXIN           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    STATIC          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    EXTERN          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    FINAL           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    AUTO            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    CONST           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    IMMUTABLE       reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    RETURN          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    ENUM            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    IMPORT          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    PRIVATE         reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    PROTECTED       reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    PUBLIC          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    CLASS           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    UNION           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    DOT             reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    BOOL            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    SHORT           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    USHORT          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    INT             reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    UINT            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    LONG            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    ULONG           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    CHAR            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    FLOAT           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    VOID            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    IDENTIFIER      reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    TYPEOF          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    RBRACE          reduce using rule 7 (DeclDef -> AttributeSpecifier .)


state 109

    (155) Attribute -> FINAL .
    (117) StorageClass -> FINAL .

  ! reduce/reduce conflict for ENUM resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for STATIC resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for EXTERN resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for FINAL resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for AUTO resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for CONST resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for DOT resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for BOOL resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for SHORT resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for USHORT resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for INT resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for UINT resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for LONG resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for ULONG resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for CHAR resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for FLOAT resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for VOID resolved using rule 117 (StorageClass -> FINAL .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 117 (StorageClass -> FINAL .)
    COLON           reduce using rule 155 (Attribute -> FINAL .)
    LBRACE          reduce using rule 155 (Attribute -> FINAL .)
    SEMICOLON       reduce using rule 155 (Attribute -> FINAL .)
    NEW             reduce using rule 155 (Attribute -> FINAL .)
    DELETE          reduce using rule 155 (Attribute -> FINAL .)
    ALIAS           reduce using rule 155 (Attribute -> FINAL .)
    MIXIN           reduce using rule 155 (Attribute -> FINAL .)
    RETURN          reduce using rule 155 (Attribute -> FINAL .)
    IMPORT          reduce using rule 155 (Attribute -> FINAL .)
    PRIVATE         reduce using rule 155 (Attribute -> FINAL .)
    PROTECTED       reduce using rule 155 (Attribute -> FINAL .)
    PUBLIC          reduce using rule 155 (Attribute -> FINAL .)
    CLASS           reduce using rule 155 (Attribute -> FINAL .)
    UNION           reduce using rule 155 (Attribute -> FINAL .)
    ENUM            reduce using rule 117 (StorageClass -> FINAL .)
    STATIC          reduce using rule 117 (StorageClass -> FINAL .)
    EXTERN          reduce using rule 117 (StorageClass -> FINAL .)
    FINAL           reduce using rule 117 (StorageClass -> FINAL .)
    AUTO            reduce using rule 117 (StorageClass -> FINAL .)
    CONST           reduce using rule 117 (StorageClass -> FINAL .)
    IMMUTABLE       reduce using rule 117 (StorageClass -> FINAL .)
    IDENTIFIER      reduce using rule 117 (StorageClass -> FINAL .)
    DOT             reduce using rule 117 (StorageClass -> FINAL .)
    BOOL            reduce using rule 117 (StorageClass -> FINAL .)
    SHORT           reduce using rule 117 (StorageClass -> FINAL .)
    USHORT          reduce using rule 117 (StorageClass -> FINAL .)
    INT             reduce using rule 117 (StorageClass -> FINAL .)
    UINT            reduce using rule 117 (StorageClass -> FINAL .)
    LONG            reduce using rule 117 (StorageClass -> FINAL .)
    ULONG           reduce using rule 117 (StorageClass -> FINAL .)
    CHAR            reduce using rule 117 (StorageClass -> FINAL .)
    FLOAT           reduce using rule 117 (StorageClass -> FINAL .)
    VOID            reduce using rule 117 (StorageClass -> FINAL .)
    TYPEOF          reduce using rule 117 (StorageClass -> FINAL .)

  ! STATIC          [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! EXTERN          [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! FINAL           [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! AUTO            [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! CONST           [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! IMMUTABLE       [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! ENUM            [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! DOT             [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! BOOL            [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! SHORT           [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! USHORT          [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! INT             [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! UINT            [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! LONG            [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! ULONG           [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! CHAR            [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! FLOAT           [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! VOID            [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! IDENTIFIER      [ reduce using rule 155 (Attribute -> FINAL .) ]
  ! TYPEOF          [ reduce using rule 155 (Attribute -> FINAL .) ]


state 110

    (12) DeclDef -> MixinDeclaration .

    SEMICOLON       reduce using rule 12 (DeclDef -> MixinDeclaration .)
    NEW             reduce using rule 12 (DeclDef -> MixinDeclaration .)
    DELETE          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    ALIAS           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    MIXIN           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    STATIC          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    EXTERN          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    FINAL           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    AUTO            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    CONST           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    IMMUTABLE       reduce using rule 12 (DeclDef -> MixinDeclaration .)
    RETURN          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    ENUM            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    IMPORT          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    PRIVATE         reduce using rule 12 (DeclDef -> MixinDeclaration .)
    PROTECTED       reduce using rule 12 (DeclDef -> MixinDeclaration .)
    PUBLIC          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    CLASS           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    UNION           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    DOT             reduce using rule 12 (DeclDef -> MixinDeclaration .)
    BOOL            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    SHORT           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    USHORT          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    INT             reduce using rule 12 (DeclDef -> MixinDeclaration .)
    UINT            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    LONG            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    ULONG           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    CHAR            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    FLOAT           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    VOID            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    IDENTIFIER      reduce using rule 12 (DeclDef -> MixinDeclaration .)
    TYPEOF          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    RBRACE          reduce using rule 12 (DeclDef -> MixinDeclaration .)


state 111

    (13) DeclDef -> SEMICOLON .

    SEMICOLON       reduce using rule 13 (DeclDef -> SEMICOLON .)
    NEW             reduce using rule 13 (DeclDef -> SEMICOLON .)
    DELETE          reduce using rule 13 (DeclDef -> SEMICOLON .)
    ALIAS           reduce using rule 13 (DeclDef -> SEMICOLON .)
    MIXIN           reduce using rule 13 (DeclDef -> SEMICOLON .)
    STATIC          reduce using rule 13 (DeclDef -> SEMICOLON .)
    EXTERN          reduce using rule 13 (DeclDef -> SEMICOLON .)
    FINAL           reduce using rule 13 (DeclDef -> SEMICOLON .)
    AUTO            reduce using rule 13 (DeclDef -> SEMICOLON .)
    CONST           reduce using rule 13 (DeclDef -> SEMICOLON .)
    IMMUTABLE       reduce using rule 13 (DeclDef -> SEMICOLON .)
    RETURN          reduce using rule 13 (DeclDef -> SEMICOLON .)
    ENUM            reduce using rule 13 (DeclDef -> SEMICOLON .)
    IMPORT          reduce using rule 13 (DeclDef -> SEMICOLON .)
    PRIVATE         reduce using rule 13 (DeclDef -> SEMICOLON .)
    PROTECTED       reduce using rule 13 (DeclDef -> SEMICOLON .)
    PUBLIC          reduce using rule 13 (DeclDef -> SEMICOLON .)
    CLASS           reduce using rule 13 (DeclDef -> SEMICOLON .)
    UNION           reduce using rule 13 (DeclDef -> SEMICOLON .)
    DOT             reduce using rule 13 (DeclDef -> SEMICOLON .)
    BOOL            reduce using rule 13 (DeclDef -> SEMICOLON .)
    SHORT           reduce using rule 13 (DeclDef -> SEMICOLON .)
    USHORT          reduce using rule 13 (DeclDef -> SEMICOLON .)
    INT             reduce using rule 13 (DeclDef -> SEMICOLON .)
    UINT            reduce using rule 13 (DeclDef -> SEMICOLON .)
    LONG            reduce using rule 13 (DeclDef -> SEMICOLON .)
    ULONG           reduce using rule 13 (DeclDef -> SEMICOLON .)
    CHAR            reduce using rule 13 (DeclDef -> SEMICOLON .)
    FLOAT           reduce using rule 13 (DeclDef -> SEMICOLON .)
    VOID            reduce using rule 13 (DeclDef -> SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (DeclDef -> SEMICOLON .)
    TYPEOF          reduce using rule 13 (DeclDef -> SEMICOLON .)
    RBRACE          reduce using rule 13 (DeclDef -> SEMICOLON .)


state 112

    (5) DeclDefs_opt -> DeclDefs .

    RBRACE          reduce using rule 5 (DeclDefs_opt -> DeclDefs .)


state 113

    (152) Attribute -> VisibilityAttribute .

    COLON           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    LBRACE          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    SEMICOLON       reduce using rule 152 (Attribute -> VisibilityAttribute .)
    NEW             reduce using rule 152 (Attribute -> VisibilityAttribute .)
    DELETE          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    ALIAS           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    MIXIN           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    STATIC          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    EXTERN          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    FINAL           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    AUTO            reduce using rule 152 (Attribute -> VisibilityAttribute .)
    CONST           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    IMMUTABLE       reduce using rule 152 (Attribute -> VisibilityAttribute .)
    RETURN          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    ENUM            reduce using rule 152 (Attribute -> VisibilityAttribute .)
    IMPORT          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    PRIVATE         reduce using rule 152 (Attribute -> VisibilityAttribute .)
    PROTECTED       reduce using rule 152 (Attribute -> VisibilityAttribute .)
    PUBLIC          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    CLASS           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    UNION           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    DOT             reduce using rule 152 (Attribute -> VisibilityAttribute .)
    BOOL            reduce using rule 152 (Attribute -> VisibilityAttribute .)
    SHORT           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    USHORT          reduce using rule 152 (Attribute -> VisibilityAttribute .)
    INT             reduce using rule 152 (Attribute -> VisibilityAttribute .)
    UINT            reduce using rule 152 (Attribute -> VisibilityAttribute .)
    LONG            reduce using rule 152 (Attribute -> VisibilityAttribute .)
    ULONG           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    CHAR            reduce using rule 152 (Attribute -> VisibilityAttribute .)
    FLOAT           reduce using rule 152 (Attribute -> VisibilityAttribute .)
    VOID            reduce using rule 152 (Attribute -> VisibilityAttribute .)
    IDENTIFIER      reduce using rule 152 (Attribute -> VisibilityAttribute .)
    TYPEOF          reduce using rule 152 (Attribute -> VisibilityAttribute .)


state 114

    (402) AggregateBody -> LBRACE DeclDefs_opt . RBRACE

    RBRACE          shift and go to state 274


state 115

    (162) VisibilityAttribute -> PRIVATE .

    COLON           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    LBRACE          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    SEMICOLON       reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    NEW             reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    DELETE          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    ALIAS           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    MIXIN           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    STATIC          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    EXTERN          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    FINAL           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    AUTO            reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    CONST           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    IMMUTABLE       reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    RETURN          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    ENUM            reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    IMPORT          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    PRIVATE         reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    PROTECTED       reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    PUBLIC          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    CLASS           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    UNION           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    DOT             reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    BOOL            reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    SHORT           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    USHORT          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    INT             reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    UINT            reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    LONG            reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    ULONG           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    CHAR            reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    FLOAT           reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    VOID            reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    IDENTIFIER      reduce using rule 162 (VisibilityAttribute -> PRIVATE .)
    TYPEOF          reduce using rule 162 (VisibilityAttribute -> PRIVATE .)


state 116

    (11) DeclDef -> AliasThis .

    SEMICOLON       reduce using rule 11 (DeclDef -> AliasThis .)
    NEW             reduce using rule 11 (DeclDef -> AliasThis .)
    DELETE          reduce using rule 11 (DeclDef -> AliasThis .)
    ALIAS           reduce using rule 11 (DeclDef -> AliasThis .)
    MIXIN           reduce using rule 11 (DeclDef -> AliasThis .)
    STATIC          reduce using rule 11 (DeclDef -> AliasThis .)
    EXTERN          reduce using rule 11 (DeclDef -> AliasThis .)
    FINAL           reduce using rule 11 (DeclDef -> AliasThis .)
    AUTO            reduce using rule 11 (DeclDef -> AliasThis .)
    CONST           reduce using rule 11 (DeclDef -> AliasThis .)
    IMMUTABLE       reduce using rule 11 (DeclDef -> AliasThis .)
    RETURN          reduce using rule 11 (DeclDef -> AliasThis .)
    ENUM            reduce using rule 11 (DeclDef -> AliasThis .)
    IMPORT          reduce using rule 11 (DeclDef -> AliasThis .)
    PRIVATE         reduce using rule 11 (DeclDef -> AliasThis .)
    PROTECTED       reduce using rule 11 (DeclDef -> AliasThis .)
    PUBLIC          reduce using rule 11 (DeclDef -> AliasThis .)
    CLASS           reduce using rule 11 (DeclDef -> AliasThis .)
    UNION           reduce using rule 11 (DeclDef -> AliasThis .)
    DOT             reduce using rule 11 (DeclDef -> AliasThis .)
    BOOL            reduce using rule 11 (DeclDef -> AliasThis .)
    SHORT           reduce using rule 11 (DeclDef -> AliasThis .)
    USHORT          reduce using rule 11 (DeclDef -> AliasThis .)
    INT             reduce using rule 11 (DeclDef -> AliasThis .)
    UINT            reduce using rule 11 (DeclDef -> AliasThis .)
    LONG            reduce using rule 11 (DeclDef -> AliasThis .)
    ULONG           reduce using rule 11 (DeclDef -> AliasThis .)
    CHAR            reduce using rule 11 (DeclDef -> AliasThis .)
    FLOAT           reduce using rule 11 (DeclDef -> AliasThis .)
    VOID            reduce using rule 11 (DeclDef -> AliasThis .)
    IDENTIFIER      reduce using rule 11 (DeclDef -> AliasThis .)
    TYPEOF          reduce using rule 11 (DeclDef -> AliasThis .)
    RBRACE          reduce using rule 11 (DeclDef -> AliasThis .)


state 117

    (3) DeclDefs -> DeclDef .
    (4) DeclDefs -> DeclDef . DeclDefs
    (3) DeclDefs -> . DeclDef
    (4) DeclDefs -> . DeclDef DeclDefs
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (150) AttributeSpecifier -> . Attribute COLON
    (151) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (414) Allocator -> . NEW Parameters SEMICOLON
    (415) Allocator -> . NEW Parameters FunctionBody
    (416) Deallocator -> . DELETE Parameters SEMICOLON
    (417) Deallocator -> . DELETE Parameters FunctionBody
    (418) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (152) Attribute -> . VisibilityAttribute
    (153) Attribute -> . STATIC
    (154) Attribute -> . EXTERN
    (155) Attribute -> . FINAL
    (156) Attribute -> . AUTO
    (157) Attribute -> . CONST
    (158) Attribute -> . IMMUTABLE
    (159) Attribute -> . RETURN
    (446) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (448) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (140) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (396) AggregateDeclaration -> . ClassDeclaration
    (397) AggregateDeclaration -> . UnionDeclaration
    (427) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (428) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (429) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (162) VisibilityAttribute -> . PRIVATE
    (163) VisibilityAttribute -> . PROTECTED
    (164) VisibilityAttribute -> . PUBLIC
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (449) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (403) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt AggregateBody
    (398) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (400) UnionDeclaration -> . AnonUnionDeclaration
    (438) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (401) AnonUnionDeclaration -> . UNION AggregateBody
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 3 (DeclDefs -> DeclDef .)
    SEMICOLON       shift and go to state 111
    NEW             shift and go to state 107
    DELETE          shift and go to state 130
    ALIAS           shift and go to state 122
    MIXIN           shift and go to state 128
    STATIC          shift and go to state 105
    EXTERN          shift and go to state 106
    FINAL           shift and go to state 109
    AUTO            shift and go to state 120
    CONST           shift and go to state 104
    IMMUTABLE       shift and go to state 123
    RETURN          shift and go to state 124
    ENUM            shift and go to state 18
    IMPORT          shift and go to state 27
    PRIVATE         shift and go to state 115
    PROTECTED       shift and go to state 127
    PUBLIC          shift and go to state 126
    CLASS           shift and go to state 13
    UNION           shift and go to state 17
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 108
    StorageClasses_opt             shift and go to state 9
    DeclDefs                       shift and go to state 275
    VisibilityAttribute            shift and go to state 113
    AliasThis                      shift and go to state 116
    DeclDef                        shift and go to state 117
    Declaration                    shift and go to state 121
    AliasDeclaration               shift and go to state 12
    VarDeclarations                shift and go to state 23
    empty                          shift and go to state 65
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 110
    Deallocator                    shift and go to state 118
    AnonymousEnumDeclaration       shift and go to state 20
    AnonUnionDeclaration           shift and go to state 22
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 125
    UnionDeclaration               shift and go to state 25
    ImportDeclaration              shift and go to state 10
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 129
    StorageClass                   shift and go to state 28

state 118

    (10) DeclDef -> Deallocator .

    SEMICOLON       reduce using rule 10 (DeclDef -> Deallocator .)
    NEW             reduce using rule 10 (DeclDef -> Deallocator .)
    DELETE          reduce using rule 10 (DeclDef -> Deallocator .)
    ALIAS           reduce using rule 10 (DeclDef -> Deallocator .)
    MIXIN           reduce using rule 10 (DeclDef -> Deallocator .)
    STATIC          reduce using rule 10 (DeclDef -> Deallocator .)
    EXTERN          reduce using rule 10 (DeclDef -> Deallocator .)
    FINAL           reduce using rule 10 (DeclDef -> Deallocator .)
    AUTO            reduce using rule 10 (DeclDef -> Deallocator .)
    CONST           reduce using rule 10 (DeclDef -> Deallocator .)
    IMMUTABLE       reduce using rule 10 (DeclDef -> Deallocator .)
    RETURN          reduce using rule 10 (DeclDef -> Deallocator .)
    ENUM            reduce using rule 10 (DeclDef -> Deallocator .)
    IMPORT          reduce using rule 10 (DeclDef -> Deallocator .)
    PRIVATE         reduce using rule 10 (DeclDef -> Deallocator .)
    PROTECTED       reduce using rule 10 (DeclDef -> Deallocator .)
    PUBLIC          reduce using rule 10 (DeclDef -> Deallocator .)
    CLASS           reduce using rule 10 (DeclDef -> Deallocator .)
    UNION           reduce using rule 10 (DeclDef -> Deallocator .)
    DOT             reduce using rule 10 (DeclDef -> Deallocator .)
    BOOL            reduce using rule 10 (DeclDef -> Deallocator .)
    SHORT           reduce using rule 10 (DeclDef -> Deallocator .)
    USHORT          reduce using rule 10 (DeclDef -> Deallocator .)
    INT             reduce using rule 10 (DeclDef -> Deallocator .)
    UINT            reduce using rule 10 (DeclDef -> Deallocator .)
    LONG            reduce using rule 10 (DeclDef -> Deallocator .)
    ULONG           reduce using rule 10 (DeclDef -> Deallocator .)
    CHAR            reduce using rule 10 (DeclDef -> Deallocator .)
    FLOAT           reduce using rule 10 (DeclDef -> Deallocator .)
    VOID            reduce using rule 10 (DeclDef -> Deallocator .)
    IDENTIFIER      reduce using rule 10 (DeclDef -> Deallocator .)
    TYPEOF          reduce using rule 10 (DeclDef -> Deallocator .)
    RBRACE          reduce using rule 10 (DeclDef -> Deallocator .)


state 119

    (6) DeclDefs_opt -> empty .
    (139) StorageClasses_opt -> empty .

    RBRACE          reduce using rule 6 (DeclDefs_opt -> empty .)
    DOT             reduce using rule 139 (StorageClasses_opt -> empty .)
    BOOL            reduce using rule 139 (StorageClasses_opt -> empty .)
    SHORT           reduce using rule 139 (StorageClasses_opt -> empty .)
    USHORT          reduce using rule 139 (StorageClasses_opt -> empty .)
    INT             reduce using rule 139 (StorageClasses_opt -> empty .)
    UINT            reduce using rule 139 (StorageClasses_opt -> empty .)
    LONG            reduce using rule 139 (StorageClasses_opt -> empty .)
    ULONG           reduce using rule 139 (StorageClasses_opt -> empty .)
    CHAR            reduce using rule 139 (StorageClasses_opt -> empty .)
    FLOAT           reduce using rule 139 (StorageClasses_opt -> empty .)
    VOID            reduce using rule 139 (StorageClasses_opt -> empty .)
    IDENTIFIER      reduce using rule 139 (StorageClasses_opt -> empty .)
    TYPEOF          reduce using rule 139 (StorageClasses_opt -> empty .)
    CONST           reduce using rule 139 (StorageClasses_opt -> empty .)
    IMMUTABLE       reduce using rule 139 (StorageClasses_opt -> empty .)


state 120

    (156) Attribute -> AUTO .
    (118) StorageClass -> AUTO .

  ! reduce/reduce conflict for ENUM resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for STATIC resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for EXTERN resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for FINAL resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for AUTO resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for CONST resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for DOT resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for BOOL resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for SHORT resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for USHORT resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for INT resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for UINT resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for LONG resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for ULONG resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for CHAR resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for FLOAT resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for VOID resolved using rule 118 (StorageClass -> AUTO .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 118 (StorageClass -> AUTO .)
    COLON           reduce using rule 156 (Attribute -> AUTO .)
    LBRACE          reduce using rule 156 (Attribute -> AUTO .)
    SEMICOLON       reduce using rule 156 (Attribute -> AUTO .)
    NEW             reduce using rule 156 (Attribute -> AUTO .)
    DELETE          reduce using rule 156 (Attribute -> AUTO .)
    ALIAS           reduce using rule 156 (Attribute -> AUTO .)
    MIXIN           reduce using rule 156 (Attribute -> AUTO .)
    RETURN          reduce using rule 156 (Attribute -> AUTO .)
    IMPORT          reduce using rule 156 (Attribute -> AUTO .)
    PRIVATE         reduce using rule 156 (Attribute -> AUTO .)
    PROTECTED       reduce using rule 156 (Attribute -> AUTO .)
    PUBLIC          reduce using rule 156 (Attribute -> AUTO .)
    CLASS           reduce using rule 156 (Attribute -> AUTO .)
    UNION           reduce using rule 156 (Attribute -> AUTO .)
    ENUM            reduce using rule 118 (StorageClass -> AUTO .)
    STATIC          reduce using rule 118 (StorageClass -> AUTO .)
    EXTERN          reduce using rule 118 (StorageClass -> AUTO .)
    FINAL           reduce using rule 118 (StorageClass -> AUTO .)
    AUTO            reduce using rule 118 (StorageClass -> AUTO .)
    CONST           reduce using rule 118 (StorageClass -> AUTO .)
    IMMUTABLE       reduce using rule 118 (StorageClass -> AUTO .)
    IDENTIFIER      reduce using rule 118 (StorageClass -> AUTO .)
    DOT             reduce using rule 118 (StorageClass -> AUTO .)
    BOOL            reduce using rule 118 (StorageClass -> AUTO .)
    SHORT           reduce using rule 118 (StorageClass -> AUTO .)
    USHORT          reduce using rule 118 (StorageClass -> AUTO .)
    INT             reduce using rule 118 (StorageClass -> AUTO .)
    UINT            reduce using rule 118 (StorageClass -> AUTO .)
    LONG            reduce using rule 118 (StorageClass -> AUTO .)
    ULONG           reduce using rule 118 (StorageClass -> AUTO .)
    CHAR            reduce using rule 118 (StorageClass -> AUTO .)
    FLOAT           reduce using rule 118 (StorageClass -> AUTO .)
    VOID            reduce using rule 118 (StorageClass -> AUTO .)
    TYPEOF          reduce using rule 118 (StorageClass -> AUTO .)

  ! STATIC          [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! EXTERN          [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! FINAL           [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! AUTO            [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! CONST           [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! IMMUTABLE       [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! ENUM            [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! DOT             [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! BOOL            [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! SHORT           [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! USHORT          [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! INT             [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! UINT            [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! LONG            [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! ULONG           [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! CHAR            [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! FLOAT           [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! VOID            [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! IDENTIFIER      [ reduce using rule 156 (Attribute -> AUTO .) ]
  ! TYPEOF          [ reduce using rule 156 (Attribute -> AUTO .) ]


state 121

    (8) DeclDef -> Declaration .

    SEMICOLON       reduce using rule 8 (DeclDef -> Declaration .)
    NEW             reduce using rule 8 (DeclDef -> Declaration .)
    DELETE          reduce using rule 8 (DeclDef -> Declaration .)
    ALIAS           reduce using rule 8 (DeclDef -> Declaration .)
    MIXIN           reduce using rule 8 (DeclDef -> Declaration .)
    STATIC          reduce using rule 8 (DeclDef -> Declaration .)
    EXTERN          reduce using rule 8 (DeclDef -> Declaration .)
    FINAL           reduce using rule 8 (DeclDef -> Declaration .)
    AUTO            reduce using rule 8 (DeclDef -> Declaration .)
    CONST           reduce using rule 8 (DeclDef -> Declaration .)
    IMMUTABLE       reduce using rule 8 (DeclDef -> Declaration .)
    RETURN          reduce using rule 8 (DeclDef -> Declaration .)
    ENUM            reduce using rule 8 (DeclDef -> Declaration .)
    IMPORT          reduce using rule 8 (DeclDef -> Declaration .)
    PRIVATE         reduce using rule 8 (DeclDef -> Declaration .)
    PROTECTED       reduce using rule 8 (DeclDef -> Declaration .)
    PUBLIC          reduce using rule 8 (DeclDef -> Declaration .)
    CLASS           reduce using rule 8 (DeclDef -> Declaration .)
    UNION           reduce using rule 8 (DeclDef -> Declaration .)
    DOT             reduce using rule 8 (DeclDef -> Declaration .)
    BOOL            reduce using rule 8 (DeclDef -> Declaration .)
    SHORT           reduce using rule 8 (DeclDef -> Declaration .)
    USHORT          reduce using rule 8 (DeclDef -> Declaration .)
    INT             reduce using rule 8 (DeclDef -> Declaration .)
    UINT            reduce using rule 8 (DeclDef -> Declaration .)
    LONG            reduce using rule 8 (DeclDef -> Declaration .)
    ULONG           reduce using rule 8 (DeclDef -> Declaration .)
    CHAR            reduce using rule 8 (DeclDef -> Declaration .)
    FLOAT           reduce using rule 8 (DeclDef -> Declaration .)
    VOID            reduce using rule 8 (DeclDef -> Declaration .)
    IDENTIFIER      reduce using rule 8 (DeclDef -> Declaration .)
    TYPEOF          reduce using rule 8 (DeclDef -> Declaration .)
    RBRACE          reduce using rule 8 (DeclDef -> Declaration .)


state 122

    (418) AliasThis -> ALIAS . IDENTIFIER THIS SEMICOLON
    (140) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> ALIAS . AliasDeclarationX SEMICOLON
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (143) AliasDeclarationX -> . AliasDeclarationY
    (144) AliasDeclarationX -> . AliasDeclarationX COMMA AliasDeclarationY
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (145) AliasDeclarationY -> . IDENTIFIER ASSIGN StorageClasses_opt Type
    (146) AliasDeclarationY -> . IDENTIFIER ASSIGN FunctionLiteral
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      shift and go to state 276
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    ENUM            shift and go to state 66
    STATIC          shift and go to state 59
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 21

  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    AliasDeclarationY              shift and go to state 61
    AliasDeclarationX              shift and go to state 62
    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 63
    StorageClasses_opt             shift and go to state 60
    empty                          shift and go to state 65

state 123

    (158) Attribute -> IMMUTABLE .
    (120) StorageClass -> IMMUTABLE .

  ! reduce/reduce conflict for ENUM resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for STATIC resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for EXTERN resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for FINAL resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for AUTO resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for CONST resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for DOT resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for BOOL resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for SHORT resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for USHORT resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for INT resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for UINT resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for LONG resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for ULONG resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for CHAR resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for VOID resolved using rule 120 (StorageClass -> IMMUTABLE .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 120 (StorageClass -> IMMUTABLE .)
    COLON           reduce using rule 158 (Attribute -> IMMUTABLE .)
    LBRACE          reduce using rule 158 (Attribute -> IMMUTABLE .)
    SEMICOLON       reduce using rule 158 (Attribute -> IMMUTABLE .)
    NEW             reduce using rule 158 (Attribute -> IMMUTABLE .)
    DELETE          reduce using rule 158 (Attribute -> IMMUTABLE .)
    ALIAS           reduce using rule 158 (Attribute -> IMMUTABLE .)
    MIXIN           reduce using rule 158 (Attribute -> IMMUTABLE .)
    RETURN          reduce using rule 158 (Attribute -> IMMUTABLE .)
    IMPORT          reduce using rule 158 (Attribute -> IMMUTABLE .)
    PRIVATE         reduce using rule 158 (Attribute -> IMMUTABLE .)
    PROTECTED       reduce using rule 158 (Attribute -> IMMUTABLE .)
    PUBLIC          reduce using rule 158 (Attribute -> IMMUTABLE .)
    CLASS           reduce using rule 158 (Attribute -> IMMUTABLE .)
    UNION           reduce using rule 158 (Attribute -> IMMUTABLE .)
    ENUM            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    STATIC          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    EXTERN          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    FINAL           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    AUTO            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    CONST           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 120 (StorageClass -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 120 (StorageClass -> IMMUTABLE .)
    DOT             reduce using rule 120 (StorageClass -> IMMUTABLE .)
    BOOL            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    SHORT           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    USHORT          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    INT             reduce using rule 120 (StorageClass -> IMMUTABLE .)
    UINT            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    LONG            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    ULONG           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    CHAR            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    FLOAT           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    VOID            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    TYPEOF          reduce using rule 120 (StorageClass -> IMMUTABLE .)

  ! STATIC          [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! EXTERN          [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! FINAL           [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! AUTO            [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! CONST           [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! IMMUTABLE       [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! ENUM            [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! DOT             [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! BOOL            [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! SHORT           [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! USHORT          [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! INT             [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! UINT            [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! LONG            [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! ULONG           [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! CHAR            [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! FLOAT           [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! VOID            [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! IDENTIFIER      [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]
  ! TYPEOF          [ reduce using rule 158 (Attribute -> IMMUTABLE .) ]


state 124

    (159) Attribute -> RETURN .

    COLON           reduce using rule 159 (Attribute -> RETURN .)
    LBRACE          reduce using rule 159 (Attribute -> RETURN .)
    SEMICOLON       reduce using rule 159 (Attribute -> RETURN .)
    NEW             reduce using rule 159 (Attribute -> RETURN .)
    DELETE          reduce using rule 159 (Attribute -> RETURN .)
    ALIAS           reduce using rule 159 (Attribute -> RETURN .)
    MIXIN           reduce using rule 159 (Attribute -> RETURN .)
    STATIC          reduce using rule 159 (Attribute -> RETURN .)
    EXTERN          reduce using rule 159 (Attribute -> RETURN .)
    FINAL           reduce using rule 159 (Attribute -> RETURN .)
    AUTO            reduce using rule 159 (Attribute -> RETURN .)
    CONST           reduce using rule 159 (Attribute -> RETURN .)
    IMMUTABLE       reduce using rule 159 (Attribute -> RETURN .)
    RETURN          reduce using rule 159 (Attribute -> RETURN .)
    ENUM            reduce using rule 159 (Attribute -> RETURN .)
    IMPORT          reduce using rule 159 (Attribute -> RETURN .)
    PRIVATE         reduce using rule 159 (Attribute -> RETURN .)
    PROTECTED       reduce using rule 159 (Attribute -> RETURN .)
    PUBLIC          reduce using rule 159 (Attribute -> RETURN .)
    CLASS           reduce using rule 159 (Attribute -> RETURN .)
    UNION           reduce using rule 159 (Attribute -> RETURN .)
    DOT             reduce using rule 159 (Attribute -> RETURN .)
    BOOL            reduce using rule 159 (Attribute -> RETURN .)
    SHORT           reduce using rule 159 (Attribute -> RETURN .)
    USHORT          reduce using rule 159 (Attribute -> RETURN .)
    INT             reduce using rule 159 (Attribute -> RETURN .)
    UINT            reduce using rule 159 (Attribute -> RETURN .)
    LONG            reduce using rule 159 (Attribute -> RETURN .)
    ULONG           reduce using rule 159 (Attribute -> RETURN .)
    CHAR            reduce using rule 159 (Attribute -> RETURN .)
    FLOAT           reduce using rule 159 (Attribute -> RETURN .)
    VOID            reduce using rule 159 (Attribute -> RETURN .)
    IDENTIFIER      reduce using rule 159 (Attribute -> RETURN .)
    TYPEOF          reduce using rule 159 (Attribute -> RETURN .)


state 125

    (150) AttributeSpecifier -> Attribute . COLON
    (151) AttributeSpecifier -> Attribute . DeclarationBlock
    (160) DeclarationBlock -> . DeclDef
    (161) DeclarationBlock -> . LBRACE DeclDefs_opt RBRACE
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (150) AttributeSpecifier -> . Attribute COLON
    (151) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (414) Allocator -> . NEW Parameters SEMICOLON
    (415) Allocator -> . NEW Parameters FunctionBody
    (416) Deallocator -> . DELETE Parameters SEMICOLON
    (417) Deallocator -> . DELETE Parameters FunctionBody
    (418) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (152) Attribute -> . VisibilityAttribute
    (153) Attribute -> . STATIC
    (154) Attribute -> . EXTERN
    (155) Attribute -> . FINAL
    (156) Attribute -> . AUTO
    (157) Attribute -> . CONST
    (158) Attribute -> . IMMUTABLE
    (159) Attribute -> . RETURN
    (446) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (448) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (140) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (396) AggregateDeclaration -> . ClassDeclaration
    (397) AggregateDeclaration -> . UnionDeclaration
    (427) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (428) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (429) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (162) VisibilityAttribute -> . PRIVATE
    (163) VisibilityAttribute -> . PROTECTED
    (164) VisibilityAttribute -> . PUBLIC
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (449) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (403) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt AggregateBody
    (398) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (400) UnionDeclaration -> . AnonUnionDeclaration
    (438) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (401) AnonUnionDeclaration -> . UNION AggregateBody
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    COLON           shift and go to state 277
    LBRACE          shift and go to state 280
    SEMICOLON       shift and go to state 111
    NEW             shift and go to state 107
    DELETE          shift and go to state 130
    ALIAS           shift and go to state 122
    MIXIN           shift and go to state 128
    STATIC          shift and go to state 105
    EXTERN          shift and go to state 106
    FINAL           shift and go to state 109
    AUTO            shift and go to state 120
    CONST           shift and go to state 104
    IMMUTABLE       shift and go to state 123
    RETURN          shift and go to state 124
    ENUM            shift and go to state 18
    IMPORT          shift and go to state 27
    PRIVATE         shift and go to state 115
    PROTECTED       shift and go to state 127
    PUBLIC          shift and go to state 126
    CLASS           shift and go to state 13
    UNION           shift and go to state 17
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 108
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    VisibilityAttribute            shift and go to state 113
    AliasThis                      shift and go to state 116
    DeclDef                        shift and go to state 278
    Deallocator                    shift and go to state 118
    AliasDeclaration               shift and go to state 12
    VarDeclarations                shift and go to state 23
    empty                          shift and go to state 65
    DeclarationBlock               shift and go to state 279
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 110
    Declaration                    shift and go to state 121
    AnonymousEnumDeclaration       shift and go to state 20
    AnonUnionDeclaration           shift and go to state 22
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 125
    UnionDeclaration               shift and go to state 25
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 129
    StorageClass                   shift and go to state 28

state 126

    (164) VisibilityAttribute -> PUBLIC .

    COLON           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    LBRACE          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    SEMICOLON       reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    NEW             reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    DELETE          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    ALIAS           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    MIXIN           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    STATIC          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    EXTERN          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    FINAL           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    AUTO            reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    CONST           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    IMMUTABLE       reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    RETURN          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    ENUM            reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    IMPORT          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    PRIVATE         reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    PROTECTED       reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    PUBLIC          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    CLASS           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    UNION           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    DOT             reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    BOOL            reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    SHORT           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    USHORT          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    INT             reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    UINT            reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    LONG            reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    ULONG           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    CHAR            reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    FLOAT           reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    VOID            reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    IDENTIFIER      reduce using rule 164 (VisibilityAttribute -> PUBLIC .)
    TYPEOF          reduce using rule 164 (VisibilityAttribute -> PUBLIC .)


state 127

    (163) VisibilityAttribute -> PROTECTED .

    COLON           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    LBRACE          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    SEMICOLON       reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    NEW             reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    DELETE          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    ALIAS           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    MIXIN           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    STATIC          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    EXTERN          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    FINAL           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    AUTO            reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    CONST           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    IMMUTABLE       reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    RETURN          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    ENUM            reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    IMPORT          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    PRIVATE         reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    PROTECTED       reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    PUBLIC          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    CLASS           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    UNION           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    DOT             reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    BOOL            reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    SHORT           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    USHORT          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    INT             reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    UINT            reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    LONG            reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    ULONG           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    CHAR            reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    FLOAT           reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    VOID            reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    IDENTIFIER      reduce using rule 163 (VisibilityAttribute -> PROTECTED .)
    TYPEOF          reduce using rule 163 (VisibilityAttribute -> PROTECTED .)


state 128

    (33) MixinDeclaration -> MIXIN . LPAREN AssignExpression RPAREN SEMICOLON

    LPAREN          shift and go to state 281


state 129

    (9) DeclDef -> Allocator .

    SEMICOLON       reduce using rule 9 (DeclDef -> Allocator .)
    NEW             reduce using rule 9 (DeclDef -> Allocator .)
    DELETE          reduce using rule 9 (DeclDef -> Allocator .)
    ALIAS           reduce using rule 9 (DeclDef -> Allocator .)
    MIXIN           reduce using rule 9 (DeclDef -> Allocator .)
    STATIC          reduce using rule 9 (DeclDef -> Allocator .)
    EXTERN          reduce using rule 9 (DeclDef -> Allocator .)
    FINAL           reduce using rule 9 (DeclDef -> Allocator .)
    AUTO            reduce using rule 9 (DeclDef -> Allocator .)
    CONST           reduce using rule 9 (DeclDef -> Allocator .)
    IMMUTABLE       reduce using rule 9 (DeclDef -> Allocator .)
    RETURN          reduce using rule 9 (DeclDef -> Allocator .)
    ENUM            reduce using rule 9 (DeclDef -> Allocator .)
    IMPORT          reduce using rule 9 (DeclDef -> Allocator .)
    PRIVATE         reduce using rule 9 (DeclDef -> Allocator .)
    PROTECTED       reduce using rule 9 (DeclDef -> Allocator .)
    PUBLIC          reduce using rule 9 (DeclDef -> Allocator .)
    CLASS           reduce using rule 9 (DeclDef -> Allocator .)
    UNION           reduce using rule 9 (DeclDef -> Allocator .)
    DOT             reduce using rule 9 (DeclDef -> Allocator .)
    BOOL            reduce using rule 9 (DeclDef -> Allocator .)
    SHORT           reduce using rule 9 (DeclDef -> Allocator .)
    USHORT          reduce using rule 9 (DeclDef -> Allocator .)
    INT             reduce using rule 9 (DeclDef -> Allocator .)
    UINT            reduce using rule 9 (DeclDef -> Allocator .)
    LONG            reduce using rule 9 (DeclDef -> Allocator .)
    ULONG           reduce using rule 9 (DeclDef -> Allocator .)
    CHAR            reduce using rule 9 (DeclDef -> Allocator .)
    FLOAT           reduce using rule 9 (DeclDef -> Allocator .)
    VOID            reduce using rule 9 (DeclDef -> Allocator .)
    IDENTIFIER      reduce using rule 9 (DeclDef -> Allocator .)
    TYPEOF          reduce using rule 9 (DeclDef -> Allocator .)
    RBRACE          reduce using rule 9 (DeclDef -> Allocator .)


state 130

    (416) Deallocator -> DELETE . Parameters SEMICOLON
    (417) Deallocator -> DELETE . Parameters FunctionBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 79

    Parameters                     shift and go to state 282

state 131

    (399) UnionDeclaration -> UNION IDENTIFIER AggregateBody .

    SEMICOLON       reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    NEW             reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DELETE          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ALIAS           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    MIXIN           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    STATIC          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    EXTERN          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FINAL           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    AUTO            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CONST           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IMMUTABLE       reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    RETURN          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ENUM            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IMPORT          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PRIVATE         reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PROTECTED       reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PUBLIC          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CLASS           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    UNION           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DOT             reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    BOOL            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    SHORT           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    USHORT          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    INT             reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    UINT            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LONG            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ULONG           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CHAR            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FLOAT           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    VOID            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IDENTIFIER      reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TYPEOF          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    RBRACE          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    $end            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CASE            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DEFAULT         reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LBRACE          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IF              reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    WHILE           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DO              reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FOR             reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    SWITCH          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CONTINUE        reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    BREAK           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    GOTO            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    WITH            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LPAREN          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FOREACH         reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FOREACH_REVERSE reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    UAMPERSAND      reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PLUS_PLUS       reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    MINUS_MINUS     reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TIMES           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    UMINUS          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    UPLUS           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    EXCLAMATION     reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TILDE           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CAST            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    THIS            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    NULL            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TRUE            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FALSE           reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DOLLAR          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    INUMBER         reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DNUMBER         reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LIT_CHAR        reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LIT_STR         reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LBRACKET        reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FUNCTION        reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TYPEID          reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    BODY            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ELSE            reduce using rule 399 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)


state 132

    (398) UnionDeclaration -> UNION IDENTIFIER SEMICOLON .

    SEMICOLON       reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INT             reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    $end            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IF              reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DO              reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TYPEID          reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BODY            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 398 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)


state 133

    (439) AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers . RBRACE

    RBRACE          shift and go to state 283


state 134

    (80) TypeCtors_opt -> TypeCtors .

    DOT             reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    BOOL            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    SHORT           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    USHORT          reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    INT             reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    UINT            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    LONG            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    ULONG           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    CHAR            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    FLOAT           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    VOID            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    IDENTIFIER      reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    TYPEOF          reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    CONST           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    IMMUTABLE       reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    RPAREN          reduce using rule 80 (TypeCtors_opt -> TypeCtors .)


state 135

    (78) TypeCtors -> TypeCtor .
    (79) TypeCtors -> TypeCtor . TypeCtors
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    BOOL            reduce using rule 78 (TypeCtors -> TypeCtor .)
    SHORT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    USHORT          reduce using rule 78 (TypeCtors -> TypeCtor .)
    INT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    UINT            reduce using rule 78 (TypeCtors -> TypeCtor .)
    LONG            reduce using rule 78 (TypeCtors -> TypeCtor .)
    ULONG           reduce using rule 78 (TypeCtors -> TypeCtor .)
    CHAR            reduce using rule 78 (TypeCtors -> TypeCtor .)
    FLOAT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    VOID            reduce using rule 78 (TypeCtors -> TypeCtor .)
    IDENTIFIER      reduce using rule 78 (TypeCtors -> TypeCtor .)
    TYPEOF          reduce using rule 78 (TypeCtors -> TypeCtor .)
    RPAREN          reduce using rule 78 (TypeCtors -> TypeCtor .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]

    TypeCtor                       shift and go to state 135
    TypeCtors                      shift and go to state 284

state 136

    (440) AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers . RBRACE

    RBRACE          shift and go to state 285


state 137

    (75) Type -> TypeCtors_opt . BasicType BasicType2_opt
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 286
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34

state 138

    (433) EnumMembers -> EnumMember .
    (434) EnumMembers -> EnumMember . COMMA
    (435) EnumMembers -> EnumMember . COMMA EnumMembers
    (444) AnonymousEnumMember -> EnumMember .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACE resolved using rule 433 (EnumMembers -> EnumMember .)
    RBRACE          reduce using rule 433 (EnumMembers -> EnumMember .)
    COMMA           shift and go to state 287

  ! COMMA           [ reduce using rule 444 (AnonymousEnumMember -> EnumMember .) ]
  ! RBRACE          [ reduce using rule 444 (AnonymousEnumMember -> EnumMember .) ]


state 139

    (436) EnumMember -> IDENTIFIER .
    (437) EnumMember -> IDENTIFIER . ASSIGN AssignExpression

    COMMA           reduce using rule 436 (EnumMember -> IDENTIFIER .)
    RBRACE          reduce using rule 436 (EnumMember -> IDENTIFIER .)
    ASSIGN          shift and go to state 288


state 140

    (445) AnonymousEnumMember -> Type . IDENTIFIER ASSIGN AssignExpression

    IDENTIFIER      shift and go to state 289


state 141

    (441) AnonymousEnumMembers -> AnonymousEnumMember .
    (442) AnonymousEnumMembers -> AnonymousEnumMember . COMMA
    (443) AnonymousEnumMembers -> AnonymousEnumMember . COMMA AnonymousEnumMembers

    RBRACE          reduce using rule 441 (AnonymousEnumMembers -> AnonymousEnumMember .)
    COMMA           shift and go to state 290


state 142

    (81) TypeCtors_opt -> empty .

    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)
    RPAREN          reduce using rule 81 (TypeCtors_opt -> empty .)


state 143

    (438) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType . LBRACE EnumMembers RBRACE

    LBRACE          shift and go to state 291


state 144

    (430) EnumBaseType -> Type .

    LBRACE          reduce using rule 430 (EnumBaseType -> Type .)
    SEMICOLON       reduce using rule 430 (EnumBaseType -> Type .)


state 145

    (431) EnumBody -> LBRACE . EnumMembers RBRACE
    (433) EnumMembers -> . EnumMember
    (434) EnumMembers -> . EnumMember COMMA
    (435) EnumMembers -> . EnumMember COMMA EnumMembers
    (436) EnumMember -> . IDENTIFIER
    (437) EnumMember -> . IDENTIFIER ASSIGN AssignExpression

    IDENTIFIER      shift and go to state 139

    EnumMembers                    shift and go to state 292
    EnumMember                     shift and go to state 293

state 146

    (432) EnumBody -> SEMICOLON .

    ALIAS           reduce using rule 432 (EnumBody -> SEMICOLON .)
    ENUM            reduce using rule 432 (EnumBody -> SEMICOLON .)
    IMPORT          reduce using rule 432 (EnumBody -> SEMICOLON .)
    STATIC          reduce using rule 432 (EnumBody -> SEMICOLON .)
    CLASS           reduce using rule 432 (EnumBody -> SEMICOLON .)
    UNION           reduce using rule 432 (EnumBody -> SEMICOLON .)
    EXTERN          reduce using rule 432 (EnumBody -> SEMICOLON .)
    FINAL           reduce using rule 432 (EnumBody -> SEMICOLON .)
    AUTO            reduce using rule 432 (EnumBody -> SEMICOLON .)
    CONST           reduce using rule 432 (EnumBody -> SEMICOLON .)
    IMMUTABLE       reduce using rule 432 (EnumBody -> SEMICOLON .)
    DOT             reduce using rule 432 (EnumBody -> SEMICOLON .)
    BOOL            reduce using rule 432 (EnumBody -> SEMICOLON .)
    SHORT           reduce using rule 432 (EnumBody -> SEMICOLON .)
    USHORT          reduce using rule 432 (EnumBody -> SEMICOLON .)
    INT             reduce using rule 432 (EnumBody -> SEMICOLON .)
    UINT            reduce using rule 432 (EnumBody -> SEMICOLON .)
    LONG            reduce using rule 432 (EnumBody -> SEMICOLON .)
    ULONG           reduce using rule 432 (EnumBody -> SEMICOLON .)
    CHAR            reduce using rule 432 (EnumBody -> SEMICOLON .)
    FLOAT           reduce using rule 432 (EnumBody -> SEMICOLON .)
    VOID            reduce using rule 432 (EnumBody -> SEMICOLON .)
    IDENTIFIER      reduce using rule 432 (EnumBody -> SEMICOLON .)
    TYPEOF          reduce using rule 432 (EnumBody -> SEMICOLON .)
    $end            reduce using rule 432 (EnumBody -> SEMICOLON .)
    SEMICOLON       reduce using rule 432 (EnumBody -> SEMICOLON .)
    NEW             reduce using rule 432 (EnumBody -> SEMICOLON .)
    DELETE          reduce using rule 432 (EnumBody -> SEMICOLON .)
    MIXIN           reduce using rule 432 (EnumBody -> SEMICOLON .)
    RETURN          reduce using rule 432 (EnumBody -> SEMICOLON .)
    PRIVATE         reduce using rule 432 (EnumBody -> SEMICOLON .)
    PROTECTED       reduce using rule 432 (EnumBody -> SEMICOLON .)
    PUBLIC          reduce using rule 432 (EnumBody -> SEMICOLON .)
    RBRACE          reduce using rule 432 (EnumBody -> SEMICOLON .)
    CASE            reduce using rule 432 (EnumBody -> SEMICOLON .)
    DEFAULT         reduce using rule 432 (EnumBody -> SEMICOLON .)
    LBRACE          reduce using rule 432 (EnumBody -> SEMICOLON .)
    IF              reduce using rule 432 (EnumBody -> SEMICOLON .)
    WHILE           reduce using rule 432 (EnumBody -> SEMICOLON .)
    DO              reduce using rule 432 (EnumBody -> SEMICOLON .)
    FOR             reduce using rule 432 (EnumBody -> SEMICOLON .)
    SWITCH          reduce using rule 432 (EnumBody -> SEMICOLON .)
    CONTINUE        reduce using rule 432 (EnumBody -> SEMICOLON .)
    BREAK           reduce using rule 432 (EnumBody -> SEMICOLON .)
    GOTO            reduce using rule 432 (EnumBody -> SEMICOLON .)
    WITH            reduce using rule 432 (EnumBody -> SEMICOLON .)
    LPAREN          reduce using rule 432 (EnumBody -> SEMICOLON .)
    FOREACH         reduce using rule 432 (EnumBody -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 432 (EnumBody -> SEMICOLON .)
    UAMPERSAND      reduce using rule 432 (EnumBody -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 432 (EnumBody -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 432 (EnumBody -> SEMICOLON .)
    TIMES           reduce using rule 432 (EnumBody -> SEMICOLON .)
    UMINUS          reduce using rule 432 (EnumBody -> SEMICOLON .)
    UPLUS           reduce using rule 432 (EnumBody -> SEMICOLON .)
    EXCLAMATION     reduce using rule 432 (EnumBody -> SEMICOLON .)
    TILDE           reduce using rule 432 (EnumBody -> SEMICOLON .)
    CAST            reduce using rule 432 (EnumBody -> SEMICOLON .)
    THIS            reduce using rule 432 (EnumBody -> SEMICOLON .)
    NULL            reduce using rule 432 (EnumBody -> SEMICOLON .)
    TRUE            reduce using rule 432 (EnumBody -> SEMICOLON .)
    FALSE           reduce using rule 432 (EnumBody -> SEMICOLON .)
    DOLLAR          reduce using rule 432 (EnumBody -> SEMICOLON .)
    INUMBER         reduce using rule 432 (EnumBody -> SEMICOLON .)
    DNUMBER         reduce using rule 432 (EnumBody -> SEMICOLON .)
    LIT_CHAR        reduce using rule 432 (EnumBody -> SEMICOLON .)
    LIT_STR         reduce using rule 432 (EnumBody -> SEMICOLON .)
    LBRACKET        reduce using rule 432 (EnumBody -> SEMICOLON .)
    FUNCTION        reduce using rule 432 (EnumBody -> SEMICOLON .)
    TYPEID          reduce using rule 432 (EnumBody -> SEMICOLON .)
    BODY            reduce using rule 432 (EnumBody -> SEMICOLON .)
    ELSE            reduce using rule 432 (EnumBody -> SEMICOLON .)


state 147

    (428) EnumDeclaration -> ENUM IDENTIFIER COLON . EnumBaseType EnumBody
    (430) EnumBaseType -> . Type
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    EnumBaseType                   shift and go to state 294
    Type                           shift and go to state 144
    empty                          shift and go to state 142

state 148

    (427) EnumDeclaration -> ENUM IDENTIFIER EnumBody .

    SEMICOLON       reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    NEW             reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DELETE          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ALIAS           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    MIXIN           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    STATIC          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    EXTERN          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FINAL           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    AUTO            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CONST           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IMMUTABLE       reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    RETURN          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ENUM            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IMPORT          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PRIVATE         reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PROTECTED       reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PUBLIC          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CLASS           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    UNION           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DOT             reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    BOOL            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    SHORT           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    USHORT          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    INT             reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    UINT            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LONG            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ULONG           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CHAR            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FLOAT           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    VOID            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IDENTIFIER      reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TYPEOF          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    RBRACE          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    $end            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CASE            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DEFAULT         reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LBRACE          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IF              reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    WHILE           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DO              reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FOR             reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    SWITCH          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CONTINUE        reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    BREAK           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    GOTO            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    WITH            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LPAREN          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FOREACH         reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FOREACH_REVERSE reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    UAMPERSAND      reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PLUS_PLUS       reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    MINUS_MINUS     reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TIMES           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    UMINUS          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    UPLUS           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    EXCLAMATION     reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TILDE           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CAST            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    THIS            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    NULL            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TRUE            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FALSE           reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DOLLAR          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    INUMBER         reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DNUMBER         reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LIT_CHAR        reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LIT_STR         reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LBRACKET        reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FUNCTION        reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TYPEID          reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    BODY            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ELSE            reduce using rule 427 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)


state 149

    (140) AliasDeclaration -> ALIAS StorageClasses_opt BasicType . Declarators SEMICOLON
    (141) AliasDeclaration -> ALIAS StorageClasses_opt BasicType . FuncDeclarator SEMICOLON
    (41) Declarators -> . DeclaratorInitializer
    (42) Declarators -> . DeclaratorInitializer COMMA DeclaratorIdentifierList
    (450) FuncDeclarator -> . BasicType2_opt IDENTIFIER FuncDeclaratorSuffix
    (43) DeclaratorInitializer -> . VarDeclarator
    (44) DeclaratorInitializer -> . VarDeclarator ASSIGN Initializer
    (45) DeclaratorInitializer -> . AltDeclarator ASSIGN Initializer
    (46) DeclaratorInitializer -> . AltDeclarator
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (59) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (60) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 485 (empty -> .)
    LPAREN          reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

    VarDeclarator                  shift and go to state 82
    BasicType2X                    shift and go to state 84
    DeclaratorInitializer          shift and go to state 86
    Declarators                    shift and go to state 295
    AltDeclarator                  shift and go to state 88
    empty                          shift and go to state 89
    FuncDeclarator                 shift and go to state 296
    BasicType2_opt                 shift and go to state 85
    BasicType2                     shift and go to state 93

state 150

    (144) AliasDeclarationX -> AliasDeclarationX COMMA . AliasDeclarationY
    (145) AliasDeclarationY -> . IDENTIFIER ASSIGN StorageClasses_opt Type
    (146) AliasDeclarationY -> . IDENTIFIER ASSIGN FunctionLiteral

    IDENTIFIER      shift and go to state 64

    AliasDeclarationY              shift and go to state 297

state 151

    (142) AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .

    SEMICOLON       reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    NEW             reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DELETE          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ALIAS           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    MIXIN           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    STATIC          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    EXTERN          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FINAL           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    AUTO            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CONST           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IMMUTABLE       reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    RETURN          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ENUM            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IMPORT          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PRIVATE         reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PROTECTED       reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PUBLIC          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CLASS           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    UNION           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DOT             reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    BOOL            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    SHORT           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    USHORT          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    INT             reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    UINT            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LONG            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ULONG           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CHAR            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FLOAT           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    VOID            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IDENTIFIER      reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TYPEOF          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    RBRACE          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CASE            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DEFAULT         reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LBRACE          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IF              reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    WHILE           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DO              reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FOR             reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    SWITCH          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CONTINUE        reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    BREAK           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    GOTO            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    WITH            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LPAREN          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FOREACH         reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FOREACH_REVERSE reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    UAMPERSAND      reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PLUS_PLUS       reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    MINUS_MINUS     reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TIMES           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    UMINUS          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    UPLUS           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    EXCLAMATION     reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TILDE           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CAST            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    THIS            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    NULL            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TRUE            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FALSE           reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DOLLAR          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    INUMBER         reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DNUMBER         reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LIT_CHAR        reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LIT_STR         reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LBRACKET        reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FUNCTION        reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TYPEID          reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    BODY            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ELSE            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    $end            reduce using rule 142 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)


state 152

    (145) AliasDeclarationY -> IDENTIFIER ASSIGN . StorageClasses_opt Type
    (146) AliasDeclarationY -> IDENTIFIER ASSIGN . FunctionLiteral
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FUNCTION        shift and go to state 207
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    ENUM            shift and go to state 66
    STATIC          shift and go to state 59
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 21
    LPAREN          shift and go to state 79
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    FunctionLiteralBody            shift and go to state 233
    Parameters                     shift and go to state 201
    ParameterMemberAttributes      shift and go to state 202
    FunctionLiteral                shift and go to state 299
    BodyStatement                  shift and go to state 225
    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 63
    BlockStatement                 shift and go to state 189
    StorageClasses_opt             shift and go to state 298
    empty                          shift and go to state 65

state 153

    (26) Import -> ModuleAliasIdentifier ASSIGN . ModuleFullyQualifiedName
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 301

    Packages                       shift and go to state 74
    PackageName                    shift and go to state 71
    ModuleFullyQualifiedName       shift and go to state 300
    ModuleName                     shift and go to state 75

state 154

    (20) ImportDeclaration -> IMPORT ImportList SEMICOLON .

    SEMICOLON       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    NEW             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DELETE          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ALIAS           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    MIXIN           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    STATIC          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    EXTERN          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FINAL           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    AUTO            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CONST           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IMMUTABLE       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    RETURN          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ENUM            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IMPORT          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PRIVATE         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PROTECTED       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PUBLIC          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CLASS           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    UNION           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DOT             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    BOOL            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    SHORT           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    USHORT          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    INT             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    UINT            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LONG            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ULONG           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CHAR            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FLOAT           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    VOID            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TYPEOF          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    RBRACE          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CASE            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DEFAULT         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LBRACE          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IF              reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    WHILE           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DO              reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FOR             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    SWITCH          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CONTINUE        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    BREAK           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    GOTO            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    WITH            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LPAREN          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FOREACH         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FOREACH_REVERSE reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    UAMPERSAND      reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PLUS_PLUS       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    MINUS_MINUS     reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TIMES           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    UMINUS          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    UPLUS           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    EXCLAMATION     reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TILDE           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CAST            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    THIS            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    NULL            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TRUE            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FALSE           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DOLLAR          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    INUMBER         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DNUMBER         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LIT_CHAR        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LIT_STR         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LBRACKET        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FUNCTION        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TYPEID          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    BODY            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ELSE            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    $end            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)


state 155

    (27) ImportBindings -> Import COLON . ImportBindList
    (28) ImportBindList -> . ImportBind
    (29) ImportBindList -> . ImportBind COMMA ImportBindList
    (30) ImportBind -> . IDENTIFIER
    (31) ImportBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 304

    ImportBindList                 shift and go to state 302
    ImportBind                     shift and go to state 303

state 156

    (24) ImportList -> Import COMMA . ImportList
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 72

    ModuleFullyQualifiedName       shift and go to state 67
    ImportBindings                 shift and go to state 68
    ModuleAliasIdentifier          shift and go to state 69
    ImportList                     shift and go to state 305
    PackageName                    shift and go to state 71
    ModuleName                     shift and go to state 75
    Import                         shift and go to state 73
    Packages                       shift and go to state 74

state 157

    (15) ModuleFullyQualifiedName -> Packages DOT . ModuleName
    (18) Packages -> Packages DOT . PackageName
    (16) ModuleName -> . IDENTIFIER
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 301

    PackageName                    shift and go to state 306
    ModuleName                     shift and go to state 307

state 158

    (449) AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .

    SEMICOLON       reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CASE            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DEFAULT         reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LBRACE          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IDENTIFIER      reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IF              reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    WHILE           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DO              reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FOR             reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    SWITCH          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FINAL           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CONTINUE        reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    BREAK           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    RETURN          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    GOTO            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    WITH            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    MIXIN           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IMPORT          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    STATIC          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LPAREN          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FOREACH         reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FOREACH_REVERSE reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ENUM            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    EXTERN          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    AUTO            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CONST           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IMMUTABLE       reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    UAMPERSAND      reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PLUS_PLUS       reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    MINUS_MINUS     reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TIMES           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    UMINUS          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    UPLUS           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    EXCLAMATION     reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TILDE           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CAST            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DOT             reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    THIS            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    NULL            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TRUE            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FALSE           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DOLLAR          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    INUMBER         reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DNUMBER         reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LIT_CHAR        reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LIT_STR         reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LBRACKET        reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FUNCTION        reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    NEW             reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    BOOL            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    SHORT           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    USHORT          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    INT             reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    UINT            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LONG            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ULONG           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CHAR            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FLOAT           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    VOID            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TYPEOF          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TYPEID          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    BODY            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ALIAS           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CLASS           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    UNION           reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    RBRACE          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ELSE            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DELETE          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PRIVATE         reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PROTECTED       reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PUBLIC          reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    $end            reduce using rule 449 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)


state 159

    (324) BlockStatement -> LBRACE . RBRACE
    (325) BlockStatement -> LBRACE . StatementList RBRACE
    (326) StatementList -> . Statement
    (327) StatementList -> . Statement StatementList
    (286) Statement -> . SEMICOLON
    (287) Statement -> . NonEmptyStatement
    (288) Statement -> . ScopeBlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (320) ScopeBlockStatement -> . BlockStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACE          shift and go to state 356
    SEMICOLON       shift and go to state 336
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    LBRACE          shift and go to state 159
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    Statement                      shift and go to state 309
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 312
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    StatementList                  shift and go to state 315
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 348
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ScopeBlockStatement            shift and go to state 357
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 160

    (480) BodyStatement -> BODY . BlockStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE

    LBRACE          shift and go to state 159

    BlockStatement                 shift and go to state 364

state 161

    (478) FunctionBody -> BlockStatement .

    ALIAS           reduce using rule 478 (FunctionBody -> BlockStatement .)
    ENUM            reduce using rule 478 (FunctionBody -> BlockStatement .)
    IMPORT          reduce using rule 478 (FunctionBody -> BlockStatement .)
    STATIC          reduce using rule 478 (FunctionBody -> BlockStatement .)
    CLASS           reduce using rule 478 (FunctionBody -> BlockStatement .)
    UNION           reduce using rule 478 (FunctionBody -> BlockStatement .)
    EXTERN          reduce using rule 478 (FunctionBody -> BlockStatement .)
    FINAL           reduce using rule 478 (FunctionBody -> BlockStatement .)
    AUTO            reduce using rule 478 (FunctionBody -> BlockStatement .)
    CONST           reduce using rule 478 (FunctionBody -> BlockStatement .)
    IMMUTABLE       reduce using rule 478 (FunctionBody -> BlockStatement .)
    DOT             reduce using rule 478 (FunctionBody -> BlockStatement .)
    BOOL            reduce using rule 478 (FunctionBody -> BlockStatement .)
    SHORT           reduce using rule 478 (FunctionBody -> BlockStatement .)
    USHORT          reduce using rule 478 (FunctionBody -> BlockStatement .)
    INT             reduce using rule 478 (FunctionBody -> BlockStatement .)
    UINT            reduce using rule 478 (FunctionBody -> BlockStatement .)
    LONG            reduce using rule 478 (FunctionBody -> BlockStatement .)
    ULONG           reduce using rule 478 (FunctionBody -> BlockStatement .)
    CHAR            reduce using rule 478 (FunctionBody -> BlockStatement .)
    FLOAT           reduce using rule 478 (FunctionBody -> BlockStatement .)
    VOID            reduce using rule 478 (FunctionBody -> BlockStatement .)
    IDENTIFIER      reduce using rule 478 (FunctionBody -> BlockStatement .)
    TYPEOF          reduce using rule 478 (FunctionBody -> BlockStatement .)
    $end            reduce using rule 478 (FunctionBody -> BlockStatement .)
    SEMICOLON       reduce using rule 478 (FunctionBody -> BlockStatement .)
    NEW             reduce using rule 478 (FunctionBody -> BlockStatement .)
    DELETE          reduce using rule 478 (FunctionBody -> BlockStatement .)
    MIXIN           reduce using rule 478 (FunctionBody -> BlockStatement .)
    RETURN          reduce using rule 478 (FunctionBody -> BlockStatement .)
    PRIVATE         reduce using rule 478 (FunctionBody -> BlockStatement .)
    PROTECTED       reduce using rule 478 (FunctionBody -> BlockStatement .)
    PUBLIC          reduce using rule 478 (FunctionBody -> BlockStatement .)
    RBRACE          reduce using rule 478 (FunctionBody -> BlockStatement .)
    CASE            reduce using rule 478 (FunctionBody -> BlockStatement .)
    DEFAULT         reduce using rule 478 (FunctionBody -> BlockStatement .)
    LBRACE          reduce using rule 478 (FunctionBody -> BlockStatement .)
    IF              reduce using rule 478 (FunctionBody -> BlockStatement .)
    WHILE           reduce using rule 478 (FunctionBody -> BlockStatement .)
    DO              reduce using rule 478 (FunctionBody -> BlockStatement .)
    FOR             reduce using rule 478 (FunctionBody -> BlockStatement .)
    SWITCH          reduce using rule 478 (FunctionBody -> BlockStatement .)
    CONTINUE        reduce using rule 478 (FunctionBody -> BlockStatement .)
    BREAK           reduce using rule 478 (FunctionBody -> BlockStatement .)
    GOTO            reduce using rule 478 (FunctionBody -> BlockStatement .)
    WITH            reduce using rule 478 (FunctionBody -> BlockStatement .)
    LPAREN          reduce using rule 478 (FunctionBody -> BlockStatement .)
    FOREACH         reduce using rule 478 (FunctionBody -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 478 (FunctionBody -> BlockStatement .)
    UAMPERSAND      reduce using rule 478 (FunctionBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 478 (FunctionBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 478 (FunctionBody -> BlockStatement .)
    TIMES           reduce using rule 478 (FunctionBody -> BlockStatement .)
    UMINUS          reduce using rule 478 (FunctionBody -> BlockStatement .)
    UPLUS           reduce using rule 478 (FunctionBody -> BlockStatement .)
    EXCLAMATION     reduce using rule 478 (FunctionBody -> BlockStatement .)
    TILDE           reduce using rule 478 (FunctionBody -> BlockStatement .)
    CAST            reduce using rule 478 (FunctionBody -> BlockStatement .)
    THIS            reduce using rule 478 (FunctionBody -> BlockStatement .)
    NULL            reduce using rule 478 (FunctionBody -> BlockStatement .)
    TRUE            reduce using rule 478 (FunctionBody -> BlockStatement .)
    FALSE           reduce using rule 478 (FunctionBody -> BlockStatement .)
    DOLLAR          reduce using rule 478 (FunctionBody -> BlockStatement .)
    INUMBER         reduce using rule 478 (FunctionBody -> BlockStatement .)
    DNUMBER         reduce using rule 478 (FunctionBody -> BlockStatement .)
    LIT_CHAR        reduce using rule 478 (FunctionBody -> BlockStatement .)
    LIT_STR         reduce using rule 478 (FunctionBody -> BlockStatement .)
    LBRACKET        reduce using rule 478 (FunctionBody -> BlockStatement .)
    FUNCTION        reduce using rule 478 (FunctionBody -> BlockStatement .)
    TYPEID          reduce using rule 478 (FunctionBody -> BlockStatement .)
    BODY            reduce using rule 478 (FunctionBody -> BlockStatement .)
    ELSE            reduce using rule 478 (FunctionBody -> BlockStatement .)


state 162

    (479) FunctionBody -> BodyStatement .

    ALIAS           reduce using rule 479 (FunctionBody -> BodyStatement .)
    ENUM            reduce using rule 479 (FunctionBody -> BodyStatement .)
    IMPORT          reduce using rule 479 (FunctionBody -> BodyStatement .)
    STATIC          reduce using rule 479 (FunctionBody -> BodyStatement .)
    CLASS           reduce using rule 479 (FunctionBody -> BodyStatement .)
    UNION           reduce using rule 479 (FunctionBody -> BodyStatement .)
    EXTERN          reduce using rule 479 (FunctionBody -> BodyStatement .)
    FINAL           reduce using rule 479 (FunctionBody -> BodyStatement .)
    AUTO            reduce using rule 479 (FunctionBody -> BodyStatement .)
    CONST           reduce using rule 479 (FunctionBody -> BodyStatement .)
    IMMUTABLE       reduce using rule 479 (FunctionBody -> BodyStatement .)
    DOT             reduce using rule 479 (FunctionBody -> BodyStatement .)
    BOOL            reduce using rule 479 (FunctionBody -> BodyStatement .)
    SHORT           reduce using rule 479 (FunctionBody -> BodyStatement .)
    USHORT          reduce using rule 479 (FunctionBody -> BodyStatement .)
    INT             reduce using rule 479 (FunctionBody -> BodyStatement .)
    UINT            reduce using rule 479 (FunctionBody -> BodyStatement .)
    LONG            reduce using rule 479 (FunctionBody -> BodyStatement .)
    ULONG           reduce using rule 479 (FunctionBody -> BodyStatement .)
    CHAR            reduce using rule 479 (FunctionBody -> BodyStatement .)
    FLOAT           reduce using rule 479 (FunctionBody -> BodyStatement .)
    VOID            reduce using rule 479 (FunctionBody -> BodyStatement .)
    IDENTIFIER      reduce using rule 479 (FunctionBody -> BodyStatement .)
    TYPEOF          reduce using rule 479 (FunctionBody -> BodyStatement .)
    $end            reduce using rule 479 (FunctionBody -> BodyStatement .)
    SEMICOLON       reduce using rule 479 (FunctionBody -> BodyStatement .)
    NEW             reduce using rule 479 (FunctionBody -> BodyStatement .)
    DELETE          reduce using rule 479 (FunctionBody -> BodyStatement .)
    MIXIN           reduce using rule 479 (FunctionBody -> BodyStatement .)
    RETURN          reduce using rule 479 (FunctionBody -> BodyStatement .)
    PRIVATE         reduce using rule 479 (FunctionBody -> BodyStatement .)
    PROTECTED       reduce using rule 479 (FunctionBody -> BodyStatement .)
    PUBLIC          reduce using rule 479 (FunctionBody -> BodyStatement .)
    RBRACE          reduce using rule 479 (FunctionBody -> BodyStatement .)
    CASE            reduce using rule 479 (FunctionBody -> BodyStatement .)
    DEFAULT         reduce using rule 479 (FunctionBody -> BodyStatement .)
    LBRACE          reduce using rule 479 (FunctionBody -> BodyStatement .)
    IF              reduce using rule 479 (FunctionBody -> BodyStatement .)
    WHILE           reduce using rule 479 (FunctionBody -> BodyStatement .)
    DO              reduce using rule 479 (FunctionBody -> BodyStatement .)
    FOR             reduce using rule 479 (FunctionBody -> BodyStatement .)
    SWITCH          reduce using rule 479 (FunctionBody -> BodyStatement .)
    CONTINUE        reduce using rule 479 (FunctionBody -> BodyStatement .)
    BREAK           reduce using rule 479 (FunctionBody -> BodyStatement .)
    GOTO            reduce using rule 479 (FunctionBody -> BodyStatement .)
    WITH            reduce using rule 479 (FunctionBody -> BodyStatement .)
    LPAREN          reduce using rule 479 (FunctionBody -> BodyStatement .)
    FOREACH         reduce using rule 479 (FunctionBody -> BodyStatement .)
    FOREACH_REVERSE reduce using rule 479 (FunctionBody -> BodyStatement .)
    UAMPERSAND      reduce using rule 479 (FunctionBody -> BodyStatement .)
    PLUS_PLUS       reduce using rule 479 (FunctionBody -> BodyStatement .)
    MINUS_MINUS     reduce using rule 479 (FunctionBody -> BodyStatement .)
    TIMES           reduce using rule 479 (FunctionBody -> BodyStatement .)
    UMINUS          reduce using rule 479 (FunctionBody -> BodyStatement .)
    UPLUS           reduce using rule 479 (FunctionBody -> BodyStatement .)
    EXCLAMATION     reduce using rule 479 (FunctionBody -> BodyStatement .)
    TILDE           reduce using rule 479 (FunctionBody -> BodyStatement .)
    CAST            reduce using rule 479 (FunctionBody -> BodyStatement .)
    THIS            reduce using rule 479 (FunctionBody -> BodyStatement .)
    NULL            reduce using rule 479 (FunctionBody -> BodyStatement .)
    TRUE            reduce using rule 479 (FunctionBody -> BodyStatement .)
    FALSE           reduce using rule 479 (FunctionBody -> BodyStatement .)
    DOLLAR          reduce using rule 479 (FunctionBody -> BodyStatement .)
    INUMBER         reduce using rule 479 (FunctionBody -> BodyStatement .)
    DNUMBER         reduce using rule 479 (FunctionBody -> BodyStatement .)
    LIT_CHAR        reduce using rule 479 (FunctionBody -> BodyStatement .)
    LIT_STR         reduce using rule 479 (FunctionBody -> BodyStatement .)
    LBRACKET        reduce using rule 479 (FunctionBody -> BodyStatement .)
    FUNCTION        reduce using rule 479 (FunctionBody -> BodyStatement .)
    TYPEID          reduce using rule 479 (FunctionBody -> BodyStatement .)
    BODY            reduce using rule 479 (FunctionBody -> BodyStatement .)
    ELSE            reduce using rule 479 (FunctionBody -> BodyStatement .)


state 163

    (477) MemberFunctionAttribute -> RETURN .

    CONST           reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    IMMUTABLE       reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    RETURN          reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    LBRACE          reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    BODY            reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    SEMICOLON       reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    ASSIGN          reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    COMMA           reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    RPAREN          reduce using rule 477 (MemberFunctionAttribute -> RETURN .)
    ELLIPSIS        reduce using rule 477 (MemberFunctionAttribute -> RETURN .)


state 164

    (475) MemberFunctionAttribute -> CONST .

    CONST           reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    IMMUTABLE       reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    RETURN          reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    LBRACE          reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    BODY            reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    SEMICOLON       reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    ASSIGN          reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    COMMA           reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    RPAREN          reduce using rule 475 (MemberFunctionAttribute -> CONST .)
    ELLIPSIS        reduce using rule 475 (MemberFunctionAttribute -> CONST .)


state 165

    (451) FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .

    LBRACE          reduce using rule 451 (FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    BODY            reduce using rule 451 (FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    SEMICOLON       reduce using rule 451 (FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)


state 166

    (471) MemberFunctionAttributes -> MemberFunctionAttribute .
    (472) MemberFunctionAttributes -> MemberFunctionAttribute . MemberFunctionAttributes
    (471) MemberFunctionAttributes -> . MemberFunctionAttribute
    (472) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (475) MemberFunctionAttribute -> . CONST
    (476) MemberFunctionAttribute -> . IMMUTABLE
    (477) MemberFunctionAttribute -> . RETURN

    LBRACE          reduce using rule 471 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    BODY            reduce using rule 471 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    SEMICOLON       reduce using rule 471 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    ASSIGN          reduce using rule 471 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    COMMA           reduce using rule 471 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    RPAREN          reduce using rule 471 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    ELLIPSIS        reduce using rule 471 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    CONST           shift and go to state 164
    IMMUTABLE       shift and go to state 168
    RETURN          shift and go to state 163

    MemberFunctionAttribute        shift and go to state 166
    MemberFunctionAttributes       shift and go to state 365

state 167

    (473) MemberFunctionAttributes_opt -> MemberFunctionAttributes .

    LBRACE          reduce using rule 473 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    BODY            reduce using rule 473 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    SEMICOLON       reduce using rule 473 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    ASSIGN          reduce using rule 473 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    COMMA           reduce using rule 473 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    RPAREN          reduce using rule 473 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    ELLIPSIS        reduce using rule 473 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)


state 168

    (476) MemberFunctionAttribute -> IMMUTABLE .

    CONST           reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    RETURN          reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    LBRACE          reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    BODY            reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    SEMICOLON       reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    ASSIGN          reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    COMMA           reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    RPAREN          reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)
    ELLIPSIS        reduce using rule 476 (MemberFunctionAttribute -> IMMUTABLE .)


state 169

    (474) MemberFunctionAttributes_opt -> empty .

    LBRACE          reduce using rule 474 (MemberFunctionAttributes_opt -> empty .)
    BODY            reduce using rule 474 (MemberFunctionAttributes_opt -> empty .)
    SEMICOLON       reduce using rule 474 (MemberFunctionAttributes_opt -> empty .)
    ASSIGN          reduce using rule 474 (MemberFunctionAttributes_opt -> empty .)
    COMMA           reduce using rule 474 (MemberFunctionAttributes_opt -> empty .)
    RPAREN          reduce using rule 474 (MemberFunctionAttributes_opt -> empty .)
    ELLIPSIS        reduce using rule 474 (MemberFunctionAttributes_opt -> empty .)


state 170

    (456) ParameterList_opt -> ParameterList .

    RPAREN          reduce using rule 456 (ParameterList_opt -> ParameterList .)


state 171

    (452) Parameters -> LPAREN ParameterList_opt . RPAREN

    RPAREN          shift and go to state 366


state 172

    (467) InOutX -> FINAL .

    AUTO            reduce using rule 467 (InOutX -> FINAL .)
    FINAL           reduce using rule 467 (InOutX -> FINAL .)
    SCOPE           reduce using rule 467 (InOutX -> FINAL .)
    CONST           reduce using rule 467 (InOutX -> FINAL .)
    IMMUTABLE       reduce using rule 467 (InOutX -> FINAL .)
    DOT             reduce using rule 467 (InOutX -> FINAL .)
    BOOL            reduce using rule 467 (InOutX -> FINAL .)
    SHORT           reduce using rule 467 (InOutX -> FINAL .)
    USHORT          reduce using rule 467 (InOutX -> FINAL .)
    INT             reduce using rule 467 (InOutX -> FINAL .)
    UINT            reduce using rule 467 (InOutX -> FINAL .)
    LONG            reduce using rule 467 (InOutX -> FINAL .)
    ULONG           reduce using rule 467 (InOutX -> FINAL .)
    CHAR            reduce using rule 467 (InOutX -> FINAL .)
    FLOAT           reduce using rule 467 (InOutX -> FINAL .)
    VOID            reduce using rule 467 (InOutX -> FINAL .)
    IDENTIFIER      reduce using rule 467 (InOutX -> FINAL .)
    TYPEOF          reduce using rule 467 (InOutX -> FINAL .)


state 173

    (453) ParameterList -> Parameter .
    (454) ParameterList -> Parameter . COMMA ParameterList

    RPAREN          reduce using rule 453 (ParameterList -> Parameter .)
    COMMA           shift and go to state 367


state 174

    (463) InOut -> InOutX .

    AUTO            reduce using rule 463 (InOut -> InOutX .)
    FINAL           reduce using rule 463 (InOut -> InOutX .)
    SCOPE           reduce using rule 463 (InOut -> InOutX .)
    CONST           reduce using rule 463 (InOut -> InOutX .)
    IMMUTABLE       reduce using rule 463 (InOut -> InOutX .)
    DOT             reduce using rule 463 (InOut -> InOutX .)
    BOOL            reduce using rule 463 (InOut -> InOutX .)
    SHORT           reduce using rule 463 (InOut -> InOutX .)
    USHORT          reduce using rule 463 (InOut -> InOutX .)
    INT             reduce using rule 463 (InOut -> InOutX .)
    UINT            reduce using rule 463 (InOut -> InOutX .)
    LONG            reduce using rule 463 (InOut -> InOutX .)
    ULONG           reduce using rule 463 (InOut -> InOutX .)
    CHAR            reduce using rule 463 (InOut -> InOutX .)
    FLOAT           reduce using rule 463 (InOut -> InOutX .)
    VOID            reduce using rule 463 (InOut -> InOutX .)
    IDENTIFIER      reduce using rule 463 (InOut -> InOutX .)
    TYPEOF          reduce using rule 463 (InOut -> InOutX .)


state 175

    (455) ParameterList -> ELLIPSIS .

    RPAREN          reduce using rule 455 (ParameterList -> ELLIPSIS .)


state 176

    (469) InOut_opt -> InOut .
    (464) InOut -> InOut . InOutX
    (465) InOutX -> . AUTO
    (466) InOutX -> . TypeCtor
    (467) InOutX -> . FINAL
    (468) InOutX -> . SCOPE
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 469 (InOut_opt -> InOut .)
    BOOL            reduce using rule 469 (InOut_opt -> InOut .)
    SHORT           reduce using rule 469 (InOut_opt -> InOut .)
    USHORT          reduce using rule 469 (InOut_opt -> InOut .)
    INT             reduce using rule 469 (InOut_opt -> InOut .)
    UINT            reduce using rule 469 (InOut_opt -> InOut .)
    LONG            reduce using rule 469 (InOut_opt -> InOut .)
    ULONG           reduce using rule 469 (InOut_opt -> InOut .)
    CHAR            reduce using rule 469 (InOut_opt -> InOut .)
    FLOAT           reduce using rule 469 (InOut_opt -> InOut .)
    VOID            reduce using rule 469 (InOut_opt -> InOut .)
    IDENTIFIER      reduce using rule 469 (InOut_opt -> InOut .)
    TYPEOF          reduce using rule 469 (InOut_opt -> InOut .)
    AUTO            shift and go to state 177
    FINAL           shift and go to state 172
    SCOPE           shift and go to state 179
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 469 (InOut_opt -> InOut .) ]
  ! IMMUTABLE       [ reduce using rule 469 (InOut_opt -> InOut .) ]

    TypeCtor                       shift and go to state 178
    InOutX                         shift and go to state 368

state 177

    (465) InOutX -> AUTO .

    AUTO            reduce using rule 465 (InOutX -> AUTO .)
    FINAL           reduce using rule 465 (InOutX -> AUTO .)
    SCOPE           reduce using rule 465 (InOutX -> AUTO .)
    CONST           reduce using rule 465 (InOutX -> AUTO .)
    IMMUTABLE       reduce using rule 465 (InOutX -> AUTO .)
    DOT             reduce using rule 465 (InOutX -> AUTO .)
    BOOL            reduce using rule 465 (InOutX -> AUTO .)
    SHORT           reduce using rule 465 (InOutX -> AUTO .)
    USHORT          reduce using rule 465 (InOutX -> AUTO .)
    INT             reduce using rule 465 (InOutX -> AUTO .)
    UINT            reduce using rule 465 (InOutX -> AUTO .)
    LONG            reduce using rule 465 (InOutX -> AUTO .)
    ULONG           reduce using rule 465 (InOutX -> AUTO .)
    CHAR            reduce using rule 465 (InOutX -> AUTO .)
    FLOAT           reduce using rule 465 (InOutX -> AUTO .)
    VOID            reduce using rule 465 (InOutX -> AUTO .)
    IDENTIFIER      reduce using rule 465 (InOutX -> AUTO .)
    TYPEOF          reduce using rule 465 (InOutX -> AUTO .)


state 178

    (466) InOutX -> TypeCtor .

    AUTO            reduce using rule 466 (InOutX -> TypeCtor .)
    FINAL           reduce using rule 466 (InOutX -> TypeCtor .)
    SCOPE           reduce using rule 466 (InOutX -> TypeCtor .)
    CONST           reduce using rule 466 (InOutX -> TypeCtor .)
    IMMUTABLE       reduce using rule 466 (InOutX -> TypeCtor .)
    DOT             reduce using rule 466 (InOutX -> TypeCtor .)
    BOOL            reduce using rule 466 (InOutX -> TypeCtor .)
    SHORT           reduce using rule 466 (InOutX -> TypeCtor .)
    USHORT          reduce using rule 466 (InOutX -> TypeCtor .)
    INT             reduce using rule 466 (InOutX -> TypeCtor .)
    UINT            reduce using rule 466 (InOutX -> TypeCtor .)
    LONG            reduce using rule 466 (InOutX -> TypeCtor .)
    ULONG           reduce using rule 466 (InOutX -> TypeCtor .)
    CHAR            reduce using rule 466 (InOutX -> TypeCtor .)
    FLOAT           reduce using rule 466 (InOutX -> TypeCtor .)
    VOID            reduce using rule 466 (InOutX -> TypeCtor .)
    IDENTIFIER      reduce using rule 466 (InOutX -> TypeCtor .)
    TYPEOF          reduce using rule 466 (InOutX -> TypeCtor .)


state 179

    (468) InOutX -> SCOPE .

    AUTO            reduce using rule 468 (InOutX -> SCOPE .)
    FINAL           reduce using rule 468 (InOutX -> SCOPE .)
    SCOPE           reduce using rule 468 (InOutX -> SCOPE .)
    CONST           reduce using rule 468 (InOutX -> SCOPE .)
    IMMUTABLE       reduce using rule 468 (InOutX -> SCOPE .)
    DOT             reduce using rule 468 (InOutX -> SCOPE .)
    BOOL            reduce using rule 468 (InOutX -> SCOPE .)
    SHORT           reduce using rule 468 (InOutX -> SCOPE .)
    USHORT          reduce using rule 468 (InOutX -> SCOPE .)
    INT             reduce using rule 468 (InOutX -> SCOPE .)
    UINT            reduce using rule 468 (InOutX -> SCOPE .)
    LONG            reduce using rule 468 (InOutX -> SCOPE .)
    ULONG           reduce using rule 468 (InOutX -> SCOPE .)
    CHAR            reduce using rule 468 (InOutX -> SCOPE .)
    FLOAT           reduce using rule 468 (InOutX -> SCOPE .)
    VOID            reduce using rule 468 (InOutX -> SCOPE .)
    IDENTIFIER      reduce using rule 468 (InOutX -> SCOPE .)
    TYPEOF          reduce using rule 468 (InOutX -> SCOPE .)


state 180

    (458) Parameter -> InOut_opt . BasicType Declarator
    (459) Parameter -> InOut_opt . BasicType Declarator ELLIPSIS
    (460) Parameter -> InOut_opt . BasicType Declarator ASSIGN AssignExpression
    (461) Parameter -> InOut_opt . Type
    (462) Parameter -> InOut_opt . Type ELLIPSIS
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 371
    BasicType                      shift and go to state 370
    IdentifierList                 shift and go to state 34
    TypeCtors_opt                  shift and go to state 137
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    Type                           shift and go to state 369
    empty                          shift and go to state 142

state 181

    (457) ParameterList_opt -> empty .
    (470) InOut_opt -> empty .

    RPAREN          reduce using rule 457 (ParameterList_opt -> empty .)
    DOT             reduce using rule 470 (InOut_opt -> empty .)
    BOOL            reduce using rule 470 (InOut_opt -> empty .)
    SHORT           reduce using rule 470 (InOut_opt -> empty .)
    USHORT          reduce using rule 470 (InOut_opt -> empty .)
    INT             reduce using rule 470 (InOut_opt -> empty .)
    UINT            reduce using rule 470 (InOut_opt -> empty .)
    LONG            reduce using rule 470 (InOut_opt -> empty .)
    ULONG           reduce using rule 470 (InOut_opt -> empty .)
    CHAR            reduce using rule 470 (InOut_opt -> empty .)
    FLOAT           reduce using rule 470 (InOut_opt -> empty .)
    VOID            reduce using rule 470 (InOut_opt -> empty .)
    IDENTIFIER      reduce using rule 470 (InOut_opt -> empty .)
    TYPEOF          reduce using rule 470 (InOut_opt -> empty .)
    CONST           reduce using rule 470 (InOut_opt -> empty .)
    IMMUTABLE       reduce using rule 470 (InOut_opt -> empty .)


state 182

    (21) ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .

    SEMICOLON       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    NEW             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DELETE          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ALIAS           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    MIXIN           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    STATIC          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    EXTERN          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FINAL           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    AUTO            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CONST           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IMMUTABLE       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    RETURN          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ENUM            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IMPORT          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PRIVATE         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PROTECTED       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PUBLIC          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CLASS           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    UNION           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DOT             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    BOOL            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    SHORT           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    USHORT          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    INT             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    UINT            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LONG            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ULONG           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CHAR            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FLOAT           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    VOID            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TYPEOF          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    RBRACE          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CASE            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DEFAULT         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LBRACE          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IF              reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    WHILE           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DO              reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FOR             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    SWITCH          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CONTINUE        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    BREAK           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    GOTO            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    WITH            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LPAREN          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FOREACH         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FOREACH_REVERSE reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    UAMPERSAND      reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PLUS_PLUS       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    MINUS_MINUS     reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TIMES           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    UMINUS          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    UPLUS           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    EXCLAMATION     reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TILDE           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CAST            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    THIS            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    NULL            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TRUE            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FALSE           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DOLLAR          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    INUMBER         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DNUMBER         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LIT_CHAR        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LIT_STR         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LBRACKET        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FUNCTION        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TYPEID          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    BODY            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ELSE            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    $end            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)


state 183

    (44) DeclaratorInitializer -> VarDeclarator ASSIGN . Initializer
    (121) Initializer -> . VoidInitializer
    (122) Initializer -> . NonVoidInitializer
    (149) VoidInitializer -> . VOID
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    VOID            shift and go to state 372
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    Initializer                    shift and go to state 377
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    NonVoidInitializer             shift and go to state 374
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    ArrayInitializer               shift and go to state 375
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    VoidInitializer                shift and go to state 376
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 379

state 184

    (261) PrimaryExpression -> ImportExpression .

    POWER           reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    DOT             reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    PLUS_PLUS       reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    MINUS_MINUS     reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    LPAREN          reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    TIMES           reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    DIV             reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    MODULO          reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    PLUS            reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    MINUS           reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    LEFT_SHIFT      reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    RIGHT_SHIFT     reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    IS_EQ           reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    NOT_EQ          reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    LESS            reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    GREATER_EQ      reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    GREATER         reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    LESS_EQ         reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    AMPERSAND       reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    CARET           reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    PIPE            reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    DOUBLE_AMPERSAND reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    QUESTION        reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    DOUBLE_PIPE     reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    ASSIGN          reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_PLUS         reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_MINUS        reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_TIMES        reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_DIV          reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_MODULO       reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_AND_BIT      reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_OR_BIT       reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_XOR_BIT      reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_LEFT         reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    EQ_RIGHT        reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    RBRACKET        reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    RANGE           reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    COMMA           reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    RPAREN          reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    SEMICOLON       reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    RBRACE          reduce using rule 261 (PrimaryExpression -> ImportExpression .)
    COLON           reduce using rule 261 (PrimaryExpression -> ImportExpression .)


state 185

    (270) ArrayLiteral -> LBRACKET . ArgumentList_opt RBRACKET
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACKET        reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 382
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 381
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 186

    (188) XorExpression -> AndExpression .
    (191) AndExpression -> AndExpression . AMPERSAND CmpExpression

    CARET           reduce using rule 188 (XorExpression -> AndExpression .)
    PIPE            reduce using rule 188 (XorExpression -> AndExpression .)
    DOUBLE_AMPERSAND reduce using rule 188 (XorExpression -> AndExpression .)
    QUESTION        reduce using rule 188 (XorExpression -> AndExpression .)
    DOUBLE_PIPE     reduce using rule 188 (XorExpression -> AndExpression .)
    ASSIGN          reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_PLUS         reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_MINUS        reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_TIMES        reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_DIV          reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_MODULO       reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_AND_BIT      reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_OR_BIT       reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_XOR_BIT      reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_LEFT         reduce using rule 188 (XorExpression -> AndExpression .)
    EQ_RIGHT        reduce using rule 188 (XorExpression -> AndExpression .)
    COMMA           reduce using rule 188 (XorExpression -> AndExpression .)
    RPAREN          reduce using rule 188 (XorExpression -> AndExpression .)
    SEMICOLON       reduce using rule 188 (XorExpression -> AndExpression .)
    COLON           reduce using rule 188 (XorExpression -> AndExpression .)
    RBRACKET        reduce using rule 188 (XorExpression -> AndExpression .)
    RANGE           reduce using rule 188 (XorExpression -> AndExpression .)
    RBRACE          reduce using rule 188 (XorExpression -> AndExpression .)
    AMPERSAND       shift and go to state 384


state 187

    (251) PrimaryExpression -> TRUE .

    POWER           reduce using rule 251 (PrimaryExpression -> TRUE .)
    DOT             reduce using rule 251 (PrimaryExpression -> TRUE .)
    PLUS_PLUS       reduce using rule 251 (PrimaryExpression -> TRUE .)
    MINUS_MINUS     reduce using rule 251 (PrimaryExpression -> TRUE .)
    LPAREN          reduce using rule 251 (PrimaryExpression -> TRUE .)
    TIMES           reduce using rule 251 (PrimaryExpression -> TRUE .)
    DIV             reduce using rule 251 (PrimaryExpression -> TRUE .)
    MODULO          reduce using rule 251 (PrimaryExpression -> TRUE .)
    PLUS            reduce using rule 251 (PrimaryExpression -> TRUE .)
    MINUS           reduce using rule 251 (PrimaryExpression -> TRUE .)
    LEFT_SHIFT      reduce using rule 251 (PrimaryExpression -> TRUE .)
    RIGHT_SHIFT     reduce using rule 251 (PrimaryExpression -> TRUE .)
    IS_EQ           reduce using rule 251 (PrimaryExpression -> TRUE .)
    NOT_EQ          reduce using rule 251 (PrimaryExpression -> TRUE .)
    LESS            reduce using rule 251 (PrimaryExpression -> TRUE .)
    GREATER_EQ      reduce using rule 251 (PrimaryExpression -> TRUE .)
    GREATER         reduce using rule 251 (PrimaryExpression -> TRUE .)
    LESS_EQ         reduce using rule 251 (PrimaryExpression -> TRUE .)
    AMPERSAND       reduce using rule 251 (PrimaryExpression -> TRUE .)
    CARET           reduce using rule 251 (PrimaryExpression -> TRUE .)
    PIPE            reduce using rule 251 (PrimaryExpression -> TRUE .)
    DOUBLE_AMPERSAND reduce using rule 251 (PrimaryExpression -> TRUE .)
    QUESTION        reduce using rule 251 (PrimaryExpression -> TRUE .)
    DOUBLE_PIPE     reduce using rule 251 (PrimaryExpression -> TRUE .)
    ASSIGN          reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_PLUS         reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_MINUS        reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_TIMES        reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_DIV          reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_MODULO       reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_AND_BIT      reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_OR_BIT       reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_XOR_BIT      reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_LEFT         reduce using rule 251 (PrimaryExpression -> TRUE .)
    EQ_RIGHT        reduce using rule 251 (PrimaryExpression -> TRUE .)
    RBRACKET        reduce using rule 251 (PrimaryExpression -> TRUE .)
    RANGE           reduce using rule 251 (PrimaryExpression -> TRUE .)
    COMMA           reduce using rule 251 (PrimaryExpression -> TRUE .)
    RPAREN          reduce using rule 251 (PrimaryExpression -> TRUE .)
    SEMICOLON       reduce using rule 251 (PrimaryExpression -> TRUE .)
    RBRACE          reduce using rule 251 (PrimaryExpression -> TRUE .)
    COLON           reduce using rule 251 (PrimaryExpression -> TRUE .)


state 188

    (180) ConditionalExpression -> OrOrExpression .
    (181) ConditionalExpression -> OrOrExpression . QUESTION Expression COLON ConditionalExpression
    (183) OrOrExpression -> OrOrExpression . DOUBLE_PIPE AndAndExpression

    ASSIGN          reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_PLUS         reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_MINUS        reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_TIMES        reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_DIV          reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_MODULO       reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_AND_BIT      reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_OR_BIT       reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_XOR_BIT      reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_LEFT         reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    EQ_RIGHT        reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    COMMA           reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    RPAREN          reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    COLON           reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    SEMICOLON       reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    RBRACKET        reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    RANGE           reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    RBRACE          reduce using rule 180 (ConditionalExpression -> OrOrExpression .)
    QUESTION        shift and go to state 385
    DOUBLE_PIPE     shift and go to state 386


state 189

    (278) FunctionLiteralBody -> BlockStatement .

    POWER           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RBRACKET        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RANGE           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RPAREN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RBRACE          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    COLON           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)


state 190

    (283) ImportExpression -> IMPORT . LPAREN AssignExpression RPAREN

    LPAREN          shift and go to state 387


state 191

    (194) CmpExpression -> RelExpression .

    AMPERSAND       reduce using rule 194 (CmpExpression -> RelExpression .)
    CARET           reduce using rule 194 (CmpExpression -> RelExpression .)
    PIPE            reduce using rule 194 (CmpExpression -> RelExpression .)
    DOUBLE_AMPERSAND reduce using rule 194 (CmpExpression -> RelExpression .)
    QUESTION        reduce using rule 194 (CmpExpression -> RelExpression .)
    DOUBLE_PIPE     reduce using rule 194 (CmpExpression -> RelExpression .)
    ASSIGN          reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_PLUS         reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_MINUS        reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_TIMES        reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_DIV          reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_MODULO       reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_AND_BIT      reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_OR_BIT       reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_XOR_BIT      reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_LEFT         reduce using rule 194 (CmpExpression -> RelExpression .)
    EQ_RIGHT        reduce using rule 194 (CmpExpression -> RelExpression .)
    COMMA           reduce using rule 194 (CmpExpression -> RelExpression .)
    RPAREN          reduce using rule 194 (CmpExpression -> RelExpression .)
    SEMICOLON       reduce using rule 194 (CmpExpression -> RelExpression .)
    COLON           reduce using rule 194 (CmpExpression -> RelExpression .)
    RANGE           reduce using rule 194 (CmpExpression -> RelExpression .)
    RBRACKET        reduce using rule 194 (CmpExpression -> RelExpression .)
    RBRACE          reduce using rule 194 (CmpExpression -> RelExpression .)


state 192

    (255) PrimaryExpression -> DNUMBER .

    POWER           reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    DOT             reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    PLUS_PLUS       reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    MINUS_MINUS     reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    LPAREN          reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    TIMES           reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    DIV             reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    MODULO          reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    PLUS            reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    MINUS           reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    LEFT_SHIFT      reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    RIGHT_SHIFT     reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    IS_EQ           reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    NOT_EQ          reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    LESS            reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    GREATER_EQ      reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    GREATER         reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    LESS_EQ         reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    AMPERSAND       reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    CARET           reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    PIPE            reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    QUESTION        reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    DOUBLE_PIPE     reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    ASSIGN          reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_PLUS         reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_MINUS        reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_TIMES        reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_DIV          reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_MODULO       reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_AND_BIT      reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_OR_BIT       reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_XOR_BIT      reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_LEFT         reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    EQ_RIGHT        reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    RBRACKET        reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    RANGE           reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    COMMA           reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    RPAREN          reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    SEMICOLON       reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    RBRACE          reduce using rule 255 (PrimaryExpression -> DNUMBER .)
    COLON           reduce using rule 255 (PrimaryExpression -> DNUMBER .)


state 193

    (78) TypeCtors -> TypeCtor .
    (79) TypeCtors -> TypeCtor . TypeCtors
    (265) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    BOOL            reduce using rule 78 (TypeCtors -> TypeCtor .)
    SHORT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    USHORT          reduce using rule 78 (TypeCtors -> TypeCtor .)
    INT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    UINT            reduce using rule 78 (TypeCtors -> TypeCtor .)
    LONG            reduce using rule 78 (TypeCtors -> TypeCtor .)
    ULONG           reduce using rule 78 (TypeCtors -> TypeCtor .)
    CHAR            reduce using rule 78 (TypeCtors -> TypeCtor .)
    FLOAT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    VOID            reduce using rule 78 (TypeCtors -> TypeCtor .)
    IDENTIFIER      reduce using rule 78 (TypeCtors -> TypeCtor .)
    TYPEOF          reduce using rule 78 (TypeCtors -> TypeCtor .)
    LPAREN          shift and go to state 388
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]

    TypeCtor                       shift and go to state 135
    TypeCtors                      shift and go to state 284

state 194

    (193) CmpExpression -> EqualExpression .

    AMPERSAND       reduce using rule 193 (CmpExpression -> EqualExpression .)
    CARET           reduce using rule 193 (CmpExpression -> EqualExpression .)
    PIPE            reduce using rule 193 (CmpExpression -> EqualExpression .)
    DOUBLE_AMPERSAND reduce using rule 193 (CmpExpression -> EqualExpression .)
    QUESTION        reduce using rule 193 (CmpExpression -> EqualExpression .)
    DOUBLE_PIPE     reduce using rule 193 (CmpExpression -> EqualExpression .)
    ASSIGN          reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_PLUS         reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_MINUS        reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_TIMES        reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_DIV          reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_MODULO       reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_AND_BIT      reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_OR_BIT       reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_XOR_BIT      reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_LEFT         reduce using rule 193 (CmpExpression -> EqualExpression .)
    EQ_RIGHT        reduce using rule 193 (CmpExpression -> EqualExpression .)
    COMMA           reduce using rule 193 (CmpExpression -> EqualExpression .)
    RPAREN          reduce using rule 193 (CmpExpression -> EqualExpression .)
    SEMICOLON       reduce using rule 193 (CmpExpression -> EqualExpression .)
    COLON           reduce using rule 193 (CmpExpression -> EqualExpression .)
    RANGE           reduce using rule 193 (CmpExpression -> EqualExpression .)
    RBRACKET        reduce using rule 193 (CmpExpression -> EqualExpression .)
    RBRACE          reduce using rule 193 (CmpExpression -> EqualExpression .)


state 195

    (168) AssignExpression -> ConditionalExpression .
    (169) AssignExpression -> ConditionalExpression . ASSIGN AssignExpression
    (170) AssignExpression -> ConditionalExpression . EQ_PLUS AssignExpression
    (171) AssignExpression -> ConditionalExpression . EQ_MINUS AssignExpression
    (172) AssignExpression -> ConditionalExpression . EQ_TIMES AssignExpression
    (173) AssignExpression -> ConditionalExpression . EQ_DIV AssignExpression
    (174) AssignExpression -> ConditionalExpression . EQ_MODULO AssignExpression
    (175) AssignExpression -> ConditionalExpression . EQ_AND_BIT AssignExpression
    (176) AssignExpression -> ConditionalExpression . EQ_OR_BIT AssignExpression
    (177) AssignExpression -> ConditionalExpression . EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> ConditionalExpression . EQ_LEFT AssignExpression
    (179) AssignExpression -> ConditionalExpression . EQ_RIGHT AssignExpression

    COMMA           reduce using rule 168 (AssignExpression -> ConditionalExpression .)
    RPAREN          reduce using rule 168 (AssignExpression -> ConditionalExpression .)
    SEMICOLON       reduce using rule 168 (AssignExpression -> ConditionalExpression .)
    RBRACKET        reduce using rule 168 (AssignExpression -> ConditionalExpression .)
    RANGE           reduce using rule 168 (AssignExpression -> ConditionalExpression .)
    RBRACE          reduce using rule 168 (AssignExpression -> ConditionalExpression .)
    COLON           reduce using rule 168 (AssignExpression -> ConditionalExpression .)
    ASSIGN          shift and go to state 399
    EQ_PLUS         shift and go to state 392
    EQ_MINUS        shift and go to state 395
    EQ_TIMES        shift and go to state 391
    EQ_DIV          shift and go to state 393
    EQ_MODULO       shift and go to state 398
    EQ_AND_BIT      shift and go to state 390
    EQ_OR_BIT       shift and go to state 397
    EQ_XOR_BIT      shift and go to state 394
    EQ_LEFT         shift and go to state 396
    EQ_RIGHT        shift and go to state 389


state 196

    (216) UnaryExpression -> UPLUS . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 400
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 197

    (207) MulExpression -> UnaryExpression .

    TIMES           reduce using rule 207 (MulExpression -> UnaryExpression .)
    DIV             reduce using rule 207 (MulExpression -> UnaryExpression .)
    MODULO          reduce using rule 207 (MulExpression -> UnaryExpression .)
    PLUS            reduce using rule 207 (MulExpression -> UnaryExpression .)
    MINUS           reduce using rule 207 (MulExpression -> UnaryExpression .)
    LEFT_SHIFT      reduce using rule 207 (MulExpression -> UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 207 (MulExpression -> UnaryExpression .)
    IS_EQ           reduce using rule 207 (MulExpression -> UnaryExpression .)
    NOT_EQ          reduce using rule 207 (MulExpression -> UnaryExpression .)
    LESS            reduce using rule 207 (MulExpression -> UnaryExpression .)
    GREATER_EQ      reduce using rule 207 (MulExpression -> UnaryExpression .)
    GREATER         reduce using rule 207 (MulExpression -> UnaryExpression .)
    LESS_EQ         reduce using rule 207 (MulExpression -> UnaryExpression .)
    AMPERSAND       reduce using rule 207 (MulExpression -> UnaryExpression .)
    CARET           reduce using rule 207 (MulExpression -> UnaryExpression .)
    PIPE            reduce using rule 207 (MulExpression -> UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 207 (MulExpression -> UnaryExpression .)
    QUESTION        reduce using rule 207 (MulExpression -> UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 207 (MulExpression -> UnaryExpression .)
    ASSIGN          reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_PLUS         reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_MINUS        reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_TIMES        reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_DIV          reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_MODULO       reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_AND_BIT      reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_OR_BIT       reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_LEFT         reduce using rule 207 (MulExpression -> UnaryExpression .)
    EQ_RIGHT        reduce using rule 207 (MulExpression -> UnaryExpression .)
    COMMA           reduce using rule 207 (MulExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 207 (MulExpression -> UnaryExpression .)
    RPAREN          reduce using rule 207 (MulExpression -> UnaryExpression .)
    RBRACKET        reduce using rule 207 (MulExpression -> UnaryExpression .)
    RANGE           reduce using rule 207 (MulExpression -> UnaryExpression .)
    RBRACE          reduce using rule 207 (MulExpression -> UnaryExpression .)
    COLON           reduce using rule 207 (MulExpression -> UnaryExpression .)


state 198

    (249) PrimaryExpression -> THIS .

    POWER           reduce using rule 249 (PrimaryExpression -> THIS .)
    DOT             reduce using rule 249 (PrimaryExpression -> THIS .)
    PLUS_PLUS       reduce using rule 249 (PrimaryExpression -> THIS .)
    MINUS_MINUS     reduce using rule 249 (PrimaryExpression -> THIS .)
    LPAREN          reduce using rule 249 (PrimaryExpression -> THIS .)
    TIMES           reduce using rule 249 (PrimaryExpression -> THIS .)
    DIV             reduce using rule 249 (PrimaryExpression -> THIS .)
    MODULO          reduce using rule 249 (PrimaryExpression -> THIS .)
    PLUS            reduce using rule 249 (PrimaryExpression -> THIS .)
    MINUS           reduce using rule 249 (PrimaryExpression -> THIS .)
    LEFT_SHIFT      reduce using rule 249 (PrimaryExpression -> THIS .)
    RIGHT_SHIFT     reduce using rule 249 (PrimaryExpression -> THIS .)
    IS_EQ           reduce using rule 249 (PrimaryExpression -> THIS .)
    NOT_EQ          reduce using rule 249 (PrimaryExpression -> THIS .)
    LESS            reduce using rule 249 (PrimaryExpression -> THIS .)
    GREATER_EQ      reduce using rule 249 (PrimaryExpression -> THIS .)
    GREATER         reduce using rule 249 (PrimaryExpression -> THIS .)
    LESS_EQ         reduce using rule 249 (PrimaryExpression -> THIS .)
    AMPERSAND       reduce using rule 249 (PrimaryExpression -> THIS .)
    CARET           reduce using rule 249 (PrimaryExpression -> THIS .)
    PIPE            reduce using rule 249 (PrimaryExpression -> THIS .)
    DOUBLE_AMPERSAND reduce using rule 249 (PrimaryExpression -> THIS .)
    QUESTION        reduce using rule 249 (PrimaryExpression -> THIS .)
    DOUBLE_PIPE     reduce using rule 249 (PrimaryExpression -> THIS .)
    ASSIGN          reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_PLUS         reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_MINUS        reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_TIMES        reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_DIV          reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_MODULO       reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_AND_BIT      reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_OR_BIT       reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_XOR_BIT      reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_LEFT         reduce using rule 249 (PrimaryExpression -> THIS .)
    EQ_RIGHT        reduce using rule 249 (PrimaryExpression -> THIS .)
    RBRACKET        reduce using rule 249 (PrimaryExpression -> THIS .)
    RANGE           reduce using rule 249 (PrimaryExpression -> THIS .)
    COMMA           reduce using rule 249 (PrimaryExpression -> THIS .)
    RPAREN          reduce using rule 249 (PrimaryExpression -> THIS .)
    SEMICOLON       reduce using rule 249 (PrimaryExpression -> THIS .)
    RBRACE          reduce using rule 249 (PrimaryExpression -> THIS .)
    COLON           reduce using rule 249 (PrimaryExpression -> THIS .)


state 199

    (192) CmpExpression -> ShiftExpression .
    (202) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (203) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression
    (195) EqualExpression -> ShiftExpression . IS_EQ ShiftExpression
    (196) EqualExpression -> ShiftExpression . NOT_EQ ShiftExpression
    (197) RelExpression -> ShiftExpression . LESS ShiftExpression
    (198) RelExpression -> ShiftExpression . GREATER_EQ ShiftExpression
    (199) RelExpression -> ShiftExpression . GREATER ShiftExpression
    (200) RelExpression -> ShiftExpression . LESS_EQ ShiftExpression

    AMPERSAND       reduce using rule 192 (CmpExpression -> ShiftExpression .)
    CARET           reduce using rule 192 (CmpExpression -> ShiftExpression .)
    PIPE            reduce using rule 192 (CmpExpression -> ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 192 (CmpExpression -> ShiftExpression .)
    QUESTION        reduce using rule 192 (CmpExpression -> ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 192 (CmpExpression -> ShiftExpression .)
    ASSIGN          reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_PLUS         reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_MINUS        reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_TIMES        reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_DIV          reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_MODULO       reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_AND_BIT      reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_OR_BIT       reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_LEFT         reduce using rule 192 (CmpExpression -> ShiftExpression .)
    EQ_RIGHT        reduce using rule 192 (CmpExpression -> ShiftExpression .)
    COMMA           reduce using rule 192 (CmpExpression -> ShiftExpression .)
    RPAREN          reduce using rule 192 (CmpExpression -> ShiftExpression .)
    SEMICOLON       reduce using rule 192 (CmpExpression -> ShiftExpression .)
    COLON           reduce using rule 192 (CmpExpression -> ShiftExpression .)
    RANGE           reduce using rule 192 (CmpExpression -> ShiftExpression .)
    RBRACKET        reduce using rule 192 (CmpExpression -> ShiftExpression .)
    RBRACE          reduce using rule 192 (CmpExpression -> ShiftExpression .)
    LEFT_SHIFT      shift and go to state 405
    RIGHT_SHIFT     shift and go to state 407
    IS_EQ           shift and go to state 402
    NOT_EQ          shift and go to state 408
    LESS            shift and go to state 404
    GREATER_EQ      shift and go to state 406
    GREATER         shift and go to state 403
    LESS_EQ         shift and go to state 401


state 200

    (227) NewExpressionWithArgs -> NewAnonClassExpression .

    POWER           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DOT             reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    PLUS_PLUS       reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    MINUS_MINUS     reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LPAREN          reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    TIMES           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DIV             reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    MODULO          reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    PLUS            reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    MINUS           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LEFT_SHIFT      reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RIGHT_SHIFT     reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    IS_EQ           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    NOT_EQ          reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LESS            reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    GREATER_EQ      reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    GREATER         reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LESS_EQ         reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    AMPERSAND       reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    CARET           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    PIPE            reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DOUBLE_AMPERSAND reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    QUESTION        reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DOUBLE_PIPE     reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    ASSIGN          reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_PLUS         reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_MINUS        reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_TIMES        reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_DIV          reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_MODULO       reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_AND_BIT      reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_OR_BIT       reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_XOR_BIT      reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_LEFT         reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_RIGHT        reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RBRACKET        reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RANGE           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    COMMA           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RPAREN          reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    SEMICOLON       reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RBRACE          reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)
    COLON           reduce using rule 227 (NewExpressionWithArgs -> NewAnonClassExpression .)


state 201

    (277) ParameterMemberAttributes -> Parameters . MemberFunctionAttributes_opt
    (473) MemberFunctionAttributes_opt -> . MemberFunctionAttributes
    (474) MemberFunctionAttributes_opt -> . empty
    (471) MemberFunctionAttributes -> . MemberFunctionAttribute
    (472) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (485) empty -> .
    (475) MemberFunctionAttribute -> . CONST
    (476) MemberFunctionAttribute -> . IMMUTABLE
    (477) MemberFunctionAttribute -> . RETURN

    LBRACE          reduce using rule 485 (empty -> .)
    BODY            reduce using rule 485 (empty -> .)
    CONST           shift and go to state 164
    IMMUTABLE       shift and go to state 168
    RETURN          shift and go to state 163

    MemberFunctionAttributes       shift and go to state 167
    MemberFunctionAttributes_opt   shift and go to state 409
    empty                          shift and go to state 169
    MemberFunctionAttribute        shift and go to state 166

state 202

    (272) FunctionLiteral -> ParameterMemberAttributes . FunctionLiteralBody
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

    BlockStatement                 shift and go to state 189
    BodyStatement                  shift and go to state 225
    FunctionLiteralBody            shift and go to state 410

state 203

    (211) UnaryExpression -> UAMPERSAND . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 411
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 204

    (221) UnaryExpression -> PowExpression .

    TIMES           reduce using rule 221 (UnaryExpression -> PowExpression .)
    DIV             reduce using rule 221 (UnaryExpression -> PowExpression .)
    MODULO          reduce using rule 221 (UnaryExpression -> PowExpression .)
    PLUS            reduce using rule 221 (UnaryExpression -> PowExpression .)
    MINUS           reduce using rule 221 (UnaryExpression -> PowExpression .)
    LEFT_SHIFT      reduce using rule 221 (UnaryExpression -> PowExpression .)
    RIGHT_SHIFT     reduce using rule 221 (UnaryExpression -> PowExpression .)
    IS_EQ           reduce using rule 221 (UnaryExpression -> PowExpression .)
    NOT_EQ          reduce using rule 221 (UnaryExpression -> PowExpression .)
    LESS            reduce using rule 221 (UnaryExpression -> PowExpression .)
    GREATER_EQ      reduce using rule 221 (UnaryExpression -> PowExpression .)
    GREATER         reduce using rule 221 (UnaryExpression -> PowExpression .)
    LESS_EQ         reduce using rule 221 (UnaryExpression -> PowExpression .)
    AMPERSAND       reduce using rule 221 (UnaryExpression -> PowExpression .)
    CARET           reduce using rule 221 (UnaryExpression -> PowExpression .)
    PIPE            reduce using rule 221 (UnaryExpression -> PowExpression .)
    DOUBLE_AMPERSAND reduce using rule 221 (UnaryExpression -> PowExpression .)
    QUESTION        reduce using rule 221 (UnaryExpression -> PowExpression .)
    DOUBLE_PIPE     reduce using rule 221 (UnaryExpression -> PowExpression .)
    ASSIGN          reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_PLUS         reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_MINUS        reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_TIMES        reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_DIV          reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_MODULO       reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_AND_BIT      reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_OR_BIT       reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_XOR_BIT      reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_LEFT         reduce using rule 221 (UnaryExpression -> PowExpression .)
    EQ_RIGHT        reduce using rule 221 (UnaryExpression -> PowExpression .)
    COMMA           reduce using rule 221 (UnaryExpression -> PowExpression .)
    RPAREN          reduce using rule 221 (UnaryExpression -> PowExpression .)
    RBRACKET        reduce using rule 221 (UnaryExpression -> PowExpression .)
    RANGE           reduce using rule 221 (UnaryExpression -> PowExpression .)
    SEMICOLON       reduce using rule 221 (UnaryExpression -> PowExpression .)
    RBRACE          reduce using rule 221 (UnaryExpression -> PowExpression .)
    COLON           reduce using rule 221 (UnaryExpression -> PowExpression .)


state 205

    (107) BasicType2X -> LBRACKET Type . RBRACKET

    RBRACKET        shift and go to state 412


state 206

    (213) UnaryExpression -> MINUS_MINUS . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 413
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 207

    (271) FunctionLiteral -> FUNCTION . Type_opt ParameterAttributes_opt FunctionLiteralBody
    (76) Type_opt -> . Type
    (77) Type_opt -> . empty
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (485) empty -> .
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LBRACE          reduce using rule 485 (empty -> .)
    BODY            reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    Type_opt                       shift and go to state 414
    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    Type                           shift and go to state 415
    empty                          shift and go to state 416

state 208

    (184) AndAndExpression -> OrExpression .
    (187) OrExpression -> OrExpression . PIPE XorExpression

    DOUBLE_AMPERSAND reduce using rule 184 (AndAndExpression -> OrExpression .)
    QUESTION        reduce using rule 184 (AndAndExpression -> OrExpression .)
    DOUBLE_PIPE     reduce using rule 184 (AndAndExpression -> OrExpression .)
    ASSIGN          reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_PLUS         reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_MINUS        reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_TIMES        reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_DIV          reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_MODULO       reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_AND_BIT      reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_OR_BIT       reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_XOR_BIT      reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_LEFT         reduce using rule 184 (AndAndExpression -> OrExpression .)
    EQ_RIGHT        reduce using rule 184 (AndAndExpression -> OrExpression .)
    COMMA           reduce using rule 184 (AndAndExpression -> OrExpression .)
    RPAREN          reduce using rule 184 (AndAndExpression -> OrExpression .)
    SEMICOLON       reduce using rule 184 (AndAndExpression -> OrExpression .)
    RBRACKET        reduce using rule 184 (AndAndExpression -> OrExpression .)
    RANGE           reduce using rule 184 (AndAndExpression -> OrExpression .)
    RBRACE          reduce using rule 184 (AndAndExpression -> OrExpression .)
    COLON           reduce using rule 184 (AndAndExpression -> OrExpression .)
    PIPE            shift and go to state 417


state 209

    (267) PrimaryExpression -> Typeof .

    POWER           reduce using rule 267 (PrimaryExpression -> Typeof .)
    DOT             reduce using rule 267 (PrimaryExpression -> Typeof .)
    PLUS_PLUS       reduce using rule 267 (PrimaryExpression -> Typeof .)
    MINUS_MINUS     reduce using rule 267 (PrimaryExpression -> Typeof .)
    LPAREN          reduce using rule 267 (PrimaryExpression -> Typeof .)
    TIMES           reduce using rule 267 (PrimaryExpression -> Typeof .)
    DIV             reduce using rule 267 (PrimaryExpression -> Typeof .)
    MODULO          reduce using rule 267 (PrimaryExpression -> Typeof .)
    PLUS            reduce using rule 267 (PrimaryExpression -> Typeof .)
    MINUS           reduce using rule 267 (PrimaryExpression -> Typeof .)
    LEFT_SHIFT      reduce using rule 267 (PrimaryExpression -> Typeof .)
    RIGHT_SHIFT     reduce using rule 267 (PrimaryExpression -> Typeof .)
    IS_EQ           reduce using rule 267 (PrimaryExpression -> Typeof .)
    NOT_EQ          reduce using rule 267 (PrimaryExpression -> Typeof .)
    LESS            reduce using rule 267 (PrimaryExpression -> Typeof .)
    GREATER_EQ      reduce using rule 267 (PrimaryExpression -> Typeof .)
    GREATER         reduce using rule 267 (PrimaryExpression -> Typeof .)
    LESS_EQ         reduce using rule 267 (PrimaryExpression -> Typeof .)
    AMPERSAND       reduce using rule 267 (PrimaryExpression -> Typeof .)
    CARET           reduce using rule 267 (PrimaryExpression -> Typeof .)
    PIPE            reduce using rule 267 (PrimaryExpression -> Typeof .)
    DOUBLE_AMPERSAND reduce using rule 267 (PrimaryExpression -> Typeof .)
    QUESTION        reduce using rule 267 (PrimaryExpression -> Typeof .)
    DOUBLE_PIPE     reduce using rule 267 (PrimaryExpression -> Typeof .)
    ASSIGN          reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_PLUS         reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_MINUS        reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_TIMES        reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_DIV          reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_MODULO       reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_AND_BIT      reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_OR_BIT       reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_XOR_BIT      reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_LEFT         reduce using rule 267 (PrimaryExpression -> Typeof .)
    EQ_RIGHT        reduce using rule 267 (PrimaryExpression -> Typeof .)
    RBRACKET        reduce using rule 267 (PrimaryExpression -> Typeof .)
    RANGE           reduce using rule 267 (PrimaryExpression -> Typeof .)
    COMMA           reduce using rule 267 (PrimaryExpression -> Typeof .)
    RPAREN          reduce using rule 267 (PrimaryExpression -> Typeof .)
    SEMICOLON       reduce using rule 267 (PrimaryExpression -> Typeof .)
    RBRACE          reduce using rule 267 (PrimaryExpression -> Typeof .)
    COLON           reduce using rule 267 (PrimaryExpression -> Typeof .)


state 210

    (284) TypeidExpression -> TYPEID . LPAREN Type RPAREN
    (285) TypeidExpression -> TYPEID . LPAREN Expression RPAREN

    LPAREN          shift and go to state 418


state 211

    (254) PrimaryExpression -> INUMBER .

    POWER           reduce using rule 254 (PrimaryExpression -> INUMBER .)
    DOT             reduce using rule 254 (PrimaryExpression -> INUMBER .)
    PLUS_PLUS       reduce using rule 254 (PrimaryExpression -> INUMBER .)
    MINUS_MINUS     reduce using rule 254 (PrimaryExpression -> INUMBER .)
    LPAREN          reduce using rule 254 (PrimaryExpression -> INUMBER .)
    TIMES           reduce using rule 254 (PrimaryExpression -> INUMBER .)
    DIV             reduce using rule 254 (PrimaryExpression -> INUMBER .)
    MODULO          reduce using rule 254 (PrimaryExpression -> INUMBER .)
    PLUS            reduce using rule 254 (PrimaryExpression -> INUMBER .)
    MINUS           reduce using rule 254 (PrimaryExpression -> INUMBER .)
    LEFT_SHIFT      reduce using rule 254 (PrimaryExpression -> INUMBER .)
    RIGHT_SHIFT     reduce using rule 254 (PrimaryExpression -> INUMBER .)
    IS_EQ           reduce using rule 254 (PrimaryExpression -> INUMBER .)
    NOT_EQ          reduce using rule 254 (PrimaryExpression -> INUMBER .)
    LESS            reduce using rule 254 (PrimaryExpression -> INUMBER .)
    GREATER_EQ      reduce using rule 254 (PrimaryExpression -> INUMBER .)
    GREATER         reduce using rule 254 (PrimaryExpression -> INUMBER .)
    LESS_EQ         reduce using rule 254 (PrimaryExpression -> INUMBER .)
    AMPERSAND       reduce using rule 254 (PrimaryExpression -> INUMBER .)
    CARET           reduce using rule 254 (PrimaryExpression -> INUMBER .)
    PIPE            reduce using rule 254 (PrimaryExpression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 254 (PrimaryExpression -> INUMBER .)
    QUESTION        reduce using rule 254 (PrimaryExpression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 254 (PrimaryExpression -> INUMBER .)
    ASSIGN          reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_PLUS         reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_MINUS        reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_TIMES        reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_DIV          reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_MODULO       reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_AND_BIT      reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_OR_BIT       reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_XOR_BIT      reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_LEFT         reduce using rule 254 (PrimaryExpression -> INUMBER .)
    EQ_RIGHT        reduce using rule 254 (PrimaryExpression -> INUMBER .)
    RBRACKET        reduce using rule 254 (PrimaryExpression -> INUMBER .)
    RANGE           reduce using rule 254 (PrimaryExpression -> INUMBER .)
    COMMA           reduce using rule 254 (PrimaryExpression -> INUMBER .)
    RPAREN          reduce using rule 254 (PrimaryExpression -> INUMBER .)
    SEMICOLON       reduce using rule 254 (PrimaryExpression -> INUMBER .)
    RBRACE          reduce using rule 254 (PrimaryExpression -> INUMBER .)
    COLON           reduce using rule 254 (PrimaryExpression -> INUMBER .)


state 212

    (212) UnaryExpression -> PLUS_PLUS . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 419
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 213

    (217) UnaryExpression -> EXCLAMATION . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 420
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 214

    (238) PowExpression -> PostfixExpression .
    (239) PowExpression -> PostfixExpression . POWER UnaryExpression
    (241) PostfixExpression -> PostfixExpression . DOT IDENTIFIER
    (242) PostfixExpression -> PostfixExpression . DOT NewExpression
    (243) PostfixExpression -> PostfixExpression . PLUS_PLUS
    (244) PostfixExpression -> PostfixExpression . MINUS_MINUS
    (245) PostfixExpression -> PostfixExpression . LPAREN ArgumentList RPAREN

    TIMES           reduce using rule 238 (PowExpression -> PostfixExpression .)
    DIV             reduce using rule 238 (PowExpression -> PostfixExpression .)
    MODULO          reduce using rule 238 (PowExpression -> PostfixExpression .)
    PLUS            reduce using rule 238 (PowExpression -> PostfixExpression .)
    MINUS           reduce using rule 238 (PowExpression -> PostfixExpression .)
    LEFT_SHIFT      reduce using rule 238 (PowExpression -> PostfixExpression .)
    RIGHT_SHIFT     reduce using rule 238 (PowExpression -> PostfixExpression .)
    IS_EQ           reduce using rule 238 (PowExpression -> PostfixExpression .)
    NOT_EQ          reduce using rule 238 (PowExpression -> PostfixExpression .)
    LESS            reduce using rule 238 (PowExpression -> PostfixExpression .)
    GREATER_EQ      reduce using rule 238 (PowExpression -> PostfixExpression .)
    GREATER         reduce using rule 238 (PowExpression -> PostfixExpression .)
    LESS_EQ         reduce using rule 238 (PowExpression -> PostfixExpression .)
    AMPERSAND       reduce using rule 238 (PowExpression -> PostfixExpression .)
    CARET           reduce using rule 238 (PowExpression -> PostfixExpression .)
    PIPE            reduce using rule 238 (PowExpression -> PostfixExpression .)
    DOUBLE_AMPERSAND reduce using rule 238 (PowExpression -> PostfixExpression .)
    QUESTION        reduce using rule 238 (PowExpression -> PostfixExpression .)
    DOUBLE_PIPE     reduce using rule 238 (PowExpression -> PostfixExpression .)
    ASSIGN          reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_PLUS         reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_MINUS        reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_TIMES        reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_DIV          reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_MODULO       reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_AND_BIT      reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_OR_BIT       reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_XOR_BIT      reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_LEFT         reduce using rule 238 (PowExpression -> PostfixExpression .)
    EQ_RIGHT        reduce using rule 238 (PowExpression -> PostfixExpression .)
    COMMA           reduce using rule 238 (PowExpression -> PostfixExpression .)
    SEMICOLON       reduce using rule 238 (PowExpression -> PostfixExpression .)
    RBRACKET        reduce using rule 238 (PowExpression -> PostfixExpression .)
    COLON           reduce using rule 238 (PowExpression -> PostfixExpression .)
    RPAREN          reduce using rule 238 (PowExpression -> PostfixExpression .)
    RANGE           reduce using rule 238 (PowExpression -> PostfixExpression .)
    RBRACE          reduce using rule 238 (PowExpression -> PostfixExpression .)
    POWER           shift and go to state 422
    DOT             shift and go to state 425
    PLUS_PLUS       shift and go to state 424
    MINUS_MINUS     shift and go to state 423
    LPAREN          shift and go to state 421


state 215

    (225) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (419) NewAnonClassExpression -> NEW . AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (229) AllocatorArguments_opt -> . AllocatorArguments
    (230) AllocatorArguments_opt -> . empty
    (228) AllocatorArguments -> . LPAREN ArgumentList_opt RPAREN
    (485) empty -> .

    LPAREN          shift and go to state 427
    CLASS           reduce using rule 485 (empty -> .)
    CONST           reduce using rule 485 (empty -> .)
    IMMUTABLE       reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)

    AllocatorArguments_opt         shift and go to state 426
    AllocatorArguments             shift and go to state 428
    empty                          shift and go to state 429

state 216

    (248) PrimaryExpression -> DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 430


state 217

    (240) PostfixExpression -> PrimaryExpression .

    POWER           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    DOT             reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    PLUS_PLUS       reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    MINUS_MINUS     reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    LPAREN          reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    TIMES           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    DIV             reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    MODULO          reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    PLUS            reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    MINUS           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    LEFT_SHIFT      reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    RIGHT_SHIFT     reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    IS_EQ           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    NOT_EQ          reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    LESS            reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    GREATER_EQ      reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    GREATER         reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    LESS_EQ         reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    AMPERSAND       reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    CARET           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    PIPE            reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    QUESTION        reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    DOUBLE_PIPE     reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    ASSIGN          reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_PLUS         reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_MINUS        reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_TIMES        reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_DIV          reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_MODULO       reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_AND_BIT      reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_OR_BIT       reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_XOR_BIT      reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_LEFT         reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    EQ_RIGHT        reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    RPAREN          reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    COMMA           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    RBRACE          reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    RBRACKET        reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    RANGE           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    SEMICOLON       reduce using rule 240 (PostfixExpression -> PrimaryExpression .)
    COLON           reduce using rule 240 (PostfixExpression -> PrimaryExpression .)


state 218

    (218) UnaryExpression -> ComplementExpression .

    TIMES           reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    DIV             reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    MODULO          reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    PLUS            reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    MINUS           reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    LEFT_SHIFT      reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    RIGHT_SHIFT     reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    IS_EQ           reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    NOT_EQ          reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    LESS            reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    GREATER_EQ      reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    GREATER         reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    LESS_EQ         reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    AMPERSAND       reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    CARET           reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    PIPE            reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    DOUBLE_AMPERSAND reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    QUESTION        reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    DOUBLE_PIPE     reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    ASSIGN          reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_PLUS         reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_MINUS        reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_TIMES        reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_DIV          reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_MODULO       reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_AND_BIT      reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_OR_BIT       reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_XOR_BIT      reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_LEFT         reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    EQ_RIGHT        reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    COMMA           reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    RPAREN          reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    RBRACKET        reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    RANGE           reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    SEMICOLON       reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    RBRACE          reduce using rule 218 (UnaryExpression -> ComplementExpression .)
    COLON           reduce using rule 218 (UnaryExpression -> ComplementExpression .)


state 219

    (256) PrimaryExpression -> LIT_CHAR .

    POWER           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    DOT             reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    PLUS_PLUS       reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    MINUS_MINUS     reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    LPAREN          reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    TIMES           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    DIV             reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    MODULO          reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    PLUS            reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    MINUS           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    LEFT_SHIFT      reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    RIGHT_SHIFT     reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    IS_EQ           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    NOT_EQ          reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    LESS            reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    GREATER_EQ      reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    GREATER         reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    LESS_EQ         reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    AMPERSAND       reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    CARET           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    PIPE            reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    DOUBLE_AMPERSAND reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    QUESTION        reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    DOUBLE_PIPE     reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    ASSIGN          reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_PLUS         reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_MINUS        reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_TIMES        reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_DIV          reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_MODULO       reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_AND_BIT      reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_OR_BIT       reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_XOR_BIT      reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_LEFT         reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    EQ_RIGHT        reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    RBRACKET        reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    RANGE           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    COMMA           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    RPAREN          reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    SEMICOLON       reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    RBRACE          reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)
    COLON           reduce using rule 256 (PrimaryExpression -> LIT_CHAR .)


state 220

    (236) CastExpression -> CAST . LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> CAST . LPAREN TypeCtors_opt RPAREN UnaryExpression

    LPAREN          shift and go to state 431


state 221

    (222) ComplementExpression -> TILDE . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 432
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 222

    (260) PrimaryExpression -> MixinExpression .

    POWER           reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    DOT             reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    PLUS_PLUS       reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    MINUS_MINUS     reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    LPAREN          reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    TIMES           reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    DIV             reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    MODULO          reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    PLUS            reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    MINUS           reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    LEFT_SHIFT      reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    RIGHT_SHIFT     reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    IS_EQ           reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    NOT_EQ          reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    LESS            reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    GREATER_EQ      reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    GREATER         reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    LESS_EQ         reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    AMPERSAND       reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    CARET           reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    PIPE            reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    DOUBLE_AMPERSAND reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    QUESTION        reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    DOUBLE_PIPE     reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    ASSIGN          reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_PLUS         reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_MINUS        reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_TIMES        reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_DIV          reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_MODULO       reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_AND_BIT      reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_OR_BIT       reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_XOR_BIT      reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_LEFT         reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    EQ_RIGHT        reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    RBRACKET        reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    RANGE           reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    COMMA           reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    RPAREN          reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    SEMICOLON       reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    RBRACE          reduce using rule 260 (PrimaryExpression -> MixinExpression .)
    COLON           reduce using rule 260 (PrimaryExpression -> MixinExpression .)


state 223

    (75) Type -> TypeCtors_opt . BasicType BasicType2_opt
    (246) PostfixExpression -> TypeCtors_opt . BasicType LPAREN ArgumentList_opt RPAREN
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 433
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34

state 224

    (259) PrimaryExpression -> FunctionLiteral .

    POWER           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    DOT             reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    PLUS_PLUS       reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    MINUS_MINUS     reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    LPAREN          reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    TIMES           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    DIV             reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    MODULO          reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    PLUS            reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    MINUS           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    LEFT_SHIFT      reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    RIGHT_SHIFT     reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    IS_EQ           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    NOT_EQ          reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    LESS            reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    GREATER_EQ      reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    GREATER         reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    LESS_EQ         reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    AMPERSAND       reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    CARET           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    PIPE            reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    DOUBLE_AMPERSAND reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    QUESTION        reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    DOUBLE_PIPE     reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    ASSIGN          reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_PLUS         reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_MINUS        reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_TIMES        reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_DIV          reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_MODULO       reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_AND_BIT      reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_OR_BIT       reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_XOR_BIT      reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_LEFT         reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    EQ_RIGHT        reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    RBRACKET        reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    RANGE           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    COMMA           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    RPAREN          reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    SEMICOLON       reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    RBRACE          reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)
    COLON           reduce using rule 259 (PrimaryExpression -> FunctionLiteral .)


state 225

    (279) FunctionLiteralBody -> BodyStatement .

    POWER           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    DOT             reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    PLUS_PLUS       reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    MINUS_MINUS     reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    LPAREN          reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    TIMES           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    DIV             reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    MODULO          reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    PLUS            reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    MINUS           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    LEFT_SHIFT      reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    RIGHT_SHIFT     reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    IS_EQ           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    NOT_EQ          reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    LESS            reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    GREATER_EQ      reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    GREATER         reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    LESS_EQ         reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    AMPERSAND       reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    CARET           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    PIPE            reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    DOUBLE_AMPERSAND reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    QUESTION        reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    DOUBLE_PIPE     reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    ASSIGN          reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_PLUS         reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_MINUS        reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_TIMES        reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_DIV          reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_MODULO       reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_AND_BIT      reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_OR_BIT       reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_XOR_BIT      reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_LEFT         reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    EQ_RIGHT        reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    COMMA           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    SEMICOLON       reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    RBRACKET        reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    RANGE           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    RPAREN          reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    RBRACE          reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)
    COLON           reduce using rule 279 (FunctionLiteralBody -> BodyStatement .)


state 226

    (247) PrimaryExpression -> IDENTIFIER .

    POWER           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOT             reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LPAREN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    TIMES           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DIV             reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MODULO          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PLUS            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MINUS           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    IS_EQ           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    NOT_EQ          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LESS            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    GREATER         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LESS_EQ         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    AMPERSAND       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    CARET           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PIPE            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    QUESTION        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    ASSIGN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_DIV          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RBRACKET        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RANGE           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    COMMA           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RPAREN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RBRACE          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    COLON           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)


state 227

    (252) PrimaryExpression -> FALSE .

    POWER           reduce using rule 252 (PrimaryExpression -> FALSE .)
    DOT             reduce using rule 252 (PrimaryExpression -> FALSE .)
    PLUS_PLUS       reduce using rule 252 (PrimaryExpression -> FALSE .)
    MINUS_MINUS     reduce using rule 252 (PrimaryExpression -> FALSE .)
    LPAREN          reduce using rule 252 (PrimaryExpression -> FALSE .)
    TIMES           reduce using rule 252 (PrimaryExpression -> FALSE .)
    DIV             reduce using rule 252 (PrimaryExpression -> FALSE .)
    MODULO          reduce using rule 252 (PrimaryExpression -> FALSE .)
    PLUS            reduce using rule 252 (PrimaryExpression -> FALSE .)
    MINUS           reduce using rule 252 (PrimaryExpression -> FALSE .)
    LEFT_SHIFT      reduce using rule 252 (PrimaryExpression -> FALSE .)
    RIGHT_SHIFT     reduce using rule 252 (PrimaryExpression -> FALSE .)
    IS_EQ           reduce using rule 252 (PrimaryExpression -> FALSE .)
    NOT_EQ          reduce using rule 252 (PrimaryExpression -> FALSE .)
    LESS            reduce using rule 252 (PrimaryExpression -> FALSE .)
    GREATER_EQ      reduce using rule 252 (PrimaryExpression -> FALSE .)
    GREATER         reduce using rule 252 (PrimaryExpression -> FALSE .)
    LESS_EQ         reduce using rule 252 (PrimaryExpression -> FALSE .)
    AMPERSAND       reduce using rule 252 (PrimaryExpression -> FALSE .)
    CARET           reduce using rule 252 (PrimaryExpression -> FALSE .)
    PIPE            reduce using rule 252 (PrimaryExpression -> FALSE .)
    DOUBLE_AMPERSAND reduce using rule 252 (PrimaryExpression -> FALSE .)
    QUESTION        reduce using rule 252 (PrimaryExpression -> FALSE .)
    DOUBLE_PIPE     reduce using rule 252 (PrimaryExpression -> FALSE .)
    ASSIGN          reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_PLUS         reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_MINUS        reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_TIMES        reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_DIV          reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_MODULO       reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_AND_BIT      reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_OR_BIT       reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_XOR_BIT      reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_LEFT         reduce using rule 252 (PrimaryExpression -> FALSE .)
    EQ_RIGHT        reduce using rule 252 (PrimaryExpression -> FALSE .)
    RBRACKET        reduce using rule 252 (PrimaryExpression -> FALSE .)
    RANGE           reduce using rule 252 (PrimaryExpression -> FALSE .)
    COMMA           reduce using rule 252 (PrimaryExpression -> FALSE .)
    RPAREN          reduce using rule 252 (PrimaryExpression -> FALSE .)
    SEMICOLON       reduce using rule 252 (PrimaryExpression -> FALSE .)
    RBRACE          reduce using rule 252 (PrimaryExpression -> FALSE .)
    COLON           reduce using rule 252 (PrimaryExpression -> FALSE .)


state 228

    (262) PrimaryExpression -> NewExpressionWithArgs .

    POWER           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    DOT             reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    PLUS_PLUS       reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    MINUS_MINUS     reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    LPAREN          reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    TIMES           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    DIV             reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    MODULO          reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    PLUS            reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    MINUS           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    LEFT_SHIFT      reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    RIGHT_SHIFT     reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    IS_EQ           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    NOT_EQ          reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    LESS            reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    GREATER_EQ      reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    GREATER         reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    LESS_EQ         reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    AMPERSAND       reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    CARET           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    PIPE            reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    DOUBLE_AMPERSAND reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    QUESTION        reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    DOUBLE_PIPE     reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    ASSIGN          reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_PLUS         reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_MINUS        reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_TIMES        reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_DIV          reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_MODULO       reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_AND_BIT      reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_OR_BIT       reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_XOR_BIT      reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_LEFT         reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_RIGHT        reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    RBRACKET        reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    RANGE           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    COMMA           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    RPAREN          reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    SEMICOLON       reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    RBRACE          reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)
    COLON           reduce using rule 262 (PrimaryExpression -> NewExpressionWithArgs .)


state 229

    (215) UnaryExpression -> UMINUS . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 434
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 230

    (204) AddExpression -> MulExpression .
    (208) MulExpression -> MulExpression . TIMES UnaryExpression
    (209) MulExpression -> MulExpression . DIV UnaryExpression
    (210) MulExpression -> MulExpression . MODULO UnaryExpression

    PLUS            reduce using rule 204 (AddExpression -> MulExpression .)
    MINUS           reduce using rule 204 (AddExpression -> MulExpression .)
    LEFT_SHIFT      reduce using rule 204 (AddExpression -> MulExpression .)
    RIGHT_SHIFT     reduce using rule 204 (AddExpression -> MulExpression .)
    IS_EQ           reduce using rule 204 (AddExpression -> MulExpression .)
    NOT_EQ          reduce using rule 204 (AddExpression -> MulExpression .)
    LESS            reduce using rule 204 (AddExpression -> MulExpression .)
    GREATER_EQ      reduce using rule 204 (AddExpression -> MulExpression .)
    GREATER         reduce using rule 204 (AddExpression -> MulExpression .)
    LESS_EQ         reduce using rule 204 (AddExpression -> MulExpression .)
    AMPERSAND       reduce using rule 204 (AddExpression -> MulExpression .)
    CARET           reduce using rule 204 (AddExpression -> MulExpression .)
    PIPE            reduce using rule 204 (AddExpression -> MulExpression .)
    DOUBLE_AMPERSAND reduce using rule 204 (AddExpression -> MulExpression .)
    QUESTION        reduce using rule 204 (AddExpression -> MulExpression .)
    DOUBLE_PIPE     reduce using rule 204 (AddExpression -> MulExpression .)
    ASSIGN          reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_PLUS         reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_MINUS        reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_TIMES        reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_DIV          reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_MODULO       reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_AND_BIT      reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_OR_BIT       reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_XOR_BIT      reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_LEFT         reduce using rule 204 (AddExpression -> MulExpression .)
    EQ_RIGHT        reduce using rule 204 (AddExpression -> MulExpression .)
    COMMA           reduce using rule 204 (AddExpression -> MulExpression .)
    SEMICOLON       reduce using rule 204 (AddExpression -> MulExpression .)
    RBRACKET        reduce using rule 204 (AddExpression -> MulExpression .)
    RANGE           reduce using rule 204 (AddExpression -> MulExpression .)
    RPAREN          reduce using rule 204 (AddExpression -> MulExpression .)
    RBRACE          reduce using rule 204 (AddExpression -> MulExpression .)
    COLON           reduce using rule 204 (AddExpression -> MulExpression .)
    TIMES           shift and go to state 437
    DIV             shift and go to state 436
    MODULO          shift and go to state 435


state 231

    (182) OrOrExpression -> AndAndExpression .
    (185) AndAndExpression -> AndAndExpression . DOUBLE_AMPERSAND OrExpression

    QUESTION        reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    DOUBLE_PIPE     reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    ASSIGN          reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_PLUS         reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_MINUS        reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_TIMES        reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_DIV          reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_MODULO       reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_AND_BIT      reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_OR_BIT       reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_XOR_BIT      reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_LEFT         reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    EQ_RIGHT        reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    COMMA           reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    RPAREN          reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    SEMICOLON       reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    COLON           reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    RBRACKET        reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    RBRACE          reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    RANGE           reduce using rule 182 (OrOrExpression -> AndAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 438


state 232

    (220) UnaryExpression -> CastExpression .

    TIMES           reduce using rule 220 (UnaryExpression -> CastExpression .)
    DIV             reduce using rule 220 (UnaryExpression -> CastExpression .)
    MODULO          reduce using rule 220 (UnaryExpression -> CastExpression .)
    PLUS            reduce using rule 220 (UnaryExpression -> CastExpression .)
    MINUS           reduce using rule 220 (UnaryExpression -> CastExpression .)
    LEFT_SHIFT      reduce using rule 220 (UnaryExpression -> CastExpression .)
    RIGHT_SHIFT     reduce using rule 220 (UnaryExpression -> CastExpression .)
    IS_EQ           reduce using rule 220 (UnaryExpression -> CastExpression .)
    NOT_EQ          reduce using rule 220 (UnaryExpression -> CastExpression .)
    LESS            reduce using rule 220 (UnaryExpression -> CastExpression .)
    GREATER_EQ      reduce using rule 220 (UnaryExpression -> CastExpression .)
    GREATER         reduce using rule 220 (UnaryExpression -> CastExpression .)
    LESS_EQ         reduce using rule 220 (UnaryExpression -> CastExpression .)
    AMPERSAND       reduce using rule 220 (UnaryExpression -> CastExpression .)
    CARET           reduce using rule 220 (UnaryExpression -> CastExpression .)
    PIPE            reduce using rule 220 (UnaryExpression -> CastExpression .)
    DOUBLE_AMPERSAND reduce using rule 220 (UnaryExpression -> CastExpression .)
    QUESTION        reduce using rule 220 (UnaryExpression -> CastExpression .)
    DOUBLE_PIPE     reduce using rule 220 (UnaryExpression -> CastExpression .)
    ASSIGN          reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_PLUS         reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_MINUS        reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_TIMES        reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_DIV          reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_MODULO       reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_AND_BIT      reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_OR_BIT       reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_XOR_BIT      reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_LEFT         reduce using rule 220 (UnaryExpression -> CastExpression .)
    EQ_RIGHT        reduce using rule 220 (UnaryExpression -> CastExpression .)
    COMMA           reduce using rule 220 (UnaryExpression -> CastExpression .)
    RPAREN          reduce using rule 220 (UnaryExpression -> CastExpression .)
    RBRACKET        reduce using rule 220 (UnaryExpression -> CastExpression .)
    RANGE           reduce using rule 220 (UnaryExpression -> CastExpression .)
    SEMICOLON       reduce using rule 220 (UnaryExpression -> CastExpression .)
    RBRACE          reduce using rule 220 (UnaryExpression -> CastExpression .)
    COLON           reduce using rule 220 (UnaryExpression -> CastExpression .)


state 233

    (273) FunctionLiteral -> FunctionLiteralBody .

    POWER           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    DOT             reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    PLUS_PLUS       reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    MINUS_MINUS     reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    LPAREN          reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    TIMES           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    DIV             reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    MODULO          reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    PLUS            reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    MINUS           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    LEFT_SHIFT      reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    RIGHT_SHIFT     reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    IS_EQ           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    NOT_EQ          reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    LESS            reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    GREATER_EQ      reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    GREATER         reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    LESS_EQ         reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    AMPERSAND       reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    CARET           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    PIPE            reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    DOUBLE_AMPERSAND reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    QUESTION        reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    DOUBLE_PIPE     reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    ASSIGN          reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_PLUS         reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_MINUS        reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_TIMES        reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_DIV          reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_MODULO       reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_AND_BIT      reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_OR_BIT       reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_XOR_BIT      reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_LEFT         reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_RIGHT        reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    COMMA           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    COLON           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    RBRACKET        reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    RANGE           reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    RPAREN          reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    SEMICOLON       reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)
    RBRACE          reduce using rule 273 (FunctionLiteral -> FunctionLiteralBody .)


state 234

    (269) PrimaryExpression -> TypeidExpression .

    POWER           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    DOT             reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    PLUS_PLUS       reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    MINUS_MINUS     reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    LPAREN          reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    TIMES           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    DIV             reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    MODULO          reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    PLUS            reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    MINUS           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    LEFT_SHIFT      reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    RIGHT_SHIFT     reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    IS_EQ           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    NOT_EQ          reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    LESS            reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    GREATER_EQ      reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    GREATER         reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    LESS_EQ         reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    AMPERSAND       reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    CARET           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    PIPE            reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    DOUBLE_AMPERSAND reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    QUESTION        reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    DOUBLE_PIPE     reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    ASSIGN          reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_PLUS         reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_MINUS        reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_TIMES        reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_DIV          reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_MODULO       reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_AND_BIT      reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_OR_BIT       reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_XOR_BIT      reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_LEFT         reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    EQ_RIGHT        reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    RBRACKET        reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    RANGE           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    COMMA           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    RPAREN          reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    SEMICOLON       reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    RBRACE          reduce using rule 269 (PrimaryExpression -> TypeidExpression .)
    COLON           reduce using rule 269 (PrimaryExpression -> TypeidExpression .)


state 235

    (250) PrimaryExpression -> NULL .

    POWER           reduce using rule 250 (PrimaryExpression -> NULL .)
    DOT             reduce using rule 250 (PrimaryExpression -> NULL .)
    PLUS_PLUS       reduce using rule 250 (PrimaryExpression -> NULL .)
    MINUS_MINUS     reduce using rule 250 (PrimaryExpression -> NULL .)
    LPAREN          reduce using rule 250 (PrimaryExpression -> NULL .)
    TIMES           reduce using rule 250 (PrimaryExpression -> NULL .)
    DIV             reduce using rule 250 (PrimaryExpression -> NULL .)
    MODULO          reduce using rule 250 (PrimaryExpression -> NULL .)
    PLUS            reduce using rule 250 (PrimaryExpression -> NULL .)
    MINUS           reduce using rule 250 (PrimaryExpression -> NULL .)
    LEFT_SHIFT      reduce using rule 250 (PrimaryExpression -> NULL .)
    RIGHT_SHIFT     reduce using rule 250 (PrimaryExpression -> NULL .)
    IS_EQ           reduce using rule 250 (PrimaryExpression -> NULL .)
    NOT_EQ          reduce using rule 250 (PrimaryExpression -> NULL .)
    LESS            reduce using rule 250 (PrimaryExpression -> NULL .)
    GREATER_EQ      reduce using rule 250 (PrimaryExpression -> NULL .)
    GREATER         reduce using rule 250 (PrimaryExpression -> NULL .)
    LESS_EQ         reduce using rule 250 (PrimaryExpression -> NULL .)
    AMPERSAND       reduce using rule 250 (PrimaryExpression -> NULL .)
    CARET           reduce using rule 250 (PrimaryExpression -> NULL .)
    PIPE            reduce using rule 250 (PrimaryExpression -> NULL .)
    DOUBLE_AMPERSAND reduce using rule 250 (PrimaryExpression -> NULL .)
    QUESTION        reduce using rule 250 (PrimaryExpression -> NULL .)
    DOUBLE_PIPE     reduce using rule 250 (PrimaryExpression -> NULL .)
    ASSIGN          reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_PLUS         reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_MINUS        reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_TIMES        reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_DIV          reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_MODULO       reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_AND_BIT      reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_OR_BIT       reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_XOR_BIT      reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_LEFT         reduce using rule 250 (PrimaryExpression -> NULL .)
    EQ_RIGHT        reduce using rule 250 (PrimaryExpression -> NULL .)
    RBRACKET        reduce using rule 250 (PrimaryExpression -> NULL .)
    RANGE           reduce using rule 250 (PrimaryExpression -> NULL .)
    COMMA           reduce using rule 250 (PrimaryExpression -> NULL .)
    RPAREN          reduce using rule 250 (PrimaryExpression -> NULL .)
    SEMICOLON       reduce using rule 250 (PrimaryExpression -> NULL .)
    RBRACE          reduce using rule 250 (PrimaryExpression -> NULL .)
    COLON           reduce using rule 250 (PrimaryExpression -> NULL .)


state 236

    (263) PrimaryExpression -> BasicTypeX . IDENTIFIER
    (264) PrimaryExpression -> BasicTypeX . LPAREN ArgumentList_opt RPAREN

    IDENTIFIER      shift and go to state 439
    LPAREN          shift and go to state 440


state 237

    (186) OrExpression -> XorExpression .
    (189) XorExpression -> XorExpression . CARET AndExpression

    PIPE            reduce using rule 186 (OrExpression -> XorExpression .)
    DOUBLE_AMPERSAND reduce using rule 186 (OrExpression -> XorExpression .)
    QUESTION        reduce using rule 186 (OrExpression -> XorExpression .)
    DOUBLE_PIPE     reduce using rule 186 (OrExpression -> XorExpression .)
    ASSIGN          reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_PLUS         reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_MINUS        reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_TIMES        reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_DIV          reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_MODULO       reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_AND_BIT      reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_OR_BIT       reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_XOR_BIT      reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_LEFT         reduce using rule 186 (OrExpression -> XorExpression .)
    EQ_RIGHT        reduce using rule 186 (OrExpression -> XorExpression .)
    RPAREN          reduce using rule 186 (OrExpression -> XorExpression .)
    RBRACKET        reduce using rule 186 (OrExpression -> XorExpression .)
    RANGE           reduce using rule 186 (OrExpression -> XorExpression .)
    COMMA           reduce using rule 186 (OrExpression -> XorExpression .)
    SEMICOLON       reduce using rule 186 (OrExpression -> XorExpression .)
    RBRACE          reduce using rule 186 (OrExpression -> XorExpression .)
    COLON           reduce using rule 186 (OrExpression -> XorExpression .)
    CARET           shift and go to state 441


state 238

    (282) MixinExpression -> MIXIN . LPAREN AssignExpression RPAREN

    LPAREN          shift and go to state 442


state 239

    (257) PrimaryExpression -> LIT_STRPlus .

    POWER           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    DOT             reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    LPAREN          reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    TIMES           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    DIV             reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    MODULO          reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    PLUS            reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    MINUS           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    IS_EQ           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    NOT_EQ          reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    LESS            reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    GREATER_EQ      reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    GREATER         reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    LESS_EQ         reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    AMPERSAND       reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    CARET           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    PIPE            reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    QUESTION        reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    ASSIGN          reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_PLUS         reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_MINUS        reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_TIMES        reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_DIV          reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_MODULO       reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_LEFT         reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    RBRACKET        reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    RANGE           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    COMMA           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    RPAREN          reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    SEMICOLON       reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    RBRACE          reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)
    COLON           reduce using rule 257 (PrimaryExpression -> LIT_STRPlus .)


state 240

    (258) PrimaryExpression -> ArrayLiteral .

    POWER           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    DOT             reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    PLUS_PLUS       reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    MINUS_MINUS     reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    LPAREN          reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    TIMES           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    DIV             reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    MODULO          reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    PLUS            reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    MINUS           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    LEFT_SHIFT      reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    RIGHT_SHIFT     reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    IS_EQ           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    NOT_EQ          reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    LESS            reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    GREATER_EQ      reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    GREATER         reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    LESS_EQ         reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    AMPERSAND       reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    CARET           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    PIPE            reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    DOUBLE_AMPERSAND reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    QUESTION        reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    DOUBLE_PIPE     reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    ASSIGN          reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_PLUS         reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_MINUS        reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_TIMES        reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_DIV          reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_MODULO       reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_AND_BIT      reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_OR_BIT       reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_XOR_BIT      reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_LEFT         reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    EQ_RIGHT        reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    RBRACKET        reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    RANGE           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    COMMA           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    RPAREN          reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    SEMICOLON       reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    RBRACE          reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)
    COLON           reduce using rule 258 (PrimaryExpression -> ArrayLiteral .)


state 241

    (253) PrimaryExpression -> DOLLAR .

    POWER           reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    DOT             reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    PLUS_PLUS       reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    MINUS_MINUS     reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    LPAREN          reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    TIMES           reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    DIV             reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    MODULO          reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    PLUS            reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    MINUS           reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    LEFT_SHIFT      reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    RIGHT_SHIFT     reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    IS_EQ           reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    NOT_EQ          reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    LESS            reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    GREATER_EQ      reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    GREATER         reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    LESS_EQ         reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    AMPERSAND       reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    CARET           reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    PIPE            reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    DOUBLE_AMPERSAND reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    QUESTION        reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    DOUBLE_PIPE     reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    ASSIGN          reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_PLUS         reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_MINUS        reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_TIMES        reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_DIV          reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_MODULO       reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_AND_BIT      reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_OR_BIT       reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_XOR_BIT      reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_LEFT         reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    EQ_RIGHT        reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    RBRACKET        reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    RANGE           reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    COMMA           reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    RPAREN          reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    SEMICOLON       reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    RBRACE          reduce using rule 253 (PrimaryExpression -> DOLLAR .)
    COLON           reduce using rule 253 (PrimaryExpression -> DOLLAR .)


state 242

    (214) UnaryExpression -> TIMES . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 443
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 243

    (219) UnaryExpression -> LPAREN . Type RPAREN DOT IDENTIFIER
    (268) PrimaryExpression -> LPAREN . Expression RPAREN
    (452) Parameters -> LPAREN . ParameterList_opt RPAREN
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (165) Expression -> . CommaExpression
    (456) ParameterList_opt -> . ParameterList
    (457) ParameterList_opt -> . empty
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (453) ParameterList -> . Parameter
    (454) ParameterList -> . Parameter COMMA ParameterList
    (455) ParameterList -> . ELLIPSIS
    (485) empty -> .
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (458) Parameter -> . InOut_opt BasicType Declarator
    (459) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (460) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (461) Parameter -> . InOut_opt Type
    (462) Parameter -> . InOut_opt Type ELLIPSIS
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (469) InOut_opt -> . InOut
    (470) InOut_opt -> . empty
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (463) InOut -> . InOutX
    (464) InOut -> . InOut InOutX
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (465) InOutX -> . AUTO
    (466) InOutX -> . TypeCtor
    (467) InOutX -> . FINAL
    (468) InOutX -> . SCOPE
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    ELLIPSIS        shift and go to state 175
    RPAREN          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    AUTO            shift and go to state 177
    FINAL           shift and go to state 172
    SCOPE           shift and go to state 179
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ParameterList                  shift and go to state 170
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    Parameter                      shift and go to state 173
    ParameterList_opt              shift and go to state 171
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    Type                           shift and go to state 447
    InOutX                         shift and go to state 174
    FunctionLiteralBody            shift and go to state 233
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    TypeCtors                      shift and go to state 134
    ShiftExpression                shift and go to state 199
    InOut                          shift and go to state 176
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    LIT_STRPlus                    shift and go to state 239
    ArrayLiteral                   shift and go to state 240
    TypeCtor                       shift and go to state 444
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 223
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 446
    BodyStatement                  shift and go to state 225
    InOut_opt                      shift and go to state 180
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 445
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 244

    (201) ShiftExpression -> AddExpression .
    (205) AddExpression -> AddExpression . PLUS MulExpression
    (206) AddExpression -> AddExpression . MINUS MulExpression

    LEFT_SHIFT      reduce using rule 201 (ShiftExpression -> AddExpression .)
    RIGHT_SHIFT     reduce using rule 201 (ShiftExpression -> AddExpression .)
    IS_EQ           reduce using rule 201 (ShiftExpression -> AddExpression .)
    NOT_EQ          reduce using rule 201 (ShiftExpression -> AddExpression .)
    LESS            reduce using rule 201 (ShiftExpression -> AddExpression .)
    GREATER_EQ      reduce using rule 201 (ShiftExpression -> AddExpression .)
    GREATER         reduce using rule 201 (ShiftExpression -> AddExpression .)
    LESS_EQ         reduce using rule 201 (ShiftExpression -> AddExpression .)
    AMPERSAND       reduce using rule 201 (ShiftExpression -> AddExpression .)
    CARET           reduce using rule 201 (ShiftExpression -> AddExpression .)
    PIPE            reduce using rule 201 (ShiftExpression -> AddExpression .)
    DOUBLE_AMPERSAND reduce using rule 201 (ShiftExpression -> AddExpression .)
    QUESTION        reduce using rule 201 (ShiftExpression -> AddExpression .)
    DOUBLE_PIPE     reduce using rule 201 (ShiftExpression -> AddExpression .)
    ASSIGN          reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_PLUS         reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_MINUS        reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_TIMES        reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_DIV          reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_MODULO       reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_AND_BIT      reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_OR_BIT       reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_XOR_BIT      reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_LEFT         reduce using rule 201 (ShiftExpression -> AddExpression .)
    EQ_RIGHT        reduce using rule 201 (ShiftExpression -> AddExpression .)
    COMMA           reduce using rule 201 (ShiftExpression -> AddExpression .)
    RANGE           reduce using rule 201 (ShiftExpression -> AddExpression .)
    RBRACKET        reduce using rule 201 (ShiftExpression -> AddExpression .)
    RPAREN          reduce using rule 201 (ShiftExpression -> AddExpression .)
    SEMICOLON       reduce using rule 201 (ShiftExpression -> AddExpression .)
    RBRACE          reduce using rule 201 (ShiftExpression -> AddExpression .)
    COLON           reduce using rule 201 (ShiftExpression -> AddExpression .)
    PLUS            shift and go to state 448
    MINUS           shift and go to state 449


state 245

    (190) AndExpression -> CmpExpression .

    AMPERSAND       reduce using rule 190 (AndExpression -> CmpExpression .)
    CARET           reduce using rule 190 (AndExpression -> CmpExpression .)
    PIPE            reduce using rule 190 (AndExpression -> CmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 190 (AndExpression -> CmpExpression .)
    QUESTION        reduce using rule 190 (AndExpression -> CmpExpression .)
    DOUBLE_PIPE     reduce using rule 190 (AndExpression -> CmpExpression .)
    ASSIGN          reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_PLUS         reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_MINUS        reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_TIMES        reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_DIV          reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_MODULO       reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_AND_BIT      reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_OR_BIT       reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_XOR_BIT      reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_LEFT         reduce using rule 190 (AndExpression -> CmpExpression .)
    EQ_RIGHT        reduce using rule 190 (AndExpression -> CmpExpression .)
    COMMA           reduce using rule 190 (AndExpression -> CmpExpression .)
    RPAREN          reduce using rule 190 (AndExpression -> CmpExpression .)
    SEMICOLON       reduce using rule 190 (AndExpression -> CmpExpression .)
    COLON           reduce using rule 190 (AndExpression -> CmpExpression .)
    RANGE           reduce using rule 190 (AndExpression -> CmpExpression .)
    RBRACKET        reduce using rule 190 (AndExpression -> CmpExpression .)
    RBRACE          reduce using rule 190 (AndExpression -> CmpExpression .)


state 246

    (280) LIT_STRPlus -> LIT_STR . LIT_STRPlus
    (281) LIT_STRPlus -> LIT_STR .
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR

    POWER           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    DOT             reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    PLUS_PLUS       reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    MINUS_MINUS     reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    LPAREN          reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    TIMES           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    DIV             reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    MODULO          reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    PLUS            reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    MINUS           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    LEFT_SHIFT      reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    RIGHT_SHIFT     reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    IS_EQ           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ          reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    LESS            reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ      reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    GREATER         reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ         reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    AMPERSAND       reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    CARET           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    PIPE            reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_AMPERSAND reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    QUESTION        reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_PIPE     reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    ASSIGN          reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_PLUS         reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_MINUS        reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_TIMES        reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_DIV          reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_MODULO       reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_AND_BIT      reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_OR_BIT       reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_XOR_BIT      reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_LEFT         reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    EQ_RIGHT        reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    RPAREN          reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    COMMA           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    RBRACKET        reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    RANGE           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    COLON           reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    SEMICOLON       reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    RBRACE          reduce using rule 281 (LIT_STRPlus -> LIT_STR .)
    LIT_STR         shift and go to state 246

    LIT_STRPlus                    shift and go to state 450

state 247

    (104) BasicType2X -> LBRACKET RBRACKET .

    TIMES           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    ELLIPSIS        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    BODY            reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    POWER           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    DOT             reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    MINUS_MINUS     reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    DIV             reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    MODULO          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    LESS            reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    CARET           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    PIPE            reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    QUESTION        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    RANGE           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)
    COLON           reduce using rule 104 (BasicType2X -> LBRACKET RBRACKET .)


state 248

    (105) BasicType2X -> LBRACKET AssignExpression . RBRACKET
    (106) BasicType2X -> LBRACKET AssignExpression . RANGE AssignExpression RBRACKET

    RBRACKET        shift and go to state 451
    RANGE           shift and go to state 452


state 249

    (100) BasicType2 -> BasicType2X BasicType2_opt .

    IDENTIFIER      reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    LPAREN          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    RBRACKET        reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    RPAREN          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    LBRACE          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    SEMICOLON       reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    ELLIPSIS        reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    COMMA           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    BODY            reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    LBRACKET        reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    POWER           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    DOT             reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    PLUS_PLUS       reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    MINUS_MINUS     reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    TIMES           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    DIV             reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    MODULO          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    PLUS            reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    MINUS           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    LEFT_SHIFT      reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    RIGHT_SHIFT     reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    IS_EQ           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    NOT_EQ          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    LESS            reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    GREATER_EQ      reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    GREATER         reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    LESS_EQ         reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    AMPERSAND       reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    CARET           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    PIPE            reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    DOUBLE_AMPERSAND reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    QUESTION        reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    DOUBLE_PIPE     reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    ASSIGN          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_PLUS         reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_MINUS        reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_TIMES        reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_DIV          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_MODULO       reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_AND_BIT      reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_OR_BIT       reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_XOR_BIT      reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_LEFT         reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_RIGHT        reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    RANGE           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    RBRACE          reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)
    COLON           reduce using rule 100 (BasicType2 -> BasicType2X BasicType2_opt .)


state 250

    (61) AltDeclarator -> BasicType2_opt LPAREN . AltDeclaratorX RPAREN
    (62) AltDeclarator -> BasicType2_opt LPAREN . AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> BasicType2_opt LPAREN . AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (64) AltDeclaratorX -> . BasicType2_opt IDENTIFIER
    (65) AltDeclaratorX -> . BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix
    (66) AltDeclaratorX -> . AltDeclarator
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (60) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 485 (empty -> .)
    LPAREN          reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

    AltDeclaratorX                 shift and go to state 453
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 454
    empty                          shift and go to state 89
    BasicType2_opt                 shift and go to state 455
    BasicType2                     shift and go to state 93

state 251

    (450) FuncDeclarator -> BasicType2_opt IDENTIFIER . FuncDeclaratorSuffix
    (59) VarDeclarator -> BasicType2_opt IDENTIFIER .
    (60) AltDeclarator -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (451) FuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (67) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (71) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (72) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ASSIGN          reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    COMMA           reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    SEMICOLON       reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    LPAREN          shift and go to state 79
    LBRACKET        shift and go to state 457

    FuncDeclaratorSuffix           shift and go to state 456
    Parameters                     shift and go to state 78
    AltDeclaratorSuffix            shift and go to state 458
    AltDeclaratorSuffixes          shift and go to state 459

state 252

    (42) Declarators -> DeclaratorInitializer COMMA . DeclaratorIdentifierList
    (47) DeclaratorIdentifierList -> . DeclaratorIdentifier
    (48) DeclaratorIdentifierList -> . DeclaratorIdentifier COMMA DeclaratorIdentifierList
    (49) DeclaratorIdentifier -> . VarDeclaratorIdentifier
    (50) DeclaratorIdentifier -> . AltDeclaratorIdentifier
    (51) VarDeclaratorIdentifier -> . IDENTIFIER
    (52) VarDeclaratorIdentifier -> . IDENTIFIER ASSIGN Initializer
    (53) AltDeclaratorIdentifier -> . BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt
    (54) AltDeclaratorIdentifier -> . BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer
    (55) AltDeclaratorIdentifier -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (56) AltDeclaratorIdentifier -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters
    (485) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 464
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]

    DeclaratorIdentifier           shift and go to state 460
    DeclaratorIdentifierList       shift and go to state 462
    VarDeclaratorIdentifier        shift and go to state 465
    empty                          shift and go to state 89
    AltDeclaratorIdentifier        shift and go to state 461
    BasicType2X                    shift and go to state 84
    BasicType2_opt                 shift and go to state 463
    BasicType2                     shift and go to state 466

state 253

    (40) VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .

    ALIAS           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    ENUM            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMPORT          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    STATIC          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CLASS           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    UNION           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXTERN          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FINAL           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    AUTO            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONST           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMMUTABLE       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOT             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    BOOL            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    SHORT           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    USHORT          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    INT             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    UINT            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LONG            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    ULONG           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CHAR            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FLOAT           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    VOID            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEOF          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    $end            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    SEMICOLON       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CASE            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DEFAULT         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACE          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IF              reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    WHILE           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DO              reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOR             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    SWITCH          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONTINUE        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    BREAK           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    RETURN          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    GOTO            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    WITH            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    MIXIN           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LPAREN          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH_REVERSE reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    UAMPERSAND      reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PLUS_PLUS       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    MINUS_MINUS     reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TIMES           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    UMINUS          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    UPLUS           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXCLAMATION     reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TILDE           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CAST            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    THIS            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    NULL            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TRUE            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FALSE           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOLLAR          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    INUMBER         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DNUMBER         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_CHAR        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_STR         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACKET        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FUNCTION        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    NEW             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEID          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    BODY            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    RBRACE          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    ELSE            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DELETE          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PRIVATE         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PROTECTED       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PUBLIC          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)


state 254

    (45) DeclaratorInitializer -> AltDeclarator ASSIGN . Initializer
    (121) Initializer -> . VoidInitializer
    (122) Initializer -> . NonVoidInitializer
    (149) VoidInitializer -> . VOID
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    VOID            shift and go to state 372
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    Initializer                    shift and go to state 467
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    NonVoidInitializer             shift and go to state 374
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    ArrayInitializer               shift and go to state 375
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    VoidInitializer                shift and go to state 376
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 379

state 255

    (108) BasicType2X -> FUNCTION Parameters .

    TIMES           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    LBRACKET        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    FUNCTION        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    IDENTIFIER      reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    LPAREN          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    LBRACE          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    RPAREN          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    SEMICOLON       reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    ELLIPSIS        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    COMMA           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    BODY            reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    POWER           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    DOT             reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    PLUS_PLUS       reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    MINUS_MINUS     reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    DIV             reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    MODULO          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    PLUS            reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    MINUS           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    LEFT_SHIFT      reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    RIGHT_SHIFT     reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    IS_EQ           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    NOT_EQ          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    LESS            reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    GREATER_EQ      reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    GREATER         reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    LESS_EQ         reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    AMPERSAND       reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    CARET           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    PIPE            reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    DOUBLE_AMPERSAND reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    QUESTION        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    DOUBLE_PIPE     reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    ASSIGN          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_PLUS         reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_MINUS        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_TIMES        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_DIV          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_MODULO       reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_AND_BIT      reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_OR_BIT       reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_XOR_BIT      reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_LEFT         reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    EQ_RIGHT        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    RBRACKET        reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    RANGE           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    RBRACE          reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)
    COLON           reduce using rule 108 (BasicType2X -> FUNCTION Parameters .)


state 256

    (446) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .

    ALIAS           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    ENUM            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    IMPORT          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    STATIC          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    CLASS           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    UNION           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    EXTERN          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    FINAL           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    AUTO            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    CONST           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    IMMUTABLE       reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    DOT             reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    BOOL            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    SHORT           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    USHORT          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    INT             reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    UINT            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    LONG            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    ULONG           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    CHAR            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    FLOAT           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    VOID            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    IDENTIFIER      reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    TYPEOF          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    $end            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    SEMICOLON       reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    NEW             reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    DELETE          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    MIXIN           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    RETURN          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    PRIVATE         reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    PROTECTED       reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    PUBLIC          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    RBRACE          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    CASE            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    DEFAULT         reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    LBRACE          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    IF              reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    WHILE           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    DO              reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    FOR             reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    SWITCH          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    CONTINUE        reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    BREAK           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    GOTO            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    WITH            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    LPAREN          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    FOREACH         reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    FOREACH_REVERSE reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    UAMPERSAND      reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    PLUS_PLUS       reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    MINUS_MINUS     reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    TIMES           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    UMINUS          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    UPLUS           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    EXCLAMATION     reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    TILDE           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    CAST            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    THIS            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    NULL            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    TRUE            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    FALSE           reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    DOLLAR          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    INUMBER         reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    DNUMBER         reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    LIT_CHAR        reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    LIT_STR         reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    LBRACKET        reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    FUNCTION        reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    TYPEID          reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    BODY            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)
    ELSE            reduce using rule 446 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator FunctionBody .)


state 257

    (447) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .

    ALIAS           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ENUM            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IMPORT          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    STATIC          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CLASS           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UNION           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    EXTERN          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FINAL           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    AUTO            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CONST           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IMMUTABLE       reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DOT             reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BOOL            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    SHORT           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    USHORT          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    INT             reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UINT            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LONG            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ULONG           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CHAR            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FLOAT           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    VOID            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IDENTIFIER      reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TYPEOF          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    $end            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    SEMICOLON       reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    NEW             reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DELETE          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    MIXIN           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    RETURN          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PRIVATE         reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PROTECTED       reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PUBLIC          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    RBRACE          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CASE            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DEFAULT         reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LBRACE          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IF              reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    WHILE           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DO              reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOR             reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    SWITCH          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CONTINUE        reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BREAK           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    GOTO            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    WITH            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LPAREN          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOREACH         reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOREACH_REVERSE reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UAMPERSAND      reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PLUS_PLUS       reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    MINUS_MINUS     reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TIMES           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UMINUS          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UPLUS           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    EXCLAMATION     reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TILDE           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CAST            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    THIS            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    NULL            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TRUE            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FALSE           reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DOLLAR          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    INUMBER         reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DNUMBER         reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LIT_CHAR        reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LIT_STR         reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LBRACKET        reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FUNCTION        reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TYPEID          reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BODY            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ELSE            reduce using rule 447 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)


state 258

    (265) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (78) TypeCtors -> TypeCtor .
    (79) TypeCtors -> TypeCtor . TypeCtors
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LPAREN          shift and go to state 388
    DOT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    BOOL            reduce using rule 78 (TypeCtors -> TypeCtor .)
    SHORT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    USHORT          reduce using rule 78 (TypeCtors -> TypeCtor .)
    INT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    UINT            reduce using rule 78 (TypeCtors -> TypeCtor .)
    LONG            reduce using rule 78 (TypeCtors -> TypeCtor .)
    ULONG           reduce using rule 78 (TypeCtors -> TypeCtor .)
    CHAR            reduce using rule 78 (TypeCtors -> TypeCtor .)
    FLOAT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    VOID            reduce using rule 78 (TypeCtors -> TypeCtor .)
    IDENTIFIER      reduce using rule 78 (TypeCtors -> TypeCtor .)
    TYPEOF          reduce using rule 78 (TypeCtors -> TypeCtor .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]

    TypeCtors                      shift and go to state 284
    TypeCtor                       shift and go to state 135

state 259

    (246) PostfixExpression -> TypeCtors_opt . BasicType LPAREN ArgumentList_opt RPAREN
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 468
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34

state 260

    (111) IdentifierList -> IDENTIFIER LBRACKET AssignExpression . RBRACKET DOT IdentifierList

    RBRACKET        shift and go to state 469


state 261

    (110) IdentifierList -> IDENTIFIER DOT IdentifierList .

    TIMES           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LBRACKET        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    FUNCTION        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RPAREN          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    IDENTIFIER      reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LPAREN          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    COMMA           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LBRACE          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    SEMICOLON       reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    ELLIPSIS        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    BODY            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    POWER           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DOT             reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DIV             reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    MODULO          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    PLUS            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    MINUS           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    IS_EQ           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    NOT_EQ          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LESS            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    GREATER_EQ      reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    GREATER         reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LESS_EQ         reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    AMPERSAND       reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    CARET           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    PIPE            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    QUESTION        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    ASSIGN          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_PLUS         reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_MINUS        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_TIMES        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_DIV          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_MODULO       reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_LEFT         reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RBRACKET        reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RANGE           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RBRACE          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    COLON           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    BOOL            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    SHORT           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    USHORT          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    INT             reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    UINT            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LONG            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    ULONG           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    CHAR            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    FLOAT           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    VOID            reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    TYPEOF          reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    CONST           reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    IMMUTABLE       reduce using rule 110 (IdentifierList -> IDENTIFIER DOT IdentifierList .)


state 262

    (89) BasicType -> TypeCtor LPAREN Type . RPAREN

    RPAREN          shift and go to state 470


state 263

    (88) BasicType -> Typeof DOT IdentifierList .

    TIMES           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    LBRACKET        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    FUNCTION        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    IDENTIFIER      reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    LBRACE          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    RPAREN          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    SEMICOLON       reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    ELLIPSIS        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    COMMA           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    BODY            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    LPAREN          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    POWER           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    DOT             reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    DIV             reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    MODULO          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    PLUS            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    MINUS           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    IS_EQ           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    NOT_EQ          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    LESS            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    GREATER_EQ      reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    GREATER         reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    LESS_EQ         reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    AMPERSAND       reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    CARET           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    PIPE            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    QUESTION        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    ASSIGN          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_PLUS         reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_MINUS        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_TIMES        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_DIV          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_MODULO       reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_LEFT         reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    RBRACKET        reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    RANGE           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    RBRACE          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    COLON           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    BOOL            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    SHORT           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    USHORT          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    INT             reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    UINT            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    LONG            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    ULONG           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    CHAR            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    FLOAT           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    VOID            reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    TYPEOF          reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    CONST           reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)
    IMMUTABLE       reduce using rule 88 (BasicType -> Typeof DOT IdentifierList .)


state 264

    (148) Typeof -> TYPEOF LPAREN RETURN . RPAREN

    RPAREN          shift and go to state 471


state 265

    (147) Typeof -> TYPEOF LPAREN Expression . RPAREN

    RPAREN          shift and go to state 472


state 266

    (165) Expression -> CommaExpression .

    SEMICOLON       reduce using rule 165 (Expression -> CommaExpression .)
    RPAREN          reduce using rule 165 (Expression -> CommaExpression .)
    COLON           reduce using rule 165 (Expression -> CommaExpression .)
    RANGE           reduce using rule 165 (Expression -> CommaExpression .)


state 267

    (166) CommaExpression -> AssignExpression .
    (167) CommaExpression -> AssignExpression . COMMA CommaExpression

    SEMICOLON       reduce using rule 166 (CommaExpression -> AssignExpression .)
    RPAREN          reduce using rule 166 (CommaExpression -> AssignExpression .)
    COLON           reduce using rule 166 (CommaExpression -> AssignExpression .)
    RANGE           reduce using rule 166 (CommaExpression -> AssignExpression .)
    COMMA           shift and go to state 473


state 268

    (405) BaseClassList -> COLON SuperClass .
    (406) BaseClassList -> COLON SuperClass . COMMA Interfaces

    LBRACE          reduce using rule 405 (BaseClassList -> COLON SuperClass .)
    COMMA           shift and go to state 474


state 269

    (407) BaseClassList -> COLON Interfaces .

    LBRACE          reduce using rule 407 (BaseClassList -> COLON Interfaces .)


state 270

    (410) SuperClass -> BasicType .
    (413) Interface -> BasicType .

  ! reduce/reduce conflict for COMMA resolved using rule 410 (SuperClass -> BasicType .)
  ! reduce/reduce conflict for LBRACE resolved using rule 410 (SuperClass -> BasicType .)
    COMMA           reduce using rule 410 (SuperClass -> BasicType .)
    LBRACE          reduce using rule 410 (SuperClass -> BasicType .)

  ! COMMA           [ reduce using rule 413 (Interface -> BasicType .) ]
  ! LBRACE          [ reduce using rule 413 (Interface -> BasicType .) ]


state 271

    (411) Interfaces -> Interface .
    (412) Interfaces -> Interface . COMMA Interfaces

    LBRACE          reduce using rule 411 (Interfaces -> Interface .)
    COMMA           shift and go to state 475


state 272

    (404) ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .

    SEMICOLON       reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    CASE            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    DEFAULT         reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    LBRACE          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    IDENTIFIER      reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    IF              reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    WHILE           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    DO              reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    FOR             reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    SWITCH          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    FINAL           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    CONTINUE        reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    BREAK           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    RETURN          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    GOTO            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    WITH            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    MIXIN           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    IMPORT          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    STATIC          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    LPAREN          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    FOREACH         reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    FOREACH_REVERSE reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    ENUM            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    EXTERN          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    AUTO            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    CONST           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    IMMUTABLE       reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    UAMPERSAND      reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    PLUS_PLUS       reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    MINUS_MINUS     reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    TIMES           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    UMINUS          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    UPLUS           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    EXCLAMATION     reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    TILDE           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    CAST            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    DOT             reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    THIS            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    NULL            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    TRUE            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    FALSE           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    DOLLAR          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    INUMBER         reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    DNUMBER         reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    LIT_CHAR        reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    LIT_STR         reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    LBRACKET        reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    FUNCTION        reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    NEW             reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    BOOL            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    SHORT           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    USHORT          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    INT             reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    UINT            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    LONG            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    ULONG           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    CHAR            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    FLOAT           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    VOID            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    TYPEOF          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    TYPEID          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    BODY            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    ALIAS           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    CLASS           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    UNION           reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    RBRACE          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    ELSE            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    DELETE          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    PRIVATE         reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    PROTECTED       reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    PUBLIC          reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)
    $end            reduce using rule 404 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt AggregateBody .)


state 273

    (414) Allocator -> NEW Parameters . SEMICOLON
    (415) Allocator -> NEW Parameters . FunctionBody
    (478) FunctionBody -> . BlockStatement
    (479) FunctionBody -> . BodyStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

    SEMICOLON       shift and go to state 477
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

    FunctionBody                   shift and go to state 476
    BlockStatement                 shift and go to state 161
    BodyStatement                  shift and go to state 162

state 274

    (402) AggregateBody -> LBRACE DeclDefs_opt RBRACE .

    ALIAS           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ENUM            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IMPORT          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    STATIC          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CLASS           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    UNION           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EXTERN          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FINAL           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    AUTO            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CONST           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IMMUTABLE       reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOT             reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    BOOL            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    SHORT           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    USHORT          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    INT             reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    UINT            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LONG            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ULONG           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CHAR            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FLOAT           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    VOID            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IDENTIFIER      reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TYPEOF          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    $end            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    SEMICOLON       reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    NEW             reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DELETE          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MIXIN           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RETURN          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PRIVATE         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PROTECTED       reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PUBLIC          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RBRACE          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CASE            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DEFAULT         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LBRACE          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IF              reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    WHILE           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DO              reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FOR             reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    SWITCH          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CONTINUE        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    BREAK           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    GOTO            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    WITH            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LPAREN          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FOREACH         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FOREACH_REVERSE reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    UAMPERSAND      reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PLUS_PLUS       reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MINUS_MINUS     reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TIMES           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    UMINUS          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    UPLUS           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EXCLAMATION     reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TILDE           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CAST            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    THIS            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    NULL            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TRUE            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FALSE           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOLLAR          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    INUMBER         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DNUMBER         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LIT_CHAR        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LIT_STR         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LBRACKET        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FUNCTION        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TYPEID          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    BODY            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ELSE            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    POWER           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DIV             reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MODULO          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PLUS            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MINUS           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LEFT_SHIFT      reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RIGHT_SHIFT     reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IS_EQ           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    NOT_EQ          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LESS            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    GREATER_EQ      reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    GREATER         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LESS_EQ         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    AMPERSAND       reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CARET           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PIPE            reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    QUESTION        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOUBLE_PIPE     reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ASSIGN          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_PLUS         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_MINUS        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_TIMES        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_DIV          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_MODULO       reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_AND_BIT      reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_OR_BIT       reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_XOR_BIT      reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_LEFT         reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_RIGHT        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RBRACKET        reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RANGE           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    COMMA           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RPAREN          reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    COLON           reduce using rule 402 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)


state 275

    (4) DeclDefs -> DeclDef DeclDefs .

    RBRACE          reduce using rule 4 (DeclDefs -> DeclDef DeclDefs .)


state 276

    (418) AliasThis -> ALIAS IDENTIFIER . THIS SEMICOLON
    (145) AliasDeclarationY -> IDENTIFIER . ASSIGN StorageClasses_opt Type
    (146) AliasDeclarationY -> IDENTIFIER . ASSIGN FunctionLiteral

    THIS            shift and go to state 478
    ASSIGN          shift and go to state 152


state 277

    (150) AttributeSpecifier -> Attribute COLON .

    SEMICOLON       reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    NEW             reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    DELETE          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    ALIAS           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    MIXIN           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    STATIC          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    EXTERN          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    FINAL           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    AUTO            reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    CONST           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    IMMUTABLE       reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    RETURN          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    ENUM            reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    IMPORT          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    PRIVATE         reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    PROTECTED       reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    PUBLIC          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    CLASS           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    UNION           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    DOT             reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    BOOL            reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    SHORT           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    USHORT          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    INT             reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    UINT            reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    LONG            reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    ULONG           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    CHAR            reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    FLOAT           reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    VOID            reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    IDENTIFIER      reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    TYPEOF          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)
    RBRACE          reduce using rule 150 (AttributeSpecifier -> Attribute COLON .)


state 278

    (160) DeclarationBlock -> DeclDef .

    SEMICOLON       reduce using rule 160 (DeclarationBlock -> DeclDef .)
    NEW             reduce using rule 160 (DeclarationBlock -> DeclDef .)
    DELETE          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    ALIAS           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    MIXIN           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    STATIC          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    EXTERN          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    FINAL           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    AUTO            reduce using rule 160 (DeclarationBlock -> DeclDef .)
    CONST           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    IMMUTABLE       reduce using rule 160 (DeclarationBlock -> DeclDef .)
    RETURN          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    ENUM            reduce using rule 160 (DeclarationBlock -> DeclDef .)
    IMPORT          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    PRIVATE         reduce using rule 160 (DeclarationBlock -> DeclDef .)
    PROTECTED       reduce using rule 160 (DeclarationBlock -> DeclDef .)
    PUBLIC          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    CLASS           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    UNION           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    DOT             reduce using rule 160 (DeclarationBlock -> DeclDef .)
    BOOL            reduce using rule 160 (DeclarationBlock -> DeclDef .)
    SHORT           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    USHORT          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    INT             reduce using rule 160 (DeclarationBlock -> DeclDef .)
    UINT            reduce using rule 160 (DeclarationBlock -> DeclDef .)
    LONG            reduce using rule 160 (DeclarationBlock -> DeclDef .)
    ULONG           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    CHAR            reduce using rule 160 (DeclarationBlock -> DeclDef .)
    FLOAT           reduce using rule 160 (DeclarationBlock -> DeclDef .)
    VOID            reduce using rule 160 (DeclarationBlock -> DeclDef .)
    IDENTIFIER      reduce using rule 160 (DeclarationBlock -> DeclDef .)
    TYPEOF          reduce using rule 160 (DeclarationBlock -> DeclDef .)
    RBRACE          reduce using rule 160 (DeclarationBlock -> DeclDef .)


state 279

    (151) AttributeSpecifier -> Attribute DeclarationBlock .

    SEMICOLON       reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    NEW             reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    DELETE          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    ALIAS           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    MIXIN           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    STATIC          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    EXTERN          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    FINAL           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    AUTO            reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    CONST           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    IMMUTABLE       reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    RETURN          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    ENUM            reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    IMPORT          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    PRIVATE         reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    PROTECTED       reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    PUBLIC          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    CLASS           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    UNION           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    DOT             reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    BOOL            reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    SHORT           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    USHORT          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    INT             reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    UINT            reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    LONG            reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    ULONG           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    CHAR            reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    FLOAT           reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    VOID            reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    IDENTIFIER      reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    TYPEOF          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)
    RBRACE          reduce using rule 151 (AttributeSpecifier -> Attribute DeclarationBlock .)


state 280

    (161) DeclarationBlock -> LBRACE . DeclDefs_opt RBRACE
    (5) DeclDefs_opt -> . DeclDefs
    (6) DeclDefs_opt -> . empty
    (3) DeclDefs -> . DeclDef
    (4) DeclDefs -> . DeclDef DeclDefs
    (485) empty -> .
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (150) AttributeSpecifier -> . Attribute COLON
    (151) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (414) Allocator -> . NEW Parameters SEMICOLON
    (415) Allocator -> . NEW Parameters FunctionBody
    (416) Deallocator -> . DELETE Parameters SEMICOLON
    (417) Deallocator -> . DELETE Parameters FunctionBody
    (418) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (152) Attribute -> . VisibilityAttribute
    (153) Attribute -> . STATIC
    (154) Attribute -> . EXTERN
    (155) Attribute -> . FINAL
    (156) Attribute -> . AUTO
    (157) Attribute -> . CONST
    (158) Attribute -> . IMMUTABLE
    (159) Attribute -> . RETURN
    (446) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (448) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (140) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (396) AggregateDeclaration -> . ClassDeclaration
    (397) AggregateDeclaration -> . UnionDeclaration
    (427) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (428) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (429) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (162) VisibilityAttribute -> . PRIVATE
    (163) VisibilityAttribute -> . PROTECTED
    (164) VisibilityAttribute -> . PUBLIC
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (449) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (403) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt AggregateBody
    (398) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (400) UnionDeclaration -> . AnonUnionDeclaration
    (438) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (401) AnonUnionDeclaration -> . UNION AggregateBody
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    SEMICOLON       shift and go to state 111
    NEW             shift and go to state 107
    DELETE          shift and go to state 130
    ALIAS           shift and go to state 122
    MIXIN           shift and go to state 128
    STATIC          shift and go to state 105
    EXTERN          shift and go to state 106
    FINAL           shift and go to state 109
    AUTO            shift and go to state 120
    CONST           shift and go to state 104
    IMMUTABLE       shift and go to state 123
    RETURN          shift and go to state 124
    ENUM            shift and go to state 18
    IMPORT          shift and go to state 27
    PRIVATE         shift and go to state 115
    PROTECTED       shift and go to state 127
    PUBLIC          shift and go to state 126
    CLASS           shift and go to state 13
    UNION           shift and go to state 17

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 108
    StorageClasses_opt             shift and go to state 9
    DeclDefs                       shift and go to state 112
    VisibilityAttribute            shift and go to state 113
    DeclDefs_opt                   shift and go to state 479
    AliasThis                      shift and go to state 116
    DeclDef                        shift and go to state 117
    Deallocator                    shift and go to state 118
    AliasDeclaration               shift and go to state 12
    VarDeclarations                shift and go to state 23
    empty                          shift and go to state 119
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 110
    Declaration                    shift and go to state 121
    AnonymousEnumDeclaration       shift and go to state 20
    AnonUnionDeclaration           shift and go to state 22
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 125
    UnionDeclaration               shift and go to state 25
    ImportDeclaration              shift and go to state 10
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 129
    StorageClass                   shift and go to state 28

state 281

    (33) MixinDeclaration -> MIXIN LPAREN . AssignExpression RPAREN SEMICOLON
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 480

state 282

    (416) Deallocator -> DELETE Parameters . SEMICOLON
    (417) Deallocator -> DELETE Parameters . FunctionBody
    (478) FunctionBody -> . BlockStatement
    (479) FunctionBody -> . BodyStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

    SEMICOLON       shift and go to state 482
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

    FunctionBody                   shift and go to state 481
    BlockStatement                 shift and go to state 161
    BodyStatement                  shift and go to state 162

state 283

    (439) AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .

    ALIAS           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    ENUM            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IMPORT          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    STATIC          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CLASS           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    UNION           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    EXTERN          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FINAL           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    AUTO            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CONST           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DOT             reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    BOOL            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    SHORT           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    USHORT          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    INT             reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    UINT            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LONG            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    ULONG           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CHAR            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FLOAT           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    VOID            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TYPEOF          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    $end            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    SEMICOLON       reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CASE            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DEFAULT         reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LBRACE          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IF              reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    WHILE           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DO              reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FOR             reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    SWITCH          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CONTINUE        reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    BREAK           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    RETURN          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    GOTO            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    WITH            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    MIXIN           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LPAREN          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FOREACH         reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    UAMPERSAND      reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TIMES           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    UMINUS          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    UPLUS           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TILDE           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CAST            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    THIS            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    NULL            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TRUE            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FALSE           reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DOLLAR          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    INUMBER         reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DNUMBER         reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LIT_STR         reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LBRACKET        reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FUNCTION        reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    NEW             reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TYPEID          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    BODY            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    RBRACE          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    ELSE            reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DELETE          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PRIVATE         reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PROTECTED       reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PUBLIC          reduce using rule 439 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)


state 284

    (79) TypeCtors -> TypeCtor TypeCtors .

    DOT             reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    BOOL            reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    SHORT           reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    USHORT          reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    INT             reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    UINT            reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    LONG            reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    ULONG           reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    CHAR            reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    FLOAT           reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    VOID            reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    IDENTIFIER      reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    TYPEOF          reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    CONST           reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    IMMUTABLE       reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)
    RPAREN          reduce using rule 79 (TypeCtors -> TypeCtor TypeCtors .)


state 285

    (440) AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .

    ALIAS           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    ENUM            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IMPORT          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    STATIC          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CLASS           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    UNION           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    EXTERN          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FINAL           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    AUTO            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CONST           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DOT             reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    BOOL            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    SHORT           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    USHORT          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    INT             reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    UINT            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LONG            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    ULONG           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CHAR            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FLOAT           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    VOID            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TYPEOF          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    $end            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    SEMICOLON       reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CASE            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DEFAULT         reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LBRACE          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IF              reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    WHILE           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DO              reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FOR             reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    SWITCH          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CONTINUE        reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    BREAK           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    RETURN          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    GOTO            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    WITH            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    MIXIN           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LPAREN          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FOREACH         reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    UAMPERSAND      reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TIMES           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    UMINUS          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    UPLUS           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TILDE           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CAST            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    THIS            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    NULL            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TRUE            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FALSE           reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DOLLAR          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    INUMBER         reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DNUMBER         reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LIT_STR         reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LBRACKET        reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FUNCTION        reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    NEW             reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TYPEID          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    BODY            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    RBRACE          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    ELSE            reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DELETE          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PRIVATE         reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PROTECTED       reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PUBLIC          reduce using rule 440 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)


state 286

    (75) Type -> TypeCtors_opt BasicType . BasicType2_opt
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    IDENTIFIER      reduce using rule 485 (empty -> .)
    LBRACE          reduce using rule 485 (empty -> .)
    RPAREN          reduce using rule 485 (empty -> .)
    SEMICOLON       reduce using rule 485 (empty -> .)
    ELLIPSIS        reduce using rule 485 (empty -> .)
    COMMA           reduce using rule 485 (empty -> .)
    BODY            reduce using rule 485 (empty -> .)
    LPAREN          reduce using rule 485 (empty -> .)
    POWER           reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    PLUS_PLUS       reduce using rule 485 (empty -> .)
    MINUS_MINUS     reduce using rule 485 (empty -> .)
    DIV             reduce using rule 485 (empty -> .)
    MODULO          reduce using rule 485 (empty -> .)
    PLUS            reduce using rule 485 (empty -> .)
    MINUS           reduce using rule 485 (empty -> .)
    LEFT_SHIFT      reduce using rule 485 (empty -> .)
    RIGHT_SHIFT     reduce using rule 485 (empty -> .)
    IS_EQ           reduce using rule 485 (empty -> .)
    NOT_EQ          reduce using rule 485 (empty -> .)
    LESS            reduce using rule 485 (empty -> .)
    GREATER_EQ      reduce using rule 485 (empty -> .)
    GREATER         reduce using rule 485 (empty -> .)
    LESS_EQ         reduce using rule 485 (empty -> .)
    AMPERSAND       reduce using rule 485 (empty -> .)
    CARET           reduce using rule 485 (empty -> .)
    PIPE            reduce using rule 485 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 485 (empty -> .)
    QUESTION        reduce using rule 485 (empty -> .)
    DOUBLE_PIPE     reduce using rule 485 (empty -> .)
    ASSIGN          reduce using rule 485 (empty -> .)
    EQ_PLUS         reduce using rule 485 (empty -> .)
    EQ_MINUS        reduce using rule 485 (empty -> .)
    EQ_TIMES        reduce using rule 485 (empty -> .)
    EQ_DIV          reduce using rule 485 (empty -> .)
    EQ_MODULO       reduce using rule 485 (empty -> .)
    EQ_AND_BIT      reduce using rule 485 (empty -> .)
    EQ_OR_BIT       reduce using rule 485 (empty -> .)
    EQ_XOR_BIT      reduce using rule 485 (empty -> .)
    EQ_LEFT         reduce using rule 485 (empty -> .)
    EQ_RIGHT        reduce using rule 485 (empty -> .)
    RBRACKET        reduce using rule 485 (empty -> .)
    RANGE           reduce using rule 485 (empty -> .)
    RBRACE          reduce using rule 485 (empty -> .)
    COLON           reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

  ! LBRACKET        [ reduce using rule 485 (empty -> .) ]
  ! TIMES           [ reduce using rule 485 (empty -> .) ]

    BasicType2X                    shift and go to state 84
    BasicType2                     shift and go to state 93
    BasicType2_opt                 shift and go to state 483
    empty                          shift and go to state 89

state 287

    (434) EnumMembers -> EnumMember COMMA .
    (435) EnumMembers -> EnumMember COMMA . EnumMembers
    (433) EnumMembers -> . EnumMember
    (434) EnumMembers -> . EnumMember COMMA
    (435) EnumMembers -> . EnumMember COMMA EnumMembers
    (436) EnumMember -> . IDENTIFIER
    (437) EnumMember -> . IDENTIFIER ASSIGN AssignExpression

    RBRACE          reduce using rule 434 (EnumMembers -> EnumMember COMMA .)
    IDENTIFIER      shift and go to state 139

    EnumMember                     shift and go to state 293
    EnumMembers                    shift and go to state 484

state 288

    (437) EnumMember -> IDENTIFIER ASSIGN . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 485

state 289

    (445) AnonymousEnumMember -> Type IDENTIFIER . ASSIGN AssignExpression

    ASSIGN          shift and go to state 486


state 290

    (442) AnonymousEnumMembers -> AnonymousEnumMember COMMA .
    (443) AnonymousEnumMembers -> AnonymousEnumMember COMMA . AnonymousEnumMembers
    (441) AnonymousEnumMembers -> . AnonymousEnumMember
    (442) AnonymousEnumMembers -> . AnonymousEnumMember COMMA
    (443) AnonymousEnumMembers -> . AnonymousEnumMember COMMA AnonymousEnumMembers
    (444) AnonymousEnumMember -> . EnumMember
    (445) AnonymousEnumMember -> . Type IDENTIFIER ASSIGN AssignExpression
    (436) EnumMember -> . IDENTIFIER
    (437) EnumMember -> . IDENTIFIER ASSIGN AssignExpression
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 442 (AnonymousEnumMembers -> AnonymousEnumMember COMMA .)
    IDENTIFIER      shift and go to state 139
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    EnumMember                     shift and go to state 487
    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    AnonymousEnumMembers           shift and go to state 488
    TypeCtors_opt                  shift and go to state 137
    AnonymousEnumMember            shift and go to state 141
    Type                           shift and go to state 140
    empty                          shift and go to state 142

state 291

    (438) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE . EnumMembers RBRACE
    (433) EnumMembers -> . EnumMember
    (434) EnumMembers -> . EnumMember COMMA
    (435) EnumMembers -> . EnumMember COMMA EnumMembers
    (436) EnumMember -> . IDENTIFIER
    (437) EnumMember -> . IDENTIFIER ASSIGN AssignExpression

    IDENTIFIER      shift and go to state 139

    EnumMembers                    shift and go to state 489
    EnumMember                     shift and go to state 293

state 292

    (431) EnumBody -> LBRACE EnumMembers . RBRACE

    RBRACE          shift and go to state 490


state 293

    (433) EnumMembers -> EnumMember .
    (434) EnumMembers -> EnumMember . COMMA
    (435) EnumMembers -> EnumMember . COMMA EnumMembers

    RBRACE          reduce using rule 433 (EnumMembers -> EnumMember .)
    COMMA           shift and go to state 287


state 294

    (428) EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType . EnumBody
    (431) EnumBody -> . LBRACE EnumMembers RBRACE
    (432) EnumBody -> . SEMICOLON

    LBRACE          shift and go to state 145
    SEMICOLON       shift and go to state 146

    EnumBody                       shift and go to state 491

state 295

    (140) AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators . SEMICOLON

    SEMICOLON       shift and go to state 492


state 296

    (141) AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator . SEMICOLON

    SEMICOLON       shift and go to state 493


state 297

    (144) AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY .

    SEMICOLON       reduce using rule 144 (AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY .)
    COMMA           reduce using rule 144 (AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY .)


state 298

    (145) AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt . Type
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    Type                           shift and go to state 494
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    empty                          shift and go to state 142

state 299

    (146) AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral .

    SEMICOLON       reduce using rule 146 (AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral .)
    COMMA           reduce using rule 146 (AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral .)


state 300

    (26) Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .

    COMMA           reduce using rule 26 (Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .)
    COLON           reduce using rule 26 (Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .)
    SEMICOLON       reduce using rule 26 (Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .)


state 301

    (16) ModuleName -> IDENTIFIER .
    (19) PackageName -> IDENTIFIER .

    COMMA           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    COLON           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 16 (ModuleName -> IDENTIFIER .)
    DOT             reduce using rule 19 (PackageName -> IDENTIFIER .)


state 302

    (27) ImportBindings -> Import COLON ImportBindList .

    SEMICOLON       reduce using rule 27 (ImportBindings -> Import COLON ImportBindList .)


state 303

    (28) ImportBindList -> ImportBind .
    (29) ImportBindList -> ImportBind . COMMA ImportBindList

    SEMICOLON       reduce using rule 28 (ImportBindList -> ImportBind .)
    COMMA           shift and go to state 495


state 304

    (30) ImportBind -> IDENTIFIER .
    (31) ImportBind -> IDENTIFIER . ASSIGN IDENTIFIER

    COMMA           reduce using rule 30 (ImportBind -> IDENTIFIER .)
    SEMICOLON       reduce using rule 30 (ImportBind -> IDENTIFIER .)
    ASSIGN          shift and go to state 496


state 305

    (24) ImportList -> Import COMMA ImportList .

    SEMICOLON       reduce using rule 24 (ImportList -> Import COMMA ImportList .)


state 306

    (18) Packages -> Packages DOT PackageName .

    DOT             reduce using rule 18 (Packages -> Packages DOT PackageName .)


state 307

    (15) ModuleFullyQualifiedName -> Packages DOT ModuleName .

    COMMA           reduce using rule 15 (ModuleFullyQualifiedName -> Packages DOT ModuleName .)
    COLON           reduce using rule 15 (ModuleFullyQualifiedName -> Packages DOT ModuleName .)
    SEMICOLON       reduce using rule 15 (ModuleFullyQualifiedName -> Packages DOT ModuleName .)


state 308

    (301) NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .

    SEMICOLON       reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CASE            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DEFAULT         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LBRACE          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IDENTIFIER      reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IF              reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    WHILE           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DO              reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FOR             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    SWITCH          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FINAL           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CONTINUE        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    BREAK           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    RETURN          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    GOTO            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    WITH            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    MIXIN           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IMPORT          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    STATIC          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LPAREN          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FOREACH         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FOREACH_REVERSE reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ENUM            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    EXTERN          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    AUTO            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CONST           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IMMUTABLE       reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    UAMPERSAND      reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    PLUS_PLUS       reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    MINUS_MINUS     reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TIMES           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    UMINUS          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    UPLUS           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    EXCLAMATION     reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TILDE           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CAST            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DOT             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    THIS            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    NULL            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TRUE            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FALSE           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DOLLAR          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    INUMBER         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DNUMBER         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LIT_CHAR        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LIT_STR         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LBRACKET        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FUNCTION        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    NEW             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    BOOL            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    SHORT           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    USHORT          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    INT             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    UINT            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LONG            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ULONG           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CHAR            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FLOAT           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    VOID            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TYPEOF          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TYPEID          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    BODY            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ALIAS           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CLASS           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    UNION           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    RBRACE          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ELSE            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)


state 309

    (326) StatementList -> Statement .
    (327) StatementList -> Statement . StatementList
    (326) StatementList -> . Statement
    (327) StatementList -> . Statement StatementList
    (286) Statement -> . SEMICOLON
    (287) Statement -> . NonEmptyStatement
    (288) Statement -> . ScopeBlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (320) ScopeBlockStatement -> . BlockStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACE          reduce using rule 326 (StatementList -> Statement .)
    SEMICOLON       shift and go to state 336
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    LBRACE          shift and go to state 159
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    Statement                      shift and go to state 309
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 312
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    StatementList                  shift and go to state 497
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 348
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ScopeBlockStatement            shift and go to state 357
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 310

    (393) WithStatement -> WITH . LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> WITH . LPAREN Symbol RPAREN ScopeStatement

    LPAREN          shift and go to state 498


state 311

    (309) NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .

    SEMICOLON       reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CASE            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DEFAULT         reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LBRACE          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IDENTIFIER      reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IF              reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    WHILE           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DO              reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FOR             reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    SWITCH          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FINAL           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CONTINUE        reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    BREAK           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    RETURN          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    GOTO            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    WITH            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    MIXIN           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IMPORT          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    STATIC          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LPAREN          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FOREACH         reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FOREACH_REVERSE reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ENUM            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    EXTERN          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    AUTO            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CONST           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IMMUTABLE       reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    UAMPERSAND      reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    PLUS_PLUS       reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    MINUS_MINUS     reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TIMES           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    UMINUS          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    UPLUS           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    EXCLAMATION     reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TILDE           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CAST            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DOT             reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    THIS            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    NULL            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TRUE            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FALSE           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DOLLAR          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    INUMBER         reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DNUMBER         reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LIT_CHAR        reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LIT_STR         reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LBRACKET        reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FUNCTION        reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    NEW             reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    BOOL            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    SHORT           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    USHORT          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    INT             reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    UINT            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LONG            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ULONG           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CHAR            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FLOAT           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    VOID            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TYPEOF          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TYPEID          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    BODY            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ALIAS           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CLASS           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    UNION           reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    RBRACE          reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ELSE            reduce using rule 309 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)


state 312

    (320) ScopeBlockStatement -> BlockStatement .
    (278) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    DEFAULT         reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    LBRACE          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    IF              reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    WHILE           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    DO              reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    FOR             reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    SWITCH          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    FINAL           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    CONTINUE        reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    BREAK           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    RETURN          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    GOTO            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    WITH            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    MIXIN           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    IMPORT          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    STATIC          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    FOREACH         reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    ENUM            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    EXTERN          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    AUTO            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    CONST           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    UAMPERSAND      reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    UMINUS          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    UPLUS           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    TILDE           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    CAST            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    THIS            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    NULL            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    TRUE            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    FALSE           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    DOLLAR          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    INUMBER         reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    DNUMBER         reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    LIT_STR         reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    LBRACKET        reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    FUNCTION        reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    NEW             reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    BOOL            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    SHORT           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    USHORT          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    INT             reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    UINT            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    LONG            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    ULONG           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    CHAR            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    FLOAT           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    VOID            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    TYPEOF          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    TYPEID          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    BODY            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    ALIAS           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    CLASS           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    UNION           reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    RBRACE          reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    ELSE            reduce using rule 320 (ScopeBlockStatement -> BlockStatement .)
    POWER           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]


state 313

    (20) ImportDeclaration -> IMPORT . ImportList SEMICOLON
    (283) ImportExpression -> IMPORT . LPAREN AssignExpression RPAREN
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    LPAREN          shift and go to state 387
    IDENTIFIER      shift and go to state 72

    ModuleFullyQualifiedName       shift and go to state 67
    ImportBindings                 shift and go to state 68
    ModuleAliasIdentifier          shift and go to state 69
    ImportList                     shift and go to state 70
    PackageName                    shift and go to state 71
    ModuleName                     shift and go to state 75
    Import                         shift and go to state 73
    Packages                       shift and go to state 74

state 314

    (389) GotoStatement -> GOTO . IDENTIFIER SEMICOLON
    (390) GotoStatement -> GOTO . DEFAULT SEMICOLON
    (391) GotoStatement -> GOTO . CASE SEMICOLON
    (392) GotoStatement -> GOTO . CASE Expression SEMICOLON

    IDENTIFIER      shift and go to state 501
    DEFAULT         shift and go to state 500
    CASE            shift and go to state 499


state 315

    (325) BlockStatement -> LBRACE StatementList . RBRACE

    RBRACE          shift and go to state 502


state 316

    (351) Foreach -> FOREACH .

    LPAREN          reduce using rule 351 (Foreach -> FOREACH .)


state 317

    (312) NonEmptyStatementNoCaseNoDefault -> ReturnStatement .

    SEMICOLON       reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CASE            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DEFAULT         reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LBRACE          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IDENTIFIER      reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IF              reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    WHILE           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DO              reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FOR             reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    SWITCH          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FINAL           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CONTINUE        reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    BREAK           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    RETURN          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    GOTO            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    WITH            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    MIXIN           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IMPORT          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    STATIC          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LPAREN          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FOREACH         reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FOREACH_REVERSE reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ENUM            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    EXTERN          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    AUTO            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CONST           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IMMUTABLE       reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    UAMPERSAND      reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    PLUS_PLUS       reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    MINUS_MINUS     reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TIMES           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    UMINUS          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    UPLUS           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    EXCLAMATION     reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TILDE           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CAST            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DOT             reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    THIS            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    NULL            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TRUE            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FALSE           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DOLLAR          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    INUMBER         reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DNUMBER         reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LIT_CHAR        reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LIT_STR         reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LBRACKET        reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FUNCTION        reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    NEW             reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    BOOL            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    SHORT           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    USHORT          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    INT             reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    UINT            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LONG            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ULONG           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CHAR            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FLOAT           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    VOID            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TYPEOF          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TYPEID          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    BODY            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ALIAS           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CLASS           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    UNION           reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    RBRACE          reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ELSE            reduce using rule 312 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)


state 318

    (388) ReturnStatement -> RETURN . Expression_opt SEMICOLON
    (384) Expression_opt -> . Expression
    (385) Expression_opt -> . empty
    (165) Expression -> . CommaExpression
    (485) empty -> .
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    SEMICOLON       reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 503
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 504
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    Expression_opt                 shift and go to state 505
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 319

    (349) AggregateForeach -> Foreach . LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN

    LPAREN          shift and go to state 506


state 320

    (381) FinalSwitchStatement -> FINAL . SWITCH LPAREN Expression RPAREN ScopeStatement
    (117) StorageClass -> FINAL .

    SWITCH          shift and go to state 507
    ENUM            reduce using rule 117 (StorageClass -> FINAL .)
    STATIC          reduce using rule 117 (StorageClass -> FINAL .)
    EXTERN          reduce using rule 117 (StorageClass -> FINAL .)
    FINAL           reduce using rule 117 (StorageClass -> FINAL .)
    AUTO            reduce using rule 117 (StorageClass -> FINAL .)
    CONST           reduce using rule 117 (StorageClass -> FINAL .)
    IMMUTABLE       reduce using rule 117 (StorageClass -> FINAL .)
    ALIAS           reduce using rule 117 (StorageClass -> FINAL .)
    IMPORT          reduce using rule 117 (StorageClass -> FINAL .)
    CLASS           reduce using rule 117 (StorageClass -> FINAL .)
    UNION           reduce using rule 117 (StorageClass -> FINAL .)
    DOT             reduce using rule 117 (StorageClass -> FINAL .)
    BOOL            reduce using rule 117 (StorageClass -> FINAL .)
    SHORT           reduce using rule 117 (StorageClass -> FINAL .)
    USHORT          reduce using rule 117 (StorageClass -> FINAL .)
    INT             reduce using rule 117 (StorageClass -> FINAL .)
    UINT            reduce using rule 117 (StorageClass -> FINAL .)
    LONG            reduce using rule 117 (StorageClass -> FINAL .)
    ULONG           reduce using rule 117 (StorageClass -> FINAL .)
    CHAR            reduce using rule 117 (StorageClass -> FINAL .)
    FLOAT           reduce using rule 117 (StorageClass -> FINAL .)
    VOID            reduce using rule 117 (StorageClass -> FINAL .)
    IDENTIFIER      reduce using rule 117 (StorageClass -> FINAL .)
    TYPEOF          reduce using rule 117 (StorageClass -> FINAL .)


state 321

    (352) Foreach -> FOREACH_REVERSE .

    LPAREN          reduce using rule 352 (Foreach -> FOREACH_REVERSE .)


state 322

    (329) DeclarationStatement -> StorageClasses_opt . Declaration
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (446) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator FunctionBody
    (447) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (448) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (140) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (141) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (142) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (396) AggregateDeclaration -> . ClassDeclaration
    (397) AggregateDeclaration -> . UnionDeclaration
    (427) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (428) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (429) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (449) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (403) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (404) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt AggregateBody
    (398) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (399) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (400) UnionDeclaration -> . AnonUnionDeclaration
    (438) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (439) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (440) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (401) AnonUnionDeclaration -> . UNION AggregateBody
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    ALIAS           shift and go to state 19
    ENUM            shift and go to state 18
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    CLASS           shift and go to state 13
    UNION           shift and go to state 17
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 21

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    StorageClasses                 shift and go to state 1
    AliasDeclaration               shift and go to state 12
    ClassDeclaration               shift and go to state 26
    VarDeclarations                shift and go to state 23
    empty                          shift and go to state 65
    AutoFuncDeclaration            shift and go to state 16
    Declaration                    shift and go to state 508
    AnonymousEnumDeclaration       shift and go to state 20
    AnonUnionDeclaration           shift and go to state 22
    EnumDeclaration                shift and go to state 24
    UnionDeclaration               shift and go to state 25
    StorageClass                   shift and go to state 28

state 323

    (311) NonEmptyStatementNoCaseNoDefault -> BreakStatement .

    SEMICOLON       reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CASE            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DEFAULT         reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LBRACE          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IDENTIFIER      reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IF              reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    WHILE           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DO              reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FOR             reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    SWITCH          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FINAL           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CONTINUE        reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    BREAK           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    RETURN          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    GOTO            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    WITH            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    MIXIN           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IMPORT          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    STATIC          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LPAREN          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FOREACH         reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FOREACH_REVERSE reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ENUM            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    EXTERN          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    AUTO            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CONST           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IMMUTABLE       reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    UAMPERSAND      reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    PLUS_PLUS       reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    MINUS_MINUS     reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TIMES           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    UMINUS          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    UPLUS           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    EXCLAMATION     reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TILDE           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CAST            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DOT             reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    THIS            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    NULL            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TRUE            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FALSE           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DOLLAR          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    INUMBER         reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DNUMBER         reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LIT_CHAR        reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LIT_STR         reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LBRACKET        reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FUNCTION        reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    NEW             reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    BOOL            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    SHORT           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    USHORT          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    INT             reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    UINT            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LONG            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ULONG           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CHAR            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FLOAT           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    VOID            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TYPEOF          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TYPEID          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    BODY            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ALIAS           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CLASS           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    UNION           reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    RBRACE          reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ELSE            reduce using rule 311 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)


state 324

    (313) NonEmptyStatementNoCaseNoDefault -> GotoStatement .

    SEMICOLON       reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CASE            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DEFAULT         reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LBRACE          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IDENTIFIER      reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IF              reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    WHILE           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DO              reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FOR             reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    SWITCH          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FINAL           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CONTINUE        reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    BREAK           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    RETURN          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    GOTO            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    WITH            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    MIXIN           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IMPORT          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    STATIC          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LPAREN          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FOREACH         reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FOREACH_REVERSE reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ENUM            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    EXTERN          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    AUTO            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CONST           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IMMUTABLE       reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    UAMPERSAND      reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    PLUS_PLUS       reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    MINUS_MINUS     reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TIMES           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    UMINUS          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    UPLUS           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    EXCLAMATION     reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TILDE           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CAST            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DOT             reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    THIS            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    NULL            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TRUE            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FALSE           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DOLLAR          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    INUMBER         reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DNUMBER         reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LIT_CHAR        reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LIT_STR         reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LBRACKET        reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FUNCTION        reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    NEW             reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    BOOL            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    SHORT           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    USHORT          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    INT             reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    UINT            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LONG            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ULONG           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CHAR            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FLOAT           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    VOID            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TYPEOF          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TYPEID          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    BODY            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ALIAS           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CLASS           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    UNION           reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    RBRACE          reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ELSE            reduce using rule 313 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)


state 325

    (370) CaseStatement -> CASE . ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> CASE . FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (372) FirstExp -> . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 509
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    FirstExp                       shift and go to state 510
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 511

state 326

    (340) ForStatement -> FOR . LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement

    LPAREN          shift and go to state 512


state 327

    (307) NonEmptyStatementNoCaseNoDefault -> ForeachStatement .

    SEMICOLON       reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CASE            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DEFAULT         reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LBRACE          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IDENTIFIER      reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IF              reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    WHILE           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DO              reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FOR             reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    SWITCH          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FINAL           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CONTINUE        reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    BREAK           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    RETURN          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    GOTO            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    WITH            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    MIXIN           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IMPORT          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    STATIC          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LPAREN          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FOREACH         reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FOREACH_REVERSE reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ENUM            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    EXTERN          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    AUTO            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CONST           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IMMUTABLE       reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    UAMPERSAND      reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    PLUS_PLUS       reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    MINUS_MINUS     reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TIMES           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    UMINUS          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    UPLUS           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    EXCLAMATION     reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TILDE           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CAST            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DOT             reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    THIS            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    NULL            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TRUE            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FALSE           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DOLLAR          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    INUMBER         reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DNUMBER         reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LIT_CHAR        reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LIT_STR         reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LBRACKET        reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FUNCTION        reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    NEW             reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    BOOL            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    SHORT           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    USHORT          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    INT             reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    UINT            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LONG            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ULONG           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CHAR            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FLOAT           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    VOID            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TYPEOF          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TYPEID          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    BODY            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ALIAS           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CLASS           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    UNION           reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    RBRACE          reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ELSE            reduce using rule 307 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)


state 328

    (315) NonEmptyStatementNoCaseNoDefault -> MixinStatement .

    SEMICOLON       reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CASE            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DEFAULT         reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LBRACE          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IDENTIFIER      reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IF              reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    WHILE           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DO              reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FOR             reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    SWITCH          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FINAL           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CONTINUE        reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    BREAK           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    RETURN          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    GOTO            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    WITH            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    MIXIN           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IMPORT          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    STATIC          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LPAREN          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FOREACH         reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FOREACH_REVERSE reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ENUM            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    EXTERN          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    AUTO            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CONST           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IMMUTABLE       reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    UAMPERSAND      reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    PLUS_PLUS       reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    MINUS_MINUS     reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TIMES           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    UMINUS          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    UPLUS           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    EXCLAMATION     reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TILDE           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CAST            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DOT             reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    THIS            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    NULL            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TRUE            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FALSE           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DOLLAR          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    INUMBER         reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DNUMBER         reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LIT_CHAR        reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LIT_STR         reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LBRACKET        reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FUNCTION        reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    NEW             reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    BOOL            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    SHORT           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    USHORT          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    INT             reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    UINT            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LONG            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ULONG           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CHAR            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FLOAT           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    VOID            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TYPEOF          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TYPEID          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    BODY            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ALIAS           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CLASS           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    UNION           reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    RBRACE          reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ELSE            reduce using rule 315 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)


state 329

    (386) ContinueStatement -> CONTINUE . IDENTIFIER_opt SEMICOLON
    (382) IDENTIFIER_opt -> . IDENTIFIER
    (383) IDENTIFIER_opt -> . empty
    (485) empty -> .

    IDENTIFIER      shift and go to state 514
    SEMICOLON       reduce using rule 485 (empty -> .)

    IDENTIFIER_opt                 shift and go to state 513
    empty                          shift and go to state 515

state 330

    (395) MixinStatement -> MIXIN . LPAREN AssignExpression RPAREN SEMICOLON
    (282) MixinExpression -> MIXIN . LPAREN AssignExpression RPAREN

    LPAREN          shift and go to state 516


state 331

    (368) ForeachRangeStatement -> RangeForeach . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 518
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 332

    (374) DefaultStatement -> DEFAULT . COLON ScopeStatementList

    COLON           shift and go to state 520


state 333

    (338) WhileStatement -> WHILE . LPAREN Expression RPAREN ScopeStatement

    LPAREN          shift and go to state 521


state 334

    (316) NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .

    SEMICOLON       reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CASE            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DEFAULT         reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LBRACE          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IDENTIFIER      reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IF              reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    WHILE           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DO              reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FOR             reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    SWITCH          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FINAL           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CONTINUE        reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    BREAK           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    RETURN          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    GOTO            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    WITH            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    MIXIN           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IMPORT          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    STATIC          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LPAREN          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FOREACH         reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FOREACH_REVERSE reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ENUM            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    EXTERN          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    AUTO            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CONST           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IMMUTABLE       reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    UAMPERSAND      reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    PLUS_PLUS       reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    MINUS_MINUS     reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TIMES           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    UMINUS          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    UPLUS           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    EXCLAMATION     reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TILDE           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CAST            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DOT             reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    THIS            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    NULL            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TRUE            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FALSE           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DOLLAR          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    INUMBER         reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DNUMBER         reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LIT_CHAR        reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LIT_STR         reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LBRACKET        reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FUNCTION        reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    NEW             reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    BOOL            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    SHORT           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    USHORT          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    INT             reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    UINT            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LONG            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ULONG           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CHAR            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FLOAT           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    VOID            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TYPEOF          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TYPEID          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    BODY            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ALIAS           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CLASS           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    UNION           reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    RBRACE          reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ELSE            reduce using rule 316 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)


state 335

    (306) NonEmptyStatementNoCaseNoDefault -> ForStatement .

    SEMICOLON       reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CASE            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DEFAULT         reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LBRACE          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IDENTIFIER      reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IF              reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    WHILE           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DO              reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FOR             reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    SWITCH          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FINAL           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CONTINUE        reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    BREAK           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    RETURN          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    GOTO            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    WITH            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    MIXIN           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IMPORT          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    STATIC          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LPAREN          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FOREACH         reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FOREACH_REVERSE reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ENUM            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    EXTERN          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    AUTO            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CONST           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IMMUTABLE       reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    UAMPERSAND      reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    PLUS_PLUS       reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    MINUS_MINUS     reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TIMES           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    UMINUS          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    UPLUS           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    EXCLAMATION     reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TILDE           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CAST            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DOT             reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    THIS            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    NULL            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TRUE            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FALSE           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DOLLAR          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    INUMBER         reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DNUMBER         reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LIT_CHAR        reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LIT_STR         reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LBRACKET        reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FUNCTION        reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    NEW             reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    BOOL            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    SHORT           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    USHORT          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    INT             reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    UINT            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LONG            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ULONG           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CHAR            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FLOAT           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    VOID            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TYPEOF          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TYPEID          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    BODY            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ALIAS           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CLASS           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    UNION           reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    RBRACE          reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ELSE            reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)


state 336

    (286) Statement -> SEMICOLON .

    SEMICOLON       reduce using rule 286 (Statement -> SEMICOLON .)
    CASE            reduce using rule 286 (Statement -> SEMICOLON .)
    DEFAULT         reduce using rule 286 (Statement -> SEMICOLON .)
    LBRACE          reduce using rule 286 (Statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 286 (Statement -> SEMICOLON .)
    IF              reduce using rule 286 (Statement -> SEMICOLON .)
    WHILE           reduce using rule 286 (Statement -> SEMICOLON .)
    DO              reduce using rule 286 (Statement -> SEMICOLON .)
    FOR             reduce using rule 286 (Statement -> SEMICOLON .)
    SWITCH          reduce using rule 286 (Statement -> SEMICOLON .)
    FINAL           reduce using rule 286 (Statement -> SEMICOLON .)
    CONTINUE        reduce using rule 286 (Statement -> SEMICOLON .)
    BREAK           reduce using rule 286 (Statement -> SEMICOLON .)
    RETURN          reduce using rule 286 (Statement -> SEMICOLON .)
    GOTO            reduce using rule 286 (Statement -> SEMICOLON .)
    WITH            reduce using rule 286 (Statement -> SEMICOLON .)
    MIXIN           reduce using rule 286 (Statement -> SEMICOLON .)
    IMPORT          reduce using rule 286 (Statement -> SEMICOLON .)
    STATIC          reduce using rule 286 (Statement -> SEMICOLON .)
    LPAREN          reduce using rule 286 (Statement -> SEMICOLON .)
    FOREACH         reduce using rule 286 (Statement -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 286 (Statement -> SEMICOLON .)
    ENUM            reduce using rule 286 (Statement -> SEMICOLON .)
    EXTERN          reduce using rule 286 (Statement -> SEMICOLON .)
    AUTO            reduce using rule 286 (Statement -> SEMICOLON .)
    CONST           reduce using rule 286 (Statement -> SEMICOLON .)
    IMMUTABLE       reduce using rule 286 (Statement -> SEMICOLON .)
    UAMPERSAND      reduce using rule 286 (Statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 286 (Statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 286 (Statement -> SEMICOLON .)
    TIMES           reduce using rule 286 (Statement -> SEMICOLON .)
    UMINUS          reduce using rule 286 (Statement -> SEMICOLON .)
    UPLUS           reduce using rule 286 (Statement -> SEMICOLON .)
    EXCLAMATION     reduce using rule 286 (Statement -> SEMICOLON .)
    TILDE           reduce using rule 286 (Statement -> SEMICOLON .)
    CAST            reduce using rule 286 (Statement -> SEMICOLON .)
    DOT             reduce using rule 286 (Statement -> SEMICOLON .)
    THIS            reduce using rule 286 (Statement -> SEMICOLON .)
    NULL            reduce using rule 286 (Statement -> SEMICOLON .)
    TRUE            reduce using rule 286 (Statement -> SEMICOLON .)
    FALSE           reduce using rule 286 (Statement -> SEMICOLON .)
    DOLLAR          reduce using rule 286 (Statement -> SEMICOLON .)
    INUMBER         reduce using rule 286 (Statement -> SEMICOLON .)
    DNUMBER         reduce using rule 286 (Statement -> SEMICOLON .)
    LIT_CHAR        reduce using rule 286 (Statement -> SEMICOLON .)
    LIT_STR         reduce using rule 286 (Statement -> SEMICOLON .)
    LBRACKET        reduce using rule 286 (Statement -> SEMICOLON .)
    FUNCTION        reduce using rule 286 (Statement -> SEMICOLON .)
    NEW             reduce using rule 286 (Statement -> SEMICOLON .)
    BOOL            reduce using rule 286 (Statement -> SEMICOLON .)
    SHORT           reduce using rule 286 (Statement -> SEMICOLON .)
    USHORT          reduce using rule 286 (Statement -> SEMICOLON .)
    INT             reduce using rule 286 (Statement -> SEMICOLON .)
    UINT            reduce using rule 286 (Statement -> SEMICOLON .)
    LONG            reduce using rule 286 (Statement -> SEMICOLON .)
    ULONG           reduce using rule 286 (Statement -> SEMICOLON .)
    CHAR            reduce using rule 286 (Statement -> SEMICOLON .)
    FLOAT           reduce using rule 286 (Statement -> SEMICOLON .)
    VOID            reduce using rule 286 (Statement -> SEMICOLON .)
    TYPEOF          reduce using rule 286 (Statement -> SEMICOLON .)
    TYPEID          reduce using rule 286 (Statement -> SEMICOLON .)
    BODY            reduce using rule 286 (Statement -> SEMICOLON .)
    ALIAS           reduce using rule 286 (Statement -> SEMICOLON .)
    CLASS           reduce using rule 286 (Statement -> SEMICOLON .)
    UNION           reduce using rule 286 (Statement -> SEMICOLON .)
    RBRACE          reduce using rule 286 (Statement -> SEMICOLON .)


state 337

    (310) NonEmptyStatementNoCaseNoDefault -> ContinueStatement .

    SEMICOLON       reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CASE            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DEFAULT         reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LBRACE          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IDENTIFIER      reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IF              reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    WHILE           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DO              reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FOR             reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    SWITCH          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FINAL           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CONTINUE        reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    BREAK           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    RETURN          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    GOTO            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    WITH            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    MIXIN           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IMPORT          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    STATIC          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LPAREN          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FOREACH         reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FOREACH_REVERSE reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ENUM            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    EXTERN          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    AUTO            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CONST           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IMMUTABLE       reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    UAMPERSAND      reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    PLUS_PLUS       reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    MINUS_MINUS     reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TIMES           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    UMINUS          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    UPLUS           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    EXCLAMATION     reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TILDE           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CAST            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DOT             reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    THIS            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    NULL            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TRUE            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FALSE           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DOLLAR          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    INUMBER         reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DNUMBER         reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LIT_CHAR        reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LIT_STR         reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LBRACKET        reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FUNCTION        reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    NEW             reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    BOOL            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    SHORT           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    USHORT          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    INT             reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    UINT            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LONG            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ULONG           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CHAR            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FLOAT           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    VOID            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TYPEOF          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TYPEID          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    BODY            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ALIAS           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CLASS           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    UNION           reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    RBRACE          reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ELSE            reduce using rule 310 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)


state 338

    (317) NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .

    SEMICOLON       reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    CASE            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    DEFAULT         reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    LBRACE          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    IDENTIFIER      reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    IF              reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    WHILE           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    DO              reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    FOR             reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    SWITCH          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    FINAL           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    CONTINUE        reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    BREAK           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    RETURN          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    GOTO            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    WITH            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    MIXIN           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    IMPORT          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    STATIC          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    LPAREN          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    FOREACH         reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    FOREACH_REVERSE reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    ENUM            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    EXTERN          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    AUTO            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    CONST           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    IMMUTABLE       reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    UAMPERSAND      reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    PLUS_PLUS       reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    MINUS_MINUS     reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    TIMES           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    UMINUS          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    UPLUS           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    EXCLAMATION     reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    TILDE           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    CAST            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    DOT             reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    THIS            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    NULL            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    TRUE            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    FALSE           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    DOLLAR          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    INUMBER         reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    DNUMBER         reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    LIT_CHAR        reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    LIT_STR         reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    LBRACKET        reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    FUNCTION        reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    NEW             reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    BOOL            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    SHORT           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    USHORT          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    INT             reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    UINT            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    LONG            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    ULONG           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    CHAR            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    FLOAT           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    VOID            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    TYPEOF          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    TYPEID          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    BODY            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    ALIAS           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    CLASS           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    UNION           reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    RBRACE          reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)
    ELSE            reduce using rule 317 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .)


state 339

    (308) NonEmptyStatementNoCaseNoDefault -> SwitchStatement .

    SEMICOLON       reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CASE            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DEFAULT         reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LBRACE          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IDENTIFIER      reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IF              reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    WHILE           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DO              reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FOR             reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    SWITCH          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FINAL           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CONTINUE        reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    BREAK           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    RETURN          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    GOTO            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    WITH            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    MIXIN           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IMPORT          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    STATIC          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LPAREN          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FOREACH         reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FOREACH_REVERSE reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ENUM            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    EXTERN          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    AUTO            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CONST           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IMMUTABLE       reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    UAMPERSAND      reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    PLUS_PLUS       reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    MINUS_MINUS     reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TIMES           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    UMINUS          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    UPLUS           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    EXCLAMATION     reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TILDE           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CAST            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DOT             reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    THIS            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    NULL            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TRUE            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FALSE           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DOLLAR          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    INUMBER         reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DNUMBER         reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LIT_CHAR        reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LIT_STR         reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LBRACKET        reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FUNCTION        reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    NEW             reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    BOOL            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    SHORT           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    USHORT          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    INT             reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    UINT            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LONG            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ULONG           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CHAR            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FLOAT           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    VOID            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TYPEOF          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TYPEID          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    BODY            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ALIAS           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CLASS           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    UNION           reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    RBRACE          reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ELSE            reduce using rule 308 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)


state 340

    (369) SwitchStatement -> SWITCH . LPAREN Expression RPAREN ScopeStatement

    LPAREN          shift and go to state 522


state 341

    (299) NonEmptyStatement -> DefaultStatement .

    UAMPERSAND      reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    PLUS_PLUS       reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    MINUS_MINUS     reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    TIMES           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    UMINUS          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    UPLUS           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    EXCLAMATION     reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    LPAREN          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    TILDE           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    CAST            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    IDENTIFIER      reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    DOT             reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    THIS            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    NULL            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    TRUE            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    FALSE           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    DOLLAR          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    INUMBER         reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    DNUMBER         reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    LIT_CHAR        reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    LIT_STR         reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    LBRACKET        reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    FUNCTION        reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    MIXIN           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    IMPORT          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    NEW             reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    BOOL            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    SHORT           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    USHORT          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    INT             reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    UINT            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    LONG            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    ULONG           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    CHAR            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    FLOAT           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    VOID            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    CONST           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    IMMUTABLE       reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    TYPEOF          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    TYPEID          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    LBRACE          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    BODY            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    SEMICOLON       reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    CASE            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    DEFAULT         reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    IF              reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    WHILE           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    DO              reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    FOR             reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    SWITCH          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    FINAL           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    CONTINUE        reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    BREAK           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    RETURN          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    GOTO            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    WITH            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    STATIC          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    FOREACH         reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    FOREACH_REVERSE reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    ENUM            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    EXTERN          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    AUTO            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    ALIAS           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    CLASS           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    UNION           reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    RBRACE          reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)
    ELSE            reduce using rule 299 (NonEmptyStatement -> DefaultStatement .)


state 342

    (321) LabeledStatement -> IDENTIFIER . COLON
    (322) LabeledStatement -> IDENTIFIER . COLON NoScopeStatement
    (323) LabeledStatement -> IDENTIFIER . COLON Statement
    (247) PrimaryExpression -> IDENTIFIER .

    COLON           shift and go to state 523
    POWER           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOT             reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LPAREN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    TIMES           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DIV             reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MODULO          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PLUS            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MINUS           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    IS_EQ           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    NOT_EQ          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LESS            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    GREATER         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LESS_EQ         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    AMPERSAND       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    CARET           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PIPE            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    QUESTION        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    ASSIGN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_DIV          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    COMMA           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)


state 343

    (297) NonEmptyStatement -> CaseStatement .

    UAMPERSAND      reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    PLUS_PLUS       reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    MINUS_MINUS     reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    TIMES           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    UMINUS          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    UPLUS           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    EXCLAMATION     reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    LPAREN          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    TILDE           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    CAST            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    IDENTIFIER      reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    DOT             reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    THIS            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    NULL            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    TRUE            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    FALSE           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    DOLLAR          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    INUMBER         reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    DNUMBER         reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    LIT_CHAR        reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    LIT_STR         reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    LBRACKET        reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    FUNCTION        reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    MIXIN           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    IMPORT          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    NEW             reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    BOOL            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    SHORT           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    USHORT          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    INT             reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    UINT            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    LONG            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    ULONG           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    CHAR            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    FLOAT           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    VOID            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    CONST           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    IMMUTABLE       reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    TYPEOF          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    TYPEID          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    LBRACE          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    BODY            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    SEMICOLON       reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    CASE            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    DEFAULT         reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    IF              reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    WHILE           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    DO              reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    FOR             reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    SWITCH          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    FINAL           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    CONTINUE        reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    BREAK           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    RETURN          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    GOTO            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    WITH            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    STATIC          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    FOREACH         reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    FOREACH_REVERSE reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    ENUM            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    EXTERN          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    AUTO            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    ALIAS           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    CLASS           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    UNION           reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    RBRACE          reduce using rule 297 (NonEmptyStatement -> CaseStatement .)
    ELSE            reduce using rule 297 (NonEmptyStatement -> CaseStatement .)


state 344

    (296) NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .

    UAMPERSAND      reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TIMES           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    UMINUS          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    UPLUS           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LPAREN          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TILDE           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CAST            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DOT             reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    THIS            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    NULL            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TRUE            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FALSE           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DOLLAR          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    INUMBER         reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DNUMBER         reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LIT_STR         reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LBRACKET        reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FUNCTION        reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    MIXIN           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IMPORT          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    NEW             reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    BOOL            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    SHORT           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    USHORT          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    INT             reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    UINT            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LONG            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ULONG           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CHAR            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FLOAT           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    VOID            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CONST           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TYPEOF          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TYPEID          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LBRACE          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    BODY            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    SEMICOLON       reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CASE            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DEFAULT         reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IF              reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    WHILE           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DO              reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FOR             reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    SWITCH          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FINAL           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CONTINUE        reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    BREAK           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    RETURN          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    GOTO            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    WITH            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    STATIC          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH         reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ENUM            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    EXTERN          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    AUTO            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ALIAS           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CLASS           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    UNION           reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    RBRACE          reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ELSE            reduce using rule 296 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)


state 345

    (305) NonEmptyStatementNoCaseNoDefault -> DoStatement .

    SEMICOLON       reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CASE            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DEFAULT         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LBRACE          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IDENTIFIER      reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IF              reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    WHILE           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DO              reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FOR             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    SWITCH          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FINAL           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CONTINUE        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    BREAK           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    RETURN          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    GOTO            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    WITH            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    MIXIN           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IMPORT          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    STATIC          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LPAREN          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FOREACH         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FOREACH_REVERSE reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ENUM            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    EXTERN          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    AUTO            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CONST           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IMMUTABLE       reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    UAMPERSAND      reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    PLUS_PLUS       reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    MINUS_MINUS     reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TIMES           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    UMINUS          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    UPLUS           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    EXCLAMATION     reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TILDE           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CAST            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DOT             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    THIS            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    NULL            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TRUE            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FALSE           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DOLLAR          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    INUMBER         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DNUMBER         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LIT_CHAR        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LIT_STR         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LBRACKET        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FUNCTION        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    NEW             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    BOOL            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    SHORT           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    USHORT          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    INT             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    UINT            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LONG            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ULONG           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CHAR            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FLOAT           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    VOID            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TYPEOF          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TYPEID          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    BODY            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ALIAS           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CLASS           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    UNION           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    RBRACE          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ELSE            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)


state 346

    (328) ExpressionStatement -> Expression . SEMICOLON

    SEMICOLON       shift and go to state 524


state 347

    (304) NonEmptyStatementNoCaseNoDefault -> WhileStatement .

    SEMICOLON       reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CASE            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DEFAULT         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LBRACE          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IDENTIFIER      reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IF              reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    WHILE           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DO              reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FOR             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    SWITCH          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FINAL           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CONTINUE        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    BREAK           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    RETURN          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    GOTO            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    WITH            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    MIXIN           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IMPORT          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    STATIC          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LPAREN          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FOREACH         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FOREACH_REVERSE reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ENUM            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    EXTERN          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    AUTO            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CONST           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IMMUTABLE       reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    UAMPERSAND      reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    PLUS_PLUS       reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    MINUS_MINUS     reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TIMES           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    UMINUS          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    UPLUS           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    EXCLAMATION     reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TILDE           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CAST            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DOT             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    THIS            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    NULL            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TRUE            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FALSE           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DOLLAR          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    INUMBER         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DNUMBER         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LIT_CHAR        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LIT_STR         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LBRACKET        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FUNCTION        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    NEW             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    BOOL            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    SHORT           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    USHORT          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    INT             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    UINT            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LONG            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ULONG           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CHAR            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FLOAT           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    VOID            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TYPEOF          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TYPEID          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    BODY            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ALIAS           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CLASS           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    UNION           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    RBRACE          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ELSE            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)


state 348

    (287) Statement -> NonEmptyStatement .

    SEMICOLON       reduce using rule 287 (Statement -> NonEmptyStatement .)
    CASE            reduce using rule 287 (Statement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 287 (Statement -> NonEmptyStatement .)
    LBRACE          reduce using rule 287 (Statement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 287 (Statement -> NonEmptyStatement .)
    IF              reduce using rule 287 (Statement -> NonEmptyStatement .)
    WHILE           reduce using rule 287 (Statement -> NonEmptyStatement .)
    DO              reduce using rule 287 (Statement -> NonEmptyStatement .)
    FOR             reduce using rule 287 (Statement -> NonEmptyStatement .)
    SWITCH          reduce using rule 287 (Statement -> NonEmptyStatement .)
    FINAL           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 287 (Statement -> NonEmptyStatement .)
    BREAK           reduce using rule 287 (Statement -> NonEmptyStatement .)
    RETURN          reduce using rule 287 (Statement -> NonEmptyStatement .)
    GOTO            reduce using rule 287 (Statement -> NonEmptyStatement .)
    WITH            reduce using rule 287 (Statement -> NonEmptyStatement .)
    MIXIN           reduce using rule 287 (Statement -> NonEmptyStatement .)
    IMPORT          reduce using rule 287 (Statement -> NonEmptyStatement .)
    STATIC          reduce using rule 287 (Statement -> NonEmptyStatement .)
    LPAREN          reduce using rule 287 (Statement -> NonEmptyStatement .)
    FOREACH         reduce using rule 287 (Statement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 287 (Statement -> NonEmptyStatement .)
    ENUM            reduce using rule 287 (Statement -> NonEmptyStatement .)
    EXTERN          reduce using rule 287 (Statement -> NonEmptyStatement .)
    AUTO            reduce using rule 287 (Statement -> NonEmptyStatement .)
    CONST           reduce using rule 287 (Statement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 287 (Statement -> NonEmptyStatement .)
    UAMPERSAND      reduce using rule 287 (Statement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 287 (Statement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 287 (Statement -> NonEmptyStatement .)
    TIMES           reduce using rule 287 (Statement -> NonEmptyStatement .)
    UMINUS          reduce using rule 287 (Statement -> NonEmptyStatement .)
    UPLUS           reduce using rule 287 (Statement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 287 (Statement -> NonEmptyStatement .)
    TILDE           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CAST            reduce using rule 287 (Statement -> NonEmptyStatement .)
    DOT             reduce using rule 287 (Statement -> NonEmptyStatement .)
    THIS            reduce using rule 287 (Statement -> NonEmptyStatement .)
    NULL            reduce using rule 287 (Statement -> NonEmptyStatement .)
    TRUE            reduce using rule 287 (Statement -> NonEmptyStatement .)
    FALSE           reduce using rule 287 (Statement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 287 (Statement -> NonEmptyStatement .)
    INUMBER         reduce using rule 287 (Statement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 287 (Statement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 287 (Statement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 287 (Statement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 287 (Statement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 287 (Statement -> NonEmptyStatement .)
    NEW             reduce using rule 287 (Statement -> NonEmptyStatement .)
    BOOL            reduce using rule 287 (Statement -> NonEmptyStatement .)
    SHORT           reduce using rule 287 (Statement -> NonEmptyStatement .)
    USHORT          reduce using rule 287 (Statement -> NonEmptyStatement .)
    INT             reduce using rule 287 (Statement -> NonEmptyStatement .)
    UINT            reduce using rule 287 (Statement -> NonEmptyStatement .)
    LONG            reduce using rule 287 (Statement -> NonEmptyStatement .)
    ULONG           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CHAR            reduce using rule 287 (Statement -> NonEmptyStatement .)
    FLOAT           reduce using rule 287 (Statement -> NonEmptyStatement .)
    VOID            reduce using rule 287 (Statement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 287 (Statement -> NonEmptyStatement .)
    TYPEID          reduce using rule 287 (Statement -> NonEmptyStatement .)
    BODY            reduce using rule 287 (Statement -> NonEmptyStatement .)
    ALIAS           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CLASS           reduce using rule 287 (Statement -> NonEmptyStatement .)
    UNION           reduce using rule 287 (Statement -> NonEmptyStatement .)
    RBRACE          reduce using rule 287 (Statement -> NonEmptyStatement .)


state 349

    (387) BreakStatement -> BREAK . IDENTIFIER_opt SEMICOLON
    (382) IDENTIFIER_opt -> . IDENTIFIER
    (383) IDENTIFIER_opt -> . empty
    (485) empty -> .

    IDENTIFIER      shift and go to state 514
    SEMICOLON       reduce using rule 485 (empty -> .)

    IDENTIFIER_opt                 shift and go to state 525
    empty                          shift and go to state 515

state 350

    (139) StorageClasses_opt -> empty .
    (81) TypeCtors_opt -> empty .

  ! reduce/reduce conflict for DOT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for VOID resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 81 (TypeCtors_opt -> empty .)
    ALIAS           reduce using rule 139 (StorageClasses_opt -> empty .)
    ENUM            reduce using rule 139 (StorageClasses_opt -> empty .)
    IMPORT          reduce using rule 139 (StorageClasses_opt -> empty .)
    STATIC          reduce using rule 139 (StorageClasses_opt -> empty .)
    CLASS           reduce using rule 139 (StorageClasses_opt -> empty .)
    UNION           reduce using rule 139 (StorageClasses_opt -> empty .)
    EXTERN          reduce using rule 139 (StorageClasses_opt -> empty .)
    FINAL           reduce using rule 139 (StorageClasses_opt -> empty .)
    AUTO            reduce using rule 139 (StorageClasses_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)

  ! CONST           [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! DOT             [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! BOOL            [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! SHORT           [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! USHORT          [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! INT             [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! UINT            [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! LONG            [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! ULONG           [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! CHAR            [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! FLOAT           [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! VOID            [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 139 (StorageClasses_opt -> empty .) ]
  ! TYPEOF          [ reduce using rule 139 (StorageClasses_opt -> empty .) ]


state 351

    (339) DoStatement -> DO . ScopeStatement WHILE LPAREN Expression RPAREN
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 526
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 352

    (119) StorageClass -> CONST .
    (82) TypeCtor -> CONST .

  ! reduce/reduce conflict for CONST resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for DOT resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for BOOL resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for SHORT resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for USHORT resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for INT resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for UINT resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for LONG resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for ULONG resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for CHAR resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for FLOAT resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for VOID resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 82 (TypeCtor -> CONST .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 82 (TypeCtor -> CONST .)
    ENUM            reduce using rule 119 (StorageClass -> CONST .)
    STATIC          reduce using rule 119 (StorageClass -> CONST .)
    EXTERN          reduce using rule 119 (StorageClass -> CONST .)
    FINAL           reduce using rule 119 (StorageClass -> CONST .)
    AUTO            reduce using rule 119 (StorageClass -> CONST .)
    ALIAS           reduce using rule 119 (StorageClass -> CONST .)
    IMPORT          reduce using rule 119 (StorageClass -> CONST .)
    CLASS           reduce using rule 119 (StorageClass -> CONST .)
    UNION           reduce using rule 119 (StorageClass -> CONST .)
    LPAREN          reduce using rule 82 (TypeCtor -> CONST .)
    CONST           reduce using rule 82 (TypeCtor -> CONST .)
    IMMUTABLE       reduce using rule 82 (TypeCtor -> CONST .)
    DOT             reduce using rule 82 (TypeCtor -> CONST .)
    BOOL            reduce using rule 82 (TypeCtor -> CONST .)
    SHORT           reduce using rule 82 (TypeCtor -> CONST .)
    USHORT          reduce using rule 82 (TypeCtor -> CONST .)
    INT             reduce using rule 82 (TypeCtor -> CONST .)
    UINT            reduce using rule 82 (TypeCtor -> CONST .)
    LONG            reduce using rule 82 (TypeCtor -> CONST .)
    ULONG           reduce using rule 82 (TypeCtor -> CONST .)
    CHAR            reduce using rule 82 (TypeCtor -> CONST .)
    FLOAT           reduce using rule 82 (TypeCtor -> CONST .)
    VOID            reduce using rule 82 (TypeCtor -> CONST .)
    IDENTIFIER      reduce using rule 82 (TypeCtor -> CONST .)
    TYPEOF          reduce using rule 82 (TypeCtor -> CONST .)

  ! CONST           [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! IMMUTABLE       [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! DOT             [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! BOOL            [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! SHORT           [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! USHORT          [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! INT             [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! UINT            [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! LONG            [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! ULONG           [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! CHAR            [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! FLOAT           [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! VOID            [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! IDENTIFIER      [ reduce using rule 119 (StorageClass -> CONST .) ]
  ! TYPEOF          [ reduce using rule 119 (StorageClass -> CONST .) ]


state 353

    (350) ForeachStatement -> AggregateForeach . NoScopeNonEmptyStatement
    (289) NoScopeNonEmptyStatement -> . NonEmptyStatement
    (290) NoScopeNonEmptyStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 527
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 528
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    NoScopeNonEmptyStatement       shift and go to state 529
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 354

    (300) NonEmptyStatementNoCaseNoDefault -> LabeledStatement .

    SEMICOLON       reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CASE            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DEFAULT         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LBRACE          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IDENTIFIER      reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IF              reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    WHILE           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DO              reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FOR             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    SWITCH          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FINAL           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CONTINUE        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    BREAK           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    RETURN          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    GOTO            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    WITH            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    MIXIN           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IMPORT          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    STATIC          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LPAREN          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FOREACH         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FOREACH_REVERSE reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ENUM            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    EXTERN          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    AUTO            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CONST           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IMMUTABLE       reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    UAMPERSAND      reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    PLUS_PLUS       reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    MINUS_MINUS     reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TIMES           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    UMINUS          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    UPLUS           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    EXCLAMATION     reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TILDE           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CAST            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DOT             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    THIS            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    NULL            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TRUE            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FALSE           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DOLLAR          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    INUMBER         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DNUMBER         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LIT_CHAR        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LIT_STR         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LBRACKET        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FUNCTION        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    NEW             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    BOOL            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    SHORT           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    USHORT          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    INT             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    UINT            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LONG            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ULONG           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CHAR            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FLOAT           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    VOID            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TYPEOF          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TYPEID          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    BODY            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ALIAS           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CLASS           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    UNION           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    RBRACE          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ELSE            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)


state 355

    (302) NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .

    SEMICOLON       reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CASE            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DEFAULT         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LBRACE          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IDENTIFIER      reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IF              reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    WHILE           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DO              reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FOR             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    SWITCH          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FINAL           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CONTINUE        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    BREAK           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    RETURN          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    GOTO            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    WITH            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    MIXIN           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IMPORT          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    STATIC          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LPAREN          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FOREACH         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FOREACH_REVERSE reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ENUM            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    EXTERN          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    AUTO            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CONST           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IMMUTABLE       reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    UAMPERSAND      reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    PLUS_PLUS       reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    MINUS_MINUS     reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TIMES           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    UMINUS          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    UPLUS           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    EXCLAMATION     reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TILDE           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CAST            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DOT             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    THIS            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    NULL            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TRUE            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FALSE           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DOLLAR          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    INUMBER         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DNUMBER         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LIT_CHAR        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LIT_STR         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LBRACKET        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FUNCTION        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    NEW             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    BOOL            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    SHORT           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    USHORT          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    INT             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    UINT            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LONG            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ULONG           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CHAR            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FLOAT           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    VOID            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TYPEOF          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TYPEID          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    BODY            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ALIAS           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CLASS           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    UNION           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    RBRACE          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ELSE            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)


state 356

    (324) BlockStatement -> LBRACE RBRACE .

    POWER           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DOT             reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    PLUS_PLUS       reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    MINUS_MINUS     reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    TIMES           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DIV             reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    MODULO          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    PLUS            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    MINUS           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LEFT_SHIFT      reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    RIGHT_SHIFT     reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    IS_EQ           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    NOT_EQ          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LESS            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    GREATER_EQ      reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    GREATER         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LESS_EQ         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    AMPERSAND       reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    CARET           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    PIPE            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    QUESTION        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DOUBLE_PIPE     reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    ASSIGN          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_PLUS         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_MINUS        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_TIMES        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_DIV          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_MODULO       reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_AND_BIT      reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_OR_BIT       reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_XOR_BIT      reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_LEFT         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EQ_RIGHT        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    RANGE           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    COMMA           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    RPAREN          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    COLON           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    CASE            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    IF              reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    WHILE           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DO              reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    FOR             reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    FINAL           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    BREAK           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    RETURN          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    GOTO            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    WITH            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    MIXIN           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    IMPORT          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    STATIC          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    FOREACH         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    FOREACH_REVERSE reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    ENUM            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    AUTO            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    CONST           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    IMMUTABLE       reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    UAMPERSAND      reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    UMINUS          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    UPLUS           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    EXCLAMATION     reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    TILDE           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    CAST            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    THIS            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    NULL            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    TRUE            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    FALSE           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DOLLAR          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    INUMBER         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DNUMBER         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LIT_CHAR        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LIT_STR         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    NEW             reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    BOOL            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    SHORT           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    USHORT          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    INT             reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    UINT            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    LONG            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    ULONG           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    CHAR            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    VOID            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    TYPEOF          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    TYPEID          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    BODY            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    ALIAS           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    CLASS           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    UNION           reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    ELSE            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    $end            reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    DELETE          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 324 (BlockStatement -> LBRACE RBRACE .)


state 357

    (288) Statement -> ScopeBlockStatement .

    SEMICOLON       reduce using rule 288 (Statement -> ScopeBlockStatement .)
    CASE            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    DEFAULT         reduce using rule 288 (Statement -> ScopeBlockStatement .)
    LBRACE          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    IDENTIFIER      reduce using rule 288 (Statement -> ScopeBlockStatement .)
    IF              reduce using rule 288 (Statement -> ScopeBlockStatement .)
    WHILE           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    DO              reduce using rule 288 (Statement -> ScopeBlockStatement .)
    FOR             reduce using rule 288 (Statement -> ScopeBlockStatement .)
    SWITCH          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    FINAL           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    CONTINUE        reduce using rule 288 (Statement -> ScopeBlockStatement .)
    BREAK           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    RETURN          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    GOTO            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    WITH            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    MIXIN           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    IMPORT          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    STATIC          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    LPAREN          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    FOREACH         reduce using rule 288 (Statement -> ScopeBlockStatement .)
    FOREACH_REVERSE reduce using rule 288 (Statement -> ScopeBlockStatement .)
    ENUM            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    EXTERN          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    AUTO            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    CONST           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    IMMUTABLE       reduce using rule 288 (Statement -> ScopeBlockStatement .)
    UAMPERSAND      reduce using rule 288 (Statement -> ScopeBlockStatement .)
    PLUS_PLUS       reduce using rule 288 (Statement -> ScopeBlockStatement .)
    MINUS_MINUS     reduce using rule 288 (Statement -> ScopeBlockStatement .)
    TIMES           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    UMINUS          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    UPLUS           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    EXCLAMATION     reduce using rule 288 (Statement -> ScopeBlockStatement .)
    TILDE           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    CAST            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    DOT             reduce using rule 288 (Statement -> ScopeBlockStatement .)
    THIS            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    NULL            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    TRUE            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    FALSE           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    DOLLAR          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    INUMBER         reduce using rule 288 (Statement -> ScopeBlockStatement .)
    DNUMBER         reduce using rule 288 (Statement -> ScopeBlockStatement .)
    LIT_CHAR        reduce using rule 288 (Statement -> ScopeBlockStatement .)
    LIT_STR         reduce using rule 288 (Statement -> ScopeBlockStatement .)
    LBRACKET        reduce using rule 288 (Statement -> ScopeBlockStatement .)
    FUNCTION        reduce using rule 288 (Statement -> ScopeBlockStatement .)
    NEW             reduce using rule 288 (Statement -> ScopeBlockStatement .)
    BOOL            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    SHORT           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    USHORT          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    INT             reduce using rule 288 (Statement -> ScopeBlockStatement .)
    UINT            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    LONG            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    ULONG           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    CHAR            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    FLOAT           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    VOID            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    TYPEOF          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    TYPEID          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    BODY            reduce using rule 288 (Statement -> ScopeBlockStatement .)
    ALIAS           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    CLASS           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    UNION           reduce using rule 288 (Statement -> ScopeBlockStatement .)
    RBRACE          reduce using rule 288 (Statement -> ScopeBlockStatement .)
    ELSE            reduce using rule 288 (Statement -> ScopeBlockStatement .)


state 358

    (298) NonEmptyStatement -> CaseRangeStatement .

    UAMPERSAND      reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    PLUS_PLUS       reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    MINUS_MINUS     reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    TIMES           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    UMINUS          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    UPLUS           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    EXCLAMATION     reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    LPAREN          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    TILDE           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    CAST            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    IDENTIFIER      reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    DOT             reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    THIS            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    NULL            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    TRUE            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    FALSE           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    DOLLAR          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    INUMBER         reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    DNUMBER         reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    LIT_CHAR        reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    LIT_STR         reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    LBRACKET        reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    FUNCTION        reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    MIXIN           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    IMPORT          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    NEW             reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    BOOL            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    SHORT           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    USHORT          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    INT             reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    UINT            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    LONG            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    ULONG           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    CHAR            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    FLOAT           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    VOID            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    CONST           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    IMMUTABLE       reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    TYPEOF          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    TYPEID          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    LBRACE          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    BODY            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    SEMICOLON       reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    CASE            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    DEFAULT         reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    IF              reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    WHILE           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    DO              reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    FOR             reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    SWITCH          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    FINAL           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    CONTINUE        reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    BREAK           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    RETURN          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    GOTO            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    WITH            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    STATIC          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    FOREACH         reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    FOREACH_REVERSE reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    ENUM            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    EXTERN          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    AUTO            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    ALIAS           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    CLASS           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    UNION           reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    RBRACE          reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)
    ELSE            reduce using rule 298 (NonEmptyStatement -> CaseRangeStatement .)


state 359

    (365) RangeForeach -> LPAREN . ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (219) UnaryExpression -> LPAREN . Type RPAREN DOT IDENTIFIER
    (268) PrimaryExpression -> LPAREN . Expression RPAREN
    (452) Parameters -> LPAREN . ParameterList_opt RPAREN
    (355) ForeachType -> . ForeachTypeAttributes_opt BasicType Declarator
    (356) ForeachType -> . ForeachTypeAttributes_opt IDENTIFIER
    (357) ForeachType -> . ForeachTypeAttributes_opt ALIAS IDENTIFIER
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (165) Expression -> . CommaExpression
    (456) ParameterList_opt -> . ParameterList
    (457) ParameterList_opt -> . empty
    (358) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (359) ForeachTypeAttributes_opt -> . empty
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (453) ParameterList -> . Parameter
    (454) ParameterList -> . Parameter COMMA ParameterList
    (455) ParameterList -> . ELLIPSIS
    (485) empty -> .
    (360) ForeachTypeAttributes -> . ForeachTypeAttribute
    (361) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (458) Parameter -> . InOut_opt BasicType Declarator
    (459) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (460) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (461) Parameter -> . InOut_opt Type
    (462) Parameter -> . InOut_opt Type ELLIPSIS
    (362) ForeachTypeAttribute -> . TypeCtor
    (363) ForeachTypeAttribute -> . ENUM
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (469) InOut_opt -> . InOut
    (470) InOut_opt -> . empty
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (463) InOut -> . InOutX
    (464) InOut -> . InOut InOutX
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (465) InOutX -> . AUTO
    (466) InOutX -> . TypeCtor
    (467) InOutX -> . FINAL
    (468) InOutX -> . SCOPE
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    ELLIPSIS        shift and go to state 175
    RPAREN          reduce using rule 485 (empty -> .)
    ALIAS           reduce using rule 485 (empty -> .)
    ENUM            shift and go to state 532
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    AUTO            shift and go to state 177
    FINAL           shift and go to state 172
    SCOPE           shift and go to state 179
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ParameterList                  shift and go to state 170
    AndExpression                  shift and go to state 186
    ForeachTypeAttribute           shift and go to state 530
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    ParameterList_opt              shift and go to state 171
    Parameter                      shift and go to state 173
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    ForeachType                    shift and go to state 533
    InOutX                         shift and go to state 174
    FunctionLiteralBody            shift and go to state 233
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    MixinExpression                shift and go to state 222
    TypeCtors                      shift and go to state 134
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 534
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    LIT_STRPlus                    shift and go to state 239
    ArrayLiteral                   shift and go to state 240
    TypeCtor                       shift and go to state 531
    OrExpression                   shift and go to state 208
    ForeachTypeAttributes_opt      shift and go to state 535
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    TypeCtors_opt                  shift and go to state 223
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 446
    BodyStatement                  shift and go to state 225
    InOut_opt                      shift and go to state 180
    Type                           shift and go to state 447
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    ImportExpression               shift and go to state 184
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ForeachTypeAttributes          shift and go to state 536
    InOut                          shift and go to state 176
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267
    Typeof                         shift and go to state 209

state 360

    (120) StorageClass -> IMMUTABLE .
    (83) TypeCtor -> IMMUTABLE .

  ! reduce/reduce conflict for CONST resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for DOT resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for BOOL resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for SHORT resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for USHORT resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for INT resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for UINT resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for LONG resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for ULONG resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for CHAR resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for VOID resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 83 (TypeCtor -> IMMUTABLE .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 83 (TypeCtor -> IMMUTABLE .)
    ENUM            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    STATIC          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    EXTERN          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    FINAL           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    AUTO            reduce using rule 120 (StorageClass -> IMMUTABLE .)
    ALIAS           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    IMPORT          reduce using rule 120 (StorageClass -> IMMUTABLE .)
    CLASS           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    UNION           reduce using rule 120 (StorageClass -> IMMUTABLE .)
    LPAREN          reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    CONST           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    DOT             reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    BOOL            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    SHORT           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    USHORT          reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    INT             reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    UINT            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    LONG            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    ULONG           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    CHAR            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    FLOAT           reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    VOID            reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 83 (TypeCtor -> IMMUTABLE .)
    TYPEOF          reduce using rule 83 (TypeCtor -> IMMUTABLE .)

  ! CONST           [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! IMMUTABLE       [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! DOT             [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! BOOL            [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! SHORT           [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! USHORT          [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! INT             [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! UINT            [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! LONG            [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! ULONG           [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! CHAR            [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! FLOAT           [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! VOID            [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! IDENTIFIER      [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]
  ! TYPEOF          [ reduce using rule 120 (StorageClass -> IMMUTABLE .) ]


state 361

    (330) IfStatement -> IF . LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> IF . LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement

    LPAREN          shift and go to state 537


state 362

    (314) NonEmptyStatementNoCaseNoDefault -> WithStatement .

    SEMICOLON       reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CASE            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DEFAULT         reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LBRACE          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IDENTIFIER      reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IF              reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    WHILE           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DO              reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FOR             reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    SWITCH          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FINAL           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CONTINUE        reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    BREAK           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    RETURN          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    GOTO            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    WITH            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    MIXIN           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IMPORT          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    STATIC          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LPAREN          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FOREACH         reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FOREACH_REVERSE reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ENUM            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    EXTERN          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    AUTO            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CONST           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IMMUTABLE       reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    UAMPERSAND      reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    PLUS_PLUS       reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    MINUS_MINUS     reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TIMES           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    UMINUS          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    UPLUS           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    EXCLAMATION     reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TILDE           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CAST            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DOT             reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    THIS            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    NULL            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TRUE            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FALSE           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DOLLAR          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    INUMBER         reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DNUMBER         reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LIT_CHAR        reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LIT_STR         reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LBRACKET        reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FUNCTION        reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    NEW             reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    BOOL            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    SHORT           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    USHORT          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    INT             reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    UINT            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LONG            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ULONG           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CHAR            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FLOAT           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    VOID            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TYPEOF          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TYPEID          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    BODY            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ALIAS           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CLASS           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    UNION           reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    RBRACE          reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ELSE            reduce using rule 314 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)


state 363

    (303) NonEmptyStatementNoCaseNoDefault -> IfStatement .

    SEMICOLON       reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CASE            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DEFAULT         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LBRACE          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IDENTIFIER      reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IF              reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    WHILE           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DO              reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FOR             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    SWITCH          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FINAL           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CONTINUE        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    BREAK           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    RETURN          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    GOTO            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    WITH            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    MIXIN           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IMPORT          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    STATIC          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LPAREN          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FOREACH         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FOREACH_REVERSE reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ENUM            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    EXTERN          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    AUTO            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CONST           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IMMUTABLE       reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    UAMPERSAND      reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    PLUS_PLUS       reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    MINUS_MINUS     reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TIMES           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    UMINUS          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    UPLUS           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    EXCLAMATION     reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TILDE           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CAST            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DOT             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    THIS            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    NULL            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TRUE            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FALSE           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DOLLAR          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    INUMBER         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DNUMBER         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LIT_CHAR        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LIT_STR         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LBRACKET        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FUNCTION        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    NEW             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    BOOL            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    SHORT           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    USHORT          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    INT             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    UINT            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LONG            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ULONG           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CHAR            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FLOAT           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    VOID            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TYPEOF          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TYPEID          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    BODY            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ALIAS           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CLASS           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    UNION           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    RBRACE          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ELSE            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)


state 364

    (480) BodyStatement -> BODY BlockStatement .

    POWER           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DOT             reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    PLUS_PLUS       reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    MINUS_MINUS     reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LPAREN          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    TIMES           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DIV             reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    MODULO          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    PLUS            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    MINUS           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LEFT_SHIFT      reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    RIGHT_SHIFT     reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    IS_EQ           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    NOT_EQ          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LESS            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    GREATER_EQ      reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    GREATER         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LESS_EQ         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    AMPERSAND       reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    CARET           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    PIPE            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    QUESTION        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DOUBLE_PIPE     reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    ASSIGN          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_PLUS         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_MINUS        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_TIMES        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_DIV          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_MODULO       reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_AND_BIT      reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_OR_BIT       reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_XOR_BIT      reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_LEFT         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EQ_RIGHT        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    COMMA           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    RPAREN          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    RBRACKET        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    RANGE           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    SEMICOLON       reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    RBRACE          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    COLON           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    ALIAS           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    ENUM            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    IMPORT          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    STATIC          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    CLASS           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    UNION           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EXTERN          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    FINAL           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    AUTO            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    CONST           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    IMMUTABLE       reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    BOOL            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    SHORT           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    USHORT          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    INT             reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    UINT            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LONG            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    ULONG           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    CHAR            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    FLOAT           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    VOID            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    IDENTIFIER      reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    TYPEOF          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    $end            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    NEW             reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DELETE          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    MIXIN           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    RETURN          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    PRIVATE         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    PROTECTED       reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    PUBLIC          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    CASE            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DEFAULT         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LBRACE          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    IF              reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    WHILE           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DO              reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    FOR             reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    SWITCH          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    CONTINUE        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    BREAK           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    GOTO            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    WITH            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    FOREACH         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    FOREACH_REVERSE reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    UAMPERSAND      reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    UMINUS          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    UPLUS           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    EXCLAMATION     reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    TILDE           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    CAST            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    THIS            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    NULL            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    TRUE            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    FALSE           reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DOLLAR          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    INUMBER         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    DNUMBER         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LIT_CHAR        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LIT_STR         reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    LBRACKET        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    FUNCTION        reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    TYPEID          reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    BODY            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)
    ELSE            reduce using rule 480 (BodyStatement -> BODY BlockStatement .)


state 365

    (472) MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .

    LBRACE          reduce using rule 472 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    BODY            reduce using rule 472 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    SEMICOLON       reduce using rule 472 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    ASSIGN          reduce using rule 472 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    COMMA           reduce using rule 472 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    RPAREN          reduce using rule 472 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    ELLIPSIS        reduce using rule 472 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)


state 366

    (452) Parameters -> LPAREN ParameterList_opt RPAREN .

    CONST           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    IMMUTABLE       reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RETURN          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LBRACE          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    BODY            reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    TIMES           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LBRACKET        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    FUNCTION        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    IDENTIFIER      reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LPAREN          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RPAREN          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    SEMICOLON       reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    ELLIPSIS        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    COMMA           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    POWER           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DOT             reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DIV             reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    MODULO          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    PLUS            reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    MINUS           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    IS_EQ           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    NOT_EQ          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LESS            reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    GREATER_EQ      reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    GREATER         reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LESS_EQ         reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    AMPERSAND       reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    CARET           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    PIPE            reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    QUESTION        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    ASSIGN          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_PLUS         reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_MINUS        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_TIMES        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_DIV          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_MODULO       reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_LEFT         reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RBRACKET        reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RANGE           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RBRACE          reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    COLON           reduce using rule 452 (Parameters -> LPAREN ParameterList_opt RPAREN .)


state 367

    (454) ParameterList -> Parameter COMMA . ParameterList
    (453) ParameterList -> . Parameter
    (454) ParameterList -> . Parameter COMMA ParameterList
    (455) ParameterList -> . ELLIPSIS
    (458) Parameter -> . InOut_opt BasicType Declarator
    (459) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (460) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (461) Parameter -> . InOut_opt Type
    (462) Parameter -> . InOut_opt Type ELLIPSIS
    (469) InOut_opt -> . InOut
    (470) InOut_opt -> . empty
    (463) InOut -> . InOutX
    (464) InOut -> . InOut InOutX
    (485) empty -> .
    (465) InOutX -> . AUTO
    (466) InOutX -> . TypeCtor
    (467) InOutX -> . FINAL
    (468) InOutX -> . SCOPE
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    ELLIPSIS        shift and go to state 175
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    AUTO            shift and go to state 177
    FINAL           shift and go to state 172
    SCOPE           shift and go to state 179
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    InOut_opt                      shift and go to state 180
    TypeCtor                       shift and go to state 178
    InOutX                         shift and go to state 174
    ParameterList                  shift and go to state 538
    empty                          shift and go to state 539
    Parameter                      shift and go to state 173
    InOut                          shift and go to state 176

state 368

    (464) InOut -> InOut InOutX .

    AUTO            reduce using rule 464 (InOut -> InOut InOutX .)
    FINAL           reduce using rule 464 (InOut -> InOut InOutX .)
    SCOPE           reduce using rule 464 (InOut -> InOut InOutX .)
    CONST           reduce using rule 464 (InOut -> InOut InOutX .)
    IMMUTABLE       reduce using rule 464 (InOut -> InOut InOutX .)
    DOT             reduce using rule 464 (InOut -> InOut InOutX .)
    BOOL            reduce using rule 464 (InOut -> InOut InOutX .)
    SHORT           reduce using rule 464 (InOut -> InOut InOutX .)
    USHORT          reduce using rule 464 (InOut -> InOut InOutX .)
    INT             reduce using rule 464 (InOut -> InOut InOutX .)
    UINT            reduce using rule 464 (InOut -> InOut InOutX .)
    LONG            reduce using rule 464 (InOut -> InOut InOutX .)
    ULONG           reduce using rule 464 (InOut -> InOut InOutX .)
    CHAR            reduce using rule 464 (InOut -> InOut InOutX .)
    FLOAT           reduce using rule 464 (InOut -> InOut InOutX .)
    VOID            reduce using rule 464 (InOut -> InOut InOutX .)
    IDENTIFIER      reduce using rule 464 (InOut -> InOut InOutX .)
    TYPEOF          reduce using rule 464 (InOut -> InOut InOutX .)


state 369

    (461) Parameter -> InOut_opt Type .
    (462) Parameter -> InOut_opt Type . ELLIPSIS

    COMMA           reduce using rule 461 (Parameter -> InOut_opt Type .)
    RPAREN          reduce using rule 461 (Parameter -> InOut_opt Type .)
    ELLIPSIS        shift and go to state 540


state 370

    (458) Parameter -> InOut_opt BasicType . Declarator
    (459) Parameter -> InOut_opt BasicType . Declarator ELLIPSIS
    (460) Parameter -> InOut_opt BasicType . Declarator ASSIGN AssignExpression
    (57) Declarator -> . VarDeclarator
    (58) Declarator -> . AltDeclarator
    (59) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (60) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 485 (empty -> .)
    LPAREN          reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

    VarDeclarator                  shift and go to state 541
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 543
    empty                          shift and go to state 89
    Declarator                     shift and go to state 544
    BasicType2_opt                 shift and go to state 542
    BasicType2                     shift and go to state 93

state 371

    (89) BasicType -> TypeCtor . LPAREN Type RPAREN
    (78) TypeCtors -> TypeCtor .
    (79) TypeCtors -> TypeCtor . TypeCtors
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LPAREN          shift and go to state 96
    DOT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    BOOL            reduce using rule 78 (TypeCtors -> TypeCtor .)
    SHORT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    USHORT          reduce using rule 78 (TypeCtors -> TypeCtor .)
    INT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    UINT            reduce using rule 78 (TypeCtors -> TypeCtor .)
    LONG            reduce using rule 78 (TypeCtors -> TypeCtor .)
    ULONG           reduce using rule 78 (TypeCtors -> TypeCtor .)
    CHAR            reduce using rule 78 (TypeCtors -> TypeCtor .)
    FLOAT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    VOID            reduce using rule 78 (TypeCtors -> TypeCtor .)
    IDENTIFIER      reduce using rule 78 (TypeCtors -> TypeCtor .)
    TYPEOF          reduce using rule 78 (TypeCtors -> TypeCtor .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]

    TypeCtors                      shift and go to state 284
    TypeCtor                       shift and go to state 135

state 372

    (149) VoidInitializer -> VOID .
    (99) BasicTypeX -> VOID .

    COMMA           reduce using rule 149 (VoidInitializer -> VOID .)
    SEMICOLON       reduce using rule 149 (VoidInitializer -> VOID .)
    IDENTIFIER      reduce using rule 99 (BasicTypeX -> VOID .)
    LPAREN          reduce using rule 99 (BasicTypeX -> VOID .)


state 373

    (126) ArrayInitializer -> LBRACKET . ArrayMemberInitializations_opt RBRACKET
    (270) ArrayLiteral -> LBRACKET . ArgumentList_opt RBRACKET
    (130) ArrayMemberInitializations_opt -> . ArrayMemberInitializations
    (131) ArrayMemberInitializations_opt -> . empty
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (127) ArrayMemberInitializations -> . ArrayMemberInitialization
    (128) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA
    (129) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA ArrayMemberInitializations
    (485) empty -> .
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (132) ArrayMemberInitialization -> . NonVoidInitializer
    (133) ArrayMemberInitialization -> . AssignExpression COLON NonVoidInitializer
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACKET        reduce using rule 485 (empty -> .)
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    ArrayMemberInitialization      shift and go to state 546
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    ArrayMemberInitializations     shift and go to state 547
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    NonVoidInitializer             shift and go to state 545
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 549
    ArrayInitializer               shift and go to state 375
    ArrayMemberInitializations_opt shift and go to state 548
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 381
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 550

state 374

    (122) Initializer -> NonVoidInitializer .

    COMMA           reduce using rule 122 (Initializer -> NonVoidInitializer .)
    SEMICOLON       reduce using rule 122 (Initializer -> NonVoidInitializer .)


state 375

    (124) NonVoidInitializer -> ArrayInitializer .

    COMMA           reduce using rule 124 (NonVoidInitializer -> ArrayInitializer .)
    SEMICOLON       reduce using rule 124 (NonVoidInitializer -> ArrayInitializer .)
    RBRACKET        reduce using rule 124 (NonVoidInitializer -> ArrayInitializer .)


state 376

    (121) Initializer -> VoidInitializer .

    COMMA           reduce using rule 121 (Initializer -> VoidInitializer .)
    SEMICOLON       reduce using rule 121 (Initializer -> VoidInitializer .)


state 377

    (44) DeclaratorInitializer -> VarDeclarator ASSIGN Initializer .

    COMMA           reduce using rule 44 (DeclaratorInitializer -> VarDeclarator ASSIGN Initializer .)
    SEMICOLON       reduce using rule 44 (DeclaratorInitializer -> VarDeclarator ASSIGN Initializer .)


state 378

    (123) NonVoidInitializer -> ExpInitializer .

    COMMA           reduce using rule 123 (NonVoidInitializer -> ExpInitializer .)
    SEMICOLON       reduce using rule 123 (NonVoidInitializer -> ExpInitializer .)
    RBRACKET        reduce using rule 123 (NonVoidInitializer -> ExpInitializer .)


state 379

    (125) ExpInitializer -> AssignExpression .

    COMMA           reduce using rule 125 (ExpInitializer -> AssignExpression .)
    SEMICOLON       reduce using rule 125 (ExpInitializer -> AssignExpression .)
    RBRACKET        reduce using rule 125 (ExpInitializer -> AssignExpression .)


state 380

    (231) ArgumentList_opt -> ArgumentList .

    RPAREN          reduce using rule 231 (ArgumentList_opt -> ArgumentList .)
    RBRACKET        reduce using rule 231 (ArgumentList_opt -> ArgumentList .)


state 381

    (270) ArrayLiteral -> LBRACKET ArgumentList_opt . RBRACKET

    RBRACKET        shift and go to state 551


state 382

    (232) ArgumentList_opt -> empty .
    (81) TypeCtors_opt -> empty .

    RPAREN          reduce using rule 232 (ArgumentList_opt -> empty .)
    RBRACKET        reduce using rule 232 (ArgumentList_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)


state 383

    (233) ArgumentList -> AssignExpression .
    (234) ArgumentList -> AssignExpression . COMMA
    (235) ArgumentList -> AssignExpression . COMMA ArgumentList

    RPAREN          reduce using rule 233 (ArgumentList -> AssignExpression .)
    RBRACKET        reduce using rule 233 (ArgumentList -> AssignExpression .)
    COLON           reduce using rule 233 (ArgumentList -> AssignExpression .)
    COMMA           shift and go to state 552


state 384

    (191) AndExpression -> AndExpression AMPERSAND . CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 553
    NewAnonClassExpression         shift and go to state 200

state 385

    (181) ConditionalExpression -> OrOrExpression QUESTION . Expression COLON ConditionalExpression
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 554
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 386

    (183) OrOrExpression -> OrOrExpression DOUBLE_PIPE . AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 555
    NewAnonClassExpression         shift and go to state 200

state 387

    (283) ImportExpression -> IMPORT LPAREN . AssignExpression RPAREN
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 556

state 388

    (265) PrimaryExpression -> TypeCtor LPAREN . Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> TypeCtor LPAREN . Type RPAREN LPAREN ArgumentList_opt RPAREN
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    Type                           shift and go to state 557
    empty                          shift and go to state 142

state 389

    (179) AssignExpression -> ConditionalExpression EQ_RIGHT . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 558

state 390

    (175) AssignExpression -> ConditionalExpression EQ_AND_BIT . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 559

state 391

    (172) AssignExpression -> ConditionalExpression EQ_TIMES . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 560

state 392

    (170) AssignExpression -> ConditionalExpression EQ_PLUS . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 561

state 393

    (173) AssignExpression -> ConditionalExpression EQ_DIV . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 562

state 394

    (177) AssignExpression -> ConditionalExpression EQ_XOR_BIT . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 563

state 395

    (171) AssignExpression -> ConditionalExpression EQ_MINUS . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 564

state 396

    (178) AssignExpression -> ConditionalExpression EQ_LEFT . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 565

state 397

    (176) AssignExpression -> ConditionalExpression EQ_OR_BIT . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 566

state 398

    (174) AssignExpression -> ConditionalExpression EQ_MODULO . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 567

state 399

    (169) AssignExpression -> ConditionalExpression ASSIGN . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 568

state 400

    (216) UnaryExpression -> UPLUS UnaryExpression .

    TIMES           reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    DIV             reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    MODULO          reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    PLUS            reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    MINUS           reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    IS_EQ           reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    NOT_EQ          reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    LESS            reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    GREATER_EQ      reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    GREATER         reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    LESS_EQ         reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    AMPERSAND       reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    CARET           reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    PIPE            reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    QUESTION        reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    ASSIGN          reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_PLUS         reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_MINUS        reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_TIMES        reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_DIV          reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_MODULO       reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_LEFT         reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    COMMA           reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    RPAREN          reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    RBRACKET        reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    RANGE           reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    SEMICOLON       reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    RBRACE          reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)
    COLON           reduce using rule 216 (UnaryExpression -> UPLUS UnaryExpression .)


state 401

    (200) RelExpression -> ShiftExpression LESS_EQ . ShiftExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 569
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 402

    (195) EqualExpression -> ShiftExpression IS_EQ . ShiftExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 570
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 403

    (199) RelExpression -> ShiftExpression GREATER . ShiftExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 571
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 404

    (197) RelExpression -> ShiftExpression LESS . ShiftExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 572
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 405

    (202) ShiftExpression -> ShiftExpression LEFT_SHIFT . AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 573
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 406

    (198) RelExpression -> ShiftExpression GREATER_EQ . ShiftExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 574
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 407

    (203) ShiftExpression -> ShiftExpression RIGHT_SHIFT . AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 575
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 408

    (196) EqualExpression -> ShiftExpression NOT_EQ . ShiftExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 576
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 409

    (277) ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt .

    LBRACE          reduce using rule 277 (ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt .)
    BODY            reduce using rule 277 (ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt .)


state 410

    (272) FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .

    POWER           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DOT             reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    PLUS_PLUS       reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    MINUS_MINUS     reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LPAREN          reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    TIMES           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DIV             reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    MODULO          reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    PLUS            reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    MINUS           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LEFT_SHIFT      reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RIGHT_SHIFT     reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    IS_EQ           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    NOT_EQ          reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LESS            reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    GREATER_EQ      reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    GREATER         reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LESS_EQ         reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    AMPERSAND       reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    CARET           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    PIPE            reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DOUBLE_AMPERSAND reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    QUESTION        reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DOUBLE_PIPE     reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    ASSIGN          reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_PLUS         reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_MINUS        reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_TIMES        reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_DIV          reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_MODULO       reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_AND_BIT      reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_OR_BIT       reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_XOR_BIT      reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_LEFT         reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_RIGHT        reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    COMMA           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    COLON           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RBRACKET        reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RANGE           reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RPAREN          reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    SEMICOLON       reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RBRACE          reduce using rule 272 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)


state 411

    (211) UnaryExpression -> UAMPERSAND UnaryExpression .

    TIMES           reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    DIV             reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    MODULO          reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    PLUS            reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    MINUS           reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    LEFT_SHIFT      reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    IS_EQ           reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    NOT_EQ          reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    LESS            reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    GREATER_EQ      reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    GREATER         reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    LESS_EQ         reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    AMPERSAND       reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    CARET           reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    PIPE            reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    QUESTION        reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    ASSIGN          reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_PLUS         reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_MINUS        reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_TIMES        reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_DIV          reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_MODULO       reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_AND_BIT      reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_OR_BIT       reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_LEFT         reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    EQ_RIGHT        reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    COMMA           reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    RPAREN          reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    RBRACKET        reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    RANGE           reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    SEMICOLON       reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    RBRACE          reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)
    COLON           reduce using rule 211 (UnaryExpression -> UAMPERSAND UnaryExpression .)


state 412

    (107) BasicType2X -> LBRACKET Type RBRACKET .

    TIMES           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    LBRACKET        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    FUNCTION        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    IDENTIFIER      reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    LPAREN          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    LBRACE          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    RPAREN          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    SEMICOLON       reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    ELLIPSIS        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    COMMA           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    BODY            reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    POWER           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    DOT             reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    PLUS_PLUS       reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    MINUS_MINUS     reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    DIV             reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    MODULO          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    PLUS            reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    MINUS           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    LEFT_SHIFT      reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    RIGHT_SHIFT     reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    IS_EQ           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    NOT_EQ          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    LESS            reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    GREATER_EQ      reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    GREATER         reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    LESS_EQ         reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    AMPERSAND       reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    CARET           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    PIPE            reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    QUESTION        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    DOUBLE_PIPE     reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    ASSIGN          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_PLUS         reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_MINUS        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_TIMES        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_DIV          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_MODULO       reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_AND_BIT      reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_OR_BIT       reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_XOR_BIT      reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_LEFT         reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_RIGHT        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    RBRACKET        reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    RANGE           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    RBRACE          reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)
    COLON           reduce using rule 107 (BasicType2X -> LBRACKET Type RBRACKET .)


state 413

    (213) UnaryExpression -> MINUS_MINUS UnaryExpression .

    TIMES           reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    DIV             reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    MODULO          reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    PLUS            reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    MINUS           reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    IS_EQ           reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    NOT_EQ          reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    LESS            reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    GREATER_EQ      reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    GREATER         reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    LESS_EQ         reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    AMPERSAND       reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    CARET           reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    PIPE            reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    QUESTION        reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    ASSIGN          reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_PLUS         reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_MINUS        reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_TIMES        reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_DIV          reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_MODULO       reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_LEFT         reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    COMMA           reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RPAREN          reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RBRACKET        reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RANGE           reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    SEMICOLON       reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RBRACE          reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    COLON           reduce using rule 213 (UnaryExpression -> MINUS_MINUS UnaryExpression .)


state 414

    (271) FunctionLiteral -> FUNCTION Type_opt . ParameterAttributes_opt FunctionLiteralBody
    (275) ParameterAttributes_opt -> . ParameterAttributes_opt
    (276) ParameterAttributes_opt -> . empty
    (485) empty -> .

    LBRACE          reduce using rule 485 (empty -> .)
    BODY            reduce using rule 485 (empty -> .)

    empty                          shift and go to state 577
    ParameterAttributes_opt        shift and go to state 578

state 415

    (76) Type_opt -> Type .

    LBRACE          reduce using rule 76 (Type_opt -> Type .)
    BODY            reduce using rule 76 (Type_opt -> Type .)


state 416

    (77) Type_opt -> empty .
    (81) TypeCtors_opt -> empty .

    LBRACE          reduce using rule 77 (Type_opt -> empty .)
    BODY            reduce using rule 77 (Type_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)


state 417

    (187) OrExpression -> OrExpression PIPE . XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 579
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    NewAnonClassExpression         shift and go to state 200

state 418

    (284) TypeidExpression -> TYPEID LPAREN . Type RPAREN
    (285) TypeidExpression -> TYPEID LPAREN . Expression RPAREN
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (165) Expression -> . CommaExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    Type                           shift and go to state 580
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    TypeCtors                      shift and go to state 134
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    LIT_STRPlus                    shift and go to state 239
    ArrayLiteral                   shift and go to state 240
    TypeCtor                       shift and go to state 193
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 223
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 581
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 419

    (212) UnaryExpression -> PLUS_PLUS UnaryExpression .

    TIMES           reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    DIV             reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    MODULO          reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    PLUS            reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    MINUS           reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    IS_EQ           reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    NOT_EQ          reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    LESS            reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    GREATER_EQ      reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    GREATER         reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    LESS_EQ         reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    AMPERSAND       reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    CARET           reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    PIPE            reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    QUESTION        reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    ASSIGN          reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_PLUS         reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_MINUS        reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_TIMES        reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_DIV          reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_MODULO       reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_LEFT         reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    COMMA           reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RPAREN          reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RBRACKET        reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RANGE           reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    SEMICOLON       reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RBRACE          reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    COLON           reduce using rule 212 (UnaryExpression -> PLUS_PLUS UnaryExpression .)


state 420

    (217) UnaryExpression -> EXCLAMATION UnaryExpression .

    TIMES           reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    DIV             reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    MODULO          reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    PLUS            reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    MINUS           reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    LEFT_SHIFT      reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    IS_EQ           reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    NOT_EQ          reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    LESS            reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    GREATER_EQ      reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    GREATER         reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    LESS_EQ         reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    AMPERSAND       reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    CARET           reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    PIPE            reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    QUESTION        reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    ASSIGN          reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_PLUS         reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_MINUS        reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_TIMES        reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_DIV          reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_MODULO       reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_AND_BIT      reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_OR_BIT       reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_LEFT         reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_RIGHT        reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    COMMA           reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RPAREN          reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RBRACKET        reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RANGE           reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    SEMICOLON       reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RBRACE          reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    COLON           reduce using rule 217 (UnaryExpression -> EXCLAMATION UnaryExpression .)


state 421

    (245) PostfixExpression -> PostfixExpression LPAREN . ArgumentList RPAREN
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 582
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 422

    (239) PowExpression -> PostfixExpression POWER . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 583
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 423

    (244) PostfixExpression -> PostfixExpression MINUS_MINUS .

    POWER           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DOT             reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LPAREN          reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    TIMES           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DIV             reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    MODULO          reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    PLUS            reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    MINUS           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LEFT_SHIFT      reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RIGHT_SHIFT     reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    IS_EQ           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    NOT_EQ          reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LESS            reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    GREATER_EQ      reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    GREATER         reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LESS_EQ         reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    AMPERSAND       reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    CARET           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    PIPE            reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    QUESTION        reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DOUBLE_PIPE     reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    ASSIGN          reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_PLUS         reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_MINUS        reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_TIMES        reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_DIV          reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_MODULO       reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_AND_BIT      reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_OR_BIT       reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_XOR_BIT      reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_LEFT         reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_RIGHT        reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RPAREN          reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    COMMA           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RBRACE          reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RBRACKET        reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RANGE           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    SEMICOLON       reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    COLON           reduce using rule 244 (PostfixExpression -> PostfixExpression MINUS_MINUS .)


state 424

    (243) PostfixExpression -> PostfixExpression PLUS_PLUS .

    POWER           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DOT             reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LPAREN          reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    TIMES           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DIV             reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    MODULO          reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    PLUS            reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    MINUS           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LEFT_SHIFT      reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RIGHT_SHIFT     reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    IS_EQ           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    NOT_EQ          reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LESS            reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    GREATER_EQ      reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    GREATER         reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LESS_EQ         reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    AMPERSAND       reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    CARET           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    PIPE            reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    QUESTION        reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DOUBLE_PIPE     reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    ASSIGN          reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_PLUS         reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_MINUS        reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_TIMES        reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_DIV          reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_MODULO       reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_AND_BIT      reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_OR_BIT       reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_XOR_BIT      reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_LEFT         reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_RIGHT        reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RPAREN          reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    COMMA           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RBRACE          reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RBRACKET        reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RANGE           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    SEMICOLON       reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    COLON           reduce using rule 243 (PostfixExpression -> PostfixExpression PLUS_PLUS .)


state 425

    (241) PostfixExpression -> PostfixExpression DOT . IDENTIFIER
    (242) PostfixExpression -> PostfixExpression DOT . NewExpression
    (223) NewExpression -> . NEW AllocatorArguments_opt Type
    (224) NewExpression -> . NewExpressionWithArgs
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody

    IDENTIFIER      shift and go to state 587
    NEW             shift and go to state 586

    NewExpressionWithArgs          shift and go to state 584
    NewExpression                  shift and go to state 585
    NewAnonClassExpression         shift and go to state 200

state 426

    (225) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LPAREN ArgumentList_opt RPAREN
    (419) NewAnonClassExpression -> NEW AllocatorArguments_opt . CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CLASS           shift and go to state 589
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    Type                           shift and go to state 588
    empty                          shift and go to state 142

state 427

    (228) AllocatorArguments -> LPAREN . ArgumentList_opt RPAREN
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 382
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 590
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 428

    (229) AllocatorArguments_opt -> AllocatorArguments .

    CLASS           reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    CONST           reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    IMMUTABLE       reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    DOT             reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    BOOL            reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    SHORT           reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    USHORT          reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    INT             reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    UINT            reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    LONG            reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    ULONG           reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    CHAR            reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    FLOAT           reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    VOID            reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    IDENTIFIER      reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)
    TYPEOF          reduce using rule 229 (AllocatorArguments_opt -> AllocatorArguments .)


state 429

    (230) AllocatorArguments_opt -> empty .

    CLASS           reduce using rule 230 (AllocatorArguments_opt -> empty .)
    CONST           reduce using rule 230 (AllocatorArguments_opt -> empty .)
    IMMUTABLE       reduce using rule 230 (AllocatorArguments_opt -> empty .)
    DOT             reduce using rule 230 (AllocatorArguments_opt -> empty .)
    BOOL            reduce using rule 230 (AllocatorArguments_opt -> empty .)
    SHORT           reduce using rule 230 (AllocatorArguments_opt -> empty .)
    USHORT          reduce using rule 230 (AllocatorArguments_opt -> empty .)
    INT             reduce using rule 230 (AllocatorArguments_opt -> empty .)
    UINT            reduce using rule 230 (AllocatorArguments_opt -> empty .)
    LONG            reduce using rule 230 (AllocatorArguments_opt -> empty .)
    ULONG           reduce using rule 230 (AllocatorArguments_opt -> empty .)
    CHAR            reduce using rule 230 (AllocatorArguments_opt -> empty .)
    FLOAT           reduce using rule 230 (AllocatorArguments_opt -> empty .)
    VOID            reduce using rule 230 (AllocatorArguments_opt -> empty .)
    IDENTIFIER      reduce using rule 230 (AllocatorArguments_opt -> empty .)
    TYPEOF          reduce using rule 230 (AllocatorArguments_opt -> empty .)


state 430

    (248) PrimaryExpression -> DOT IDENTIFIER .

    POWER           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DOT             reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    TIMES           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DIV             reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    MODULO          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS            reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    IS_EQ           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS            reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    CARET           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    PIPE            reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    QUESTION        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    RBRACKET        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    RANGE           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    COMMA           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    RPAREN          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    RBRACE          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    COLON           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)


state 431

    (236) CastExpression -> CAST LPAREN . Type RPAREN UnaryExpression
    (237) CastExpression -> CAST LPAREN . TypeCtors_opt RPAREN UnaryExpression
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    Type                           shift and go to state 592
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 591
    empty                          shift and go to state 142

state 432

    (222) ComplementExpression -> TILDE UnaryExpression .

    TIMES           reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    DIV             reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    MODULO          reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    PLUS            reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    MINUS           reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    LEFT_SHIFT      reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    IS_EQ           reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    NOT_EQ          reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    LESS            reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    GREATER_EQ      reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    GREATER         reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    LESS_EQ         reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    AMPERSAND       reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    CARET           reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    PIPE            reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    QUESTION        reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    ASSIGN          reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_PLUS         reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_MINUS        reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_TIMES        reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_DIV          reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_MODULO       reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_AND_BIT      reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_OR_BIT       reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_LEFT         reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_RIGHT        reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    COLON           reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    COMMA           reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    RBRACKET        reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    RPAREN          reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    RANGE           reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    SEMICOLON       reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)
    RBRACE          reduce using rule 222 (ComplementExpression -> TILDE UnaryExpression .)


state 433

    (75) Type -> TypeCtors_opt BasicType . BasicType2_opt
    (246) PostfixExpression -> TypeCtors_opt BasicType . LPAREN ArgumentList_opt RPAREN
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

    LPAREN          shift and go to state 593
    RBRACKET        reduce using rule 485 (empty -> .)
    RPAREN          reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

    BasicType2X                    shift and go to state 84
    BasicType2                     shift and go to state 93
    BasicType2_opt                 shift and go to state 483
    empty                          shift and go to state 89

state 434

    (215) UnaryExpression -> UMINUS UnaryExpression .

    TIMES           reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    DIV             reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    MODULO          reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    PLUS            reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    MINUS           reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    IS_EQ           reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    NOT_EQ          reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    LESS            reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    GREATER_EQ      reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    GREATER         reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    LESS_EQ         reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    AMPERSAND       reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    CARET           reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    PIPE            reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    QUESTION        reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    ASSIGN          reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_PLUS         reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_MINUS        reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_TIMES        reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_DIV          reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_MODULO       reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_LEFT         reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    COMMA           reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    RPAREN          reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    RBRACKET        reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    RANGE           reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    SEMICOLON       reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    RBRACE          reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)
    COLON           reduce using rule 215 (UnaryExpression -> UMINUS UnaryExpression .)


state 435

    (210) MulExpression -> MulExpression MODULO . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 594
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 436

    (209) MulExpression -> MulExpression DIV . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 595
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 437

    (208) MulExpression -> MulExpression TIMES . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 596
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 438

    (185) AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND . OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 597
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    NewAnonClassExpression         shift and go to state 200

state 439

    (263) PrimaryExpression -> BasicTypeX IDENTIFIER .

    POWER           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    DOT             reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    PLUS_PLUS       reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    MINUS_MINUS     reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    LPAREN          reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    TIMES           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    DIV             reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    MODULO          reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    PLUS            reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    MINUS           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    IS_EQ           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    NOT_EQ          reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    LESS            reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    GREATER_EQ      reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    GREATER         reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    LESS_EQ         reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    AMPERSAND       reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    CARET           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    PIPE            reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    QUESTION        reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    ASSIGN          reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_PLUS         reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_MINUS        reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_TIMES        reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_DIV          reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_MODULO       reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_LEFT         reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    EQ_RIGHT        reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    RBRACKET        reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    RANGE           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    COMMA           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    RPAREN          reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    SEMICOLON       reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    RBRACE          reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)
    COLON           reduce using rule 263 (PrimaryExpression -> BasicTypeX IDENTIFIER .)


state 440

    (264) PrimaryExpression -> BasicTypeX LPAREN . ArgumentList_opt RPAREN
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 382
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 598
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 441

    (189) XorExpression -> XorExpression CARET . AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 599
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    NewAnonClassExpression         shift and go to state 200

state 442

    (282) MixinExpression -> MIXIN LPAREN . AssignExpression RPAREN
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 600

state 443

    (214) UnaryExpression -> TIMES UnaryExpression .

    TIMES           reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    DIV             reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    MODULO          reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    PLUS            reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    MINUS           reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    LEFT_SHIFT      reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    IS_EQ           reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    NOT_EQ          reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    LESS            reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    GREATER_EQ      reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    GREATER         reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    LESS_EQ         reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    AMPERSAND       reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    CARET           reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    PIPE            reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    QUESTION        reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    ASSIGN          reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_PLUS         reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_MINUS        reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_TIMES        reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_DIV          reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_MODULO       reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_AND_BIT      reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_OR_BIT       reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_LEFT         reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_RIGHT        reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    COMMA           reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    RPAREN          reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    RBRACKET        reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    RANGE           reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    SEMICOLON       reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    RBRACE          reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)
    COLON           reduce using rule 214 (UnaryExpression -> TIMES UnaryExpression .)


state 444

    (78) TypeCtors -> TypeCtor .
    (79) TypeCtors -> TypeCtor . TypeCtors
    (466) InOutX -> TypeCtor .
    (265) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! reduce/reduce conflict for CONST resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for DOT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for BOOL resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for SHORT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for USHORT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for INT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for UINT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for LONG resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for ULONG resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for CHAR resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for FLOAT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for VOID resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    BOOL            reduce using rule 78 (TypeCtors -> TypeCtor .)
    SHORT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    USHORT          reduce using rule 78 (TypeCtors -> TypeCtor .)
    INT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    UINT            reduce using rule 78 (TypeCtors -> TypeCtor .)
    LONG            reduce using rule 78 (TypeCtors -> TypeCtor .)
    ULONG           reduce using rule 78 (TypeCtors -> TypeCtor .)
    CHAR            reduce using rule 78 (TypeCtors -> TypeCtor .)
    FLOAT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    VOID            reduce using rule 78 (TypeCtors -> TypeCtor .)
    IDENTIFIER      reduce using rule 78 (TypeCtors -> TypeCtor .)
    TYPEOF          reduce using rule 78 (TypeCtors -> TypeCtor .)
    AUTO            reduce using rule 466 (InOutX -> TypeCtor .)
    FINAL           reduce using rule 466 (InOutX -> TypeCtor .)
    SCOPE           reduce using rule 466 (InOutX -> TypeCtor .)
    LPAREN          shift and go to state 388
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! CONST           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! DOT             [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! BOOL            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! SHORT           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! USHORT          [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! INT             [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! UINT            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! LONG            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! ULONG           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! CHAR            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! FLOAT           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! VOID            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! IDENTIFIER      [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! TYPEOF          [ reduce using rule 466 (InOutX -> TypeCtor .) ]

    TypeCtor                       shift and go to state 135
    TypeCtors                      shift and go to state 284

state 445

    (457) ParameterList_opt -> empty .
    (81) TypeCtors_opt -> empty .
    (470) InOut_opt -> empty .

  ! reduce/reduce conflict for DOT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for VOID resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 81 (TypeCtors_opt -> empty .)
    RPAREN          reduce using rule 457 (ParameterList_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)

  ! DOT             [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! BOOL            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! SHORT           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! USHORT          [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! INT             [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! UINT            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! LONG            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! ULONG           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! CHAR            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! FLOAT           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! VOID            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! TYPEOF          [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! CONST           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 470 (InOut_opt -> empty .) ]


state 446

    (268) PrimaryExpression -> LPAREN Expression . RPAREN

    RPAREN          shift and go to state 601


state 447

    (219) UnaryExpression -> LPAREN Type . RPAREN DOT IDENTIFIER

    RPAREN          shift and go to state 602


state 448

    (205) AddExpression -> AddExpression PLUS . MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 603
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 449

    (206) AddExpression -> AddExpression MINUS . MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 604
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 450

    (280) LIT_STRPlus -> LIT_STR LIT_STRPlus .

    POWER           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOT             reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LPAREN          reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TIMES           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DIV             reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MODULO          reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS            reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ          reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS            reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ      reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER         reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ         reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    AMPERSAND       reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    CARET           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PIPE            reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    QUESTION        reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    ASSIGN          reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_PLUS         reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MINUS        reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_TIMES        reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_DIV          reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MODULO       reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_LEFT         reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RPAREN          reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COMMA           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACKET        reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RANGE           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COLON           reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    SEMICOLON       reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACE          reduce using rule 280 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)


state 451

    (105) BasicType2X -> LBRACKET AssignExpression RBRACKET .

    TIMES           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LBRACKET        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    FUNCTION        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LPAREN          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LBRACE          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RPAREN          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    COMMA           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    BODY            reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    POWER           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DOT             reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DIV             reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    MODULO          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    PLUS            reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    MINUS           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    IS_EQ           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    NOT_EQ          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LESS            reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    GREATER         reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LESS_EQ         reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    AMPERSAND       reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    CARET           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    PIPE            reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    QUESTION        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_DIV          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RBRACKET        reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RANGE           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RBRACE          reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    COLON           reduce using rule 105 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)


state 452

    (106) BasicType2X -> LBRACKET AssignExpression RANGE . AssignExpression RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 605

state 453

    (61) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX . RPAREN
    (62) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX . RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX . RPAREN AltDeclaratorSuffixes

    RPAREN          shift and go to state 606


state 454

    (66) AltDeclaratorX -> AltDeclarator .

    RPAREN          reduce using rule 66 (AltDeclaratorX -> AltDeclarator .)


state 455

    (64) AltDeclaratorX -> BasicType2_opt . IDENTIFIER
    (65) AltDeclaratorX -> BasicType2_opt . IDENTIFIER AltFuncDeclaratorSuffix
    (60) AltDeclarator -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes

    IDENTIFIER      shift and go to state 607
    LPAREN          shift and go to state 250


state 456

    (450) FuncDeclarator -> BasicType2_opt IDENTIFIER FuncDeclaratorSuffix .

    SEMICOLON       reduce using rule 450 (FuncDeclarator -> BasicType2_opt IDENTIFIER FuncDeclaratorSuffix .)
    LBRACE          reduce using rule 450 (FuncDeclarator -> BasicType2_opt IDENTIFIER FuncDeclaratorSuffix .)
    BODY            reduce using rule 450 (FuncDeclarator -> BasicType2_opt IDENTIFIER FuncDeclaratorSuffix .)


state 457

    (71) AltDeclaratorSuffix -> LBRACKET . RBRACKET
    (72) AltDeclaratorSuffix -> LBRACKET . AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> LBRACKET . Type RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RBRACKET        shift and go to state 609
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    Type                           shift and go to state 608
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    TypeCtors                      shift and go to state 134
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    LIT_STRPlus                    shift and go to state 239
    ArrayLiteral                   shift and go to state 240
    TypeCtor                       shift and go to state 193
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 223
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 610

state 458

    (67) AltDeclaratorSuffixes -> AltDeclaratorSuffix .
    (68) AltDeclaratorSuffixes -> AltDeclaratorSuffix . AltDeclaratorSuffixes
    (67) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (71) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (72) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ASSIGN          reduce using rule 67 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    COMMA           reduce using rule 67 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    SEMICOLON       reduce using rule 67 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    ELLIPSIS        reduce using rule 67 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    RPAREN          reduce using rule 67 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    LBRACKET        shift and go to state 457

    AltDeclaratorSuffix            shift and go to state 458
    AltDeclaratorSuffixes          shift and go to state 611

state 459

    (60) AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .

    SEMICOLON       reduce using rule 60 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    COMMA           reduce using rule 60 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    ASSIGN          reduce using rule 60 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    RPAREN          reduce using rule 60 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    ELLIPSIS        reduce using rule 60 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)


state 460

    (47) DeclaratorIdentifierList -> DeclaratorIdentifier .
    (48) DeclaratorIdentifierList -> DeclaratorIdentifier . COMMA DeclaratorIdentifierList

    SEMICOLON       reduce using rule 47 (DeclaratorIdentifierList -> DeclaratorIdentifier .)
    COMMA           shift and go to state 612


state 461

    (50) DeclaratorIdentifier -> AltDeclaratorIdentifier .

    COMMA           reduce using rule 50 (DeclaratorIdentifier -> AltDeclaratorIdentifier .)
    SEMICOLON       reduce using rule 50 (DeclaratorIdentifier -> AltDeclaratorIdentifier .)


state 462

    (42) Declarators -> DeclaratorInitializer COMMA DeclaratorIdentifierList .

    SEMICOLON       reduce using rule 42 (Declarators -> DeclaratorInitializer COMMA DeclaratorIdentifierList .)


state 463

    (55) AltDeclaratorIdentifier -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (56) AltDeclaratorIdentifier -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer

    IDENTIFIER      shift and go to state 613


state 464

    (51) VarDeclaratorIdentifier -> IDENTIFIER .
    (52) VarDeclaratorIdentifier -> IDENTIFIER . ASSIGN Initializer

    COMMA           reduce using rule 51 (VarDeclaratorIdentifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 51 (VarDeclaratorIdentifier -> IDENTIFIER .)
    ASSIGN          shift and go to state 614


state 465

    (49) DeclaratorIdentifier -> VarDeclaratorIdentifier .

    COMMA           reduce using rule 49 (DeclaratorIdentifier -> VarDeclaratorIdentifier .)
    SEMICOLON       reduce using rule 49 (DeclaratorIdentifier -> VarDeclaratorIdentifier .)


state 466

    (53) AltDeclaratorIdentifier -> BasicType2 . IDENTIFIER AltDeclaratorSuffixes_opt
    (54) AltDeclaratorIdentifier -> BasicType2 . IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer
    (101) BasicType2_opt -> BasicType2 .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 615

  ! IDENTIFIER      [ reduce using rule 101 (BasicType2_opt -> BasicType2 .) ]


state 467

    (45) DeclaratorInitializer -> AltDeclarator ASSIGN Initializer .

    COMMA           reduce using rule 45 (DeclaratorInitializer -> AltDeclarator ASSIGN Initializer .)
    SEMICOLON       reduce using rule 45 (DeclaratorInitializer -> AltDeclarator ASSIGN Initializer .)


state 468

    (246) PostfixExpression -> TypeCtors_opt BasicType . LPAREN ArgumentList_opt RPAREN

    LPAREN          shift and go to state 593


state 469

    (111) IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET . DOT IdentifierList

    DOT             shift and go to state 616


state 470

    (89) BasicType -> TypeCtor LPAREN Type RPAREN .

    TIMES           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    LBRACKET        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    FUNCTION        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    IDENTIFIER      reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    LBRACE          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    RPAREN          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    SEMICOLON       reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    ELLIPSIS        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    COMMA           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    BODY            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    LPAREN          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    POWER           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    DOT             reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    PLUS_PLUS       reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    MINUS_MINUS     reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    DIV             reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    MODULO          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    PLUS            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    MINUS           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    LEFT_SHIFT      reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    RIGHT_SHIFT     reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    IS_EQ           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    NOT_EQ          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    LESS            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    GREATER_EQ      reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    GREATER         reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    LESS_EQ         reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    AMPERSAND       reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    CARET           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    PIPE            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    QUESTION        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    DOUBLE_PIPE     reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    ASSIGN          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_PLUS         reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_MINUS        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_TIMES        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_DIV          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_MODULO       reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_AND_BIT      reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_OR_BIT       reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_XOR_BIT      reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_LEFT         reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    EQ_RIGHT        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    RBRACKET        reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    RANGE           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    RBRACE          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    COLON           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    BOOL            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    SHORT           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    USHORT          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    INT             reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    UINT            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    LONG            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    ULONG           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    CHAR            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    FLOAT           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    VOID            reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    TYPEOF          reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    CONST           reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)
    IMMUTABLE       reduce using rule 89 (BasicType -> TypeCtor LPAREN Type RPAREN .)


state 471

    (148) Typeof -> TYPEOF LPAREN RETURN RPAREN .

    DOT             reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    TIMES           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LBRACKET        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    FUNCTION        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RPAREN          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    POWER           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    PLUS_PLUS       reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    MINUS_MINUS     reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LPAREN          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    DIV             reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    MODULO          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    PLUS            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    MINUS           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LEFT_SHIFT      reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RIGHT_SHIFT     reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    IS_EQ           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    NOT_EQ          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LESS            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER_EQ      reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER         reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LESS_EQ         reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    AMPERSAND       reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    CARET           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    PIPE            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    QUESTION        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    DOUBLE_PIPE     reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    ASSIGN          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_PLUS         reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_MINUS        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_TIMES        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_DIV          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_MODULO       reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_AND_BIT      reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_OR_BIT       reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_XOR_BIT      reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_LEFT         reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_RIGHT        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    COMMA           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    SEMICOLON       reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RBRACKET        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RANGE           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RBRACE          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    COLON           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LBRACE          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    IDENTIFIER      reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    ELLIPSIS        reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    BODY            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    BOOL            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    SHORT           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    USHORT          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    INT             reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    UINT            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LONG            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    ULONG           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    CHAR            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    FLOAT           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    VOID            reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    TYPEOF          reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    CONST           reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    IMMUTABLE       reduce using rule 148 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)


state 472

    (147) Typeof -> TYPEOF LPAREN Expression RPAREN .

    DOT             reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    TIMES           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LBRACKET        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    FUNCTION        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    POWER           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    PLUS_PLUS       reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    MINUS_MINUS     reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    DIV             reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    MODULO          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    PLUS            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    MINUS           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LEFT_SHIFT      reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    IS_EQ           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    NOT_EQ          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LESS            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    GREATER_EQ      reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    GREATER         reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LESS_EQ         reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    CARET           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    PIPE            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    ASSIGN          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_PLUS         reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_MINUS        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_TIMES        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_DIV          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_MODULO       reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_AND_BIT      reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_OR_BIT       reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_LEFT         reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_RIGHT        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    COMMA           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RANGE           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    COLON           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    IDENTIFIER      reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    ELLIPSIS        reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    BODY            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    BOOL            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    SHORT           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    USHORT          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    INT             reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    UINT            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LONG            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    ULONG           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    CHAR            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    FLOAT           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    VOID            reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    TYPEOF          reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    CONST           reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    IMMUTABLE       reduce using rule 147 (Typeof -> TYPEOF LPAREN Expression RPAREN .)


state 473

    (167) CommaExpression -> AssignExpression COMMA . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 617
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 474

    (406) BaseClassList -> COLON SuperClass COMMA . Interfaces
    (411) Interfaces -> . Interface
    (412) Interfaces -> . Interface COMMA Interfaces
    (413) Interface -> . BasicType
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    Interfaces                     shift and go to state 618
    BasicType                      shift and go to state 619
    BasicTypeX                     shift and go to state 40
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 271
    TypeCtor                       shift and go to state 42
    Typeof                         shift and go to state 44

state 475

    (412) Interfaces -> Interface COMMA . Interfaces
    (411) Interfaces -> . Interface
    (412) Interfaces -> . Interface COMMA Interfaces
    (413) Interface -> . BasicType
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    Interfaces                     shift and go to state 620
    BasicType                      shift and go to state 619
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 271
    TypeCtor                       shift and go to state 42

state 476

    (415) Allocator -> NEW Parameters FunctionBody .

    SEMICOLON       reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    NEW             reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    DELETE          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    ALIAS           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    MIXIN           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    STATIC          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    EXTERN          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    FINAL           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    AUTO            reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    CONST           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    IMMUTABLE       reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    RETURN          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    ENUM            reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    IMPORT          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    PRIVATE         reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    PROTECTED       reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    PUBLIC          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    CLASS           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    UNION           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    DOT             reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    BOOL            reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    SHORT           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    USHORT          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    INT             reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    UINT            reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    LONG            reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    ULONG           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    CHAR            reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    FLOAT           reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    VOID            reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    IDENTIFIER      reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    TYPEOF          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)
    RBRACE          reduce using rule 415 (Allocator -> NEW Parameters FunctionBody .)


state 477

    (414) Allocator -> NEW Parameters SEMICOLON .

    SEMICOLON       reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    NEW             reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    DELETE          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    ALIAS           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    MIXIN           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    STATIC          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    EXTERN          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    FINAL           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    AUTO            reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    CONST           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    IMMUTABLE       reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    RETURN          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    ENUM            reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    IMPORT          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    PRIVATE         reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    PROTECTED       reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    PUBLIC          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    CLASS           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    UNION           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    DOT             reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    BOOL            reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    SHORT           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    USHORT          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    INT             reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    UINT            reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    LONG            reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    ULONG           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    CHAR            reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    FLOAT           reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    VOID            reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    IDENTIFIER      reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    TYPEOF          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)
    RBRACE          reduce using rule 414 (Allocator -> NEW Parameters SEMICOLON .)


state 478

    (418) AliasThis -> ALIAS IDENTIFIER THIS . SEMICOLON

    SEMICOLON       shift and go to state 621


state 479

    (161) DeclarationBlock -> LBRACE DeclDefs_opt . RBRACE

    RBRACE          shift and go to state 622


state 480

    (33) MixinDeclaration -> MIXIN LPAREN AssignExpression . RPAREN SEMICOLON

    RPAREN          shift and go to state 623


state 481

    (417) Deallocator -> DELETE Parameters FunctionBody .

    SEMICOLON       reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    NEW             reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    DELETE          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    ALIAS           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    MIXIN           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    STATIC          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    EXTERN          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    FINAL           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    AUTO            reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    CONST           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    IMMUTABLE       reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    RETURN          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    ENUM            reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    IMPORT          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    PRIVATE         reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    PROTECTED       reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    PUBLIC          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    CLASS           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    UNION           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    DOT             reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    BOOL            reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    SHORT           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    USHORT          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    INT             reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    UINT            reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    LONG            reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    ULONG           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    CHAR            reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    FLOAT           reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    VOID            reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    IDENTIFIER      reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    TYPEOF          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)
    RBRACE          reduce using rule 417 (Deallocator -> DELETE Parameters FunctionBody .)


state 482

    (416) Deallocator -> DELETE Parameters SEMICOLON .

    SEMICOLON       reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    NEW             reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    DELETE          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    ALIAS           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    MIXIN           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    STATIC          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    EXTERN          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    FINAL           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    AUTO            reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    CONST           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    IMMUTABLE       reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    RETURN          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    ENUM            reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    IMPORT          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    PRIVATE         reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    PROTECTED       reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    PUBLIC          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    CLASS           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    UNION           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    DOT             reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    BOOL            reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    SHORT           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    USHORT          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    INT             reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    UINT            reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    LONG            reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    ULONG           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    CHAR            reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    FLOAT           reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    VOID            reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    IDENTIFIER      reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    TYPEOF          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)
    RBRACE          reduce using rule 416 (Deallocator -> DELETE Parameters SEMICOLON .)


state 483

    (75) Type -> TypeCtors_opt BasicType BasicType2_opt .

    SEMICOLON       reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    COMMA           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    RPAREN          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    LBRACKET        reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    LPAREN          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    POWER           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    DOT             reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    PLUS_PLUS       reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    MINUS_MINUS     reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    TIMES           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    DIV             reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    MODULO          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    PLUS            reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    MINUS           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    LEFT_SHIFT      reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    RIGHT_SHIFT     reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    IS_EQ           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    NOT_EQ          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    LESS            reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    GREATER_EQ      reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    GREATER         reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    LESS_EQ         reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    AMPERSAND       reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    CARET           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    PIPE            reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    DOUBLE_AMPERSAND reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    QUESTION        reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    DOUBLE_PIPE     reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    ASSIGN          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_PLUS         reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_MINUS        reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_TIMES        reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_DIV          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_MODULO       reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_AND_BIT      reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_OR_BIT       reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_XOR_BIT      reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_LEFT         reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    EQ_RIGHT        reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    RBRACKET        reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    RANGE           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    RBRACE          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    COLON           reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    ELLIPSIS        reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    LBRACE          reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    BODY            reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)
    IDENTIFIER      reduce using rule 75 (Type -> TypeCtors_opt BasicType BasicType2_opt .)


state 484

    (435) EnumMembers -> EnumMember COMMA EnumMembers .

    RBRACE          reduce using rule 435 (EnumMembers -> EnumMember COMMA EnumMembers .)


state 485

    (437) EnumMember -> IDENTIFIER ASSIGN AssignExpression .

    COMMA           reduce using rule 437 (EnumMember -> IDENTIFIER ASSIGN AssignExpression .)
    RBRACE          reduce using rule 437 (EnumMember -> IDENTIFIER ASSIGN AssignExpression .)


state 486

    (445) AnonymousEnumMember -> Type IDENTIFIER ASSIGN . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 624

state 487

    (444) AnonymousEnumMember -> EnumMember .

    COMMA           reduce using rule 444 (AnonymousEnumMember -> EnumMember .)
    RBRACE          reduce using rule 444 (AnonymousEnumMember -> EnumMember .)


state 488

    (443) AnonymousEnumMembers -> AnonymousEnumMember COMMA AnonymousEnumMembers .

    RBRACE          reduce using rule 443 (AnonymousEnumMembers -> AnonymousEnumMember COMMA AnonymousEnumMembers .)


state 489

    (438) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers . RBRACE

    RBRACE          shift and go to state 625


state 490

    (431) EnumBody -> LBRACE EnumMembers RBRACE .

    ALIAS           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    ENUM            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IMPORT          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    STATIC          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CLASS           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    UNION           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    EXTERN          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FINAL           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    AUTO            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CONST           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DOT             reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    BOOL            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    SHORT           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    USHORT          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    INT             reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    UINT            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LONG            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    ULONG           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CHAR            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FLOAT           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    VOID            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TYPEOF          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    $end            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    SEMICOLON       reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    NEW             reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DELETE          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    MIXIN           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    RETURN          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PRIVATE         reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PROTECTED       reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PUBLIC          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    RBRACE          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CASE            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DEFAULT         reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LBRACE          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IF              reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    WHILE           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DO              reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FOR             reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    SWITCH          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CONTINUE        reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    BREAK           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    GOTO            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    WITH            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LPAREN          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FOREACH         reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    UAMPERSAND      reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TIMES           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    UMINUS          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    UPLUS           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TILDE           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CAST            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    THIS            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    NULL            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TRUE            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FALSE           reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DOLLAR          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    INUMBER         reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DNUMBER         reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LIT_STR         reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LBRACKET        reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FUNCTION        reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TYPEID          reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    BODY            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)
    ELSE            reduce using rule 431 (EnumBody -> LBRACE EnumMembers RBRACE .)


state 491

    (428) EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .

    SEMICOLON       reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    NEW             reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DELETE          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ALIAS           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    MIXIN           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    STATIC          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    EXTERN          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FINAL           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    AUTO            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CONST           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IMMUTABLE       reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    RETURN          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ENUM            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IMPORT          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PRIVATE         reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PROTECTED       reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PUBLIC          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CLASS           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    UNION           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DOT             reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    BOOL            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    SHORT           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    USHORT          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    INT             reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    UINT            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LONG            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ULONG           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CHAR            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FLOAT           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    VOID            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IDENTIFIER      reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TYPEOF          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    RBRACE          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    $end            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CASE            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DEFAULT         reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LBRACE          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IF              reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    WHILE           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DO              reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FOR             reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    SWITCH          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CONTINUE        reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    BREAK           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    GOTO            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    WITH            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LPAREN          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FOREACH         reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FOREACH_REVERSE reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    UAMPERSAND      reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PLUS_PLUS       reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    MINUS_MINUS     reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TIMES           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    UMINUS          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    UPLUS           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    EXCLAMATION     reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TILDE           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CAST            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    THIS            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    NULL            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TRUE            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FALSE           reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DOLLAR          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    INUMBER         reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DNUMBER         reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LIT_CHAR        reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LIT_STR         reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LBRACKET        reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FUNCTION        reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TYPEID          reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    BODY            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ELSE            reduce using rule 428 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)


state 492

    (140) AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .

    SEMICOLON       reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    NEW             reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DELETE          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ALIAS           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    MIXIN           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    STATIC          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXTERN          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FINAL           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    AUTO            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONST           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMMUTABLE       reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    RETURN          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ENUM            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMPORT          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PRIVATE         reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PROTECTED       reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PUBLIC          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CLASS           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    UNION           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOT             reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    BOOL            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    SHORT           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    USHORT          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    INT             reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    UINT            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LONG            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ULONG           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CHAR            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FLOAT           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    VOID            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IDENTIFIER      reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEOF          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    RBRACE          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CASE            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DEFAULT         reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACE          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IF              reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    WHILE           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DO              reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOR             reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    SWITCH          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONTINUE        reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    BREAK           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    GOTO            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    WITH            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LPAREN          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH         reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH_REVERSE reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    UAMPERSAND      reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PLUS_PLUS       reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    MINUS_MINUS     reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TIMES           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    UMINUS          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    UPLUS           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXCLAMATION     reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TILDE           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CAST            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    THIS            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    NULL            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TRUE            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FALSE           reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOLLAR          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    INUMBER         reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DNUMBER         reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_CHAR        reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_STR         reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACKET        reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FUNCTION        reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEID          reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    BODY            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ELSE            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    $end            reduce using rule 140 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)


state 493

    (141) AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .

    SEMICOLON       reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    NEW             reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DELETE          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ALIAS           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    MIXIN           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    STATIC          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    EXTERN          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FINAL           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    AUTO            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CONST           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IMMUTABLE       reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    RETURN          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ENUM            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IMPORT          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PRIVATE         reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PROTECTED       reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PUBLIC          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CLASS           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UNION           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DOT             reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BOOL            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    SHORT           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    USHORT          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    INT             reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UINT            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LONG            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ULONG           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CHAR            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FLOAT           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    VOID            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IDENTIFIER      reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TYPEOF          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    RBRACE          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CASE            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DEFAULT         reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LBRACE          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IF              reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    WHILE           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DO              reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOR             reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    SWITCH          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CONTINUE        reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BREAK           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    GOTO            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    WITH            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LPAREN          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOREACH         reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOREACH_REVERSE reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UAMPERSAND      reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PLUS_PLUS       reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    MINUS_MINUS     reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TIMES           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UMINUS          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UPLUS           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    EXCLAMATION     reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TILDE           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CAST            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    THIS            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    NULL            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TRUE            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FALSE           reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DOLLAR          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    INUMBER         reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DNUMBER         reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LIT_CHAR        reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LIT_STR         reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LBRACKET        reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FUNCTION        reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TYPEID          reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BODY            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ELSE            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    $end            reduce using rule 141 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)


state 494

    (145) AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type .

    SEMICOLON       reduce using rule 145 (AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type .)
    COMMA           reduce using rule 145 (AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type .)


state 495

    (29) ImportBindList -> ImportBind COMMA . ImportBindList
    (28) ImportBindList -> . ImportBind
    (29) ImportBindList -> . ImportBind COMMA ImportBindList
    (30) ImportBind -> . IDENTIFIER
    (31) ImportBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 304

    ImportBind                     shift and go to state 303
    ImportBindList                 shift and go to state 626

state 496

    (31) ImportBind -> IDENTIFIER ASSIGN . IDENTIFIER

    IDENTIFIER      shift and go to state 627


state 497

    (327) StatementList -> Statement StatementList .

    RBRACE          reduce using rule 327 (StatementList -> Statement StatementList .)


state 498

    (393) WithStatement -> WITH LPAREN . Expression RPAREN ScopeStatement
    (394) WithStatement -> WITH LPAREN . Symbol RPAREN ScopeStatement
    (165) Expression -> . CommaExpression
    (481) Symbol -> . SymbolTail
    (482) Symbol -> . DOT SymbolTail
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (483) SymbolTail -> . IDENTIFIER
    (484) SymbolTail -> . IDENTIFIER DOT SymbolTail
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             shift and go to state 630
    IDENTIFIER      shift and go to state 632
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    SymbolTail                     shift and go to state 628
    Symbol                         shift and go to state 629
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 631
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 499

    (391) GotoStatement -> GOTO CASE . SEMICOLON
    (392) GotoStatement -> GOTO CASE . Expression SEMICOLON
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    SEMICOLON       shift and go to state 633
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 634
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 500

    (390) GotoStatement -> GOTO DEFAULT . SEMICOLON

    SEMICOLON       shift and go to state 635


state 501

    (389) GotoStatement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 636


state 502

    (325) BlockStatement -> LBRACE StatementList RBRACE .

    POWER           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DOT             reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    PLUS_PLUS       reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    MINUS_MINUS     reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LPAREN          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    TIMES           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DIV             reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    MODULO          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    PLUS            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    MINUS           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LEFT_SHIFT      reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    RIGHT_SHIFT     reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    IS_EQ           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    NOT_EQ          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LESS            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    GREATER_EQ      reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    GREATER         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LESS_EQ         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    AMPERSAND       reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    CARET           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    PIPE            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    QUESTION        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DOUBLE_PIPE     reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    ASSIGN          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_PLUS         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_MINUS        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_TIMES        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_DIV          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_MODULO       reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_AND_BIT      reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_OR_BIT       reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_XOR_BIT      reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_LEFT         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EQ_RIGHT        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    RBRACKET        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    RANGE           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    COMMA           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    RPAREN          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    SEMICOLON       reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    RBRACE          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    COLON           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    CASE            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DEFAULT         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LBRACE          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    IDENTIFIER      reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    IF              reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    WHILE           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DO              reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    FOR             reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    SWITCH          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    FINAL           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    CONTINUE        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    BREAK           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    RETURN          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    GOTO            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    WITH            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    MIXIN           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    IMPORT          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    STATIC          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    FOREACH         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    FOREACH_REVERSE reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    ENUM            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EXTERN          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    AUTO            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    CONST           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    IMMUTABLE       reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    UAMPERSAND      reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    UMINUS          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    UPLUS           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    EXCLAMATION     reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    TILDE           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    CAST            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    THIS            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    NULL            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    TRUE            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    FALSE           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DOLLAR          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    INUMBER         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DNUMBER         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LIT_CHAR        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LIT_STR         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LBRACKET        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    FUNCTION        reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    NEW             reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    BOOL            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    SHORT           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    USHORT          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    INT             reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    UINT            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    LONG            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    ULONG           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    CHAR            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    FLOAT           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    VOID            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    TYPEOF          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    TYPEID          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    BODY            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    ALIAS           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    CLASS           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    UNION           reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    ELSE            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    $end            reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    DELETE          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    PRIVATE         reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    PROTECTED       reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)
    PUBLIC          reduce using rule 325 (BlockStatement -> LBRACE StatementList RBRACE .)


state 503

    (385) Expression_opt -> empty .
    (81) TypeCtors_opt -> empty .

    SEMICOLON       reduce using rule 385 (Expression_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)


state 504

    (384) Expression_opt -> Expression .

    SEMICOLON       reduce using rule 384 (Expression_opt -> Expression .)


state 505

    (388) ReturnStatement -> RETURN Expression_opt . SEMICOLON

    SEMICOLON       shift and go to state 637


state 506

    (349) AggregateForeach -> Foreach LPAREN . ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (353) ForeachTypeList -> . ForeachType
    (354) ForeachTypeList -> . ForeachType COMMA ForeachTypeList
    (355) ForeachType -> . ForeachTypeAttributes_opt BasicType Declarator
    (356) ForeachType -> . ForeachTypeAttributes_opt IDENTIFIER
    (357) ForeachType -> . ForeachTypeAttributes_opt ALIAS IDENTIFIER
    (358) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (359) ForeachTypeAttributes_opt -> . empty
    (360) ForeachTypeAttributes -> . ForeachTypeAttribute
    (361) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (485) empty -> .
    (362) ForeachTypeAttribute -> . TypeCtor
    (363) ForeachTypeAttribute -> . ENUM
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      reduce using rule 485 (empty -> .)
    ALIAS           reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    ENUM            shift and go to state 532
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    ForeachType                    shift and go to state 638
    TypeCtor                       shift and go to state 639
    ForeachTypeAttributes_opt      shift and go to state 535
    ForeachTypeAttribute           shift and go to state 530
    ForeachTypeAttributes          shift and go to state 536
    ForeachTypeList                shift and go to state 640
    empty                          shift and go to state 641

state 507

    (381) FinalSwitchStatement -> FINAL SWITCH . LPAREN Expression RPAREN ScopeStatement

    LPAREN          shift and go to state 642


state 508

    (329) DeclarationStatement -> StorageClasses_opt Declaration .

    SEMICOLON       reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    CASE            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    DEFAULT         reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    LBRACE          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    IDENTIFIER      reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    IF              reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    WHILE           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    DO              reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    FOR             reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    SWITCH          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    FINAL           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    CONTINUE        reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    BREAK           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    RETURN          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    GOTO            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    WITH            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    MIXIN           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    IMPORT          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    STATIC          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    LPAREN          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    FOREACH         reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    FOREACH_REVERSE reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    ENUM            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    EXTERN          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    AUTO            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    CONST           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    IMMUTABLE       reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    UAMPERSAND      reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    PLUS_PLUS       reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    MINUS_MINUS     reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    TIMES           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    UMINUS          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    UPLUS           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    EXCLAMATION     reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    TILDE           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    CAST            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    DOT             reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    THIS            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    NULL            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    TRUE            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    FALSE           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    DOLLAR          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    INUMBER         reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    DNUMBER         reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    LIT_CHAR        reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    LIT_STR         reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    LBRACKET        reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    FUNCTION        reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    NEW             reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    BOOL            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    SHORT           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    USHORT          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    INT             reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    UINT            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    LONG            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    ULONG           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    CHAR            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    FLOAT           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    VOID            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    TYPEOF          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    TYPEID          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    BODY            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    ALIAS           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    CLASS           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    UNION           reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    RBRACE          reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)
    ELSE            reduce using rule 329 (DeclarationStatement -> StorageClasses_opt Declaration .)


state 509

    (370) CaseStatement -> CASE ArgumentList . COLON ScopeStatementList

    COLON           shift and go to state 643


state 510

    (371) CaseRangeStatement -> CASE FirstExp . COLON RANGE LastExp COLON ScopeStatementList

    COLON           shift and go to state 644


state 511

    (233) ArgumentList -> AssignExpression .
    (234) ArgumentList -> AssignExpression . COMMA
    (235) ArgumentList -> AssignExpression . COMMA ArgumentList
    (372) FirstExp -> AssignExpression .

  ! reduce/reduce conflict for COLON resolved using rule 233 (ArgumentList -> AssignExpression .)
    COLON           reduce using rule 233 (ArgumentList -> AssignExpression .)
    COMMA           shift and go to state 552

  ! COLON           [ reduce using rule 372 (FirstExp -> AssignExpression .) ]


state 512

    (340) ForStatement -> FOR LPAREN . Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (341) Initialize -> . SEMICOLON
    (342) Initialize -> . NoScopeNonEmptyStatement
    (289) NoScopeNonEmptyStatement -> . NonEmptyStatement
    (290) NoScopeNonEmptyStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    SEMICOLON       shift and go to state 645
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 527
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    Initialize                     shift and go to state 646
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 528
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    NoScopeNonEmptyStatement       shift and go to state 647
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 513

    (386) ContinueStatement -> CONTINUE IDENTIFIER_opt . SEMICOLON

    SEMICOLON       shift and go to state 648


state 514

    (382) IDENTIFIER_opt -> IDENTIFIER .

    SEMICOLON       reduce using rule 382 (IDENTIFIER_opt -> IDENTIFIER .)


state 515

    (383) IDENTIFIER_opt -> empty .

    SEMICOLON       reduce using rule 383 (IDENTIFIER_opt -> empty .)


state 516

    (395) MixinStatement -> MIXIN LPAREN . AssignExpression RPAREN SEMICOLON
    (282) MixinExpression -> MIXIN LPAREN . AssignExpression RPAREN
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 649

state 517

    (319) ScopeStatement -> BlockStatement .
    (278) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    DEFAULT         reduce using rule 319 (ScopeStatement -> BlockStatement .)
    LBRACE          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 319 (ScopeStatement -> BlockStatement .)
    IF              reduce using rule 319 (ScopeStatement -> BlockStatement .)
    WHILE           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    DO              reduce using rule 319 (ScopeStatement -> BlockStatement .)
    FOR             reduce using rule 319 (ScopeStatement -> BlockStatement .)
    SWITCH          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    FINAL           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    CONTINUE        reduce using rule 319 (ScopeStatement -> BlockStatement .)
    BREAK           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    RETURN          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    GOTO            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    WITH            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    MIXIN           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    IMPORT          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    STATIC          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    FOREACH         reduce using rule 319 (ScopeStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 319 (ScopeStatement -> BlockStatement .)
    ENUM            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    EXTERN          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    AUTO            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    CONST           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 319 (ScopeStatement -> BlockStatement .)
    UAMPERSAND      reduce using rule 319 (ScopeStatement -> BlockStatement .)
    UMINUS          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    UPLUS           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 319 (ScopeStatement -> BlockStatement .)
    TILDE           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    CAST            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    THIS            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    NULL            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    TRUE            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    FALSE           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    DOLLAR          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    INUMBER         reduce using rule 319 (ScopeStatement -> BlockStatement .)
    DNUMBER         reduce using rule 319 (ScopeStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 319 (ScopeStatement -> BlockStatement .)
    LIT_STR         reduce using rule 319 (ScopeStatement -> BlockStatement .)
    LBRACKET        reduce using rule 319 (ScopeStatement -> BlockStatement .)
    FUNCTION        reduce using rule 319 (ScopeStatement -> BlockStatement .)
    NEW             reduce using rule 319 (ScopeStatement -> BlockStatement .)
    BOOL            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    SHORT           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    USHORT          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    INT             reduce using rule 319 (ScopeStatement -> BlockStatement .)
    UINT            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    LONG            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    ULONG           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    CHAR            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    FLOAT           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    VOID            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    TYPEOF          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    TYPEID          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    BODY            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    ALIAS           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    CLASS           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    UNION           reduce using rule 319 (ScopeStatement -> BlockStatement .)
    RBRACE          reduce using rule 319 (ScopeStatement -> BlockStatement .)
    ELSE            reduce using rule 319 (ScopeStatement -> BlockStatement .)
    POWER           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 319 (ScopeStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 319 (ScopeStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 319 (ScopeStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 319 (ScopeStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 319 (ScopeStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 319 (ScopeStatement -> BlockStatement .) ]


state 518

    (368) ForeachRangeStatement -> RangeForeach ScopeStatement .

    SEMICOLON       reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CASE            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DEFAULT         reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LBRACE          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IDENTIFIER      reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IF              reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    WHILE           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DO              reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FOR             reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    SWITCH          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FINAL           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CONTINUE        reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    BREAK           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    RETURN          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    GOTO            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    WITH            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    MIXIN           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IMPORT          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    STATIC          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LPAREN          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FOREACH         reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FOREACH_REVERSE reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ENUM            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    EXTERN          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    AUTO            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CONST           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IMMUTABLE       reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    UAMPERSAND      reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    PLUS_PLUS       reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    MINUS_MINUS     reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TIMES           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    UMINUS          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    UPLUS           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    EXCLAMATION     reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TILDE           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CAST            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DOT             reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    THIS            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    NULL            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TRUE            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FALSE           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DOLLAR          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    INUMBER         reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DNUMBER         reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LIT_CHAR        reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LIT_STR         reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LBRACKET        reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FUNCTION        reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    NEW             reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    BOOL            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    SHORT           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    USHORT          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    INT             reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    UINT            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LONG            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ULONG           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CHAR            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FLOAT           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    VOID            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TYPEOF          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TYPEID          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    BODY            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ALIAS           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CLASS           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    UNION           reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    RBRACE          reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ELSE            reduce using rule 368 (ForeachRangeStatement -> RangeForeach ScopeStatement .)


state 519

    (318) ScopeStatement -> NonEmptyStatement .

    SEMICOLON       reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    CASE            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    LBRACE          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    IF              reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    WHILE           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    DO              reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    FOR             reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    SWITCH          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    FINAL           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    BREAK           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    RETURN          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    GOTO            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    WITH            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    MIXIN           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    IMPORT          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    STATIC          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    LPAREN          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    FOREACH         reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    ENUM            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    EXTERN          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    AUTO            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    CONST           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    UAMPERSAND      reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    TIMES           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    UMINUS          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    UPLUS           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    TILDE           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    CAST            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    DOT             reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    THIS            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    NULL            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    TRUE            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    FALSE           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    INUMBER         reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    NEW             reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    BOOL            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    SHORT           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    USHORT          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    INT             reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    UINT            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    LONG            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    ULONG           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    CHAR            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    FLOAT           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    VOID            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    TYPEID          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    BODY            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    ALIAS           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    CLASS           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    UNION           reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    RBRACE          reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)
    ELSE            reduce using rule 318 (ScopeStatement -> NonEmptyStatement .)


state 520

    (374) DefaultStatement -> DEFAULT COLON . ScopeStatementList
    (375) ScopeStatementList -> . StatementListNoCaseNoDefault
    (376) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (377) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (378) StatementNoCaseNoDefault -> . SEMICOLON
    (379) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (380) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (320) ScopeBlockStatement -> . BlockStatement
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    SEMICOLON       shift and go to state 652
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 159
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 312
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ScopeStatementList             shift and go to state 650
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StatementNoCaseNoDefault       shift and go to state 651
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    StatementListNoCaseNoDefault   shift and go to state 653
    SwitchStatement                shift and go to state 339
    LIT_STRPlus                    shift and go to state 239
    empty                          shift and go to state 350
    NonEmptyStatementNoCaseNoDefault shift and go to state 654
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ScopeBlockStatement            shift and go to state 655
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 521

    (338) WhileStatement -> WHILE LPAREN . Expression RPAREN ScopeStatement
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 656
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 522

    (369) SwitchStatement -> SWITCH LPAREN . Expression RPAREN ScopeStatement
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 657
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 523

    (321) LabeledStatement -> IDENTIFIER COLON .
    (322) LabeledStatement -> IDENTIFIER COLON . NoScopeStatement
    (323) LabeledStatement -> IDENTIFIER COLON . Statement
    (291) NoScopeStatement -> . SEMICOLON
    (292) NoScopeStatement -> . NonEmptyStatement
    (293) NoScopeStatement -> . BlockStatement
    (286) Statement -> . SEMICOLON
    (287) Statement -> . NonEmptyStatement
    (288) Statement -> . ScopeBlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (320) ScopeBlockStatement -> . BlockStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for ALIAS resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for ENUM resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! reduce/reduce conflict for CLASS resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for UNION resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for EXTERN resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for FINAL resolved as shift
  ! reduce/reduce conflict for AUTO resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for CONST resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for DOT resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for BOOL resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for SHORT resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for USHORT resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for INT resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for UINT resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for LONG resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for ULONG resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for CHAR resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for VOID resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! reduce/reduce conflict for TYPEOF resolved using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for UAMPERSAND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
  ! shift/reduce conflict for BODY resolved as shift
    ALIAS           reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
    CLASS           reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
    UNION           reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
    RBRACE          reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
    ELSE            reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .)
    SEMICOLON       shift and go to state 660
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! WHILE           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! SEMICOLON       [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CASE            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DEFAULT         [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LBRACE          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IDENTIFIER      [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IF              [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DO              [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FOR             [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! SWITCH          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FINAL           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CONTINUE        [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! BREAK           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! RETURN          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! GOTO            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! WITH            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! MIXIN           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IMPORT          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! STATIC          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LPAREN          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FOREACH         [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FOREACH_REVERSE [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! ENUM            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! EXTERN          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! AUTO            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CONST           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IMMUTABLE       [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! UAMPERSAND      [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! PLUS_PLUS       [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! MINUS_MINUS     [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TIMES           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! UMINUS          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! UPLUS           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! EXCLAMATION     [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TILDE           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CAST            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DOT             [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! THIS            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! NULL            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TRUE            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FALSE           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DOLLAR          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! INUMBER         [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DNUMBER         [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LIT_CHAR        [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LIT_STR         [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LBRACKET        [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FUNCTION        [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! NEW             [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! BOOL            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! SHORT           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! USHORT          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! INT             [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! UINT            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LONG            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! ULONG           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CHAR            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FLOAT           [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! VOID            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TYPEOF          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TYPEID          [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! BODY            [ reduce using rule 321 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! ALIAS           [ reduce using rule 485 (empty -> .) ]
  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! CLASS           [ reduce using rule 485 (empty -> .) ]
  ! UNION           [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    Statement                      shift and go to state 658
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 659
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    NoScopeStatement               shift and go to state 661
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 662
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ScopeBlockStatement            shift and go to state 357
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 524

    (328) ExpressionStatement -> Expression SEMICOLON .

    SEMICOLON       reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    CASE            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    DEFAULT         reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    LBRACE          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    IF              reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    WHILE           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    DO              reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    FOR             reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    SWITCH          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    FINAL           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    CONTINUE        reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    BREAK           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    RETURN          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    GOTO            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    WITH            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    MIXIN           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    IMPORT          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    STATIC          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    LPAREN          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    FOREACH         reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    ENUM            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    EXTERN          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    AUTO            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    CONST           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    IMMUTABLE       reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    UAMPERSAND      reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    TIMES           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    UMINUS          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    UPLUS           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    EXCLAMATION     reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    TILDE           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    CAST            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    DOT             reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    THIS            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    NULL            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    TRUE            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    FALSE           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    DOLLAR          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    INUMBER         reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    DNUMBER         reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    LIT_CHAR        reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    LIT_STR         reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    LBRACKET        reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    FUNCTION        reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    NEW             reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    BOOL            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    SHORT           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    USHORT          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    INT             reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    UINT            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    LONG            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    ULONG           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    CHAR            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    FLOAT           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    VOID            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    TYPEOF          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    TYPEID          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    BODY            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    ALIAS           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    CLASS           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    UNION           reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    RBRACE          reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)
    ELSE            reduce using rule 328 (ExpressionStatement -> Expression SEMICOLON .)


state 525

    (387) BreakStatement -> BREAK IDENTIFIER_opt . SEMICOLON

    SEMICOLON       shift and go to state 663


state 526

    (339) DoStatement -> DO ScopeStatement . WHILE LPAREN Expression RPAREN

    WHILE           shift and go to state 664


state 527

    (290) NoScopeNonEmptyStatement -> BlockStatement .
    (278) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    DEFAULT         reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    LBRACE          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    IF              reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    WHILE           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    DO              reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    FOR             reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    SWITCH          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    FINAL           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    CONTINUE        reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    BREAK           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    RETURN          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    GOTO            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    WITH            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    MIXIN           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    IMPORT          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    STATIC          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    FOREACH         reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    ENUM            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    EXTERN          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    AUTO            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    CONST           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    UAMPERSAND      reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    UMINUS          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    UPLUS           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    TILDE           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    CAST            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    THIS            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    NULL            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    TRUE            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    FALSE           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    DOLLAR          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    INUMBER         reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    DNUMBER         reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    LIT_STR         reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    LBRACKET        reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    FUNCTION        reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    NEW             reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    BOOL            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    SHORT           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    USHORT          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    INT             reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    UINT            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    LONG            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    ULONG           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    CHAR            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    FLOAT           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    VOID            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    TYPEOF          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    TYPEID          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    BODY            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    ALIAS           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    CLASS           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    UNION           reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    RBRACE          reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    ELSE            reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .)
    POWER           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 290 (NoScopeNonEmptyStatement -> BlockStatement .) ]


state 528

    (289) NoScopeNonEmptyStatement -> NonEmptyStatement .

    SEMICOLON       reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CASE            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LBRACE          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IF              reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    WHILE           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DO              reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FOR             reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    SWITCH          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FINAL           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    BREAK           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    RETURN          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    GOTO            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    WITH            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    MIXIN           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IMPORT          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    STATIC          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LPAREN          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FOREACH         reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ENUM            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    EXTERN          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    AUTO            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CONST           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    UAMPERSAND      reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TIMES           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    UMINUS          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    UPLUS           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TILDE           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CAST            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DOT             reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    THIS            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    NULL            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TRUE            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FALSE           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    INUMBER         reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    NEW             reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    BOOL            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    SHORT           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    USHORT          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    INT             reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    UINT            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LONG            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ULONG           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CHAR            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FLOAT           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    VOID            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TYPEID          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    BODY            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ALIAS           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CLASS           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    UNION           reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    RBRACE          reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ELSE            reduce using rule 289 (NoScopeNonEmptyStatement -> NonEmptyStatement .)


state 529

    (350) ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .

    SEMICOLON       reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CASE            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DEFAULT         reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LBRACE          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IDENTIFIER      reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IF              reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    WHILE           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DO              reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FOR             reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    SWITCH          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FINAL           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CONTINUE        reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    BREAK           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    RETURN          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    GOTO            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    WITH            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    MIXIN           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IMPORT          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    STATIC          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LPAREN          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FOREACH         reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ENUM            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    EXTERN          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    AUTO            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CONST           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IMMUTABLE       reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    UAMPERSAND      reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    PLUS_PLUS       reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    MINUS_MINUS     reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TIMES           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    UMINUS          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    UPLUS           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    EXCLAMATION     reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TILDE           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CAST            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DOT             reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    THIS            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    NULL            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TRUE            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FALSE           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DOLLAR          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    INUMBER         reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DNUMBER         reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LIT_CHAR        reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LIT_STR         reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LBRACKET        reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FUNCTION        reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    NEW             reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    BOOL            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    SHORT           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    USHORT          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    INT             reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    UINT            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LONG            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ULONG           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CHAR            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FLOAT           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    VOID            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TYPEOF          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TYPEID          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    BODY            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ALIAS           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CLASS           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    UNION           reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    RBRACE          reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ELSE            reduce using rule 350 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)


state 530

    (360) ForeachTypeAttributes -> ForeachTypeAttribute .
    (361) ForeachTypeAttributes -> ForeachTypeAttribute . ForeachTypeAttributes_opt
    (358) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (359) ForeachTypeAttributes_opt -> . empty
    (360) ForeachTypeAttributes -> . ForeachTypeAttribute
    (361) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (485) empty -> .
    (362) ForeachTypeAttribute -> . TypeCtor
    (363) ForeachTypeAttribute -> . ENUM
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for ALIAS resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for DOT resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for BOOL resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for SHORT resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for USHORT resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for INT resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for UINT resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for LONG resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for ULONG resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for CHAR resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for FLOAT resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for VOID resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for CONST resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    ALIAS           reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    DOT             reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    BOOL            reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    SHORT           reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    USHORT          reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    INT             reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    UINT            reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    LONG            reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    ULONG           reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    CHAR            reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    FLOAT           reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    VOID            reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    TYPEOF          reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    ENUM            shift and go to state 532
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .) ]
  ! IMMUTABLE       [ reduce using rule 360 (ForeachTypeAttributes -> ForeachTypeAttribute .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! ALIAS           [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    ForeachTypeAttribute           shift and go to state 530
    ForeachTypeAttributes          shift and go to state 536
    empty                          shift and go to state 641
    ForeachTypeAttributes_opt      shift and go to state 665
    TypeCtor                       shift and go to state 639

state 531

    (78) TypeCtors -> TypeCtor .
    (79) TypeCtors -> TypeCtor . TypeCtors
    (362) ForeachTypeAttribute -> TypeCtor .
    (466) InOutX -> TypeCtor .
    (265) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> TypeCtor . LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! reduce/reduce conflict for CONST resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for DOT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for BOOL resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for SHORT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for USHORT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for INT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for UINT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for LONG resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for ULONG resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for CHAR resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for FLOAT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for VOID resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for CONST resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for DOT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for BOOL resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for SHORT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for USHORT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for INT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for UINT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for LONG resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for ULONG resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for CHAR resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for FLOAT resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for VOID resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 78 (TypeCtors -> TypeCtor .)
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    DOT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    BOOL            reduce using rule 78 (TypeCtors -> TypeCtor .)
    SHORT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    USHORT          reduce using rule 78 (TypeCtors -> TypeCtor .)
    INT             reduce using rule 78 (TypeCtors -> TypeCtor .)
    UINT            reduce using rule 78 (TypeCtors -> TypeCtor .)
    LONG            reduce using rule 78 (TypeCtors -> TypeCtor .)
    ULONG           reduce using rule 78 (TypeCtors -> TypeCtor .)
    CHAR            reduce using rule 78 (TypeCtors -> TypeCtor .)
    FLOAT           reduce using rule 78 (TypeCtors -> TypeCtor .)
    VOID            reduce using rule 78 (TypeCtors -> TypeCtor .)
    IDENTIFIER      reduce using rule 78 (TypeCtors -> TypeCtor .)
    TYPEOF          reduce using rule 78 (TypeCtors -> TypeCtor .)
    ENUM            reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    ALIAS           reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    AUTO            reduce using rule 466 (InOutX -> TypeCtor .)
    FINAL           reduce using rule 466 (InOutX -> TypeCtor .)
    SCOPE           reduce using rule 466 (InOutX -> TypeCtor .)
    LPAREN          shift and go to state 388
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 78 (TypeCtors -> TypeCtor .) ]
  ! CONST           [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! IDENTIFIER      [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! DOT             [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! BOOL            [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! SHORT           [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! USHORT          [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! INT             [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! UINT            [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! LONG            [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! ULONG           [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! CHAR            [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! FLOAT           [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! VOID            [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! TYPEOF          [ reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .) ]
  ! CONST           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! IMMUTABLE       [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! DOT             [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! BOOL            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! SHORT           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! USHORT          [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! INT             [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! UINT            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! LONG            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! ULONG           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! CHAR            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! FLOAT           [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! VOID            [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! IDENTIFIER      [ reduce using rule 466 (InOutX -> TypeCtor .) ]
  ! TYPEOF          [ reduce using rule 466 (InOutX -> TypeCtor .) ]

    TypeCtor                       shift and go to state 135
    TypeCtors                      shift and go to state 284

state 532

    (363) ForeachTypeAttribute -> ENUM .

    ENUM            reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    CONST           reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    IMMUTABLE       reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    IDENTIFIER      reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    ALIAS           reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    DOT             reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    BOOL            reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    SHORT           reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    USHORT          reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    INT             reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    UINT            reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    LONG            reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    ULONG           reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    CHAR            reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    FLOAT           reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    VOID            reduce using rule 363 (ForeachTypeAttribute -> ENUM .)
    TYPEOF          reduce using rule 363 (ForeachTypeAttribute -> ENUM .)


state 533

    (365) RangeForeach -> LPAREN ForeachType . SEMICOLON LwrExpression RANGE UprExpression RPAREN

    SEMICOLON       shift and go to state 666


state 534

    (457) ParameterList_opt -> empty .
    (359) ForeachTypeAttributes_opt -> empty .
    (81) TypeCtors_opt -> empty .
    (470) InOut_opt -> empty .

  ! reduce/reduce conflict for DOT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for VOID resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for DOT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for VOID resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 81 (TypeCtors_opt -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 81 (TypeCtors_opt -> empty .)
    RPAREN          reduce using rule 457 (ParameterList_opt -> empty .)
    ALIAS           reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)

  ! IDENTIFIER      [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! DOT             [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! BOOL            [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! SHORT           [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! USHORT          [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! INT             [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! UINT            [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! LONG            [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! ULONG           [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! CHAR            [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! FLOAT           [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! VOID            [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! TYPEOF          [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! CONST           [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 359 (ForeachTypeAttributes_opt -> empty .) ]
  ! DOT             [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! BOOL            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! SHORT           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! USHORT          [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! INT             [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! UINT            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! LONG            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! ULONG           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! CHAR            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! FLOAT           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! VOID            [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! TYPEOF          [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! CONST           [ reduce using rule 470 (InOut_opt -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 470 (InOut_opt -> empty .) ]


state 535

    (355) ForeachType -> ForeachTypeAttributes_opt . BasicType Declarator
    (356) ForeachType -> ForeachTypeAttributes_opt . IDENTIFIER
    (357) ForeachType -> ForeachTypeAttributes_opt . ALIAS IDENTIFIER
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    IDENTIFIER      shift and go to state 668
    ALIAS           shift and go to state 669
    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 667
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34

state 536

    (358) ForeachTypeAttributes_opt -> ForeachTypeAttributes .

    IDENTIFIER      reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    ALIAS           reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    DOT             reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    BOOL            reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    SHORT           reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    USHORT          reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    INT             reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    UINT            reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    LONG            reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    ULONG           reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    CHAR            reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    FLOAT           reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    VOID            reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    TYPEOF          reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    CONST           reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    IMMUTABLE       reduce using rule 358 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)


state 537

    (330) IfStatement -> IF LPAREN . IfCondition RPAREN ThenStatement
    (331) IfStatement -> IF LPAREN . IfCondition RPAREN ThenStatement ELSE ElseStatement
    (332) IfCondition -> . Expression
    (333) IfCondition -> . AUTO IDENTIFIER ASSIGN Expression
    (334) IfCondition -> . TypeCtors IDENTIFIER ASSIGN Expression
    (335) IfCondition -> . TypeCtors_opt BasicType Declarator ASSIGN Expression
    (165) Expression -> . CommaExpression
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    AUTO            shift and go to state 674
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    IfCondition                    shift and go to state 670
    TypeCtors                      shift and go to state 671
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    LIT_STRPlus                    shift and go to state 239
    ArrayLiteral                   shift and go to state 240
    TypeCtor                       shift and go to state 193
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 672
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 673
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 538

    (454) ParameterList -> Parameter COMMA ParameterList .

    RPAREN          reduce using rule 454 (ParameterList -> Parameter COMMA ParameterList .)


state 539

    (470) InOut_opt -> empty .

    DOT             reduce using rule 470 (InOut_opt -> empty .)
    BOOL            reduce using rule 470 (InOut_opt -> empty .)
    SHORT           reduce using rule 470 (InOut_opt -> empty .)
    USHORT          reduce using rule 470 (InOut_opt -> empty .)
    INT             reduce using rule 470 (InOut_opt -> empty .)
    UINT            reduce using rule 470 (InOut_opt -> empty .)
    LONG            reduce using rule 470 (InOut_opt -> empty .)
    ULONG           reduce using rule 470 (InOut_opt -> empty .)
    CHAR            reduce using rule 470 (InOut_opt -> empty .)
    FLOAT           reduce using rule 470 (InOut_opt -> empty .)
    VOID            reduce using rule 470 (InOut_opt -> empty .)
    IDENTIFIER      reduce using rule 470 (InOut_opt -> empty .)
    TYPEOF          reduce using rule 470 (InOut_opt -> empty .)
    CONST           reduce using rule 470 (InOut_opt -> empty .)
    IMMUTABLE       reduce using rule 470 (InOut_opt -> empty .)


state 540

    (462) Parameter -> InOut_opt Type ELLIPSIS .

    COMMA           reduce using rule 462 (Parameter -> InOut_opt Type ELLIPSIS .)
    RPAREN          reduce using rule 462 (Parameter -> InOut_opt Type ELLIPSIS .)


state 541

    (57) Declarator -> VarDeclarator .

    ELLIPSIS        reduce using rule 57 (Declarator -> VarDeclarator .)
    ASSIGN          reduce using rule 57 (Declarator -> VarDeclarator .)
    COMMA           reduce using rule 57 (Declarator -> VarDeclarator .)
    RPAREN          reduce using rule 57 (Declarator -> VarDeclarator .)
    SEMICOLON       reduce using rule 57 (Declarator -> VarDeclarator .)


state 542

    (59) VarDeclarator -> BasicType2_opt . IDENTIFIER
    (60) AltDeclarator -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes

    IDENTIFIER      shift and go to state 675
    LPAREN          shift and go to state 250


state 543

    (58) Declarator -> AltDeclarator .

    ELLIPSIS        reduce using rule 58 (Declarator -> AltDeclarator .)
    ASSIGN          reduce using rule 58 (Declarator -> AltDeclarator .)
    COMMA           reduce using rule 58 (Declarator -> AltDeclarator .)
    RPAREN          reduce using rule 58 (Declarator -> AltDeclarator .)
    SEMICOLON       reduce using rule 58 (Declarator -> AltDeclarator .)


state 544

    (458) Parameter -> InOut_opt BasicType Declarator .
    (459) Parameter -> InOut_opt BasicType Declarator . ELLIPSIS
    (460) Parameter -> InOut_opt BasicType Declarator . ASSIGN AssignExpression

    COMMA           reduce using rule 458 (Parameter -> InOut_opt BasicType Declarator .)
    RPAREN          reduce using rule 458 (Parameter -> InOut_opt BasicType Declarator .)
    ELLIPSIS        shift and go to state 677
    ASSIGN          shift and go to state 676


state 545

    (132) ArrayMemberInitialization -> NonVoidInitializer .

    COMMA           reduce using rule 132 (ArrayMemberInitialization -> NonVoidInitializer .)
    RBRACKET        reduce using rule 132 (ArrayMemberInitialization -> NonVoidInitializer .)


state 546

    (127) ArrayMemberInitializations -> ArrayMemberInitialization .
    (128) ArrayMemberInitializations -> ArrayMemberInitialization . COMMA
    (129) ArrayMemberInitializations -> ArrayMemberInitialization . COMMA ArrayMemberInitializations

    RBRACKET        reduce using rule 127 (ArrayMemberInitializations -> ArrayMemberInitialization .)
    COMMA           shift and go to state 678


state 547

    (130) ArrayMemberInitializations_opt -> ArrayMemberInitializations .

    RBRACKET        reduce using rule 130 (ArrayMemberInitializations_opt -> ArrayMemberInitializations .)


state 548

    (126) ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt . RBRACKET

    RBRACKET        shift and go to state 679


state 549

    (131) ArrayMemberInitializations_opt -> empty .
    (232) ArgumentList_opt -> empty .
    (81) TypeCtors_opt -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 131 (ArrayMemberInitializations_opt -> empty .)
    RBRACKET        reduce using rule 131 (ArrayMemberInitializations_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)

  ! RBRACKET        [ reduce using rule 232 (ArgumentList_opt -> empty .) ]


state 550

    (233) ArgumentList -> AssignExpression .
    (234) ArgumentList -> AssignExpression . COMMA
    (235) ArgumentList -> AssignExpression . COMMA ArgumentList
    (133) ArrayMemberInitialization -> AssignExpression . COLON NonVoidInitializer
    (125) ExpInitializer -> AssignExpression .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 125 (ExpInitializer -> AssignExpression .)
    COMMA           shift and go to state 552
    COLON           shift and go to state 680
    RBRACKET        reduce using rule 125 (ExpInitializer -> AssignExpression .)

  ! RBRACKET        [ reduce using rule 233 (ArgumentList -> AssignExpression .) ]
  ! COMMA           [ reduce using rule 125 (ExpInitializer -> AssignExpression .) ]


state 551

    (270) ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .

    POWER           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DOT             reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    PLUS_PLUS       reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    MINUS_MINUS     reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LPAREN          reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    TIMES           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DIV             reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    MODULO          reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    PLUS            reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    MINUS           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LEFT_SHIFT      reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RIGHT_SHIFT     reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    IS_EQ           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    NOT_EQ          reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LESS            reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    GREATER_EQ      reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    GREATER         reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LESS_EQ         reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    AMPERSAND       reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    CARET           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    PIPE            reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    QUESTION        reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DOUBLE_PIPE     reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    ASSIGN          reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_PLUS         reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_MINUS        reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_TIMES        reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_DIV          reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_MODULO       reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_AND_BIT      reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_OR_BIT       reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_XOR_BIT      reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_LEFT         reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_RIGHT        reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RBRACKET        reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RANGE           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    COMMA           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RPAREN          reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    SEMICOLON       reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RBRACE          reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    COLON           reduce using rule 270 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)


state 552

    (234) ArgumentList -> AssignExpression COMMA .
    (235) ArgumentList -> AssignExpression COMMA . ArgumentList
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    COLON           reduce using rule 234 (ArgumentList -> AssignExpression COMMA .)
    RPAREN          reduce using rule 234 (ArgumentList -> AssignExpression COMMA .)
    RBRACKET        reduce using rule 234 (ArgumentList -> AssignExpression COMMA .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 681
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 553

    (191) AndExpression -> AndExpression AMPERSAND CmpExpression .

    AMPERSAND       reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    CARET           reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    PIPE            reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    QUESTION        reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    DOUBLE_PIPE     reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    ASSIGN          reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_PLUS         reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_MINUS        reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_TIMES        reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_DIV          reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_MODULO       reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_AND_BIT      reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_OR_BIT       reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_XOR_BIT      reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_LEFT         reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_RIGHT        reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    COMMA           reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RPAREN          reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    SEMICOLON       reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    COLON           reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RANGE           reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RBRACKET        reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RBRACE          reduce using rule 191 (AndExpression -> AndExpression AMPERSAND CmpExpression .)


state 554

    (181) ConditionalExpression -> OrOrExpression QUESTION Expression . COLON ConditionalExpression

    COLON           shift and go to state 682


state 555

    (183) OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .
    (185) AndAndExpression -> AndAndExpression . DOUBLE_AMPERSAND OrExpression

    QUESTION        reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    DOUBLE_PIPE     reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    ASSIGN          reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_PLUS         reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_MINUS        reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_TIMES        reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_DIV          reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_MODULO       reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_AND_BIT      reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_OR_BIT       reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_XOR_BIT      reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_LEFT         reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_RIGHT        reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    COMMA           reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RPAREN          reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    SEMICOLON       reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    COLON           reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RBRACKET        reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RBRACE          reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RANGE           reduce using rule 183 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 438


state 556

    (283) ImportExpression -> IMPORT LPAREN AssignExpression . RPAREN

    RPAREN          shift and go to state 683


state 557

    (265) PrimaryExpression -> TypeCtor LPAREN Type . RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> TypeCtor LPAREN Type . RPAREN LPAREN ArgumentList_opt RPAREN

    RPAREN          shift and go to state 684


state 558

    (179) AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .

    COMMA           reduce using rule 179 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RPAREN          reduce using rule 179 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    SEMICOLON       reduce using rule 179 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RBRACKET        reduce using rule 179 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RANGE           reduce using rule 179 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RBRACE          reduce using rule 179 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    COLON           reduce using rule 179 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)


state 559

    (175) AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .

    COMMA           reduce using rule 175 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RPAREN          reduce using rule 175 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    SEMICOLON       reduce using rule 175 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RBRACKET        reduce using rule 175 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RANGE           reduce using rule 175 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RBRACE          reduce using rule 175 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    COLON           reduce using rule 175 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)


state 560

    (172) AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .

    COMMA           reduce using rule 172 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RPAREN          reduce using rule 172 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    SEMICOLON       reduce using rule 172 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RBRACKET        reduce using rule 172 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RANGE           reduce using rule 172 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RBRACE          reduce using rule 172 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    COLON           reduce using rule 172 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)


state 561

    (170) AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .

    COMMA           reduce using rule 170 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RPAREN          reduce using rule 170 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    SEMICOLON       reduce using rule 170 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RBRACKET        reduce using rule 170 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RANGE           reduce using rule 170 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RBRACE          reduce using rule 170 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    COLON           reduce using rule 170 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)


state 562

    (173) AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .

    COMMA           reduce using rule 173 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RPAREN          reduce using rule 173 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    SEMICOLON       reduce using rule 173 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RBRACKET        reduce using rule 173 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RANGE           reduce using rule 173 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RBRACE          reduce using rule 173 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    COLON           reduce using rule 173 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)


state 563

    (177) AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .

    COMMA           reduce using rule 177 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RPAREN          reduce using rule 177 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    SEMICOLON       reduce using rule 177 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RBRACKET        reduce using rule 177 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RANGE           reduce using rule 177 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RBRACE          reduce using rule 177 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    COLON           reduce using rule 177 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)


state 564

    (171) AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .

    COMMA           reduce using rule 171 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RPAREN          reduce using rule 171 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    SEMICOLON       reduce using rule 171 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RBRACKET        reduce using rule 171 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RANGE           reduce using rule 171 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RBRACE          reduce using rule 171 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    COLON           reduce using rule 171 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)


state 565

    (178) AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .

    COMMA           reduce using rule 178 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RPAREN          reduce using rule 178 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    SEMICOLON       reduce using rule 178 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RBRACKET        reduce using rule 178 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RANGE           reduce using rule 178 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RBRACE          reduce using rule 178 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    COLON           reduce using rule 178 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)


state 566

    (176) AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .

    COMMA           reduce using rule 176 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RPAREN          reduce using rule 176 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    SEMICOLON       reduce using rule 176 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RBRACKET        reduce using rule 176 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RANGE           reduce using rule 176 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RBRACE          reduce using rule 176 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    COLON           reduce using rule 176 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)


state 567

    (174) AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .

    COMMA           reduce using rule 174 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RPAREN          reduce using rule 174 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    SEMICOLON       reduce using rule 174 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RBRACKET        reduce using rule 174 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RANGE           reduce using rule 174 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RBRACE          reduce using rule 174 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    COLON           reduce using rule 174 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)


state 568

    (169) AssignExpression -> ConditionalExpression ASSIGN AssignExpression .

    COMMA           reduce using rule 169 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RPAREN          reduce using rule 169 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    SEMICOLON       reduce using rule 169 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RBRACKET        reduce using rule 169 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RANGE           reduce using rule 169 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RBRACE          reduce using rule 169 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    COLON           reduce using rule 169 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)


state 569

    (200) RelExpression -> ShiftExpression LESS_EQ ShiftExpression .
    (202) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (203) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    CARET           reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    PIPE            reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    QUESTION        reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    ASSIGN          reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RBRACKET        reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RANGE           reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    COMMA           reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RPAREN          reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RBRACE          reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    COLON           reduce using rule 200 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 405
    RIGHT_SHIFT     shift and go to state 407


state 570

    (195) EqualExpression -> ShiftExpression IS_EQ ShiftExpression .
    (202) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (203) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    CARET           reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    PIPE            reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    QUESTION        reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    ASSIGN          reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RBRACKET        reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RANGE           reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    COMMA           reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RPAREN          reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RBRACE          reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    COLON           reduce using rule 195 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 405
    RIGHT_SHIFT     shift and go to state 407


state 571

    (199) RelExpression -> ShiftExpression GREATER ShiftExpression .
    (202) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (203) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    CARET           reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    PIPE            reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    QUESTION        reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    ASSIGN          reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_PLUS         reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_MINUS        reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_TIMES        reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_DIV          reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_MODULO       reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_AND_BIT      reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_OR_BIT       reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_LEFT         reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_RIGHT        reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RBRACKET        reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RANGE           reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    COMMA           reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RPAREN          reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    SEMICOLON       reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RBRACE          reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    COLON           reduce using rule 199 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    LEFT_SHIFT      shift and go to state 405
    RIGHT_SHIFT     shift and go to state 407


state 572

    (197) RelExpression -> ShiftExpression LESS ShiftExpression .
    (202) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (203) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    CARET           reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    PIPE            reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    QUESTION        reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    ASSIGN          reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_PLUS         reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_MINUS        reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_TIMES        reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_DIV          reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_MODULO       reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_AND_BIT      reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_OR_BIT       reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_LEFT         reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_RIGHT        reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RBRACKET        reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RANGE           reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    COMMA           reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RPAREN          reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    SEMICOLON       reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RBRACE          reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    COLON           reduce using rule 197 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    LEFT_SHIFT      shift and go to state 405
    RIGHT_SHIFT     shift and go to state 407


state 573

    (202) ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .
    (205) AddExpression -> AddExpression . PLUS MulExpression
    (206) AddExpression -> AddExpression . MINUS MulExpression

    LEFT_SHIFT      reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RIGHT_SHIFT     reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    IS_EQ           reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    NOT_EQ          reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    LESS            reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    GREATER_EQ      reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    GREATER         reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    LESS_EQ         reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    AMPERSAND       reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    CARET           reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    PIPE            reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    DOUBLE_AMPERSAND reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    QUESTION        reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    DOUBLE_PIPE     reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    ASSIGN          reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_PLUS         reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_MINUS        reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_TIMES        reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_DIV          reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_MODULO       reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_AND_BIT      reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_OR_BIT       reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_XOR_BIT      reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_LEFT         reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_RIGHT        reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    COMMA           reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RANGE           reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RBRACKET        reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RPAREN          reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    SEMICOLON       reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RBRACE          reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    COLON           reduce using rule 202 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    PLUS            shift and go to state 448
    MINUS           shift and go to state 449


state 574

    (198) RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .
    (202) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (203) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    CARET           reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    PIPE            reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    QUESTION        reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    ASSIGN          reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RBRACKET        reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RANGE           reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    COMMA           reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RPAREN          reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RBRACE          reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    COLON           reduce using rule 198 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 405
    RIGHT_SHIFT     shift and go to state 407


state 575

    (203) ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .
    (205) AddExpression -> AddExpression . PLUS MulExpression
    (206) AddExpression -> AddExpression . MINUS MulExpression

    LEFT_SHIFT      reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RIGHT_SHIFT     reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    IS_EQ           reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    NOT_EQ          reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    LESS            reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    GREATER_EQ      reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    GREATER         reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    LESS_EQ         reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    AMPERSAND       reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    CARET           reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    PIPE            reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    DOUBLE_AMPERSAND reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    QUESTION        reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    DOUBLE_PIPE     reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    ASSIGN          reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_PLUS         reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_MINUS        reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_TIMES        reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_DIV          reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_MODULO       reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_AND_BIT      reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_OR_BIT       reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_XOR_BIT      reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_LEFT         reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_RIGHT        reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    COMMA           reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RANGE           reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RBRACKET        reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RPAREN          reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    SEMICOLON       reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RBRACE          reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    COLON           reduce using rule 203 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    PLUS            shift and go to state 448
    MINUS           shift and go to state 449


state 576

    (196) EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .
    (202) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (203) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    CARET           reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    PIPE            reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    QUESTION        reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    ASSIGN          reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RBRACKET        reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RANGE           reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    COMMA           reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RPAREN          reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RBRACE          reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    COLON           reduce using rule 196 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 405
    RIGHT_SHIFT     shift and go to state 407


state 577

    (276) ParameterAttributes_opt -> empty .

    LBRACE          reduce using rule 276 (ParameterAttributes_opt -> empty .)
    BODY            reduce using rule 276 (ParameterAttributes_opt -> empty .)


state 578

    (271) FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt . FunctionLiteralBody
    (275) ParameterAttributes_opt -> ParameterAttributes_opt .
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BODY resolved as shift
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! LBRACE          [ reduce using rule 275 (ParameterAttributes_opt -> ParameterAttributes_opt .) ]
  ! BODY            [ reduce using rule 275 (ParameterAttributes_opt -> ParameterAttributes_opt .) ]

    FunctionLiteralBody            shift and go to state 685
    BlockStatement                 shift and go to state 189
    BodyStatement                  shift and go to state 225

state 579

    (187) OrExpression -> OrExpression PIPE XorExpression .
    (189) XorExpression -> XorExpression . CARET AndExpression

    PIPE            reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    DOUBLE_AMPERSAND reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    QUESTION        reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    DOUBLE_PIPE     reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    ASSIGN          reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_PLUS         reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_MINUS        reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_TIMES        reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_DIV          reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_MODULO       reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_AND_BIT      reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_OR_BIT       reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_XOR_BIT      reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_LEFT         reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_RIGHT        reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    RPAREN          reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    RBRACKET        reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    RANGE           reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    COMMA           reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    SEMICOLON       reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    RBRACE          reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    COLON           reduce using rule 187 (OrExpression -> OrExpression PIPE XorExpression .)
    CARET           shift and go to state 441


state 580

    (284) TypeidExpression -> TYPEID LPAREN Type . RPAREN

    RPAREN          shift and go to state 686


state 581

    (285) TypeidExpression -> TYPEID LPAREN Expression . RPAREN

    RPAREN          shift and go to state 687


state 582

    (245) PostfixExpression -> PostfixExpression LPAREN ArgumentList . RPAREN

    RPAREN          shift and go to state 688


state 583

    (239) PowExpression -> PostfixExpression POWER UnaryExpression .

    TIMES           reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    DIV             reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    MODULO          reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    PLUS            reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    MINUS           reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    LEFT_SHIFT      reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    IS_EQ           reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    NOT_EQ          reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    LESS            reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    GREATER_EQ      reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    GREATER         reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    LESS_EQ         reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    AMPERSAND       reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    CARET           reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    PIPE            reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    QUESTION        reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    ASSIGN          reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_PLUS         reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_MINUS        reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_TIMES        reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_DIV          reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_MODULO       reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_AND_BIT      reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_OR_BIT       reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_LEFT         reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_RIGHT        reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    COMMA           reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    SEMICOLON       reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RBRACKET        reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    COLON           reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RPAREN          reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RANGE           reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RBRACE          reduce using rule 239 (PowExpression -> PostfixExpression POWER UnaryExpression .)


state 584

    (224) NewExpression -> NewExpressionWithArgs .

    POWER           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    DOT             reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    PLUS_PLUS       reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    MINUS_MINUS     reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    LPAREN          reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    TIMES           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    DIV             reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    MODULO          reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    PLUS            reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    MINUS           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    LEFT_SHIFT      reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    RIGHT_SHIFT     reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    IS_EQ           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    NOT_EQ          reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    LESS            reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    GREATER_EQ      reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    GREATER         reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    LESS_EQ         reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    AMPERSAND       reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    CARET           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    PIPE            reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    DOUBLE_AMPERSAND reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    QUESTION        reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    DOUBLE_PIPE     reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    ASSIGN          reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_PLUS         reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_MINUS        reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_TIMES        reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_DIV          reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_MODULO       reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_AND_BIT      reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_OR_BIT       reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_XOR_BIT      reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_LEFT         reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    EQ_RIGHT        reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    RBRACKET        reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    RANGE           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    COMMA           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    RPAREN          reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    SEMICOLON       reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    RBRACE          reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)
    COLON           reduce using rule 224 (NewExpression -> NewExpressionWithArgs .)


state 585

    (242) PostfixExpression -> PostfixExpression DOT NewExpression .

    POWER           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DOT             reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    PLUS_PLUS       reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    MINUS_MINUS     reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LPAREN          reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    TIMES           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DIV             reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    MODULO          reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    PLUS            reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    MINUS           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LEFT_SHIFT      reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RIGHT_SHIFT     reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    IS_EQ           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    NOT_EQ          reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LESS            reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    GREATER_EQ      reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    GREATER         reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LESS_EQ         reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    AMPERSAND       reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    CARET           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    PIPE            reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DOUBLE_AMPERSAND reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    QUESTION        reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DOUBLE_PIPE     reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    ASSIGN          reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_PLUS         reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_MINUS        reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_TIMES        reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_DIV          reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_MODULO       reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_AND_BIT      reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_OR_BIT       reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_XOR_BIT      reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_LEFT         reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_RIGHT        reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RPAREN          reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    COMMA           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RBRACE          reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RBRACKET        reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RANGE           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    SEMICOLON       reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    COLON           reduce using rule 242 (PostfixExpression -> PostfixExpression DOT NewExpression .)


state 586

    (223) NewExpression -> NEW . AllocatorArguments_opt Type
    (225) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (419) NewAnonClassExpression -> NEW . AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (229) AllocatorArguments_opt -> . AllocatorArguments
    (230) AllocatorArguments_opt -> . empty
    (228) AllocatorArguments -> . LPAREN ArgumentList_opt RPAREN
    (485) empty -> .

    LPAREN          shift and go to state 427
    CLASS           reduce using rule 485 (empty -> .)
    CONST           reduce using rule 485 (empty -> .)
    IMMUTABLE       reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)

    AllocatorArguments_opt         shift and go to state 689
    AllocatorArguments             shift and go to state 428
    empty                          shift and go to state 429

state 587

    (241) PostfixExpression -> PostfixExpression DOT IDENTIFIER .

    POWER           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DOT             reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LPAREN          reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    TIMES           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DIV             reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    MODULO          reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    PLUS            reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    MINUS           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    IS_EQ           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LESS            reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    GREATER         reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    CARET           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    PIPE            reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    QUESTION        reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RPAREN          reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    COMMA           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RBRACE          reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RANGE           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    COLON           reduce using rule 241 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)


state 588

    (225) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LPAREN ArgumentList_opt RPAREN

    LBRACKET        shift and go to state 690
    LPAREN          shift and go to state 691


state 589

    (419) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS . ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (421) ClassArguments_opt -> . ClassArguments
    (422) ClassArguments_opt -> . empty
    (420) ClassArguments -> . LPAREN ArgumentList_opt RPAREN
    (485) empty -> .

    LPAREN          shift and go to state 694
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           reduce using rule 485 (empty -> .)
    IMMUTABLE       reduce using rule 485 (empty -> .)
    LBRACE          reduce using rule 485 (empty -> .)

    ClassArguments                 shift and go to state 692
    ClassArguments_opt             shift and go to state 693
    empty                          shift and go to state 695

state 590

    (228) AllocatorArguments -> LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 696


state 591

    (237) CastExpression -> CAST LPAREN TypeCtors_opt . RPAREN UnaryExpression
    (75) Type -> TypeCtors_opt . BasicType BasicType2_opt
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    RPAREN          shift and go to state 697
    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 286
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34

state 592

    (236) CastExpression -> CAST LPAREN Type . RPAREN UnaryExpression

    RPAREN          shift and go to state 698


state 593

    (246) PostfixExpression -> TypeCtors_opt BasicType LPAREN . ArgumentList_opt RPAREN
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 382
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 699
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 594

    (210) MulExpression -> MulExpression MODULO UnaryExpression .

    TIMES           reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    DIV             reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    MODULO          reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    PLUS            reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    MINUS           reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    LEFT_SHIFT      reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    IS_EQ           reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    NOT_EQ          reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    LESS            reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    GREATER_EQ      reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    GREATER         reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    LESS_EQ         reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    AMPERSAND       reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    CARET           reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    PIPE            reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    QUESTION        reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    ASSIGN          reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_PLUS         reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_MINUS        reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_TIMES        reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_DIV          reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_MODULO       reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_AND_BIT      reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_OR_BIT       reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_LEFT         reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_RIGHT        reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    COMMA           reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    SEMICOLON       reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RPAREN          reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RBRACKET        reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RANGE           reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RBRACE          reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)
    COLON           reduce using rule 210 (MulExpression -> MulExpression MODULO UnaryExpression .)


state 595

    (209) MulExpression -> MulExpression DIV UnaryExpression .

    TIMES           reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    DIV             reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    MODULO          reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    PLUS            reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    MINUS           reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    LEFT_SHIFT      reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    IS_EQ           reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    NOT_EQ          reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    LESS            reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    GREATER_EQ      reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    GREATER         reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    LESS_EQ         reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    AMPERSAND       reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    CARET           reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    PIPE            reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    QUESTION        reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    ASSIGN          reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_PLUS         reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_MINUS        reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_TIMES        reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_DIV          reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_MODULO       reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_AND_BIT      reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_OR_BIT       reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_LEFT         reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_RIGHT        reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    COMMA           reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    SEMICOLON       reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    RPAREN          reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    RBRACKET        reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    RANGE           reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    RBRACE          reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)
    COLON           reduce using rule 209 (MulExpression -> MulExpression DIV UnaryExpression .)


state 596

    (208) MulExpression -> MulExpression TIMES UnaryExpression .

    TIMES           reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    DIV             reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    MODULO          reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    PLUS            reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    MINUS           reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    LEFT_SHIFT      reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    IS_EQ           reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    NOT_EQ          reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    LESS            reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    GREATER_EQ      reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    GREATER         reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    LESS_EQ         reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    AMPERSAND       reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    CARET           reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    PIPE            reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    QUESTION        reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    ASSIGN          reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_PLUS         reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_MINUS        reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_TIMES        reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_DIV          reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_MODULO       reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_AND_BIT      reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_OR_BIT       reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_LEFT         reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_RIGHT        reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    COMMA           reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    SEMICOLON       reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RPAREN          reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RBRACKET        reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RANGE           reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RBRACE          reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)
    COLON           reduce using rule 208 (MulExpression -> MulExpression TIMES UnaryExpression .)


state 597

    (185) AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .
    (187) OrExpression -> OrExpression . PIPE XorExpression

    DOUBLE_AMPERSAND reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    QUESTION        reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    DOUBLE_PIPE     reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    ASSIGN          reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_PLUS         reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_MINUS        reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_TIMES        reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_DIV          reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_MODULO       reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_AND_BIT      reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_OR_BIT       reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_XOR_BIT      reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_LEFT         reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_RIGHT        reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    COMMA           reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RPAREN          reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    SEMICOLON       reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RBRACKET        reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RANGE           reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RBRACE          reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    COLON           reduce using rule 185 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    PIPE            shift and go to state 417


state 598

    (264) PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 700


state 599

    (189) XorExpression -> XorExpression CARET AndExpression .
    (191) AndExpression -> AndExpression . AMPERSAND CmpExpression

    CARET           reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    PIPE            reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    DOUBLE_AMPERSAND reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    QUESTION        reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    DOUBLE_PIPE     reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    ASSIGN          reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_PLUS         reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_MINUS        reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_TIMES        reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_DIV          reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_MODULO       reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_AND_BIT      reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_OR_BIT       reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_XOR_BIT      reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_LEFT         reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_RIGHT        reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    COMMA           reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    RPAREN          reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    SEMICOLON       reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    COLON           reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    RBRACKET        reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    RANGE           reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    RBRACE          reduce using rule 189 (XorExpression -> XorExpression CARET AndExpression .)
    AMPERSAND       shift and go to state 384


state 600

    (282) MixinExpression -> MIXIN LPAREN AssignExpression . RPAREN

    RPAREN          shift and go to state 701


state 601

    (268) PrimaryExpression -> LPAREN Expression RPAREN .

    POWER           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    PLUS_PLUS       reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    MINUS_MINUS     reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DIV             reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    MODULO          reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LEFT_SHIFT      reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    IS_EQ           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    NOT_EQ          reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LESS            reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    GREATER_EQ      reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    GREATER         reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LESS_EQ         reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    CARET           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    PIPE            reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    ASSIGN          reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_PLUS         reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_MINUS        reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_TIMES        reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_DIV          reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_MODULO       reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_AND_BIT      reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_OR_BIT       reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_LEFT         reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_RIGHT        reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RANGE           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)
    COLON           reduce using rule 268 (PrimaryExpression -> LPAREN Expression RPAREN .)


state 602

    (219) UnaryExpression -> LPAREN Type RPAREN . DOT IDENTIFIER

    DOT             shift and go to state 702


state 603

    (205) AddExpression -> AddExpression PLUS MulExpression .
    (208) MulExpression -> MulExpression . TIMES UnaryExpression
    (209) MulExpression -> MulExpression . DIV UnaryExpression
    (210) MulExpression -> MulExpression . MODULO UnaryExpression

    PLUS            reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    MINUS           reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    LEFT_SHIFT      reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    RIGHT_SHIFT     reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    IS_EQ           reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    NOT_EQ          reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    LESS            reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    GREATER_EQ      reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    GREATER         reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    LESS_EQ         reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    AMPERSAND       reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    CARET           reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    PIPE            reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    DOUBLE_AMPERSAND reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    QUESTION        reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    DOUBLE_PIPE     reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    ASSIGN          reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_PLUS         reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_MINUS        reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_TIMES        reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_DIV          reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_MODULO       reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_AND_BIT      reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_OR_BIT       reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_XOR_BIT      reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_LEFT         reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_RIGHT        reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    COMMA           reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    SEMICOLON       reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    RBRACKET        reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    RANGE           reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    RPAREN          reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    RBRACE          reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    COLON           reduce using rule 205 (AddExpression -> AddExpression PLUS MulExpression .)
    TIMES           shift and go to state 437
    DIV             shift and go to state 436
    MODULO          shift and go to state 435


state 604

    (206) AddExpression -> AddExpression MINUS MulExpression .
    (208) MulExpression -> MulExpression . TIMES UnaryExpression
    (209) MulExpression -> MulExpression . DIV UnaryExpression
    (210) MulExpression -> MulExpression . MODULO UnaryExpression

    PLUS            reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    MINUS           reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    LEFT_SHIFT      reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    RIGHT_SHIFT     reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    IS_EQ           reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    NOT_EQ          reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    LESS            reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    GREATER_EQ      reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    GREATER         reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    LESS_EQ         reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    AMPERSAND       reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    CARET           reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    PIPE            reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    DOUBLE_AMPERSAND reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    QUESTION        reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    DOUBLE_PIPE     reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    ASSIGN          reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_PLUS         reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_MINUS        reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_TIMES        reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_DIV          reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_MODULO       reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_AND_BIT      reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_OR_BIT       reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_XOR_BIT      reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_LEFT         reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_RIGHT        reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    COMMA           reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    SEMICOLON       reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    RBRACKET        reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    RANGE           reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    RPAREN          reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    RBRACE          reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    COLON           reduce using rule 206 (AddExpression -> AddExpression MINUS MulExpression .)
    TIMES           shift and go to state 437
    DIV             shift and go to state 436
    MODULO          shift and go to state 435


state 605

    (106) BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression . RBRACKET

    RBRACKET        shift and go to state 703


state 606

    (61) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .
    (62) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN . AltFuncDeclaratorSuffix
    (63) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN . AltDeclaratorSuffixes
    (74) AltFuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (67) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (71) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (72) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    SEMICOLON       reduce using rule 61 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    COMMA           reduce using rule 61 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    ASSIGN          reduce using rule 61 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    RPAREN          reduce using rule 61 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    ELLIPSIS        reduce using rule 61 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    LPAREN          shift and go to state 79
    LBRACKET        shift and go to state 457

    Parameters                     shift and go to state 704
    AltDeclaratorSuffix            shift and go to state 458
    AltDeclaratorSuffixes          shift and go to state 705
    AltFuncDeclaratorSuffix        shift and go to state 706

state 607

    (64) AltDeclaratorX -> BasicType2_opt IDENTIFIER .
    (65) AltDeclaratorX -> BasicType2_opt IDENTIFIER . AltFuncDeclaratorSuffix
    (60) AltDeclarator -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (74) AltFuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (67) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (71) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (72) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    RPAREN          reduce using rule 64 (AltDeclaratorX -> BasicType2_opt IDENTIFIER .)
    LPAREN          shift and go to state 79
    LBRACKET        shift and go to state 457

    Parameters                     shift and go to state 704
    AltDeclaratorSuffix            shift and go to state 458
    AltDeclaratorSuffixes          shift and go to state 459
    AltFuncDeclaratorSuffix        shift and go to state 707

state 608

    (73) AltDeclaratorSuffix -> LBRACKET Type . RBRACKET

    RBRACKET        shift and go to state 708


state 609

    (71) AltDeclaratorSuffix -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 71 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 71 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 71 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 71 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 71 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    ELLIPSIS        reduce using rule 71 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)


state 610

    (72) AltDeclaratorSuffix -> LBRACKET AssignExpression . RBRACKET

    RBRACKET        shift and go to state 709


state 611

    (68) AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .

    ASSIGN          reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    COMMA           reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    ELLIPSIS        reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    RPAREN          reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)


state 612

    (48) DeclaratorIdentifierList -> DeclaratorIdentifier COMMA . DeclaratorIdentifierList
    (47) DeclaratorIdentifierList -> . DeclaratorIdentifier
    (48) DeclaratorIdentifierList -> . DeclaratorIdentifier COMMA DeclaratorIdentifierList
    (49) DeclaratorIdentifier -> . VarDeclaratorIdentifier
    (50) DeclaratorIdentifier -> . AltDeclaratorIdentifier
    (51) VarDeclaratorIdentifier -> . IDENTIFIER
    (52) VarDeclaratorIdentifier -> . IDENTIFIER ASSIGN Initializer
    (53) AltDeclaratorIdentifier -> . BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt
    (54) AltDeclaratorIdentifier -> . BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer
    (55) AltDeclaratorIdentifier -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (56) AltDeclaratorIdentifier -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters
    (485) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 464
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]

    DeclaratorIdentifier           shift and go to state 460
    DeclaratorIdentifierList       shift and go to state 710
    VarDeclaratorIdentifier        shift and go to state 465
    empty                          shift and go to state 89
    AltDeclaratorIdentifier        shift and go to state 461
    BasicType2X                    shift and go to state 84
    BasicType2_opt                 shift and go to state 463
    BasicType2                     shift and go to state 466

state 613

    (55) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (56) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes ASSIGN Initializer
    (67) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (71) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (72) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    LBRACKET        shift and go to state 457

    AltDeclaratorSuffix            shift and go to state 458
    AltDeclaratorSuffixes          shift and go to state 711

state 614

    (52) VarDeclaratorIdentifier -> IDENTIFIER ASSIGN . Initializer
    (121) Initializer -> . VoidInitializer
    (122) Initializer -> . NonVoidInitializer
    (149) VoidInitializer -> . VOID
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    VOID            shift and go to state 372
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    Initializer                    shift and go to state 712
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    ArrayLiteral                   shift and go to state 240
    NonVoidInitializer             shift and go to state 374
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    ArrayInitializer               shift and go to state 375
    RelExpression                  shift and go to state 191
    AssignExpression               shift and go to state 379
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    VoidInitializer                shift and go to state 376

state 615

    (53) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER . AltDeclaratorSuffixes_opt
    (54) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER . AltDeclaratorSuffixes_opt ASSIGN Initializer
    (69) AltDeclaratorSuffixes_opt -> . AltDeclaratorSuffixes
    (70) AltDeclaratorSuffixes_opt -> . empty
    (67) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (485) empty -> .
    (71) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (72) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ASSIGN          reduce using rule 485 (empty -> .)
    COMMA           reduce using rule 485 (empty -> .)
    SEMICOLON       reduce using rule 485 (empty -> .)
    LBRACKET        shift and go to state 457

    AltDeclaratorSuffixes_opt      shift and go to state 713
    AltDeclaratorSuffix            shift and go to state 458
    AltDeclaratorSuffixes          shift and go to state 715
    empty                          shift and go to state 714

state 616

    (111) IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT . IdentifierList
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 41

    IdentifierList                 shift and go to state 716

state 617

    (167) CommaExpression -> AssignExpression COMMA CommaExpression .

    SEMICOLON       reduce using rule 167 (CommaExpression -> AssignExpression COMMA CommaExpression .)
    RPAREN          reduce using rule 167 (CommaExpression -> AssignExpression COMMA CommaExpression .)
    COLON           reduce using rule 167 (CommaExpression -> AssignExpression COMMA CommaExpression .)
    RANGE           reduce using rule 167 (CommaExpression -> AssignExpression COMMA CommaExpression .)


state 618

    (406) BaseClassList -> COLON SuperClass COMMA Interfaces .

    LBRACE          reduce using rule 406 (BaseClassList -> COLON SuperClass COMMA Interfaces .)


state 619

    (413) Interface -> BasicType .

    COMMA           reduce using rule 413 (Interface -> BasicType .)
    LBRACE          reduce using rule 413 (Interface -> BasicType .)


state 620

    (412) Interfaces -> Interface COMMA Interfaces .

    LBRACE          reduce using rule 412 (Interfaces -> Interface COMMA Interfaces .)


state 621

    (418) AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .

    SEMICOLON       reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    NEW             reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DELETE          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ALIAS           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    MIXIN           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    STATIC          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    EXTERN          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FINAL           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    AUTO            reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CONST           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMMUTABLE       reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RETURN          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ENUM            reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMPORT          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PRIVATE         reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PROTECTED       reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PUBLIC          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CLASS           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UNION           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DOT             reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    BOOL            reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SHORT           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    USHORT          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    INT             reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UINT            reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LONG            reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ULONG           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CHAR            reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FLOAT           reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    VOID            reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IDENTIFIER      reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TYPEOF          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RBRACE          reduce using rule 418 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)


state 622

    (161) DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .

    SEMICOLON       reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    NEW             reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    DELETE          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    ALIAS           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    MIXIN           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    STATIC          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    EXTERN          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    FINAL           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    AUTO            reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    CONST           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    IMMUTABLE       reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    RETURN          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    ENUM            reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    IMPORT          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    PRIVATE         reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    PROTECTED       reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    PUBLIC          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    CLASS           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    UNION           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    DOT             reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    BOOL            reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    SHORT           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    USHORT          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    INT             reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    UINT            reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    LONG            reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    ULONG           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    CHAR            reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    FLOAT           reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    VOID            reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    IDENTIFIER      reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    TYPEOF          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    RBRACE          reduce using rule 161 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)


state 623

    (33) MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 717


state 624

    (445) AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression .

    COMMA           reduce using rule 445 (AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression .)
    RBRACE          reduce using rule 445 (AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression .)


state 625

    (438) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .

    ALIAS           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    ENUM            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IMPORT          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    STATIC          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CLASS           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    UNION           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    EXTERN          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FINAL           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    AUTO            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CONST           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DOT             reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    BOOL            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    SHORT           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    USHORT          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    INT             reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    UINT            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LONG            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    ULONG           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CHAR            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FLOAT           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    VOID            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TYPEOF          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    $end            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    SEMICOLON       reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CASE            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DEFAULT         reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LBRACE          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IF              reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    WHILE           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DO              reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FOR             reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    SWITCH          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CONTINUE        reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    BREAK           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    RETURN          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    GOTO            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    WITH            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    MIXIN           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LPAREN          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FOREACH         reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    UAMPERSAND      reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TIMES           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    UMINUS          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    UPLUS           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TILDE           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CAST            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    THIS            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    NULL            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TRUE            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FALSE           reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DOLLAR          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    INUMBER         reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DNUMBER         reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LIT_STR         reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LBRACKET        reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FUNCTION        reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    NEW             reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TYPEID          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    BODY            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    RBRACE          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    ELSE            reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DELETE          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PRIVATE         reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PROTECTED       reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PUBLIC          reduce using rule 438 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)


state 626

    (29) ImportBindList -> ImportBind COMMA ImportBindList .

    SEMICOLON       reduce using rule 29 (ImportBindList -> ImportBind COMMA ImportBindList .)


state 627

    (31) ImportBind -> IDENTIFIER ASSIGN IDENTIFIER .

    COMMA           reduce using rule 31 (ImportBind -> IDENTIFIER ASSIGN IDENTIFIER .)
    SEMICOLON       reduce using rule 31 (ImportBind -> IDENTIFIER ASSIGN IDENTIFIER .)


state 628

    (481) Symbol -> SymbolTail .

    RPAREN          reduce using rule 481 (Symbol -> SymbolTail .)


state 629

    (394) WithStatement -> WITH LPAREN Symbol . RPAREN ScopeStatement

    RPAREN          shift and go to state 718


state 630

    (482) Symbol -> DOT . SymbolTail
    (248) PrimaryExpression -> DOT . IDENTIFIER
    (483) SymbolTail -> . IDENTIFIER
    (484) SymbolTail -> . IDENTIFIER DOT SymbolTail

    IDENTIFIER      shift and go to state 720

    SymbolTail                     shift and go to state 719

state 631

    (393) WithStatement -> WITH LPAREN Expression . RPAREN ScopeStatement

    RPAREN          shift and go to state 721


state 632

    (483) SymbolTail -> IDENTIFIER .
    (484) SymbolTail -> IDENTIFIER . DOT SymbolTail
    (247) PrimaryExpression -> IDENTIFIER .

  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOT             shift and go to state 722
    POWER           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LPAREN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    TIMES           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DIV             reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MODULO          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PLUS            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    MINUS           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    IS_EQ           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    NOT_EQ          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LESS            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    GREATER         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    LESS_EQ         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    AMPERSAND       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    CARET           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    PIPE            reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    QUESTION        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    ASSIGN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_DIV          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    COMMA           reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)
    RPAREN          reduce using rule 247 (PrimaryExpression -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 483 (SymbolTail -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 247 (PrimaryExpression -> IDENTIFIER .) ]


state 633

    (391) GotoStatement -> GOTO CASE SEMICOLON .

    SEMICOLON       reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    CASE            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    DEFAULT         reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    LBRACE          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    IDENTIFIER      reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    IF              reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    WHILE           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    DO              reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    FOR             reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    SWITCH          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    FINAL           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    CONTINUE        reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    BREAK           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    RETURN          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    GOTO            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    WITH            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    MIXIN           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    IMPORT          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    STATIC          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    LPAREN          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    FOREACH         reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    FOREACH_REVERSE reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    ENUM            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    EXTERN          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    AUTO            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    CONST           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    IMMUTABLE       reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    UAMPERSAND      reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    PLUS_PLUS       reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    MINUS_MINUS     reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    TIMES           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    UMINUS          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    UPLUS           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    EXCLAMATION     reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    TILDE           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    CAST            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    DOT             reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    THIS            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    NULL            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    TRUE            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    FALSE           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    DOLLAR          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    INUMBER         reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    DNUMBER         reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    LIT_CHAR        reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    LIT_STR         reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    LBRACKET        reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    FUNCTION        reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    NEW             reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    BOOL            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    SHORT           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    USHORT          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    INT             reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    UINT            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    LONG            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    ULONG           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    CHAR            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    FLOAT           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    VOID            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    TYPEOF          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    TYPEID          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    BODY            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    ALIAS           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    CLASS           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    UNION           reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    RBRACE          reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)
    ELSE            reduce using rule 391 (GotoStatement -> GOTO CASE SEMICOLON .)


state 634

    (392) GotoStatement -> GOTO CASE Expression . SEMICOLON

    SEMICOLON       shift and go to state 723


state 635

    (390) GotoStatement -> GOTO DEFAULT SEMICOLON .

    SEMICOLON       reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CASE            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DEFAULT         reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACE          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IDENTIFIER      reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IF              reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    WHILE           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DO              reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOR             reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    SWITCH          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FINAL           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONTINUE        reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    BREAK           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    RETURN          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    GOTO            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    WITH            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    MIXIN           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMPORT          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    STATIC          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LPAREN          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH         reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH_REVERSE reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ENUM            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXTERN          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    AUTO            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONST           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMMUTABLE       reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    UAMPERSAND      reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    PLUS_PLUS       reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    MINUS_MINUS     reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TIMES           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    UMINUS          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    UPLUS           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXCLAMATION     reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TILDE           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CAST            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOT             reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    THIS            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    NULL            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TRUE            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FALSE           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOLLAR          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    INUMBER         reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DNUMBER         reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_CHAR        reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_STR         reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACKET        reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FUNCTION        reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    NEW             reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    BOOL            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    SHORT           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    USHORT          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    INT             reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    UINT            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LONG            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ULONG           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CHAR            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FLOAT           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    VOID            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TYPEOF          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TYPEID          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    BODY            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ALIAS           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CLASS           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    UNION           reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    RBRACE          reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ELSE            reduce using rule 390 (GotoStatement -> GOTO DEFAULT SEMICOLON .)


state 636

    (389) GotoStatement -> GOTO IDENTIFIER SEMICOLON .

    SEMICOLON       reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEID          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BODY            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 389 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)


state 637

    (388) ReturnStatement -> RETURN Expression_opt SEMICOLON .

    SEMICOLON       reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CASE            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DEFAULT         reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LBRACE          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IDENTIFIER      reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IF              reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    WHILE           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DO              reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FOR             reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    SWITCH          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FINAL           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CONTINUE        reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    BREAK           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    RETURN          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    GOTO            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    WITH            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    MIXIN           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IMPORT          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    STATIC          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LPAREN          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FOREACH         reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FOREACH_REVERSE reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ENUM            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    EXTERN          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    AUTO            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CONST           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IMMUTABLE       reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    UAMPERSAND      reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    PLUS_PLUS       reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    MINUS_MINUS     reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TIMES           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    UMINUS          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    UPLUS           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    EXCLAMATION     reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TILDE           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CAST            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DOT             reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    THIS            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    NULL            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TRUE            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FALSE           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DOLLAR          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    INUMBER         reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DNUMBER         reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LIT_CHAR        reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LIT_STR         reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LBRACKET        reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FUNCTION        reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    NEW             reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    BOOL            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    SHORT           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    USHORT          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    INT             reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    UINT            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LONG            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ULONG           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CHAR            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FLOAT           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    VOID            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TYPEOF          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TYPEID          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    BODY            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ALIAS           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CLASS           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    UNION           reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    RBRACE          reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ELSE            reduce using rule 388 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)


state 638

    (353) ForeachTypeList -> ForeachType .
    (354) ForeachTypeList -> ForeachType . COMMA ForeachTypeList

    SEMICOLON       reduce using rule 353 (ForeachTypeList -> ForeachType .)
    COMMA           shift and go to state 724


state 639

    (362) ForeachTypeAttribute -> TypeCtor .

    ENUM            reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    CONST           reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    IMMUTABLE       reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    IDENTIFIER      reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    ALIAS           reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    DOT             reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    BOOL            reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    SHORT           reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    USHORT          reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    INT             reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    UINT            reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    LONG            reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    ULONG           reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    CHAR            reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    FLOAT           reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    VOID            reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)
    TYPEOF          reduce using rule 362 (ForeachTypeAttribute -> TypeCtor .)


state 640

    (349) AggregateForeach -> Foreach LPAREN ForeachTypeList . SEMICOLON ForeachAggregate RPAREN

    SEMICOLON       shift and go to state 725


state 641

    (359) ForeachTypeAttributes_opt -> empty .

    IDENTIFIER      reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    ALIAS           reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    DOT             reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    BOOL            reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    SHORT           reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    USHORT          reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    INT             reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    UINT            reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    LONG            reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    ULONG           reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    CHAR            reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    FLOAT           reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    VOID            reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    TYPEOF          reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    CONST           reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)
    IMMUTABLE       reduce using rule 359 (ForeachTypeAttributes_opt -> empty .)


state 642

    (381) FinalSwitchStatement -> FINAL SWITCH LPAREN . Expression RPAREN ScopeStatement
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 726
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 643

    (370) CaseStatement -> CASE ArgumentList COLON . ScopeStatementList
    (375) ScopeStatementList -> . StatementListNoCaseNoDefault
    (376) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (377) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (378) StatementNoCaseNoDefault -> . SEMICOLON
    (379) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (380) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (320) ScopeBlockStatement -> . BlockStatement
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    SEMICOLON       shift and go to state 652
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 159
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 312
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ScopeStatementList             shift and go to state 727
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StatementNoCaseNoDefault       shift and go to state 651
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    StatementListNoCaseNoDefault   shift and go to state 653
    SwitchStatement                shift and go to state 339
    LIT_STRPlus                    shift and go to state 239
    empty                          shift and go to state 350
    NonEmptyStatementNoCaseNoDefault shift and go to state 654
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ScopeBlockStatement            shift and go to state 655
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 644

    (371) CaseRangeStatement -> CASE FirstExp COLON . RANGE LastExp COLON ScopeStatementList

    RANGE           shift and go to state 728


state 645

    (341) Initialize -> SEMICOLON .

    UAMPERSAND      reduce using rule 341 (Initialize -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 341 (Initialize -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 341 (Initialize -> SEMICOLON .)
    TIMES           reduce using rule 341 (Initialize -> SEMICOLON .)
    UMINUS          reduce using rule 341 (Initialize -> SEMICOLON .)
    UPLUS           reduce using rule 341 (Initialize -> SEMICOLON .)
    EXCLAMATION     reduce using rule 341 (Initialize -> SEMICOLON .)
    LPAREN          reduce using rule 341 (Initialize -> SEMICOLON .)
    TILDE           reduce using rule 341 (Initialize -> SEMICOLON .)
    CAST            reduce using rule 341 (Initialize -> SEMICOLON .)
    IDENTIFIER      reduce using rule 341 (Initialize -> SEMICOLON .)
    DOT             reduce using rule 341 (Initialize -> SEMICOLON .)
    THIS            reduce using rule 341 (Initialize -> SEMICOLON .)
    NULL            reduce using rule 341 (Initialize -> SEMICOLON .)
    TRUE            reduce using rule 341 (Initialize -> SEMICOLON .)
    FALSE           reduce using rule 341 (Initialize -> SEMICOLON .)
    DOLLAR          reduce using rule 341 (Initialize -> SEMICOLON .)
    INUMBER         reduce using rule 341 (Initialize -> SEMICOLON .)
    DNUMBER         reduce using rule 341 (Initialize -> SEMICOLON .)
    LIT_CHAR        reduce using rule 341 (Initialize -> SEMICOLON .)
    LIT_STR         reduce using rule 341 (Initialize -> SEMICOLON .)
    LBRACKET        reduce using rule 341 (Initialize -> SEMICOLON .)
    FUNCTION        reduce using rule 341 (Initialize -> SEMICOLON .)
    MIXIN           reduce using rule 341 (Initialize -> SEMICOLON .)
    IMPORT          reduce using rule 341 (Initialize -> SEMICOLON .)
    NEW             reduce using rule 341 (Initialize -> SEMICOLON .)
    BOOL            reduce using rule 341 (Initialize -> SEMICOLON .)
    SHORT           reduce using rule 341 (Initialize -> SEMICOLON .)
    USHORT          reduce using rule 341 (Initialize -> SEMICOLON .)
    INT             reduce using rule 341 (Initialize -> SEMICOLON .)
    UINT            reduce using rule 341 (Initialize -> SEMICOLON .)
    LONG            reduce using rule 341 (Initialize -> SEMICOLON .)
    ULONG           reduce using rule 341 (Initialize -> SEMICOLON .)
    CHAR            reduce using rule 341 (Initialize -> SEMICOLON .)
    FLOAT           reduce using rule 341 (Initialize -> SEMICOLON .)
    VOID            reduce using rule 341 (Initialize -> SEMICOLON .)
    CONST           reduce using rule 341 (Initialize -> SEMICOLON .)
    IMMUTABLE       reduce using rule 341 (Initialize -> SEMICOLON .)
    TYPEOF          reduce using rule 341 (Initialize -> SEMICOLON .)
    TYPEID          reduce using rule 341 (Initialize -> SEMICOLON .)
    LBRACE          reduce using rule 341 (Initialize -> SEMICOLON .)
    BODY            reduce using rule 341 (Initialize -> SEMICOLON .)
    SEMICOLON       reduce using rule 341 (Initialize -> SEMICOLON .)


state 646

    (340) ForStatement -> FOR LPAREN Initialize . Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (344) Test_opt -> . Test
    (345) Test_opt -> . empty
    (343) Test -> . Expression
    (485) empty -> .
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    SEMICOLON       reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    Test                           shift and go to state 729
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 730
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BlockStatement                 shift and go to state 189
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 731
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    ImportExpression               shift and go to state 184
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    Test_opt                       shift and go to state 732
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 647

    (342) Initialize -> NoScopeNonEmptyStatement .

    UAMPERSAND      reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    PLUS_PLUS       reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    MINUS_MINUS     reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    TIMES           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    UMINUS          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    UPLUS           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    EXCLAMATION     reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    LPAREN          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    TILDE           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    CAST            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    IDENTIFIER      reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    DOT             reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    THIS            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    NULL            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    TRUE            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    FALSE           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    DOLLAR          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    INUMBER         reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    DNUMBER         reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    LIT_CHAR        reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    LIT_STR         reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    LBRACKET        reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    FUNCTION        reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    MIXIN           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    IMPORT          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    NEW             reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    BOOL            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    SHORT           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    USHORT          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    INT             reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    UINT            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    LONG            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    ULONG           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    CHAR            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    FLOAT           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    VOID            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    CONST           reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    IMMUTABLE       reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    TYPEOF          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    TYPEID          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    LBRACE          reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    BODY            reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)
    SEMICOLON       reduce using rule 342 (Initialize -> NoScopeNonEmptyStatement .)


state 648

    (386) ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .

    SEMICOLON       reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CASE            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DEFAULT         reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LBRACE          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IDENTIFIER      reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IF              reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    WHILE           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DO              reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FOR             reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    SWITCH          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FINAL           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CONTINUE        reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    BREAK           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    RETURN          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    GOTO            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    WITH            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    MIXIN           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IMPORT          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    STATIC          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LPAREN          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FOREACH         reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FOREACH_REVERSE reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ENUM            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    EXTERN          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    AUTO            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CONST           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IMMUTABLE       reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    UAMPERSAND      reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    PLUS_PLUS       reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    MINUS_MINUS     reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TIMES           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    UMINUS          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    UPLUS           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    EXCLAMATION     reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TILDE           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CAST            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DOT             reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    THIS            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    NULL            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TRUE            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FALSE           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DOLLAR          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    INUMBER         reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DNUMBER         reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LIT_CHAR        reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LIT_STR         reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LBRACKET        reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FUNCTION        reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    NEW             reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    BOOL            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    SHORT           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    USHORT          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    INT             reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    UINT            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LONG            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ULONG           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CHAR            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FLOAT           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    VOID            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TYPEOF          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TYPEID          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    BODY            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ALIAS           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CLASS           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    UNION           reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    RBRACE          reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ELSE            reduce using rule 386 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)


state 649

    (395) MixinStatement -> MIXIN LPAREN AssignExpression . RPAREN SEMICOLON
    (282) MixinExpression -> MIXIN LPAREN AssignExpression . RPAREN

    RPAREN          shift and go to state 733


state 650

    (374) DefaultStatement -> DEFAULT COLON ScopeStatementList .

    UAMPERSAND      reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    PLUS_PLUS       reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    MINUS_MINUS     reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TIMES           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    UMINUS          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    UPLUS           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    EXCLAMATION     reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LPAREN          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TILDE           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CAST            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IDENTIFIER      reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DOT             reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    THIS            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    NULL            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TRUE            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FALSE           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DOLLAR          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    INUMBER         reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DNUMBER         reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LIT_CHAR        reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LIT_STR         reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LBRACKET        reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FUNCTION        reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    MIXIN           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IMPORT          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    NEW             reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    BOOL            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    SHORT           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    USHORT          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    INT             reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    UINT            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LONG            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ULONG           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CHAR            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FLOAT           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    VOID            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CONST           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IMMUTABLE       reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TYPEOF          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TYPEID          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LBRACE          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    BODY            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    SEMICOLON       reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CASE            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DEFAULT         reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IF              reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    WHILE           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DO              reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FOR             reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    SWITCH          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FINAL           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CONTINUE        reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    BREAK           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    RETURN          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    GOTO            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    WITH            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    STATIC          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FOREACH         reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FOREACH_REVERSE reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ENUM            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    EXTERN          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    AUTO            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ALIAS           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CLASS           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    UNION           reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    RBRACE          reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ELSE            reduce using rule 374 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)


state 651

    (376) StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .
    (377) StatementListNoCaseNoDefault -> StatementNoCaseNoDefault . StatementListNoCaseNoDefault
    (376) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (377) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (378) StatementNoCaseNoDefault -> . SEMICOLON
    (379) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (380) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (320) ScopeBlockStatement -> . BlockStatement
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for ALIAS resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for ENUM resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! reduce/reduce conflict for CLASS resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for UNION resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for EXTERN resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! shift/reduce conflict for FINAL resolved as shift
  ! reduce/reduce conflict for AUTO resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for CONST resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for DOT resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for BOOL resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for SHORT resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for USHORT resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for INT resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for UINT resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for LONG resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for ULONG resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for CHAR resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for FLOAT resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for VOID resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! reduce/reduce conflict for TYPEOF resolved using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for UAMPERSAND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
  ! shift/reduce conflict for BODY resolved as shift
    CASE            reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    DEFAULT         reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    ALIAS           reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    CLASS           reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    UNION           reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    RBRACE          reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    ELSE            reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    SEMICOLON       shift and go to state 652
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 159
    LPAREN          shift and go to state 359
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! SEMICOLON       [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LBRACE          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IDENTIFIER      [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IF              [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! WHILE           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DO              [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FOR             [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! SWITCH          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FINAL           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CONTINUE        [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! BREAK           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! RETURN          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! GOTO            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! WITH            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! MIXIN           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IMPORT          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! STATIC          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LPAREN          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FOREACH         [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FOREACH_REVERSE [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! ENUM            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! EXTERN          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! AUTO            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CONST           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IMMUTABLE       [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! UAMPERSAND      [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! PLUS_PLUS       [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! MINUS_MINUS     [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TIMES           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! UMINUS          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! UPLUS           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! EXCLAMATION     [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TILDE           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CAST            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DOT             [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! THIS            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! NULL            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TRUE            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FALSE           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DOLLAR          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! INUMBER         [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DNUMBER         [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LIT_CHAR        [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LIT_STR         [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LBRACKET        [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FUNCTION        [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! NEW             [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! BOOL            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! SHORT           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! USHORT          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! INT             [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! UINT            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LONG            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! ULONG           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CHAR            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FLOAT           [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! VOID            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TYPEOF          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TYPEID          [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! BODY            [ reduce using rule 376 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! ALIAS           [ reduce using rule 485 (empty -> .) ]
  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! CLASS           [ reduce using rule 485 (empty -> .) ]
  ! UNION           [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 312
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StatementNoCaseNoDefault       shift and go to state 651
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    StatementListNoCaseNoDefault   shift and go to state 734
    SwitchStatement                shift and go to state 339
    LIT_STRPlus                    shift and go to state 239
    empty                          shift and go to state 350
    NonEmptyStatementNoCaseNoDefault shift and go to state 654
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ScopeBlockStatement            shift and go to state 655
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 652

    (378) StatementNoCaseNoDefault -> SEMICOLON .

    SEMICOLON       reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    CASE            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    DEFAULT         reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    LBRACE          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    IDENTIFIER      reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    IF              reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    WHILE           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    DO              reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    FOR             reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    SWITCH          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    FINAL           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    CONTINUE        reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    BREAK           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    RETURN          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    GOTO            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    WITH            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    MIXIN           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    IMPORT          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    STATIC          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    LPAREN          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    FOREACH         reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    ENUM            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    EXTERN          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    AUTO            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    CONST           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    IMMUTABLE       reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    UAMPERSAND      reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    TIMES           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    UMINUS          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    UPLUS           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    EXCLAMATION     reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    TILDE           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    CAST            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    DOT             reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    THIS            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    NULL            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    TRUE            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    FALSE           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    DOLLAR          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    INUMBER         reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    DNUMBER         reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    LIT_CHAR        reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    LIT_STR         reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    LBRACKET        reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    FUNCTION        reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    NEW             reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    BOOL            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    SHORT           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    USHORT          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    INT             reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    UINT            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    LONG            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    ULONG           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    CHAR            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    FLOAT           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    VOID            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    TYPEOF          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    TYPEID          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    BODY            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    ALIAS           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    CLASS           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    UNION           reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    RBRACE          reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)
    ELSE            reduce using rule 378 (StatementNoCaseNoDefault -> SEMICOLON .)


state 653

    (375) ScopeStatementList -> StatementListNoCaseNoDefault .

    SEMICOLON       reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CASE            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DEFAULT         reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LBRACE          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IF              reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    WHILE           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DO              reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FOR             reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    SWITCH          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FINAL           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CONTINUE        reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    BREAK           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    RETURN          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    GOTO            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    WITH            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    MIXIN           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IMPORT          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    STATIC          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LPAREN          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FOREACH         reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ENUM            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    EXTERN          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    AUTO            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CONST           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    UAMPERSAND      reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TIMES           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    UMINUS          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    UPLUS           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TILDE           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CAST            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DOT             reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    THIS            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    NULL            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TRUE            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FALSE           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DOLLAR          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    INUMBER         reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DNUMBER         reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LIT_STR         reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LBRACKET        reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FUNCTION        reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    NEW             reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    BOOL            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    SHORT           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    USHORT          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    INT             reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    UINT            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LONG            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ULONG           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CHAR            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FLOAT           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    VOID            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TYPEOF          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TYPEID          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    BODY            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ALIAS           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CLASS           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    UNION           reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    RBRACE          reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ELSE            reduce using rule 375 (ScopeStatementList -> StatementListNoCaseNoDefault .)


state 654

    (379) StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .

    SEMICOLON       reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CASE            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DEFAULT         reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LBRACE          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IF              reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    WHILE           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DO              reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FOR             reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    SWITCH          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FINAL           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CONTINUE        reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    BREAK           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    RETURN          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    GOTO            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    WITH            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    MIXIN           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IMPORT          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    STATIC          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LPAREN          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH         reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ENUM            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    EXTERN          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    AUTO            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CONST           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    UAMPERSAND      reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TIMES           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    UMINUS          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    UPLUS           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TILDE           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CAST            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DOT             reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    THIS            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    NULL            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TRUE            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FALSE           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DOLLAR          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    INUMBER         reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DNUMBER         reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LIT_STR         reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LBRACKET        reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FUNCTION        reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    NEW             reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    BOOL            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    SHORT           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    USHORT          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    INT             reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    UINT            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LONG            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ULONG           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CHAR            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FLOAT           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    VOID            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TYPEOF          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TYPEID          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    BODY            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ALIAS           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CLASS           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    UNION           reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    RBRACE          reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ELSE            reduce using rule 379 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)


state 655

    (380) StatementNoCaseNoDefault -> ScopeBlockStatement .

    SEMICOLON       reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CASE            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DEFAULT         reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LBRACE          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IDENTIFIER      reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IF              reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    WHILE           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DO              reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FOR             reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    SWITCH          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FINAL           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CONTINUE        reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    BREAK           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    RETURN          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    GOTO            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    WITH            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    MIXIN           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IMPORT          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    STATIC          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LPAREN          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FOREACH         reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FOREACH_REVERSE reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ENUM            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    EXTERN          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    AUTO            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CONST           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IMMUTABLE       reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    UAMPERSAND      reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    PLUS_PLUS       reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    MINUS_MINUS     reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TIMES           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    UMINUS          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    UPLUS           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    EXCLAMATION     reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TILDE           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CAST            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DOT             reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    THIS            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    NULL            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TRUE            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FALSE           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DOLLAR          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    INUMBER         reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DNUMBER         reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LIT_CHAR        reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LIT_STR         reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LBRACKET        reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FUNCTION        reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    NEW             reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    BOOL            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    SHORT           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    USHORT          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    INT             reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    UINT            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LONG            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ULONG           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CHAR            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FLOAT           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    VOID            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TYPEOF          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TYPEID          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    BODY            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ALIAS           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CLASS           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    UNION           reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    RBRACE          reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ELSE            reduce using rule 380 (StatementNoCaseNoDefault -> ScopeBlockStatement .)


state 656

    (338) WhileStatement -> WHILE LPAREN Expression . RPAREN ScopeStatement

    RPAREN          shift and go to state 735


state 657

    (369) SwitchStatement -> SWITCH LPAREN Expression . RPAREN ScopeStatement

    RPAREN          shift and go to state 736


state 658

    (323) LabeledStatement -> IDENTIFIER COLON Statement .

    WHILE           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SEMICOLON       reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CASE            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DEFAULT         reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LBRACE          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IDENTIFIER      reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IF              reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DO              reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOR             reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SWITCH          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FINAL           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CONTINUE        reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BREAK           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    RETURN          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    GOTO            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    WITH            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    MIXIN           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IMPORT          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    STATIC          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LPAREN          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOREACH         reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOREACH_REVERSE reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ENUM            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    EXTERN          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    AUTO            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CONST           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IMMUTABLE       reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    UAMPERSAND      reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    PLUS_PLUS       reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    MINUS_MINUS     reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TIMES           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    UMINUS          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    UPLUS           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    EXCLAMATION     reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TILDE           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CAST            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DOT             reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    THIS            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NULL            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TRUE            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FALSE           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DOLLAR          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INUMBER         reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DNUMBER         reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LIT_CHAR        reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LIT_STR         reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LBRACKET        reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FUNCTION        reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NEW             reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BOOL            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SHORT           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    USHORT          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INT             reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    UINT            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LONG            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ULONG           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CHAR            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FLOAT           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    VOID            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TYPEOF          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TYPEID          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BODY            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ALIAS           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CLASS           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    UNION           reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    RBRACE          reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ELSE            reduce using rule 323 (LabeledStatement -> IDENTIFIER COLON Statement .)


state 659

    (293) NoScopeStatement -> BlockStatement .
    (320) ScopeBlockStatement -> BlockStatement .
    (278) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CASE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IF resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for WHILE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DO resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FOR resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FINAL resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for BREAK resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for RETURN resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for GOTO resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for WITH resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for MIXIN resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IMPORT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for STATIC resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FOREACH resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FOREACH_REVERSE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ENUM resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for EXTERN resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for AUTO resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CONST resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for UAMPERSAND resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for UMINUS resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for UPLUS resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TILDE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CAST resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DOT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for THIS resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for NULL resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TRUE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FALSE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for INUMBER resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DNUMBER resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LIT_CHAR resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LIT_STR resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for NEW resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for BOOL resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for SHORT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for USHORT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for INT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for UINT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LONG resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ULONG resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CHAR resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for VOID resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TYPEID resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for BODY resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ALIAS resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CLASS resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for UNION resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ELSE resolved using rule 293 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DOT resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    DEFAULT         reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    LBRACE          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    IF              reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    WHILE           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    DO              reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    FOR             reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    SWITCH          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    FINAL           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    CONTINUE        reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    BREAK           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    RETURN          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    GOTO            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    WITH            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    MIXIN           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    IMPORT          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    STATIC          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    FOREACH         reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    ENUM            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    EXTERN          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    AUTO            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    CONST           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    UAMPERSAND      reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    UMINUS          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    UPLUS           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    TILDE           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    CAST            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    THIS            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    NULL            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    TRUE            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    FALSE           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    DOLLAR          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    INUMBER         reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    DNUMBER         reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    LIT_STR         reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    LBRACKET        reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    FUNCTION        reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    NEW             reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    BOOL            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    SHORT           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    USHORT          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    INT             reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    UINT            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    LONG            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    ULONG           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    CHAR            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    FLOAT           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    VOID            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    TYPEOF          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    TYPEID          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    BODY            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    ALIAS           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    CLASS           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    UNION           reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    RBRACE          reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    ELSE            reduce using rule 293 (NoScopeStatement -> BlockStatement .)
    POWER           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 278 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 293 (NoScopeStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 293 (NoScopeStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 293 (NoScopeStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 293 (NoScopeStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 293 (NoScopeStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 293 (NoScopeStatement -> BlockStatement .) ]
  ! SEMICOLON       [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! CASE            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! DEFAULT         [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! LBRACE          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! IDENTIFIER      [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! IF              [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! WHILE           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! DO              [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! FOR             [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! SWITCH          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! FINAL           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! CONTINUE        [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! BREAK           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! RETURN          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! GOTO            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! WITH            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! MIXIN           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! IMPORT          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! STATIC          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! FOREACH         [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! FOREACH_REVERSE [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! ENUM            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! EXTERN          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! AUTO            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! CONST           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! IMMUTABLE       [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! UAMPERSAND      [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! UMINUS          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! UPLUS           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! EXCLAMATION     [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! TILDE           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! CAST            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! THIS            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! NULL            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! TRUE            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! FALSE           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! DOLLAR          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! INUMBER         [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! DNUMBER         [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! LIT_CHAR        [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! LIT_STR         [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! LBRACKET        [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! FUNCTION        [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! NEW             [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! BOOL            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! SHORT           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! USHORT          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! INT             [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! UINT            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! LONG            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! ULONG           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! CHAR            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! FLOAT           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! VOID            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! TYPEOF          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! TYPEID          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! BODY            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! ALIAS           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! CLASS           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! UNION           [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! RBRACE          [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]
  ! ELSE            [ reduce using rule 320 (ScopeBlockStatement -> BlockStatement .) ]


state 660

    (291) NoScopeStatement -> SEMICOLON .
    (286) Statement -> SEMICOLON .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CASE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LBRACE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FINAL resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for GOTO resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for WITH resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for MIXIN resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IMPORT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for STATIC resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH_REVERSE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENUM resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for EXTERN resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for AUTO resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for UAMPERSAND resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for UMINUS resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for UPLUS resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TILDE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CAST resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DOT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for THIS resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for NULL resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for INUMBER resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DNUMBER resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LIT_CHAR resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LIT_STR resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for NEW resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for BOOL resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for SHORT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for USHORT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for INT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for UINT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LONG resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ULONG resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CHAR resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for VOID resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TYPEID resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for BODY resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ALIAS resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for UNION resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for RBRACE resolved using rule 286 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ELSE resolved using rule 286 (Statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 286 (Statement -> SEMICOLON .)
    CASE            reduce using rule 286 (Statement -> SEMICOLON .)
    DEFAULT         reduce using rule 286 (Statement -> SEMICOLON .)
    LBRACE          reduce using rule 286 (Statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 286 (Statement -> SEMICOLON .)
    IF              reduce using rule 286 (Statement -> SEMICOLON .)
    WHILE           reduce using rule 286 (Statement -> SEMICOLON .)
    DO              reduce using rule 286 (Statement -> SEMICOLON .)
    FOR             reduce using rule 286 (Statement -> SEMICOLON .)
    SWITCH          reduce using rule 286 (Statement -> SEMICOLON .)
    FINAL           reduce using rule 286 (Statement -> SEMICOLON .)
    CONTINUE        reduce using rule 286 (Statement -> SEMICOLON .)
    BREAK           reduce using rule 286 (Statement -> SEMICOLON .)
    RETURN          reduce using rule 286 (Statement -> SEMICOLON .)
    GOTO            reduce using rule 286 (Statement -> SEMICOLON .)
    WITH            reduce using rule 286 (Statement -> SEMICOLON .)
    MIXIN           reduce using rule 286 (Statement -> SEMICOLON .)
    IMPORT          reduce using rule 286 (Statement -> SEMICOLON .)
    STATIC          reduce using rule 286 (Statement -> SEMICOLON .)
    LPAREN          reduce using rule 286 (Statement -> SEMICOLON .)
    FOREACH         reduce using rule 286 (Statement -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 286 (Statement -> SEMICOLON .)
    ENUM            reduce using rule 286 (Statement -> SEMICOLON .)
    EXTERN          reduce using rule 286 (Statement -> SEMICOLON .)
    AUTO            reduce using rule 286 (Statement -> SEMICOLON .)
    CONST           reduce using rule 286 (Statement -> SEMICOLON .)
    IMMUTABLE       reduce using rule 286 (Statement -> SEMICOLON .)
    UAMPERSAND      reduce using rule 286 (Statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 286 (Statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 286 (Statement -> SEMICOLON .)
    TIMES           reduce using rule 286 (Statement -> SEMICOLON .)
    UMINUS          reduce using rule 286 (Statement -> SEMICOLON .)
    UPLUS           reduce using rule 286 (Statement -> SEMICOLON .)
    EXCLAMATION     reduce using rule 286 (Statement -> SEMICOLON .)
    TILDE           reduce using rule 286 (Statement -> SEMICOLON .)
    CAST            reduce using rule 286 (Statement -> SEMICOLON .)
    DOT             reduce using rule 286 (Statement -> SEMICOLON .)
    THIS            reduce using rule 286 (Statement -> SEMICOLON .)
    NULL            reduce using rule 286 (Statement -> SEMICOLON .)
    TRUE            reduce using rule 286 (Statement -> SEMICOLON .)
    FALSE           reduce using rule 286 (Statement -> SEMICOLON .)
    DOLLAR          reduce using rule 286 (Statement -> SEMICOLON .)
    INUMBER         reduce using rule 286 (Statement -> SEMICOLON .)
    DNUMBER         reduce using rule 286 (Statement -> SEMICOLON .)
    LIT_CHAR        reduce using rule 286 (Statement -> SEMICOLON .)
    LIT_STR         reduce using rule 286 (Statement -> SEMICOLON .)
    LBRACKET        reduce using rule 286 (Statement -> SEMICOLON .)
    FUNCTION        reduce using rule 286 (Statement -> SEMICOLON .)
    NEW             reduce using rule 286 (Statement -> SEMICOLON .)
    BOOL            reduce using rule 286 (Statement -> SEMICOLON .)
    SHORT           reduce using rule 286 (Statement -> SEMICOLON .)
    USHORT          reduce using rule 286 (Statement -> SEMICOLON .)
    INT             reduce using rule 286 (Statement -> SEMICOLON .)
    UINT            reduce using rule 286 (Statement -> SEMICOLON .)
    LONG            reduce using rule 286 (Statement -> SEMICOLON .)
    ULONG           reduce using rule 286 (Statement -> SEMICOLON .)
    CHAR            reduce using rule 286 (Statement -> SEMICOLON .)
    FLOAT           reduce using rule 286 (Statement -> SEMICOLON .)
    VOID            reduce using rule 286 (Statement -> SEMICOLON .)
    TYPEOF          reduce using rule 286 (Statement -> SEMICOLON .)
    TYPEID          reduce using rule 286 (Statement -> SEMICOLON .)
    BODY            reduce using rule 286 (Statement -> SEMICOLON .)
    ALIAS           reduce using rule 286 (Statement -> SEMICOLON .)
    CLASS           reduce using rule 286 (Statement -> SEMICOLON .)
    UNION           reduce using rule 286 (Statement -> SEMICOLON .)
    RBRACE          reduce using rule 286 (Statement -> SEMICOLON .)
    ELSE            reduce using rule 286 (Statement -> SEMICOLON .)

  ! SEMICOLON       [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! CASE            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! DEFAULT         [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! LBRACE          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! IDENTIFIER      [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! IF              [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! WHILE           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! DO              [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! FOR             [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! FINAL           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! BREAK           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! RETURN          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! GOTO            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! WITH            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! MIXIN           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! IMPORT          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! STATIC          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! FOREACH_REVERSE [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! ENUM            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! EXTERN          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! AUTO            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! CONST           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! IMMUTABLE       [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! UAMPERSAND      [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! PLUS_PLUS       [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! MINUS_MINUS     [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! TIMES           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! UMINUS          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! UPLUS           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! EXCLAMATION     [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! TILDE           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! CAST            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! DOT             [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! THIS            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! NULL            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! TRUE            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! FALSE           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! DOLLAR          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! INUMBER         [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! DNUMBER         [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! LIT_CHAR        [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! LIT_STR         [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! LBRACKET        [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! NEW             [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! BOOL            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! SHORT           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! USHORT          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! INT             [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! UINT            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! LONG            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! ULONG           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! CHAR            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! VOID            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! TYPEOF          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! TYPEID          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! BODY            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! ALIAS           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! CLASS           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! UNION           [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! RBRACE          [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]
  ! ELSE            [ reduce using rule 291 (NoScopeStatement -> SEMICOLON .) ]


state 661

    (322) LabeledStatement -> IDENTIFIER COLON NoScopeStatement .

    WHILE           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    SEMICOLON       reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CASE            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DEFAULT         reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LBRACE          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IDENTIFIER      reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IF              reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DO              reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FOR             reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    SWITCH          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FINAL           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CONTINUE        reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    BREAK           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    RETURN          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    GOTO            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    WITH            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    MIXIN           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IMPORT          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    STATIC          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LPAREN          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FOREACH         reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FOREACH_REVERSE reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ENUM            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    EXTERN          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    AUTO            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CONST           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IMMUTABLE       reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    UAMPERSAND      reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    PLUS_PLUS       reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    MINUS_MINUS     reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TIMES           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    UMINUS          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    UPLUS           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    EXCLAMATION     reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TILDE           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CAST            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DOT             reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    THIS            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    NULL            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TRUE            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FALSE           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DOLLAR          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    INUMBER         reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DNUMBER         reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LIT_CHAR        reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LIT_STR         reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LBRACKET        reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FUNCTION        reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    NEW             reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    BOOL            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    SHORT           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    USHORT          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    INT             reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    UINT            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LONG            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ULONG           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CHAR            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FLOAT           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    VOID            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TYPEOF          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TYPEID          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    BODY            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ALIAS           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CLASS           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    UNION           reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    RBRACE          reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ELSE            reduce using rule 322 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)


state 662

    (292) NoScopeStatement -> NonEmptyStatement .
    (287) Statement -> NonEmptyStatement .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CASE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IF resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for WHILE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DO resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FOR resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FINAL resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for BREAK resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for RETURN resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for GOTO resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for WITH resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for MIXIN resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IMPORT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for STATIC resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FOREACH resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FOREACH_REVERSE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ENUM resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for EXTERN resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for AUTO resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CONST resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for UAMPERSAND resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for UMINUS resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for UPLUS resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TILDE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CAST resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DOT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for THIS resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for NULL resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TRUE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FALSE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for INUMBER resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DNUMBER resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LIT_CHAR resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LIT_STR resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for NEW resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for BOOL resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for SHORT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for USHORT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for INT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for UINT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LONG resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ULONG resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CHAR resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for VOID resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TYPEID resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for BODY resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ALIAS resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CLASS resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for UNION resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 287 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ELSE resolved using rule 287 (Statement -> NonEmptyStatement .)
    SEMICOLON       reduce using rule 287 (Statement -> NonEmptyStatement .)
    CASE            reduce using rule 287 (Statement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 287 (Statement -> NonEmptyStatement .)
    LBRACE          reduce using rule 287 (Statement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 287 (Statement -> NonEmptyStatement .)
    IF              reduce using rule 287 (Statement -> NonEmptyStatement .)
    WHILE           reduce using rule 287 (Statement -> NonEmptyStatement .)
    DO              reduce using rule 287 (Statement -> NonEmptyStatement .)
    FOR             reduce using rule 287 (Statement -> NonEmptyStatement .)
    SWITCH          reduce using rule 287 (Statement -> NonEmptyStatement .)
    FINAL           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 287 (Statement -> NonEmptyStatement .)
    BREAK           reduce using rule 287 (Statement -> NonEmptyStatement .)
    RETURN          reduce using rule 287 (Statement -> NonEmptyStatement .)
    GOTO            reduce using rule 287 (Statement -> NonEmptyStatement .)
    WITH            reduce using rule 287 (Statement -> NonEmptyStatement .)
    MIXIN           reduce using rule 287 (Statement -> NonEmptyStatement .)
    IMPORT          reduce using rule 287 (Statement -> NonEmptyStatement .)
    STATIC          reduce using rule 287 (Statement -> NonEmptyStatement .)
    LPAREN          reduce using rule 287 (Statement -> NonEmptyStatement .)
    FOREACH         reduce using rule 287 (Statement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 287 (Statement -> NonEmptyStatement .)
    ENUM            reduce using rule 287 (Statement -> NonEmptyStatement .)
    EXTERN          reduce using rule 287 (Statement -> NonEmptyStatement .)
    AUTO            reduce using rule 287 (Statement -> NonEmptyStatement .)
    CONST           reduce using rule 287 (Statement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 287 (Statement -> NonEmptyStatement .)
    UAMPERSAND      reduce using rule 287 (Statement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 287 (Statement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 287 (Statement -> NonEmptyStatement .)
    TIMES           reduce using rule 287 (Statement -> NonEmptyStatement .)
    UMINUS          reduce using rule 287 (Statement -> NonEmptyStatement .)
    UPLUS           reduce using rule 287 (Statement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 287 (Statement -> NonEmptyStatement .)
    TILDE           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CAST            reduce using rule 287 (Statement -> NonEmptyStatement .)
    DOT             reduce using rule 287 (Statement -> NonEmptyStatement .)
    THIS            reduce using rule 287 (Statement -> NonEmptyStatement .)
    NULL            reduce using rule 287 (Statement -> NonEmptyStatement .)
    TRUE            reduce using rule 287 (Statement -> NonEmptyStatement .)
    FALSE           reduce using rule 287 (Statement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 287 (Statement -> NonEmptyStatement .)
    INUMBER         reduce using rule 287 (Statement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 287 (Statement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 287 (Statement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 287 (Statement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 287 (Statement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 287 (Statement -> NonEmptyStatement .)
    NEW             reduce using rule 287 (Statement -> NonEmptyStatement .)
    BOOL            reduce using rule 287 (Statement -> NonEmptyStatement .)
    SHORT           reduce using rule 287 (Statement -> NonEmptyStatement .)
    USHORT          reduce using rule 287 (Statement -> NonEmptyStatement .)
    INT             reduce using rule 287 (Statement -> NonEmptyStatement .)
    UINT            reduce using rule 287 (Statement -> NonEmptyStatement .)
    LONG            reduce using rule 287 (Statement -> NonEmptyStatement .)
    ULONG           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CHAR            reduce using rule 287 (Statement -> NonEmptyStatement .)
    FLOAT           reduce using rule 287 (Statement -> NonEmptyStatement .)
    VOID            reduce using rule 287 (Statement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 287 (Statement -> NonEmptyStatement .)
    TYPEID          reduce using rule 287 (Statement -> NonEmptyStatement .)
    BODY            reduce using rule 287 (Statement -> NonEmptyStatement .)
    ALIAS           reduce using rule 287 (Statement -> NonEmptyStatement .)
    CLASS           reduce using rule 287 (Statement -> NonEmptyStatement .)
    UNION           reduce using rule 287 (Statement -> NonEmptyStatement .)
    RBRACE          reduce using rule 287 (Statement -> NonEmptyStatement .)
    ELSE            reduce using rule 287 (Statement -> NonEmptyStatement .)

  ! SEMICOLON       [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CASE            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DEFAULT         [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LBRACE          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IDENTIFIER      [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IF              [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! WHILE           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DO              [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FOR             [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! SWITCH          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FINAL           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CONTINUE        [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! BREAK           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! RETURN          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! GOTO            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! WITH            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! MIXIN           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IMPORT          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! STATIC          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LPAREN          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FOREACH         [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FOREACH_REVERSE [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ENUM            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! EXTERN          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! AUTO            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CONST           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IMMUTABLE       [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! UAMPERSAND      [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TIMES           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! UMINUS          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! UPLUS           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! EXCLAMATION     [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TILDE           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CAST            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DOT             [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! THIS            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! NULL            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TRUE            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FALSE           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DOLLAR          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! INUMBER         [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DNUMBER         [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LIT_CHAR        [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LIT_STR         [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LBRACKET        [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FUNCTION        [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! NEW             [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! BOOL            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! SHORT           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! USHORT          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! INT             [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! UINT            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LONG            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ULONG           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CHAR            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FLOAT           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! VOID            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TYPEOF          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TYPEID          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! BODY            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ALIAS           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CLASS           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! UNION           [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! RBRACE          [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ELSE            [ reduce using rule 292 (NoScopeStatement -> NonEmptyStatement .) ]


state 663

    (387) BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .

    SEMICOLON       reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CASE            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DEFAULT         reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LBRACE          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IDENTIFIER      reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IF              reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    WHILE           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DO              reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FOR             reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    SWITCH          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FINAL           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CONTINUE        reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    BREAK           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    RETURN          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    GOTO            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    WITH            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    MIXIN           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IMPORT          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    STATIC          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LPAREN          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FOREACH         reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FOREACH_REVERSE reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ENUM            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    EXTERN          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    AUTO            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CONST           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IMMUTABLE       reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    UAMPERSAND      reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    PLUS_PLUS       reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    MINUS_MINUS     reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TIMES           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    UMINUS          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    UPLUS           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    EXCLAMATION     reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TILDE           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CAST            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DOT             reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    THIS            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    NULL            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TRUE            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FALSE           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DOLLAR          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    INUMBER         reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DNUMBER         reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LIT_CHAR        reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LIT_STR         reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LBRACKET        reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FUNCTION        reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    NEW             reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    BOOL            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    SHORT           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    USHORT          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    INT             reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    UINT            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LONG            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ULONG           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CHAR            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FLOAT           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    VOID            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TYPEOF          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TYPEID          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    BODY            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ALIAS           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CLASS           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    UNION           reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    RBRACE          reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ELSE            reduce using rule 387 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)


state 664

    (339) DoStatement -> DO ScopeStatement WHILE . LPAREN Expression RPAREN

    LPAREN          shift and go to state 737


state 665

    (361) ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .

    IDENTIFIER      reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    ALIAS           reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    DOT             reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    BOOL            reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    SHORT           reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    USHORT          reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    INT             reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    UINT            reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    LONG            reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    ULONG           reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    CHAR            reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    FLOAT           reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    VOID            reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    TYPEOF          reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    CONST           reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    IMMUTABLE       reduce using rule 361 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)


state 666

    (365) RangeForeach -> LPAREN ForeachType SEMICOLON . LwrExpression RANGE UprExpression RPAREN
    (366) LwrExpression -> . Expression
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    LwrExpression                  shift and go to state 738
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 739
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 667

    (355) ForeachType -> ForeachTypeAttributes_opt BasicType . Declarator
    (57) Declarator -> . VarDeclarator
    (58) Declarator -> . AltDeclarator
    (59) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (60) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 485 (empty -> .)
    LPAREN          reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

    VarDeclarator                  shift and go to state 541
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 543
    empty                          shift and go to state 89
    Declarator                     shift and go to state 740
    BasicType2_opt                 shift and go to state 542
    BasicType2                     shift and go to state 93

state 668

    (356) ForeachType -> ForeachTypeAttributes_opt IDENTIFIER .
    (109) IdentifierList -> IDENTIFIER .
    (110) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (111) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! shift/reduce conflict for LBRACKET resolved as shift
    COMMA           reduce using rule 356 (ForeachType -> ForeachTypeAttributes_opt IDENTIFIER .)
    SEMICOLON       reduce using rule 356 (ForeachType -> ForeachTypeAttributes_opt IDENTIFIER .)
    TIMES           reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    FUNCTION        reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 109 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 95
    LBRACKET        shift and go to state 94

  ! LBRACKET        [ reduce using rule 109 (IdentifierList -> IDENTIFIER .) ]


state 669

    (357) ForeachType -> ForeachTypeAttributes_opt ALIAS . IDENTIFIER

    IDENTIFIER      shift and go to state 741


state 670

    (330) IfStatement -> IF LPAREN IfCondition . RPAREN ThenStatement
    (331) IfStatement -> IF LPAREN IfCondition . RPAREN ThenStatement ELSE ElseStatement

    RPAREN          shift and go to state 742


state 671

    (334) IfCondition -> TypeCtors . IDENTIFIER ASSIGN Expression
    (80) TypeCtors_opt -> TypeCtors .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 743
    DOT             reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    BOOL            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    SHORT           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    USHORT          reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    INT             reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    UINT            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    LONG            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    ULONG           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    CHAR            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    FLOAT           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    VOID            reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    TYPEOF          reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    CONST           reduce using rule 80 (TypeCtors_opt -> TypeCtors .)
    IMMUTABLE       reduce using rule 80 (TypeCtors_opt -> TypeCtors .)

  ! IDENTIFIER      [ reduce using rule 80 (TypeCtors_opt -> TypeCtors .) ]


state 672

    (335) IfCondition -> TypeCtors_opt . BasicType Declarator ASSIGN Expression
    (246) PostfixExpression -> TypeCtors_opt . BasicType LPAREN ArgumentList_opt RPAREN
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 744
    IdentifierList                 shift and go to state 34
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44

state 673

    (332) IfCondition -> Expression .

    RPAREN          reduce using rule 332 (IfCondition -> Expression .)


state 674

    (333) IfCondition -> AUTO . IDENTIFIER ASSIGN Expression

    IDENTIFIER      shift and go to state 745


state 675

    (59) VarDeclarator -> BasicType2_opt IDENTIFIER .
    (60) AltDeclarator -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (67) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (71) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (72) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ELLIPSIS        reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    ASSIGN          reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    COMMA           reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    RPAREN          reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    SEMICOLON       reduce using rule 59 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    LBRACKET        shift and go to state 457

    AltDeclaratorSuffix            shift and go to state 458
    AltDeclaratorSuffixes          shift and go to state 459

state 676

    (460) Parameter -> InOut_opt BasicType Declarator ASSIGN . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 746

state 677

    (459) Parameter -> InOut_opt BasicType Declarator ELLIPSIS .

    COMMA           reduce using rule 459 (Parameter -> InOut_opt BasicType Declarator ELLIPSIS .)
    RPAREN          reduce using rule 459 (Parameter -> InOut_opt BasicType Declarator ELLIPSIS .)


state 678

    (128) ArrayMemberInitializations -> ArrayMemberInitialization COMMA .
    (129) ArrayMemberInitializations -> ArrayMemberInitialization COMMA . ArrayMemberInitializations
    (127) ArrayMemberInitializations -> . ArrayMemberInitialization
    (128) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA
    (129) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA ArrayMemberInitializations
    (132) ArrayMemberInitialization -> . NonVoidInitializer
    (133) ArrayMemberInitialization -> . AssignExpression COLON NonVoidInitializer
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACKET        reduce using rule 128 (ArrayMemberInitializations -> ArrayMemberInitialization COMMA .)
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    ArrayMemberInitialization      shift and go to state 546
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    ArrayMemberInitializations     shift and go to state 747
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    NonVoidInitializer             shift and go to state 545
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    ArrayInitializer               shift and go to state 375
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 748

state 679

    (126) ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .

    COMMA           reduce using rule 126 (ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .)
    RBRACKET        reduce using rule 126 (ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .)
    SEMICOLON       reduce using rule 126 (ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .)


state 680

    (133) ArrayMemberInitialization -> AssignExpression COLON . NonVoidInitializer
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    NonVoidInitializer             shift and go to state 749
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    ArrayInitializer               shift and go to state 375
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 379

state 681

    (235) ArgumentList -> AssignExpression COMMA ArgumentList .

    COLON           reduce using rule 235 (ArgumentList -> AssignExpression COMMA ArgumentList .)
    RPAREN          reduce using rule 235 (ArgumentList -> AssignExpression COMMA ArgumentList .)
    RBRACKET        reduce using rule 235 (ArgumentList -> AssignExpression COMMA ArgumentList .)


state 682

    (181) ConditionalExpression -> OrOrExpression QUESTION Expression COLON . ConditionalExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 750
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200

state 683

    (283) ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .

    POWER           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DOT             reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LPAREN          reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    TIMES           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DIV             reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    MODULO          reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    PLUS            reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    MINUS           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    IS_EQ           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    NOT_EQ          reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LESS            reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    GREATER_EQ      reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    GREATER         reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LESS_EQ         reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    AMPERSAND       reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    CARET           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    PIPE            reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    QUESTION        reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    ASSIGN          reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_PLUS         reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_MINUS        reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_TIMES        reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_DIV          reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_MODULO       reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_LEFT         reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RBRACKET        reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RANGE           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    COMMA           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RPAREN          reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    SEMICOLON       reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RBRACE          reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    COLON           reduce using rule 283 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)


state 684

    (265) PrimaryExpression -> TypeCtor LPAREN Type RPAREN . DOT IDENTIFIER
    (266) PrimaryExpression -> TypeCtor LPAREN Type RPAREN . LPAREN ArgumentList_opt RPAREN

    DOT             shift and go to state 752
    LPAREN          shift and go to state 751


state 685

    (271) FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .

    POWER           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DOT             reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    PLUS_PLUS       reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    MINUS_MINUS     reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LPAREN          reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    TIMES           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DIV             reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    MODULO          reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    PLUS            reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    MINUS           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LEFT_SHIFT      reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RIGHT_SHIFT     reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    IS_EQ           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    NOT_EQ          reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LESS            reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    GREATER_EQ      reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    GREATER         reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LESS_EQ         reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    AMPERSAND       reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    CARET           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    PIPE            reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DOUBLE_AMPERSAND reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    QUESTION        reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DOUBLE_PIPE     reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    ASSIGN          reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_PLUS         reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_MINUS        reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_TIMES        reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_DIV          reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_MODULO       reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_AND_BIT      reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_OR_BIT       reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_XOR_BIT      reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_LEFT         reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_RIGHT        reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    COMMA           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    COLON           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RBRACKET        reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RANGE           reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RPAREN          reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    SEMICOLON       reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RBRACE          reduce using rule 271 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)


state 686

    (284) TypeidExpression -> TYPEID LPAREN Type RPAREN .

    POWER           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DOT             reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    PLUS_PLUS       reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    MINUS_MINUS     reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LPAREN          reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    TIMES           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DIV             reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    MODULO          reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    PLUS            reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    MINUS           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LEFT_SHIFT      reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RIGHT_SHIFT     reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    IS_EQ           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    NOT_EQ          reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LESS            reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    GREATER_EQ      reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    GREATER         reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LESS_EQ         reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    AMPERSAND       reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    CARET           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    PIPE            reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    QUESTION        reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DOUBLE_PIPE     reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    ASSIGN          reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_PLUS         reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_MINUS        reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_TIMES        reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_DIV          reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_MODULO       reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_AND_BIT      reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_OR_BIT       reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_XOR_BIT      reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_LEFT         reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_RIGHT        reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    COMMA           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RPAREN          reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    COLON           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    SEMICOLON       reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RBRACKET        reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RANGE           reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RBRACE          reduce using rule 284 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)


state 687

    (285) TypeidExpression -> TYPEID LPAREN Expression RPAREN .

    POWER           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DOT             reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    PLUS_PLUS       reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    MINUS_MINUS     reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    TIMES           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DIV             reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    MODULO          reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    PLUS            reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    MINUS           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LEFT_SHIFT      reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    IS_EQ           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    NOT_EQ          reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LESS            reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    GREATER_EQ      reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    GREATER         reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LESS_EQ         reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    CARET           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    PIPE            reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    ASSIGN          reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_PLUS         reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_MINUS        reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_TIMES        reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_DIV          reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_MODULO       reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_AND_BIT      reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_OR_BIT       reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_LEFT         reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_RIGHT        reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    COMMA           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    COLON           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RANGE           reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 285 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)


state 688

    (245) PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .

    POWER           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    PLUS_PLUS       reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    MINUS_MINUS     reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LPAREN          reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    TIMES           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    MODULO          reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    PLUS            reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    MINUS           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LEFT_SHIFT      reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RIGHT_SHIFT     reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    IS_EQ           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    NOT_EQ          reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LESS            reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    GREATER_EQ      reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    GREATER         reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LESS_EQ         reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    AMPERSAND       reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    PIPE            reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DOUBLE_PIPE     reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    ASSIGN          reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_PLUS         reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_MINUS        reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_TIMES        reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_DIV          reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_MODULO       reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_AND_BIT      reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_OR_BIT       reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_XOR_BIT      reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_LEFT         reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_RIGHT        reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RBRACE          reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RBRACKET        reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RANGE           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    SEMICOLON       reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 245 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)


state 689

    (223) NewExpression -> NEW AllocatorArguments_opt . Type
    (225) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LPAREN ArgumentList_opt RPAREN
    (419) NewAnonClassExpression -> NEW AllocatorArguments_opt . CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (75) Type -> . TypeCtors_opt BasicType BasicType2_opt
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CLASS           shift and go to state 589
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtors                      shift and go to state 134
    TypeCtor                       shift and go to state 135
    TypeCtors_opt                  shift and go to state 137
    Type                           shift and go to state 753
    empty                          shift and go to state 142

state 690

    (225) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET . AssignExpression RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    CastExpression                 shift and go to state 232
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    PrimaryExpression              shift and go to state 217
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 754

state 691

    (226) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN . ArgumentList_opt RPAREN
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    CastExpression                 shift and go to state 232
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 382
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    PrimaryExpression              shift and go to state 217
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 755
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 692

    (421) ClassArguments_opt -> ClassArguments .

    DOT             reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    BOOL            reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    SHORT           reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    USHORT          reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    INT             reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    UINT            reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    LONG            reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    ULONG           reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    CHAR            reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    FLOAT           reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    VOID            reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    IDENTIFIER      reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    TYPEOF          reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    CONST           reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    IMMUTABLE       reduce using rule 421 (ClassArguments_opt -> ClassArguments .)
    LBRACE          reduce using rule 421 (ClassArguments_opt -> ClassArguments .)


state 693

    (419) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt . SuperClass_opt Interfaces_opt AggregateBody
    (423) SuperClass_opt -> . SuperClass
    (424) SuperClass_opt -> . empty
    (410) SuperClass -> . BasicType
    (485) empty -> .
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LBRACE          reduce using rule 485 (empty -> .)
    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    TypeCtor                       shift and go to state 42
    BasicType                      shift and go to state 757
    BasicTypeX                     shift and go to state 40
    SuperClass                     shift and go to state 756
    IdentifierList                 shift and go to state 34
    SuperClass_opt                 shift and go to state 759
    empty                          shift and go to state 758
    Typeof                         shift and go to state 44

state 694

    (420) ClassArguments -> LPAREN . ArgumentList_opt RPAREN
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 382
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 760
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 695

    (422) ClassArguments_opt -> empty .

    DOT             reduce using rule 422 (ClassArguments_opt -> empty .)
    BOOL            reduce using rule 422 (ClassArguments_opt -> empty .)
    SHORT           reduce using rule 422 (ClassArguments_opt -> empty .)
    USHORT          reduce using rule 422 (ClassArguments_opt -> empty .)
    INT             reduce using rule 422 (ClassArguments_opt -> empty .)
    UINT            reduce using rule 422 (ClassArguments_opt -> empty .)
    LONG            reduce using rule 422 (ClassArguments_opt -> empty .)
    ULONG           reduce using rule 422 (ClassArguments_opt -> empty .)
    CHAR            reduce using rule 422 (ClassArguments_opt -> empty .)
    FLOAT           reduce using rule 422 (ClassArguments_opt -> empty .)
    VOID            reduce using rule 422 (ClassArguments_opt -> empty .)
    IDENTIFIER      reduce using rule 422 (ClassArguments_opt -> empty .)
    TYPEOF          reduce using rule 422 (ClassArguments_opt -> empty .)
    CONST           reduce using rule 422 (ClassArguments_opt -> empty .)
    IMMUTABLE       reduce using rule 422 (ClassArguments_opt -> empty .)
    LBRACE          reduce using rule 422 (ClassArguments_opt -> empty .)


state 696

    (228) AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .

    CLASS           reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    CONST           reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    IMMUTABLE       reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    BOOL            reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    SHORT           reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    USHORT          reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    INT             reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    UINT            reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    LONG            reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    ULONG           reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    CHAR            reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    FLOAT           reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    VOID            reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    IDENTIFIER      reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    TYPEOF          reduce using rule 228 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)


state 697

    (237) CastExpression -> CAST LPAREN TypeCtors_opt RPAREN . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 761
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 698

    (236) CastExpression -> CAST LPAREN Type RPAREN . UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    TypeCtor                       shift and go to state 258
    empty                          shift and go to state 142
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BodyStatement                  shift and go to state 225
    UnaryExpression                shift and go to state 762
    NewExpressionWithArgs          shift and go to state 228
    ParameterMemberAttributes      shift and go to state 202
    NewAnonClassExpression         shift and go to state 200

state 699

    (246) PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 763


state 700

    (264) PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .

    POWER           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LPAREN          reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    TIMES           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DIV             reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    MODULO          reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    PLUS            reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    MINUS           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    IS_EQ           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    NOT_EQ          reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LESS            reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    GREATER_EQ      reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    GREATER         reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LESS_EQ         reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    AMPERSAND       reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    CARET           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    PIPE            reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    QUESTION        reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    ASSIGN          reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_PLUS         reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_MINUS        reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_TIMES        reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_DIV          reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_MODULO       reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_LEFT         reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RBRACKET        reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RANGE           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    COMMA           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RPAREN          reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    SEMICOLON       reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RBRACE          reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    COLON           reduce using rule 264 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)


state 701

    (282) MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .

    POWER           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOT             reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LPAREN          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    TIMES           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DIV             reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MODULO          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS            reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    IS_EQ           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    NOT_EQ          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS            reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER_EQ      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS_EQ         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    AMPERSAND       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    CARET           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PIPE            reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    QUESTION        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    ASSIGN          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_PLUS         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MINUS        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_TIMES        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_DIV          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MODULO       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_LEFT         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    COMMA           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RPAREN          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    SEMICOLON       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RBRACKET        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RANGE           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RBRACE          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    COLON           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)


state 702

    (219) UnaryExpression -> LPAREN Type RPAREN DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 764


state 703

    (106) BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .

    TIMES           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LBRACKET        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    FUNCTION        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LPAREN          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LBRACE          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RPAREN          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    COMMA           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    BODY            reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    POWER           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DOT             reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DIV             reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    MODULO          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    PLUS            reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    MINUS           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    IS_EQ           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    NOT_EQ          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LESS            reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    GREATER         reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LESS_EQ         reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    AMPERSAND       reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    CARET           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    PIPE            reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    QUESTION        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_DIV          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RBRACKET        reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RANGE           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RBRACE          reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    COLON           reduce using rule 106 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)


state 704

    (74) AltFuncDeclaratorSuffix -> Parameters . MemberFunctionAttributes_opt
    (473) MemberFunctionAttributes_opt -> . MemberFunctionAttributes
    (474) MemberFunctionAttributes_opt -> . empty
    (471) MemberFunctionAttributes -> . MemberFunctionAttribute
    (472) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (485) empty -> .
    (475) MemberFunctionAttribute -> . CONST
    (476) MemberFunctionAttribute -> . IMMUTABLE
    (477) MemberFunctionAttribute -> . RETURN

    ASSIGN          reduce using rule 485 (empty -> .)
    COMMA           reduce using rule 485 (empty -> .)
    SEMICOLON       reduce using rule 485 (empty -> .)
    RPAREN          reduce using rule 485 (empty -> .)
    ELLIPSIS        reduce using rule 485 (empty -> .)
    CONST           shift and go to state 164
    IMMUTABLE       shift and go to state 168
    RETURN          shift and go to state 163

    MemberFunctionAttributes       shift and go to state 167
    MemberFunctionAttributes_opt   shift and go to state 765
    empty                          shift and go to state 169
    MemberFunctionAttribute        shift and go to state 166

state 705

    (63) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .

    SEMICOLON       reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    COMMA           reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    ASSIGN          reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    RPAREN          reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    ELLIPSIS        reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)


state 706

    (62) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .

    SEMICOLON       reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    COMMA           reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    ASSIGN          reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    RPAREN          reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    ELLIPSIS        reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)


state 707

    (65) AltDeclaratorX -> BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix .

    RPAREN          reduce using rule 65 (AltDeclaratorX -> BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix .)


state 708

    (73) AltDeclaratorSuffix -> LBRACKET Type RBRACKET .

    LBRACKET        reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    ASSIGN          reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    COMMA           reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    SEMICOLON       reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    RPAREN          reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    ELLIPSIS        reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)


state 709

    (72) AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .

    LBRACKET        reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    COMMA           reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    RPAREN          reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)


state 710

    (48) DeclaratorIdentifierList -> DeclaratorIdentifier COMMA DeclaratorIdentifierList .

    SEMICOLON       reduce using rule 48 (DeclaratorIdentifierList -> DeclaratorIdentifier COMMA DeclaratorIdentifierList .)


state 711

    (55) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .
    (56) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes . ASSIGN Initializer

    COMMA           reduce using rule 55 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 55 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    ASSIGN          shift and go to state 766


state 712

    (52) VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer .

    COMMA           reduce using rule 52 (VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer .)
    SEMICOLON       reduce using rule 52 (VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer .)


state 713

    (53) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt .
    (54) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt . ASSIGN Initializer

    COMMA           reduce using rule 53 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt .)
    SEMICOLON       reduce using rule 53 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt .)
    ASSIGN          shift and go to state 767


state 714

    (70) AltDeclaratorSuffixes_opt -> empty .

    ASSIGN          reduce using rule 70 (AltDeclaratorSuffixes_opt -> empty .)
    COMMA           reduce using rule 70 (AltDeclaratorSuffixes_opt -> empty .)
    SEMICOLON       reduce using rule 70 (AltDeclaratorSuffixes_opt -> empty .)


state 715

    (69) AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .

    ASSIGN          reduce using rule 69 (AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .)
    COMMA           reduce using rule 69 (AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 69 (AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .)


state 716

    (111) IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .

    TIMES           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LBRACKET        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    FUNCTION        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RPAREN          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    IDENTIFIER      reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LPAREN          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    COMMA           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LBRACE          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    SEMICOLON       reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    ELLIPSIS        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    BODY            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    POWER           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DOT             reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DIV             reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    MODULO          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    PLUS            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    MINUS           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    IS_EQ           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    NOT_EQ          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LESS            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    GREATER_EQ      reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    GREATER         reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LESS_EQ         reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    AMPERSAND       reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    CARET           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    PIPE            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    QUESTION        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    ASSIGN          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_PLUS         reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_MINUS        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_TIMES        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_DIV          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_MODULO       reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_LEFT         reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RBRACKET        reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RANGE           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RBRACE          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    COLON           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    BOOL            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    SHORT           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    USHORT          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    INT             reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    UINT            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LONG            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    ULONG           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    CHAR            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    FLOAT           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    VOID            reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    TYPEOF          reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    CONST           reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    IMMUTABLE       reduce using rule 111 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)


state 717

    (33) MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    NEW             reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DELETE          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ALIAS           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    MIXIN           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    STATIC          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FINAL           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    AUTO            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CONST           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMMUTABLE       reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    RETURN          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ENUM            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CLASS           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UNION           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DOT             reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BOOL            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    SHORT           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    USHORT          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    INT             reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UINT            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LONG            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ULONG           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CHAR            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    VOID            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)


state 718

    (394) WithStatement -> WITH LPAREN Symbol RPAREN . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 768
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 719

    (482) Symbol -> DOT SymbolTail .

    RPAREN          reduce using rule 482 (Symbol -> DOT SymbolTail .)


state 720

    (248) PrimaryExpression -> DOT IDENTIFIER .
    (483) SymbolTail -> IDENTIFIER .
    (484) SymbolTail -> IDENTIFIER . DOT SymbolTail

  ! reduce/reduce conflict for RPAREN resolved using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
    POWER           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    TIMES           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DIV             reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    MODULO          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS            reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    IS_EQ           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS            reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    CARET           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    PIPE            reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    QUESTION        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    COMMA           reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    RPAREN          reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .)
    DOT             shift and go to state 722

  ! DOT             [ reduce using rule 248 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 483 (SymbolTail -> IDENTIFIER .) ]


state 721

    (393) WithStatement -> WITH LPAREN Expression RPAREN . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 769
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 722

    (484) SymbolTail -> IDENTIFIER DOT . SymbolTail
    (483) SymbolTail -> . IDENTIFIER
    (484) SymbolTail -> . IDENTIFIER DOT SymbolTail

    IDENTIFIER      shift and go to state 771

    SymbolTail                     shift and go to state 770

state 723

    (392) GotoStatement -> GOTO CASE Expression SEMICOLON .

    SEMICOLON       reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CASE            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DEFAULT         reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LBRACE          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IF              reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    WHILE           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DO              reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FOR             reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    SWITCH          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FINAL           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CONTINUE        reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    BREAK           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    RETURN          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    GOTO            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    WITH            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    MIXIN           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IMPORT          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    STATIC          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LPAREN          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FOREACH         reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ENUM            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    EXTERN          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    AUTO            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CONST           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IMMUTABLE       reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    UAMPERSAND      reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TIMES           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    UMINUS          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    UPLUS           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    EXCLAMATION     reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TILDE           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CAST            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DOT             reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    THIS            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    NULL            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TRUE            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FALSE           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DOLLAR          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    INUMBER         reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DNUMBER         reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LIT_CHAR        reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LIT_STR         reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LBRACKET        reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FUNCTION        reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    NEW             reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    BOOL            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    SHORT           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    USHORT          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    INT             reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    UINT            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LONG            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ULONG           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CHAR            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FLOAT           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    VOID            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TYPEOF          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TYPEID          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    BODY            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ALIAS           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CLASS           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    UNION           reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    RBRACE          reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ELSE            reduce using rule 392 (GotoStatement -> GOTO CASE Expression SEMICOLON .)


state 724

    (354) ForeachTypeList -> ForeachType COMMA . ForeachTypeList
    (353) ForeachTypeList -> . ForeachType
    (354) ForeachTypeList -> . ForeachType COMMA ForeachTypeList
    (355) ForeachType -> . ForeachTypeAttributes_opt BasicType Declarator
    (356) ForeachType -> . ForeachTypeAttributes_opt IDENTIFIER
    (357) ForeachType -> . ForeachTypeAttributes_opt ALIAS IDENTIFIER
    (358) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (359) ForeachTypeAttributes_opt -> . empty
    (360) ForeachTypeAttributes -> . ForeachTypeAttribute
    (361) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (485) empty -> .
    (362) ForeachTypeAttribute -> . TypeCtor
    (363) ForeachTypeAttribute -> . ENUM
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      reduce using rule 485 (empty -> .)
    ALIAS           reduce using rule 485 (empty -> .)
    DOT             reduce using rule 485 (empty -> .)
    BOOL            reduce using rule 485 (empty -> .)
    SHORT           reduce using rule 485 (empty -> .)
    USHORT          reduce using rule 485 (empty -> .)
    INT             reduce using rule 485 (empty -> .)
    UINT            reduce using rule 485 (empty -> .)
    LONG            reduce using rule 485 (empty -> .)
    ULONG           reduce using rule 485 (empty -> .)
    CHAR            reduce using rule 485 (empty -> .)
    FLOAT           reduce using rule 485 (empty -> .)
    VOID            reduce using rule 485 (empty -> .)
    TYPEOF          reduce using rule 485 (empty -> .)
    ENUM            shift and go to state 532
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    ForeachType                    shift and go to state 638
    TypeCtor                       shift and go to state 639
    ForeachTypeAttributes_opt      shift and go to state 535
    ForeachTypeAttribute           shift and go to state 530
    ForeachTypeAttributes          shift and go to state 536
    ForeachTypeList                shift and go to state 772
    empty                          shift and go to state 641

state 725

    (349) AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON . ForeachAggregate RPAREN
    (364) ForeachAggregate -> . Expression
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    FunctionLiteralBody            shift and go to state 233
    CmpExpression                  shift and go to state 245
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 773
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    ForeachAggregate               shift and go to state 774
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 726

    (381) FinalSwitchStatement -> FINAL SWITCH LPAREN Expression . RPAREN ScopeStatement

    RPAREN          shift and go to state 775


state 727

    (370) CaseStatement -> CASE ArgumentList COLON ScopeStatementList .

    SEMICOLON       reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    CASE            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    DEFAULT         reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    LBRACE          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    IDENTIFIER      reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    IF              reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    WHILE           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    DO              reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    FOR             reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    SWITCH          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    FINAL           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    CONTINUE        reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    BREAK           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    RETURN          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    GOTO            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    WITH            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    MIXIN           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    IMPORT          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    STATIC          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    LPAREN          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    FOREACH         reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    FOREACH_REVERSE reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    ENUM            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    EXTERN          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    AUTO            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    CONST           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    IMMUTABLE       reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    UAMPERSAND      reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    PLUS_PLUS       reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    MINUS_MINUS     reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    TIMES           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    UMINUS          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    UPLUS           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    EXCLAMATION     reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    TILDE           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    CAST            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    DOT             reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    THIS            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    NULL            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    TRUE            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    FALSE           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    DOLLAR          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    INUMBER         reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    DNUMBER         reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    LIT_CHAR        reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    LIT_STR         reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    LBRACKET        reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    FUNCTION        reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    NEW             reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    BOOL            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    SHORT           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    USHORT          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    INT             reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    UINT            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    LONG            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    ULONG           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    CHAR            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    FLOAT           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    VOID            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    TYPEOF          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    TYPEID          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    BODY            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    ALIAS           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    CLASS           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    UNION           reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    RBRACE          reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)
    ELSE            reduce using rule 370 (CaseStatement -> CASE ArgumentList COLON ScopeStatementList .)


state 728

    (371) CaseRangeStatement -> CASE FirstExp COLON RANGE . LastExp COLON ScopeStatementList
    (373) LastExp -> . AssignExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    LastExp                        shift and go to state 776
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 777

state 729

    (344) Test_opt -> Test .

    SEMICOLON       reduce using rule 344 (Test_opt -> Test .)


state 730

    (345) Test_opt -> empty .
    (81) TypeCtors_opt -> empty .

    SEMICOLON       reduce using rule 345 (Test_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)


state 731

    (343) Test -> Expression .

    SEMICOLON       reduce using rule 343 (Test -> Expression .)


state 732

    (340) ForStatement -> FOR LPAREN Initialize Test_opt . SEMICOLON Increment_opt RPAREN ScopeStatement

    SEMICOLON       shift and go to state 778


state 733

    (395) MixinStatement -> MIXIN LPAREN AssignExpression RPAREN . SEMICOLON
    (282) MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 779
    POWER           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOT             reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LPAREN          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    TIMES           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DIV             reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MODULO          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS            reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    IS_EQ           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    NOT_EQ          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS            reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER_EQ      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS_EQ         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    AMPERSAND       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    CARET           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PIPE            reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    QUESTION        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    ASSIGN          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_PLUS         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MINUS        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_TIMES        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_DIV          reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MODULO       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_LEFT         reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    COMMA           reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)

  ! SEMICOLON       [ reduce using rule 282 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .) ]


state 734

    (377) StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .

    SEMICOLON       reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CASE            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DEFAULT         reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LBRACE          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IF              reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    WHILE           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DO              reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FOR             reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    SWITCH          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FINAL           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CONTINUE        reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    BREAK           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    RETURN          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    GOTO            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    WITH            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    MIXIN           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IMPORT          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    STATIC          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LPAREN          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FOREACH         reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ENUM            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    EXTERN          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    AUTO            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CONST           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    UAMPERSAND      reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TIMES           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    UMINUS          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    UPLUS           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TILDE           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CAST            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DOT             reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    THIS            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    NULL            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TRUE            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FALSE           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DOLLAR          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    INUMBER         reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DNUMBER         reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LIT_STR         reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LBRACKET        reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FUNCTION        reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    NEW             reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    BOOL            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    SHORT           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    USHORT          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    INT             reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    UINT            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LONG            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ULONG           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CHAR            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FLOAT           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    VOID            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TYPEOF          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TYPEID          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    BODY            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ALIAS           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CLASS           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    UNION           reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    RBRACE          reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ELSE            reduce using rule 377 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)


state 735

    (338) WhileStatement -> WHILE LPAREN Expression RPAREN . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 780
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 736

    (369) SwitchStatement -> SWITCH LPAREN Expression RPAREN . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 781
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 737

    (339) DoStatement -> DO ScopeStatement WHILE LPAREN . Expression RPAREN
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 782
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 738

    (365) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression . RANGE UprExpression RPAREN

    RANGE           shift and go to state 783


state 739

    (366) LwrExpression -> Expression .

    RANGE           reduce using rule 366 (LwrExpression -> Expression .)


state 740

    (355) ForeachType -> ForeachTypeAttributes_opt BasicType Declarator .

    COMMA           reduce using rule 355 (ForeachType -> ForeachTypeAttributes_opt BasicType Declarator .)
    SEMICOLON       reduce using rule 355 (ForeachType -> ForeachTypeAttributes_opt BasicType Declarator .)


state 741

    (357) ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER .

    COMMA           reduce using rule 357 (ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER .)
    SEMICOLON       reduce using rule 357 (ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER .)


state 742

    (330) IfStatement -> IF LPAREN IfCondition RPAREN . ThenStatement
    (331) IfStatement -> IF LPAREN IfCondition RPAREN . ThenStatement ELSE ElseStatement
    (336) ThenStatement -> . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 784
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    ThenStatement                  shift and go to state 785
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 743

    (334) IfCondition -> TypeCtors IDENTIFIER . ASSIGN Expression

    ASSIGN          shift and go to state 786


state 744

    (335) IfCondition -> TypeCtors_opt BasicType . Declarator ASSIGN Expression
    (246) PostfixExpression -> TypeCtors_opt BasicType . LPAREN ArgumentList_opt RPAREN
    (57) Declarator -> . VarDeclarator
    (58) Declarator -> . AltDeclarator
    (59) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (60) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (61) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (101) BasicType2_opt -> . BasicType2
    (102) BasicType2_opt -> . empty
    (100) BasicType2 -> . BasicType2X BasicType2_opt
    (485) empty -> .
    (103) BasicType2X -> . TIMES
    (104) BasicType2X -> . LBRACKET RBRACKET
    (105) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (106) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (107) BasicType2X -> . LBRACKET Type RBRACKET
    (108) BasicType2X -> . FUNCTION Parameters

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 593
    IDENTIFIER      reduce using rule 485 (empty -> .)
    TIMES           shift and go to state 91
    LBRACKET        shift and go to state 83
    FUNCTION        shift and go to state 90

  ! LPAREN          [ reduce using rule 485 (empty -> .) ]

    Declarator                     shift and go to state 787
    BasicType2_opt                 shift and go to state 542
    VarDeclarator                  shift and go to state 541
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 543
    empty                          shift and go to state 89
    BasicType2                     shift and go to state 93

state 745

    (333) IfCondition -> AUTO IDENTIFIER . ASSIGN Expression

    ASSIGN          shift and go to state 788


state 746

    (460) Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression .

    COMMA           reduce using rule 460 (Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression .)
    RPAREN          reduce using rule 460 (Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression .)


state 747

    (129) ArrayMemberInitializations -> ArrayMemberInitialization COMMA ArrayMemberInitializations .

    RBRACKET        reduce using rule 129 (ArrayMemberInitializations -> ArrayMemberInitialization COMMA ArrayMemberInitializations .)


state 748

    (133) ArrayMemberInitialization -> AssignExpression . COLON NonVoidInitializer
    (125) ExpInitializer -> AssignExpression .

    COLON           shift and go to state 680
    COMMA           reduce using rule 125 (ExpInitializer -> AssignExpression .)
    RBRACKET        reduce using rule 125 (ExpInitializer -> AssignExpression .)


state 749

    (133) ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer .

    COMMA           reduce using rule 133 (ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer .)
    RBRACKET        reduce using rule 133 (ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer .)


state 750

    (181) ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .

    ASSIGN          reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_PLUS         reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_MINUS        reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_TIMES        reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_DIV          reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_MODULO       reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_AND_BIT      reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_OR_BIT       reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_XOR_BIT      reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_LEFT         reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_RIGHT        reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    COMMA           reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RPAREN          reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    COLON           reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    SEMICOLON       reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RBRACKET        reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RANGE           reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RBRACE          reduce using rule 181 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)


state 751

    (266) PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN . ArgumentList_opt RPAREN
    (231) ArgumentList_opt -> . ArgumentList
    (232) ArgumentList_opt -> . empty
    (233) ArgumentList -> . AssignExpression
    (234) ArgumentList -> . AssignExpression COMMA
    (235) ArgumentList -> . AssignExpression COMMA ArgumentList
    (485) empty -> .
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ArgumentList                   shift and go to state 380
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 382
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    TypeCtor                       shift and go to state 258
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ArgumentList_opt               shift and go to state 789
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 383

state 752

    (265) PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 790


state 753

    (223) NewExpression -> NEW AllocatorArguments_opt Type .
    (225) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LPAREN ArgumentList_opt RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    POWER           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DOT             reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    PLUS_PLUS       reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    MINUS_MINUS     reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    TIMES           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DIV             reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    MODULO          reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    PLUS            reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    MINUS           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LEFT_SHIFT      reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RIGHT_SHIFT     reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    IS_EQ           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    NOT_EQ          reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LESS            reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    GREATER_EQ      reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    GREATER         reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LESS_EQ         reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    AMPERSAND       reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    CARET           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    PIPE            reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DOUBLE_AMPERSAND reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    QUESTION        reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DOUBLE_PIPE     reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    ASSIGN          reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_PLUS         reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_MINUS        reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_TIMES        reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_DIV          reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_MODULO       reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_AND_BIT      reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_OR_BIT       reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_XOR_BIT      reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_LEFT         reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_RIGHT        reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RBRACKET        reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RANGE           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    COMMA           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RPAREN          reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    SEMICOLON       reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RBRACE          reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    COLON           reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LBRACKET        shift and go to state 690
    LPAREN          shift and go to state 691

  ! LPAREN          [ reduce using rule 223 (NewExpression -> NEW AllocatorArguments_opt Type .) ]


state 754

    (225) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression . RBRACKET

    RBRACKET        shift and go to state 791


state 755

    (226) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 792


state 756

    (423) SuperClass_opt -> SuperClass .

    DOT             reduce using rule 423 (SuperClass_opt -> SuperClass .)
    BOOL            reduce using rule 423 (SuperClass_opt -> SuperClass .)
    SHORT           reduce using rule 423 (SuperClass_opt -> SuperClass .)
    USHORT          reduce using rule 423 (SuperClass_opt -> SuperClass .)
    INT             reduce using rule 423 (SuperClass_opt -> SuperClass .)
    UINT            reduce using rule 423 (SuperClass_opt -> SuperClass .)
    LONG            reduce using rule 423 (SuperClass_opt -> SuperClass .)
    ULONG           reduce using rule 423 (SuperClass_opt -> SuperClass .)
    CHAR            reduce using rule 423 (SuperClass_opt -> SuperClass .)
    FLOAT           reduce using rule 423 (SuperClass_opt -> SuperClass .)
    VOID            reduce using rule 423 (SuperClass_opt -> SuperClass .)
    IDENTIFIER      reduce using rule 423 (SuperClass_opt -> SuperClass .)
    TYPEOF          reduce using rule 423 (SuperClass_opt -> SuperClass .)
    CONST           reduce using rule 423 (SuperClass_opt -> SuperClass .)
    IMMUTABLE       reduce using rule 423 (SuperClass_opt -> SuperClass .)
    LBRACE          reduce using rule 423 (SuperClass_opt -> SuperClass .)


state 757

    (410) SuperClass -> BasicType .

    DOT             reduce using rule 410 (SuperClass -> BasicType .)
    BOOL            reduce using rule 410 (SuperClass -> BasicType .)
    SHORT           reduce using rule 410 (SuperClass -> BasicType .)
    USHORT          reduce using rule 410 (SuperClass -> BasicType .)
    INT             reduce using rule 410 (SuperClass -> BasicType .)
    UINT            reduce using rule 410 (SuperClass -> BasicType .)
    LONG            reduce using rule 410 (SuperClass -> BasicType .)
    ULONG           reduce using rule 410 (SuperClass -> BasicType .)
    CHAR            reduce using rule 410 (SuperClass -> BasicType .)
    FLOAT           reduce using rule 410 (SuperClass -> BasicType .)
    VOID            reduce using rule 410 (SuperClass -> BasicType .)
    IDENTIFIER      reduce using rule 410 (SuperClass -> BasicType .)
    TYPEOF          reduce using rule 410 (SuperClass -> BasicType .)
    CONST           reduce using rule 410 (SuperClass -> BasicType .)
    IMMUTABLE       reduce using rule 410 (SuperClass -> BasicType .)
    LBRACE          reduce using rule 410 (SuperClass -> BasicType .)


state 758

    (424) SuperClass_opt -> empty .

    DOT             reduce using rule 424 (SuperClass_opt -> empty .)
    BOOL            reduce using rule 424 (SuperClass_opt -> empty .)
    SHORT           reduce using rule 424 (SuperClass_opt -> empty .)
    USHORT          reduce using rule 424 (SuperClass_opt -> empty .)
    INT             reduce using rule 424 (SuperClass_opt -> empty .)
    UINT            reduce using rule 424 (SuperClass_opt -> empty .)
    LONG            reduce using rule 424 (SuperClass_opt -> empty .)
    ULONG           reduce using rule 424 (SuperClass_opt -> empty .)
    CHAR            reduce using rule 424 (SuperClass_opt -> empty .)
    FLOAT           reduce using rule 424 (SuperClass_opt -> empty .)
    VOID            reduce using rule 424 (SuperClass_opt -> empty .)
    IDENTIFIER      reduce using rule 424 (SuperClass_opt -> empty .)
    TYPEOF          reduce using rule 424 (SuperClass_opt -> empty .)
    CONST           reduce using rule 424 (SuperClass_opt -> empty .)
    IMMUTABLE       reduce using rule 424 (SuperClass_opt -> empty .)
    LBRACE          reduce using rule 424 (SuperClass_opt -> empty .)


state 759

    (419) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt . Interfaces_opt AggregateBody
    (425) Interfaces_opt -> . Interfaces
    (426) Interfaces_opt -> . empty
    (411) Interfaces -> . Interface
    (412) Interfaces -> . Interface COMMA Interfaces
    (485) empty -> .
    (413) Interface -> . BasicType
    (84) BasicType -> . BasicTypeX
    (85) BasicType -> . DOT IdentifierList
    (86) BasicType -> . IdentifierList
    (87) BasicType -> . Typeof
    (88) BasicType -> . Typeof DOT IdentifierList
    (89) BasicType -> . TypeCtor LPAREN Type RPAREN
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (109) IdentifierList -> . IDENTIFIER
    (110) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (111) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE

    LBRACE          reduce using rule 485 (empty -> .)
    DOT             shift and go to state 36
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 41
    TYPEOF          shift and go to state 50
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45

    Interfaces_opt                 shift and go to state 793
    Interfaces                     shift and go to state 794
    BasicType                      shift and go to state 619
    BasicTypeX                     shift and go to state 40
    Typeof                         shift and go to state 44
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 271
    TypeCtor                       shift and go to state 42
    empty                          shift and go to state 795

state 760

    (420) ClassArguments -> LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 796


state 761

    (237) CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .

    TIMES           reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    DIV             reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    MODULO          reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    PLUS            reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    MINUS           reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    LEFT_SHIFT      reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    IS_EQ           reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    NOT_EQ          reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    LESS            reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    GREATER_EQ      reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    GREATER         reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    LESS_EQ         reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    AMPERSAND       reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    CARET           reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    PIPE            reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    QUESTION        reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    ASSIGN          reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_PLUS         reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_MINUS        reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_TIMES        reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_DIV          reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_MODULO       reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_AND_BIT      reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_OR_BIT       reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_LEFT         reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    EQ_RIGHT        reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    RBRACKET        reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    RANGE           reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    COMMA           reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    RPAREN          reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    SEMICOLON       reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    RBRACE          reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)
    COLON           reduce using rule 237 (CastExpression -> CAST LPAREN TypeCtors_opt RPAREN UnaryExpression .)


state 762

    (236) CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .

    TIMES           reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    DIV             reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    MODULO          reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    PLUS            reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    MINUS           reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    LEFT_SHIFT      reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    IS_EQ           reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    NOT_EQ          reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    LESS            reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    GREATER_EQ      reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    GREATER         reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    LESS_EQ         reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    AMPERSAND       reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    CARET           reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    PIPE            reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    QUESTION        reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    ASSIGN          reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_PLUS         reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_MINUS        reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_TIMES        reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_DIV          reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_MODULO       reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_AND_BIT      reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_OR_BIT       reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_LEFT         reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_RIGHT        reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RBRACKET        reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RANGE           reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    COMMA           reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RPAREN          reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    SEMICOLON       reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RBRACE          reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    COLON           reduce using rule 236 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)


state 763

    (246) PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .

    POWER           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    LPAREN          reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    TIMES           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    DIV             reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    MODULO          reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    PLUS            reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    MINUS           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    IS_EQ           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    NOT_EQ          reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    LESS            reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    GREATER_EQ      reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    GREATER         reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    LESS_EQ         reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    AMPERSAND       reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    CARET           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    PIPE            reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    QUESTION        reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    ASSIGN          reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_PLUS         reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_MINUS        reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_TIMES        reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_DIV          reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_MODULO       reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_LEFT         reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    RPAREN          reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    COMMA           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    RBRACE          reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    RBRACKET        reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    RANGE           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    SEMICOLON       reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)
    COLON           reduce using rule 246 (PostfixExpression -> TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN .)


state 764

    (219) UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .

    TIMES           reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    DIV             reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    MODULO          reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    PLUS            reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    MINUS           reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    IS_EQ           reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    LESS            reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    GREATER         reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    CARET           reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    PIPE            reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    QUESTION        reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    ASSIGN          reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    COMMA           reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RPAREN          reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RBRACKET        reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RANGE           reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RBRACE          reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    COLON           reduce using rule 219 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)


state 765

    (74) AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .

    ASSIGN          reduce using rule 74 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    COMMA           reduce using rule 74 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    SEMICOLON       reduce using rule 74 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    RPAREN          reduce using rule 74 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    ELLIPSIS        reduce using rule 74 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)


state 766

    (56) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN . Initializer
    (121) Initializer -> . VoidInitializer
    (122) Initializer -> . NonVoidInitializer
    (149) VoidInitializer -> . VOID
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    VOID            shift and go to state 372
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    Initializer                    shift and go to state 797
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    TypeidExpression               shift and go to state 234
    NonVoidInitializer             shift and go to state 374
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    ArrayInitializer               shift and go to state 375
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    VoidInitializer                shift and go to state 376
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 379

state 767

    (54) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN . Initializer
    (121) Initializer -> . VoidInitializer
    (122) Initializer -> . NonVoidInitializer
    (149) VoidInitializer -> . VOID
    (123) NonVoidInitializer -> . ExpInitializer
    (124) NonVoidInitializer -> . ArrayInitializer
    (125) ExpInitializer -> . AssignExpression
    (126) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    VOID            shift and go to state 372
    LBRACKET        shift and go to state 373
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    PowExpression                  shift and go to state 204
    AndExpression                  shift and go to state 186
    XorExpression                  shift and go to state 237
    FunctionLiteralBody            shift and go to state 233
    Initializer                    shift and go to state 798
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    NonVoidInitializer             shift and go to state 374
    BasicTypeX                     shift and go to state 236
    BodyStatement                  shift and go to state 225
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    ArrayInitializer               shift and go to state 375
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    VoidInitializer                shift and go to state 376
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    TypeidExpression               shift and go to state 234
    ExpInitializer                 shift and go to state 378
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 379

state 768

    (394) WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .

    WHILE           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    SEMICOLON       reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CASE            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LBRACE          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IF              reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DO              reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FOR             reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    SWITCH          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FINAL           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    BREAK           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    RETURN          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    GOTO            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    WITH            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    MIXIN           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IMPORT          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    STATIC          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LPAREN          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FOREACH         reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ENUM            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    EXTERN          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    AUTO            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CONST           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    UAMPERSAND      reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TIMES           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    UMINUS          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    UPLUS           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TILDE           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CAST            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DOT             reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    THIS            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    NULL            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TRUE            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FALSE           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    INUMBER         reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    NEW             reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    BOOL            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    SHORT           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    USHORT          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    INT             reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    UINT            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LONG            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ULONG           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CHAR            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FLOAT           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    VOID            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TYPEID          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    BODY            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ALIAS           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CLASS           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    UNION           reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    RBRACE          reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ELSE            reduce using rule 394 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)


state 769

    (393) WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .

    WHILE           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    SEMICOLON       reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CASE            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LBRACE          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IF              reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DO              reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FOR             reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    SWITCH          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FINAL           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    BREAK           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    RETURN          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    GOTO            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    WITH            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    MIXIN           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IMPORT          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    STATIC          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LPAREN          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH         reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ENUM            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    EXTERN          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    AUTO            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CONST           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    UAMPERSAND      reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TIMES           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    UMINUS          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    UPLUS           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TILDE           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CAST            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DOT             reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    THIS            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    NULL            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TRUE            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FALSE           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    INUMBER         reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    NEW             reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    BOOL            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    SHORT           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    USHORT          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    INT             reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    UINT            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LONG            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ULONG           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CHAR            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FLOAT           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    VOID            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TYPEID          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    BODY            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ALIAS           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CLASS           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    UNION           reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    RBRACE          reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ELSE            reduce using rule 393 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)


state 770

    (484) SymbolTail -> IDENTIFIER DOT SymbolTail .

    RPAREN          reduce using rule 484 (SymbolTail -> IDENTIFIER DOT SymbolTail .)


state 771

    (483) SymbolTail -> IDENTIFIER .
    (484) SymbolTail -> IDENTIFIER . DOT SymbolTail

    RPAREN          reduce using rule 483 (SymbolTail -> IDENTIFIER .)
    DOT             shift and go to state 722


state 772

    (354) ForeachTypeList -> ForeachType COMMA ForeachTypeList .

    SEMICOLON       reduce using rule 354 (ForeachTypeList -> ForeachType COMMA ForeachTypeList .)


state 773

    (364) ForeachAggregate -> Expression .

    RPAREN          reduce using rule 364 (ForeachAggregate -> Expression .)


state 774

    (349) AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate . RPAREN

    RPAREN          shift and go to state 799


state 775

    (381) FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 800
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 776

    (371) CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp . COLON ScopeStatementList

    COLON           shift and go to state 801


state 777

    (373) LastExp -> AssignExpression .

    COLON           reduce using rule 373 (LastExp -> AssignExpression .)


state 778

    (340) ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON . Increment_opt RPAREN ScopeStatement
    (347) Increment_opt -> . Increment
    (348) Increment_opt -> . empty
    (346) Increment -> . Expression
    (485) empty -> .
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    RPAREN          reduce using rule 485 (empty -> .)
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    Increment_opt                  shift and go to state 802
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 803
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    BlockStatement                 shift and go to state 189
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 804
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    Increment                      shift and go to state 805
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 779

    (395) MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CASE            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IF              reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    WHILE           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DO              reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FOR             reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FINAL           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BREAK           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    RETURN          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    GOTO            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    WITH            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    MIXIN           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    STATIC          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FOREACH         reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FOREACH_REVERSE reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ENUM            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    AUTO            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CONST           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMMUTABLE       reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UAMPERSAND      reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PLUS_PLUS       reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    MINUS_MINUS     reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TIMES           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UMINUS          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UPLUS           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TILDE           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CAST            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DOT             reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    THIS            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    NULL            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TRUE            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FALSE           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DOLLAR          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    INUMBER         reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DNUMBER         reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LIT_CHAR        reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LIT_STR         reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    NEW             reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BOOL            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    SHORT           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    USHORT          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    INT             reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UINT            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LONG            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ULONG           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CHAR            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    VOID            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TYPEID          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BODY            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ALIAS           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CLASS           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UNION           reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ELSE            reduce using rule 395 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)


state 780

    (338) WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .

    SEMICOLON       reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    CASE            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    LBRACE          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    IF              reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    WHILE           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    DO              reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    FOR             reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    SWITCH          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    FINAL           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    BREAK           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    RETURN          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    GOTO            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    WITH            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    MIXIN           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    IMPORT          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    STATIC          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    LPAREN          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    FOREACH         reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    ENUM            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    EXTERN          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    AUTO            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    CONST           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    UAMPERSAND      reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    TIMES           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    UMINUS          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    UPLUS           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    TILDE           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    CAST            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    DOT             reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    THIS            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    NULL            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    TRUE            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    FALSE           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    INUMBER         reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    NEW             reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    BOOL            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    SHORT           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    USHORT          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    INT             reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    UINT            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    LONG            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    ULONG           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    CHAR            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    FLOAT           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    VOID            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    TYPEID          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    BODY            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    ALIAS           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    CLASS           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    UNION           reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    RBRACE          reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)
    ELSE            reduce using rule 338 (WhileStatement -> WHILE LPAREN Expression RPAREN ScopeStatement .)


state 781

    (369) SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .

    SEMICOLON       reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CASE            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LBRACE          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IF              reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    WHILE           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DO              reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOR             reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    SWITCH          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FINAL           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BREAK           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    RETURN          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    GOTO            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    WITH            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    MIXIN           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IMPORT          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    STATIC          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LPAREN          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH         reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ENUM            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    EXTERN          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    AUTO            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CONST           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UAMPERSAND      reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TIMES           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UMINUS          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UPLUS           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TILDE           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CAST            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DOT             reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    THIS            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    NULL            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TRUE            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FALSE           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    INUMBER         reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    NEW             reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BOOL            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    SHORT           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    USHORT          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    INT             reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UINT            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LONG            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ULONG           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CHAR            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FLOAT           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    VOID            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TYPEID          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BODY            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ALIAS           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CLASS           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UNION           reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    RBRACE          reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ELSE            reduce using rule 369 (SwitchStatement -> SWITCH LPAREN Expression RPAREN ScopeStatement .)


state 782

    (339) DoStatement -> DO ScopeStatement WHILE LPAREN Expression . RPAREN

    RPAREN          shift and go to state 806


state 783

    (365) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE . UprExpression RPAREN
    (367) UprExpression -> . Expression
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    UprExpression                  shift and go to state 807
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 808
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 784

    (336) ThenStatement -> ScopeStatement .

    SEMICOLON       reduce using rule 336 (ThenStatement -> ScopeStatement .)
    CASE            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    DEFAULT         reduce using rule 336 (ThenStatement -> ScopeStatement .)
    LBRACE          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    IDENTIFIER      reduce using rule 336 (ThenStatement -> ScopeStatement .)
    IF              reduce using rule 336 (ThenStatement -> ScopeStatement .)
    WHILE           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    DO              reduce using rule 336 (ThenStatement -> ScopeStatement .)
    FOR             reduce using rule 336 (ThenStatement -> ScopeStatement .)
    SWITCH          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    FINAL           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    CONTINUE        reduce using rule 336 (ThenStatement -> ScopeStatement .)
    BREAK           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    RETURN          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    GOTO            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    WITH            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    MIXIN           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    IMPORT          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    STATIC          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    LPAREN          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    FOREACH         reduce using rule 336 (ThenStatement -> ScopeStatement .)
    FOREACH_REVERSE reduce using rule 336 (ThenStatement -> ScopeStatement .)
    ENUM            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    EXTERN          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    AUTO            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    CONST           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    IMMUTABLE       reduce using rule 336 (ThenStatement -> ScopeStatement .)
    UAMPERSAND      reduce using rule 336 (ThenStatement -> ScopeStatement .)
    PLUS_PLUS       reduce using rule 336 (ThenStatement -> ScopeStatement .)
    MINUS_MINUS     reduce using rule 336 (ThenStatement -> ScopeStatement .)
    TIMES           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    UMINUS          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    UPLUS           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    EXCLAMATION     reduce using rule 336 (ThenStatement -> ScopeStatement .)
    TILDE           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    CAST            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    DOT             reduce using rule 336 (ThenStatement -> ScopeStatement .)
    THIS            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    NULL            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    TRUE            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    FALSE           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    DOLLAR          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    INUMBER         reduce using rule 336 (ThenStatement -> ScopeStatement .)
    DNUMBER         reduce using rule 336 (ThenStatement -> ScopeStatement .)
    LIT_CHAR        reduce using rule 336 (ThenStatement -> ScopeStatement .)
    LIT_STR         reduce using rule 336 (ThenStatement -> ScopeStatement .)
    LBRACKET        reduce using rule 336 (ThenStatement -> ScopeStatement .)
    FUNCTION        reduce using rule 336 (ThenStatement -> ScopeStatement .)
    NEW             reduce using rule 336 (ThenStatement -> ScopeStatement .)
    BOOL            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    SHORT           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    USHORT          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    INT             reduce using rule 336 (ThenStatement -> ScopeStatement .)
    UINT            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    LONG            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    ULONG           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    CHAR            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    FLOAT           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    VOID            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    TYPEOF          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    TYPEID          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    BODY            reduce using rule 336 (ThenStatement -> ScopeStatement .)
    ALIAS           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    CLASS           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    UNION           reduce using rule 336 (ThenStatement -> ScopeStatement .)
    RBRACE          reduce using rule 336 (ThenStatement -> ScopeStatement .)
    ELSE            reduce using rule 336 (ThenStatement -> ScopeStatement .)


state 785

    (330) IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .
    (331) IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement . ELSE ElseStatement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    CASE            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    DEFAULT         reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    LBRACE          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    IDENTIFIER      reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    IF              reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    WHILE           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    DO              reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    FOR             reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    SWITCH          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    FINAL           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    CONTINUE        reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    BREAK           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    RETURN          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    GOTO            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    WITH            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    MIXIN           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    IMPORT          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    STATIC          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    LPAREN          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    FOREACH         reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    FOREACH_REVERSE reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    ENUM            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    EXTERN          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    AUTO            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    CONST           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    IMMUTABLE       reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    UAMPERSAND      reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    PLUS_PLUS       reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    MINUS_MINUS     reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    TIMES           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    UMINUS          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    UPLUS           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    EXCLAMATION     reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    TILDE           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    CAST            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    DOT             reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    THIS            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    NULL            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    TRUE            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    FALSE           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    DOLLAR          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    INUMBER         reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    DNUMBER         reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    LIT_CHAR        reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    LIT_STR         reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    LBRACKET        reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    FUNCTION        reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    NEW             reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    BOOL            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    SHORT           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    USHORT          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    INT             reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    UINT            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    LONG            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    ULONG           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    CHAR            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    FLOAT           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    VOID            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    TYPEOF          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    TYPEID          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    BODY            reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    ALIAS           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    CLASS           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    UNION           reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    RBRACE          reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .)
    ELSE            shift and go to state 809

  ! ELSE            [ reduce using rule 330 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement .) ]


state 786

    (334) IfCondition -> TypeCtors IDENTIFIER ASSIGN . Expression
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    TypeCtors                      shift and go to state 134
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    LIT_STRPlus                    shift and go to state 239
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 810
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 787

    (335) IfCondition -> TypeCtors_opt BasicType Declarator . ASSIGN Expression

    ASSIGN          shift and go to state 811


state 788

    (333) IfCondition -> AUTO IDENTIFIER ASSIGN . Expression
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 812
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 789

    (266) PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 813


state 790

    (265) PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .

    POWER           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    DOT             reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    LPAREN          reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    TIMES           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    DIV             reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    MODULO          reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    PLUS            reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    MINUS           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    IS_EQ           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    LESS            reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    GREATER         reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    CARET           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    PIPE            reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    QUESTION        reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    ASSIGN          reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    RBRACKET        reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    RANGE           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    COMMA           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    RPAREN          reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    RBRACE          reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)
    COLON           reduce using rule 265 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN DOT IDENTIFIER .)


state 791

    (225) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .

    POWER           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DOT             reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LPAREN          reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    TIMES           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DIV             reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    MODULO          reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    PLUS            reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    MINUS           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    IS_EQ           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    NOT_EQ          reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LESS            reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    GREATER         reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LESS_EQ         reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    AMPERSAND       reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    CARET           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    PIPE            reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    QUESTION        reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_DIV          reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RBRACKET        reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RANGE           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    COMMA           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RPAREN          reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RBRACE          reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    COLON           reduce using rule 225 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)


state 792

    (226) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .

    POWER           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LPAREN          reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    TIMES           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DIV             reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    MODULO          reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    PLUS            reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    MINUS           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    IS_EQ           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    NOT_EQ          reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LESS            reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    GREATER_EQ      reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    GREATER         reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LESS_EQ         reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    AMPERSAND       reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    CARET           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    PIPE            reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    QUESTION        reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    ASSIGN          reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_PLUS         reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_MINUS        reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_TIMES        reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_DIV          reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_MODULO       reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_LEFT         reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RBRACKET        reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RANGE           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    COMMA           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RPAREN          reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    SEMICOLON       reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RBRACE          reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    COLON           reduce using rule 226 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)


state 793

    (419) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt . AggregateBody
    (402) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    LBRACE          shift and go to state 53

    AggregateBody                  shift and go to state 814

state 794

    (425) Interfaces_opt -> Interfaces .

    LBRACE          reduce using rule 425 (Interfaces_opt -> Interfaces .)


state 795

    (426) Interfaces_opt -> empty .

    LBRACE          reduce using rule 426 (Interfaces_opt -> empty .)


state 796

    (420) ClassArguments -> LPAREN ArgumentList_opt RPAREN .

    DOT             reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    BOOL            reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    SHORT           reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    USHORT          reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    INT             reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    UINT            reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    LONG            reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    ULONG           reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    CHAR            reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    FLOAT           reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    VOID            reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    IDENTIFIER      reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    TYPEOF          reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    CONST           reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    IMMUTABLE       reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    LBRACE          reduce using rule 420 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)


state 797

    (56) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer .

    COMMA           reduce using rule 56 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer .)
    SEMICOLON       reduce using rule 56 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer .)


state 798

    (54) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer .

    COMMA           reduce using rule 54 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer .)
    SEMICOLON       reduce using rule 54 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer .)


state 799

    (349) AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .

    LBRACE          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CASE            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DEFAULT         reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IDENTIFIER      reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IF              reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    WHILE           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DO              reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FOR             reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    SWITCH          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FINAL           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CONTINUE        reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    BREAK           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    RETURN          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    GOTO            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    WITH            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    MIXIN           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IMPORT          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    STATIC          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LPAREN          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FOREACH         reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FOREACH_REVERSE reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    ENUM            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    EXTERN          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    AUTO            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CONST           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IMMUTABLE       reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    UAMPERSAND      reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    PLUS_PLUS       reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    MINUS_MINUS     reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TIMES           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    UMINUS          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    UPLUS           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    EXCLAMATION     reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TILDE           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CAST            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DOT             reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    THIS            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    NULL            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TRUE            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FALSE           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DOLLAR          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    INUMBER         reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DNUMBER         reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LIT_CHAR        reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LIT_STR         reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LBRACKET        reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FUNCTION        reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    NEW             reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    BOOL            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    SHORT           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    USHORT          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    INT             reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    UINT            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LONG            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    ULONG           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CHAR            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FLOAT           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    VOID            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TYPEOF          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TYPEID          reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    BODY            reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    ALIAS           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CLASS           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    UNION           reduce using rule 349 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)


state 800

    (381) FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .

    WHILE           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    SEMICOLON       reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CASE            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LBRACE          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IF              reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DO              reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOR             reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    SWITCH          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FINAL           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BREAK           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    RETURN          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    GOTO            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    WITH            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    MIXIN           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IMPORT          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    STATIC          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LPAREN          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH         reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ENUM            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    EXTERN          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    AUTO            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CONST           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UAMPERSAND      reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TIMES           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UMINUS          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UPLUS           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TILDE           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CAST            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DOT             reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    THIS            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    NULL            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TRUE            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FALSE           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    INUMBER         reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    NEW             reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BOOL            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    SHORT           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    USHORT          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    INT             reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UINT            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LONG            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ULONG           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CHAR            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FLOAT           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    VOID            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TYPEID          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BODY            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ALIAS           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CLASS           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UNION           reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    RBRACE          reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ELSE            reduce using rule 381 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)


state 801

    (371) CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON . ScopeStatementList
    (375) ScopeStatementList -> . StatementListNoCaseNoDefault
    (376) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (377) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (378) StatementNoCaseNoDefault -> . SEMICOLON
    (379) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (380) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (320) ScopeBlockStatement -> . BlockStatement
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    SEMICOLON       shift and go to state 652
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 159
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 312
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ScopeStatementList             shift and go to state 815
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StatementNoCaseNoDefault       shift and go to state 651
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    GotoStatement                  shift and go to state 324
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    StatementListNoCaseNoDefault   shift and go to state 653
    SwitchStatement                shift and go to state 339
    LIT_STRPlus                    shift and go to state 239
    empty                          shift and go to state 350
    NonEmptyStatementNoCaseNoDefault shift and go to state 654
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ScopeBlockStatement            shift and go to state 655
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 802

    (340) ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt . RPAREN ScopeStatement

    RPAREN          shift and go to state 816


state 803

    (348) Increment_opt -> empty .
    (81) TypeCtors_opt -> empty .

    RPAREN          reduce using rule 348 (Increment_opt -> empty .)
    DOT             reduce using rule 81 (TypeCtors_opt -> empty .)
    BOOL            reduce using rule 81 (TypeCtors_opt -> empty .)
    SHORT           reduce using rule 81 (TypeCtors_opt -> empty .)
    USHORT          reduce using rule 81 (TypeCtors_opt -> empty .)
    INT             reduce using rule 81 (TypeCtors_opt -> empty .)
    UINT            reduce using rule 81 (TypeCtors_opt -> empty .)
    LONG            reduce using rule 81 (TypeCtors_opt -> empty .)
    ULONG           reduce using rule 81 (TypeCtors_opt -> empty .)
    CHAR            reduce using rule 81 (TypeCtors_opt -> empty .)
    FLOAT           reduce using rule 81 (TypeCtors_opt -> empty .)
    VOID            reduce using rule 81 (TypeCtors_opt -> empty .)
    IDENTIFIER      reduce using rule 81 (TypeCtors_opt -> empty .)
    TYPEOF          reduce using rule 81 (TypeCtors_opt -> empty .)
    CONST           reduce using rule 81 (TypeCtors_opt -> empty .)
    IMMUTABLE       reduce using rule 81 (TypeCtors_opt -> empty .)


state 804

    (346) Increment -> Expression .

    RPAREN          reduce using rule 346 (Increment -> Expression .)


state 805

    (347) Increment_opt -> Increment .

    RPAREN          reduce using rule 347 (Increment_opt -> Increment .)


state 806

    (339) DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .

    UAMPERSAND      reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    PLUS_PLUS       reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    MINUS_MINUS     reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    TIMES           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    UMINUS          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    UPLUS           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    EXCLAMATION     reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    TILDE           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    CAST            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    IDENTIFIER      reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    DOT             reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    THIS            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    NULL            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    TRUE            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    FALSE           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    DOLLAR          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    INUMBER         reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    DNUMBER         reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    LIT_CHAR        reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    LIT_STR         reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    LBRACKET        reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    FUNCTION        reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    MIXIN           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    IMPORT          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    NEW             reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    BOOL            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    SHORT           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    USHORT          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    INT             reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    UINT            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    LONG            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    ULONG           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    CHAR            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    FLOAT           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    VOID            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    CONST           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    IMMUTABLE       reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    TYPEOF          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    TYPEID          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    BODY            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    CASE            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    DEFAULT         reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    IF              reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    WHILE           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    DO              reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    FOR             reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    SWITCH          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    FINAL           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    CONTINUE        reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    BREAK           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    RETURN          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    GOTO            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    WITH            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    STATIC          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    FOREACH         reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    FOREACH_REVERSE reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    ENUM            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    EXTERN          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    AUTO            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    ALIAS           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    CLASS           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    UNION           reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)
    ELSE            reduce using rule 339 (DoStatement -> DO ScopeStatement WHILE LPAREN Expression RPAREN .)


state 807

    (365) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression . RPAREN

    RPAREN          shift and go to state 817


state 808

    (367) UprExpression -> Expression .

    RPAREN          reduce using rule 367 (UprExpression -> Expression .)


state 809

    (331) IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE . ElseStatement
    (337) ElseStatement -> . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    ElseStatement                  shift and go to state 818
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 819
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 810

    (334) IfCondition -> TypeCtors IDENTIFIER ASSIGN Expression .

    RPAREN          reduce using rule 334 (IfCondition -> TypeCtors IDENTIFIER ASSIGN Expression .)


state 811

    (335) IfCondition -> TypeCtors_opt BasicType Declarator ASSIGN . Expression
    (165) Expression -> . CommaExpression
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (485) empty -> .
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    LPAREN          shift and go to state 243
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    IDENTIFIER      shift and go to state 226
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    MIXIN           shift and go to state 238
    IMPORT          shift and go to state 190
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    CONST           shift and go to state 35
    IMMUTABLE       shift and go to state 45
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    LBRACE          shift and go to state 159
    BODY            shift and go to state 160

  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]

    PostfixExpression              shift and go to state 214
    TypeCtor                       shift and go to state 258
    CastExpression                 shift and go to state 232
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    TypeidExpression               shift and go to state 234
    AndExpression                  shift and go to state 186
    PowExpression                  shift and go to state 204
    FunctionLiteralBody            shift and go to state 233
    PrimaryExpression              shift and go to state 217
    ComplementExpression           shift and go to state 218
    OrOrExpression                 shift and go to state 188
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    BlockStatement                 shift and go to state 189
    LIT_STRPlus                    shift and go to state 239
    ShiftExpression                shift and go to state 199
    empty                          shift and go to state 142
    XorExpression                  shift and go to state 237
    RelExpression                  shift and go to state 191
    ArrayLiteral                   shift and go to state 240
    MixinExpression                shift and go to state 222
    OrExpression                   shift and go to state 208
    TypeCtors_opt                  shift and go to state 259
    EqualExpression                shift and go to state 194
    FunctionLiteral                shift and go to state 224
    Typeof                         shift and go to state 209
    AddExpression                  shift and go to state 244
    Expression                     shift and go to state 820
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    ParameterMemberAttributes      shift and go to state 202
    CmpExpression                  shift and go to state 245
    AndAndExpression               shift and go to state 231
    CommaExpression                shift and go to state 266
    NewAnonClassExpression         shift and go to state 200
    AssignExpression               shift and go to state 267

state 812

    (333) IfCondition -> AUTO IDENTIFIER ASSIGN Expression .

    RPAREN          reduce using rule 333 (IfCondition -> AUTO IDENTIFIER ASSIGN Expression .)


state 813

    (266) PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .

    POWER           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    LPAREN          reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    TIMES           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    DIV             reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    MODULO          reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    PLUS            reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    MINUS           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    IS_EQ           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    NOT_EQ          reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    LESS            reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    GREATER_EQ      reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    GREATER         reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    LESS_EQ         reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    AMPERSAND       reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    CARET           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    PIPE            reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    QUESTION        reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    ASSIGN          reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_PLUS         reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_MINUS        reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_TIMES        reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_DIV          reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_MODULO       reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_LEFT         reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    RBRACKET        reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    RANGE           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    COMMA           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    RPAREN          reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    SEMICOLON       reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    RBRACE          reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)
    COLON           reduce using rule 266 (PrimaryExpression -> TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN .)


state 814

    (419) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .

    POWER           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DOT             reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    PLUS_PLUS       reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    MINUS_MINUS     reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LPAREN          reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    TIMES           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DIV             reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    MODULO          reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    PLUS            reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    MINUS           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LEFT_SHIFT      reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RIGHT_SHIFT     reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    IS_EQ           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    NOT_EQ          reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LESS            reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    GREATER_EQ      reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    GREATER         reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LESS_EQ         reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    AMPERSAND       reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    CARET           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    PIPE            reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DOUBLE_AMPERSAND reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    QUESTION        reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DOUBLE_PIPE     reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    ASSIGN          reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_PLUS         reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_MINUS        reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_TIMES        reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_DIV          reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_MODULO       reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_AND_BIT      reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_OR_BIT       reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_XOR_BIT      reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_LEFT         reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_RIGHT        reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    COMMA           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RBRACE          reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RPAREN          reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    SEMICOLON       reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RBRACKET        reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RANGE           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    COLON           reduce using rule 419 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)


state 815

    (371) CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .

    SEMICOLON       reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CASE            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DEFAULT         reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LBRACE          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IDENTIFIER      reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IF              reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    WHILE           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DO              reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FOR             reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    SWITCH          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FINAL           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CONTINUE        reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    BREAK           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    RETURN          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    GOTO            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    WITH            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    MIXIN           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IMPORT          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    STATIC          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LPAREN          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FOREACH         reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FOREACH_REVERSE reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ENUM            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    EXTERN          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    AUTO            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CONST           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IMMUTABLE       reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    UAMPERSAND      reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    PLUS_PLUS       reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    MINUS_MINUS     reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TIMES           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    UMINUS          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    UPLUS           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    EXCLAMATION     reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TILDE           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CAST            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DOT             reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    THIS            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    NULL            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TRUE            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FALSE           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DOLLAR          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    INUMBER         reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DNUMBER         reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LIT_CHAR        reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LIT_STR         reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LBRACKET        reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FUNCTION        reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    NEW             reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    BOOL            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    SHORT           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    USHORT          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    INT             reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    UINT            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LONG            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ULONG           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CHAR            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FLOAT           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    VOID            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TYPEOF          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TYPEID          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    BODY            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ALIAS           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CLASS           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    UNION           reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    RBRACE          reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ELSE            reduce using rule 371 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)


state 816

    (340) ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN . ScopeStatement
    (318) ScopeStatement -> . NonEmptyStatement
    (319) ScopeStatement -> . BlockStatement
    (296) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (297) NonEmptyStatement -> . CaseStatement
    (298) NonEmptyStatement -> . CaseRangeStatement
    (299) NonEmptyStatement -> . DefaultStatement
    (324) BlockStatement -> . LBRACE RBRACE
    (325) BlockStatement -> . LBRACE StatementList RBRACE
    (300) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (307) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (308) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (309) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (310) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (311) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (312) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (313) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (314) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (315) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (316) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (317) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (370) CaseStatement -> . CASE ArgumentList COLON ScopeStatementList
    (371) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (374) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (321) LabeledStatement -> . IDENTIFIER COLON
    (322) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (323) LabeledStatement -> . IDENTIFIER COLON Statement
    (328) ExpressionStatement -> . Expression SEMICOLON
    (329) DeclarationStatement -> . StorageClasses_opt Declaration
    (330) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement
    (331) IfStatement -> . IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement
    (338) WhileStatement -> . WHILE LPAREN Expression RPAREN ScopeStatement
    (339) DoStatement -> . DO ScopeStatement WHILE LPAREN Expression RPAREN
    (340) ForStatement -> . FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement
    (350) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (369) SwitchStatement -> . SWITCH LPAREN Expression RPAREN ScopeStatement
    (381) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (386) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (387) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (388) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (389) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (390) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (391) GotoStatement -> . GOTO CASE SEMICOLON
    (392) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (393) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (394) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (395) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (368) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (165) Expression -> . CommaExpression
    (138) StorageClasses_opt -> . StorageClasses
    (139) StorageClasses_opt -> . empty
    (349) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (365) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (166) CommaExpression -> . AssignExpression
    (167) CommaExpression -> . AssignExpression COMMA CommaExpression
    (112) StorageClasses -> . StorageClass
    (113) StorageClasses -> . StorageClass StorageClasses
    (485) empty -> .
    (351) Foreach -> . FOREACH
    (352) Foreach -> . FOREACH_REVERSE
    (168) AssignExpression -> . ConditionalExpression
    (169) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (170) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (171) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (172) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (173) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (174) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (175) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (176) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (177) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (178) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (179) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (114) StorageClass -> . ENUM
    (115) StorageClass -> . STATIC
    (116) StorageClass -> . EXTERN
    (117) StorageClass -> . FINAL
    (118) StorageClass -> . AUTO
    (119) StorageClass -> . CONST
    (120) StorageClass -> . IMMUTABLE
    (180) ConditionalExpression -> . OrOrExpression
    (181) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (182) OrOrExpression -> . AndAndExpression
    (183) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (184) AndAndExpression -> . OrExpression
    (185) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (186) OrExpression -> . XorExpression
    (187) OrExpression -> . OrExpression PIPE XorExpression
    (188) XorExpression -> . AndExpression
    (189) XorExpression -> . XorExpression CARET AndExpression
    (190) AndExpression -> . CmpExpression
    (191) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (192) CmpExpression -> . ShiftExpression
    (193) CmpExpression -> . EqualExpression
    (194) CmpExpression -> . RelExpression
    (201) ShiftExpression -> . AddExpression
    (202) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (203) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (195) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (196) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (197) RelExpression -> . ShiftExpression LESS ShiftExpression
    (198) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (199) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (200) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (204) AddExpression -> . MulExpression
    (205) AddExpression -> . AddExpression PLUS MulExpression
    (206) AddExpression -> . AddExpression MINUS MulExpression
    (207) MulExpression -> . UnaryExpression
    (208) MulExpression -> . MulExpression TIMES UnaryExpression
    (209) MulExpression -> . MulExpression DIV UnaryExpression
    (210) MulExpression -> . MulExpression MODULO UnaryExpression
    (211) UnaryExpression -> . UAMPERSAND UnaryExpression
    (212) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (213) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (214) UnaryExpression -> . TIMES UnaryExpression
    (215) UnaryExpression -> . UMINUS UnaryExpression
    (216) UnaryExpression -> . UPLUS UnaryExpression
    (217) UnaryExpression -> . EXCLAMATION UnaryExpression
    (218) UnaryExpression -> . ComplementExpression
    (219) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (220) UnaryExpression -> . CastExpression
    (221) UnaryExpression -> . PowExpression
    (222) ComplementExpression -> . TILDE UnaryExpression
    (236) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (237) CastExpression -> . CAST LPAREN TypeCtors_opt RPAREN UnaryExpression
    (238) PowExpression -> . PostfixExpression
    (239) PowExpression -> . PostfixExpression POWER UnaryExpression
    (240) PostfixExpression -> . PrimaryExpression
    (241) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (242) PostfixExpression -> . PostfixExpression DOT NewExpression
    (243) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (244) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (245) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (246) PostfixExpression -> . TypeCtors_opt BasicType LPAREN ArgumentList_opt RPAREN
    (247) PrimaryExpression -> . IDENTIFIER
    (248) PrimaryExpression -> . DOT IDENTIFIER
    (249) PrimaryExpression -> . THIS
    (250) PrimaryExpression -> . NULL
    (251) PrimaryExpression -> . TRUE
    (252) PrimaryExpression -> . FALSE
    (253) PrimaryExpression -> . DOLLAR
    (254) PrimaryExpression -> . INUMBER
    (255) PrimaryExpression -> . DNUMBER
    (256) PrimaryExpression -> . LIT_CHAR
    (257) PrimaryExpression -> . LIT_STRPlus
    (258) PrimaryExpression -> . ArrayLiteral
    (259) PrimaryExpression -> . FunctionLiteral
    (260) PrimaryExpression -> . MixinExpression
    (261) PrimaryExpression -> . ImportExpression
    (262) PrimaryExpression -> . NewExpressionWithArgs
    (263) PrimaryExpression -> . BasicTypeX IDENTIFIER
    (264) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (265) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN DOT IDENTIFIER
    (266) PrimaryExpression -> . TypeCtor LPAREN Type RPAREN LPAREN ArgumentList_opt RPAREN
    (267) PrimaryExpression -> . Typeof
    (268) PrimaryExpression -> . LPAREN Expression RPAREN
    (269) PrimaryExpression -> . TypeidExpression
    (80) TypeCtors_opt -> . TypeCtors
    (81) TypeCtors_opt -> . empty
    (280) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (281) LIT_STRPlus -> . LIT_STR
    (270) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (271) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (272) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (273) FunctionLiteral -> . FunctionLiteralBody
    (282) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (283) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (225) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (226) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (227) NewExpressionWithArgs -> . NewAnonClassExpression
    (90) BasicTypeX -> . BOOL
    (91) BasicTypeX -> . SHORT
    (92) BasicTypeX -> . USHORT
    (93) BasicTypeX -> . INT
    (94) BasicTypeX -> . UINT
    (95) BasicTypeX -> . LONG
    (96) BasicTypeX -> . ULONG
    (97) BasicTypeX -> . CHAR
    (98) BasicTypeX -> . FLOAT
    (99) BasicTypeX -> . VOID
    (82) TypeCtor -> . CONST
    (83) TypeCtor -> . IMMUTABLE
    (147) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (148) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (284) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (285) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (78) TypeCtors -> . TypeCtor
    (79) TypeCtors -> . TypeCtor TypeCtors
    (277) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (278) FunctionLiteralBody -> . BlockStatement
    (279) FunctionLiteralBody -> . BodyStatement
    (419) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (452) Parameters -> . LPAREN ParameterList_opt RPAREN
    (480) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
    LBRACE          shift and go to state 159
    CASE            shift and go to state 325
    DEFAULT         shift and go to state 332
    IDENTIFIER      shift and go to state 342
    IF              shift and go to state 361
    WHILE           shift and go to state 333
    DO              shift and go to state 351
    FOR             shift and go to state 326
    SWITCH          shift and go to state 340
    FINAL           shift and go to state 320
    CONTINUE        shift and go to state 329
    BREAK           shift and go to state 349
    RETURN          shift and go to state 318
    GOTO            shift and go to state 314
    WITH            shift and go to state 310
    MIXIN           shift and go to state 330
    IMPORT          shift and go to state 313
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 359
    ALIAS           reduce using rule 485 (empty -> .)
    CLASS           reduce using rule 485 (empty -> .)
    UNION           reduce using rule 485 (empty -> .)
    FOREACH         shift and go to state 316
    FOREACH_REVERSE shift and go to state 321
    ENUM            shift and go to state 66
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 352
    IMMUTABLE       shift and go to state 360
    UAMPERSAND      shift and go to state 203
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 206
    TIMES           shift and go to state 242
    UMINUS          shift and go to state 229
    UPLUS           shift and go to state 196
    EXCLAMATION     shift and go to state 213
    TILDE           shift and go to state 221
    CAST            shift and go to state 220
    DOT             shift and go to state 216
    THIS            shift and go to state 198
    NULL            shift and go to state 235
    TRUE            shift and go to state 187
    FALSE           shift and go to state 227
    DOLLAR          shift and go to state 241
    INUMBER         shift and go to state 211
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 219
    LIT_STR         shift and go to state 246
    LBRACKET        shift and go to state 185
    FUNCTION        shift and go to state 207
    NEW             shift and go to state 215
    BOOL            shift and go to state 49
    SHORT           shift and go to state 31
    USHORT          shift and go to state 47
    INT             shift and go to state 46
    UINT            shift and go to state 43
    LONG            shift and go to state 39
    ULONG           shift and go to state 37
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 48
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 50
    TYPEID          shift and go to state 210
    BODY            shift and go to state 160

  ! ENUM            [ reduce using rule 485 (empty -> .) ]
  ! IMPORT          [ reduce using rule 485 (empty -> .) ]
  ! STATIC          [ reduce using rule 485 (empty -> .) ]
  ! EXTERN          [ reduce using rule 485 (empty -> .) ]
  ! FINAL           [ reduce using rule 485 (empty -> .) ]
  ! AUTO            [ reduce using rule 485 (empty -> .) ]
  ! CONST           [ reduce using rule 485 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 485 (empty -> .) ]
  ! DOT             [ reduce using rule 485 (empty -> .) ]
  ! BOOL            [ reduce using rule 485 (empty -> .) ]
  ! SHORT           [ reduce using rule 485 (empty -> .) ]
  ! USHORT          [ reduce using rule 485 (empty -> .) ]
  ! INT             [ reduce using rule 485 (empty -> .) ]
  ! UINT            [ reduce using rule 485 (empty -> .) ]
  ! LONG            [ reduce using rule 485 (empty -> .) ]
  ! ULONG           [ reduce using rule 485 (empty -> .) ]
  ! CHAR            [ reduce using rule 485 (empty -> .) ]
  ! FLOAT           [ reduce using rule 485 (empty -> .) ]
  ! VOID            [ reduce using rule 485 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 485 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 485 (empty -> .) ]

    ExpressionStatement            shift and go to state 308
    AndExpression                  shift and go to state 186
    FinalSwitchStatement           shift and go to state 311
    OrOrExpression                 shift and go to state 188
    BlockStatement                 shift and go to state 517
    GotoStatement                  shift and go to state 324
    RelExpression                  shift and go to state 191
    TypeCtor                       shift and go to state 258
    EqualExpression                shift and go to state 194
    ReturnStatement                shift and go to state 317
    NewAnonClassExpression         shift and go to state 200
    PostfixExpression              shift and go to state 214
    Typeof                         shift and go to state 209
    Parameters                     shift and go to state 201
    ImportExpression               shift and go to state 184
    Foreach                        shift and go to state 319
    PowExpression                  shift and go to state 204
    StorageClasses_opt             shift and go to state 322
    BreakStatement                 shift and go to state 323
    ScopeStatement                 shift and go to state 821
    OrExpression                   shift and go to state 208
    ForeachStatement               shift and go to state 327
    MixinStatement                 shift and go to state 328
    RangeForeach                   shift and go to state 331
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 334
    PrimaryExpression              shift and go to state 217
    ForStatement                   shift and go to state 335
    ComplementExpression           shift and go to state 218
    ContinueStatement              shift and go to state 337
    ImportDeclaration              shift and go to state 338
    SwitchStatement                shift and go to state 339
    DefaultStatement               shift and go to state 341
    LIT_STRPlus                    shift and go to state 239
    CaseStatement                  shift and go to state 343
    NonEmptyStatementNoCaseNoDefault shift and go to state 344
    DoStatement                    shift and go to state 345
    MixinExpression                shift and go to state 222
    StorageClasses                 shift and go to state 63
    TypeCtors_opt                  shift and go to state 259
    FunctionLiteral                shift and go to state 224
    Expression                     shift and go to state 346
    BodyStatement                  shift and go to state 225
    ConditionalExpression          shift and go to state 195
    UnaryExpression                shift and go to state 197
    NewExpressionWithArgs          shift and go to state 228
    MulExpression                  shift and go to state 230
    WhileStatement                 shift and go to state 347
    ParameterMemberAttributes      shift and go to state 202
    NonEmptyStatement              shift and go to state 519
    AndAndExpression               shift and go to state 231
    empty                          shift and go to state 350
    CommaExpression                shift and go to state 266
    CastExpression                 shift and go to state 232
    AggregateForeach               shift and go to state 353
    LabeledStatement               shift and go to state 354
    DeclarationStatement           shift and go to state 355
    FunctionLiteralBody            shift and go to state 233
    TypeidExpression               shift and go to state 234
    TypeCtors                      shift and go to state 134
    BasicTypeX                     shift and go to state 236
    ShiftExpression                shift and go to state 199
    XorExpression                  shift and go to state 237
    ArrayLiteral                   shift and go to state 240
    CaseRangeStatement             shift and go to state 358
    AddExpression                  shift and go to state 244
    WithStatement                  shift and go to state 362
    CmpExpression                  shift and go to state 245
    AssignExpression               shift and go to state 267
    IfStatement                    shift and go to state 363

state 817

    (365) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .

    LBRACE          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CASE            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DEFAULT         reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IDENTIFIER      reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IF              reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    WHILE           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DO              reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FOR             reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    SWITCH          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FINAL           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CONTINUE        reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    BREAK           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    RETURN          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    GOTO            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    WITH            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    MIXIN           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IMPORT          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    STATIC          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LPAREN          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FOREACH         reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FOREACH_REVERSE reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    ENUM            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    EXTERN          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    AUTO            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CONST           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IMMUTABLE       reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    UAMPERSAND      reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    PLUS_PLUS       reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    MINUS_MINUS     reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TIMES           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    UMINUS          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    UPLUS           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    EXCLAMATION     reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TILDE           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CAST            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DOT             reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    THIS            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    NULL            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TRUE            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FALSE           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DOLLAR          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    INUMBER         reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DNUMBER         reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LIT_CHAR        reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LIT_STR         reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LBRACKET        reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FUNCTION        reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    NEW             reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    BOOL            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    SHORT           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    USHORT          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    INT             reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    UINT            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LONG            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    ULONG           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CHAR            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FLOAT           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    VOID            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TYPEOF          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TYPEID          reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    BODY            reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    ALIAS           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CLASS           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    UNION           reduce using rule 365 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)


state 818

    (331) IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .

    SEMICOLON       reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    CASE            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    DEFAULT         reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    LBRACE          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    IDENTIFIER      reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    IF              reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    WHILE           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    DO              reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    FOR             reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    SWITCH          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    FINAL           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    CONTINUE        reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    BREAK           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    RETURN          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    GOTO            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    WITH            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    MIXIN           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    IMPORT          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    STATIC          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    LPAREN          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    FOREACH         reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    FOREACH_REVERSE reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    ENUM            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    EXTERN          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    AUTO            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    CONST           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    IMMUTABLE       reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    UAMPERSAND      reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    PLUS_PLUS       reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    MINUS_MINUS     reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    TIMES           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    UMINUS          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    UPLUS           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    EXCLAMATION     reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    TILDE           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    CAST            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    DOT             reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    THIS            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    NULL            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    TRUE            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    FALSE           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    DOLLAR          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    INUMBER         reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    DNUMBER         reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    LIT_CHAR        reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    LIT_STR         reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    LBRACKET        reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    FUNCTION        reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    NEW             reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    BOOL            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    SHORT           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    USHORT          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    INT             reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    UINT            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    LONG            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    ULONG           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    CHAR            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    FLOAT           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    VOID            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    TYPEOF          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    TYPEID          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    BODY            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    ALIAS           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    CLASS           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    UNION           reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    RBRACE          reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)
    ELSE            reduce using rule 331 (IfStatement -> IF LPAREN IfCondition RPAREN ThenStatement ELSE ElseStatement .)


state 819

    (337) ElseStatement -> ScopeStatement .

    SEMICOLON       reduce using rule 337 (ElseStatement -> ScopeStatement .)
    CASE            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    DEFAULT         reduce using rule 337 (ElseStatement -> ScopeStatement .)
    LBRACE          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    IDENTIFIER      reduce using rule 337 (ElseStatement -> ScopeStatement .)
    IF              reduce using rule 337 (ElseStatement -> ScopeStatement .)
    WHILE           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    DO              reduce using rule 337 (ElseStatement -> ScopeStatement .)
    FOR             reduce using rule 337 (ElseStatement -> ScopeStatement .)
    SWITCH          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    FINAL           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    CONTINUE        reduce using rule 337 (ElseStatement -> ScopeStatement .)
    BREAK           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    RETURN          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    GOTO            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    WITH            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    MIXIN           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    IMPORT          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    STATIC          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    LPAREN          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    FOREACH         reduce using rule 337 (ElseStatement -> ScopeStatement .)
    FOREACH_REVERSE reduce using rule 337 (ElseStatement -> ScopeStatement .)
    ENUM            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    EXTERN          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    AUTO            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    CONST           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    IMMUTABLE       reduce using rule 337 (ElseStatement -> ScopeStatement .)
    UAMPERSAND      reduce using rule 337 (ElseStatement -> ScopeStatement .)
    PLUS_PLUS       reduce using rule 337 (ElseStatement -> ScopeStatement .)
    MINUS_MINUS     reduce using rule 337 (ElseStatement -> ScopeStatement .)
    TIMES           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    UMINUS          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    UPLUS           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    EXCLAMATION     reduce using rule 337 (ElseStatement -> ScopeStatement .)
    TILDE           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    CAST            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    DOT             reduce using rule 337 (ElseStatement -> ScopeStatement .)
    THIS            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    NULL            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    TRUE            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    FALSE           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    DOLLAR          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    INUMBER         reduce using rule 337 (ElseStatement -> ScopeStatement .)
    DNUMBER         reduce using rule 337 (ElseStatement -> ScopeStatement .)
    LIT_CHAR        reduce using rule 337 (ElseStatement -> ScopeStatement .)
    LIT_STR         reduce using rule 337 (ElseStatement -> ScopeStatement .)
    LBRACKET        reduce using rule 337 (ElseStatement -> ScopeStatement .)
    FUNCTION        reduce using rule 337 (ElseStatement -> ScopeStatement .)
    NEW             reduce using rule 337 (ElseStatement -> ScopeStatement .)
    BOOL            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    SHORT           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    USHORT          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    INT             reduce using rule 337 (ElseStatement -> ScopeStatement .)
    UINT            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    LONG            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    ULONG           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    CHAR            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    FLOAT           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    VOID            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    TYPEOF          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    TYPEID          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    BODY            reduce using rule 337 (ElseStatement -> ScopeStatement .)
    ALIAS           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    CLASS           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    UNION           reduce using rule 337 (ElseStatement -> ScopeStatement .)
    RBRACE          reduce using rule 337 (ElseStatement -> ScopeStatement .)
    ELSE            reduce using rule 337 (ElseStatement -> ScopeStatement .)


state 820

    (335) IfCondition -> TypeCtors_opt BasicType Declarator ASSIGN Expression .

    RPAREN          reduce using rule 335 (IfCondition -> TypeCtors_opt BasicType Declarator ASSIGN Expression .)


state 821

    (340) ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .

    SEMICOLON       reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    CASE            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    LBRACE          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    IF              reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    WHILE           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    DO              reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    FOR             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    SWITCH          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    FINAL           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    BREAK           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    RETURN          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    GOTO            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    WITH            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    MIXIN           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    IMPORT          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    STATIC          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    LPAREN          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    FOREACH         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    ENUM            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    EXTERN          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    AUTO            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    CONST           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    UAMPERSAND      reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    TIMES           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    UMINUS          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    UPLUS           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    TILDE           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    CAST            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    DOT             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    THIS            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    NULL            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    TRUE            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    FALSE           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    INUMBER         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    NEW             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    BOOL            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    SHORT           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    USHORT          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    INT             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    UINT            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    LONG            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    ULONG           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    CHAR            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    FLOAT           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    VOID            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    TYPEID          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    BODY            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    ALIAS           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    CLASS           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    UNION           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    RBRACE          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)
    ELSE            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize Test_opt SEMICOLON Increment_opt RPAREN ScopeStatement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 1 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 11 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 11 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 18 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 19 resolved as shift
WARNING: shift/reduce conflict for CONST in state 19 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 19 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 28 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 28 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 28 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 28 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 28 resolved as shift
WARNING: shift/reduce conflict for CONST in state 28 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 28 resolved as shift
WARNING: shift/reduce conflict for DOT in state 41 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 41 resolved as shift
WARNING: shift/reduce conflict for DOT in state 44 resolved as shift
WARNING: shift/reduce conflict for CONST in state 53 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 53 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 56 resolved as shift
WARNING: shift/reduce conflict for CONST in state 56 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 56 resolved as shift
WARNING: shift/reduce conflict for CONST in state 57 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 57 resolved as shift
WARNING: shift/reduce conflict for CONST in state 79 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 79 resolved as shift
WARNING: shift/reduce conflict for CONST in state 83 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 83 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 83 resolved as shift
WARNING: shift/reduce conflict for DOT in state 83 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 83 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 83 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 83 resolved as shift
WARNING: shift/reduce conflict for INT in state 83 resolved as shift
WARNING: shift/reduce conflict for UINT in state 83 resolved as shift
WARNING: shift/reduce conflict for LONG in state 83 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 83 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 83 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 83 resolved as shift
WARNING: shift/reduce conflict for VOID in state 83 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 83 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 84 resolved as shift
WARNING: shift/reduce conflict for DOT in state 94 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 94 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 94 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 94 resolved as shift
WARNING: shift/reduce conflict for INT in state 94 resolved as shift
WARNING: shift/reduce conflict for UINT in state 94 resolved as shift
WARNING: shift/reduce conflict for LONG in state 94 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 94 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 94 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 94 resolved as shift
WARNING: shift/reduce conflict for VOID in state 94 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 94 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 94 resolved as shift
WARNING: shift/reduce conflict for CONST in state 94 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 94 resolved as shift
WARNING: shift/reduce conflict for CONST in state 96 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 96 resolved as shift
WARNING: shift/reduce conflict for DOT in state 98 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 98 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 98 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 98 resolved as shift
WARNING: shift/reduce conflict for INT in state 98 resolved as shift
WARNING: shift/reduce conflict for UINT in state 98 resolved as shift
WARNING: shift/reduce conflict for LONG in state 98 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 98 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 98 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 98 resolved as shift
WARNING: shift/reduce conflict for VOID in state 98 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 98 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 98 resolved as shift
WARNING: shift/reduce conflict for CONST in state 98 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 98 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 105 resolved as shift
WARNING: shift/reduce conflict for CONST in state 117 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 117 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 122 resolved as shift
WARNING: shift/reduce conflict for CONST in state 122 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 122 resolved as shift
WARNING: shift/reduce conflict for CONST in state 125 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 125 resolved as shift
WARNING: shift/reduce conflict for CONST in state 135 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 135 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 138 resolved as shift
WARNING: shift/reduce conflict for CONST in state 147 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 147 resolved as shift
WARNING: shift/reduce conflict for CONST in state 152 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 152 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 159 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 159 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 159 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 159 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 159 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 159 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 159 resolved as shift
WARNING: shift/reduce conflict for CONST in state 159 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 159 resolved as shift
WARNING: shift/reduce conflict for DOT in state 159 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 159 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 159 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 159 resolved as shift
WARNING: shift/reduce conflict for INT in state 159 resolved as shift
WARNING: shift/reduce conflict for UINT in state 159 resolved as shift
WARNING: shift/reduce conflict for LONG in state 159 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 159 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 159 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 159 resolved as shift
WARNING: shift/reduce conflict for VOID in state 159 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 159 resolved as shift
WARNING: shift/reduce conflict for CONST in state 176 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 176 resolved as shift
WARNING: shift/reduce conflict for DOT in state 180 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 180 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 180 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 180 resolved as shift
WARNING: shift/reduce conflict for INT in state 180 resolved as shift
WARNING: shift/reduce conflict for UINT in state 180 resolved as shift
WARNING: shift/reduce conflict for LONG in state 180 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 180 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 180 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 180 resolved as shift
WARNING: shift/reduce conflict for VOID in state 180 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 180 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 180 resolved as shift
WARNING: shift/reduce conflict for CONST in state 180 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 180 resolved as shift
WARNING: shift/reduce conflict for DOT in state 183 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 183 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 183 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 183 resolved as shift
WARNING: shift/reduce conflict for INT in state 183 resolved as shift
WARNING: shift/reduce conflict for UINT in state 183 resolved as shift
WARNING: shift/reduce conflict for LONG in state 183 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 183 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 183 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 183 resolved as shift
WARNING: shift/reduce conflict for VOID in state 183 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 183 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 183 resolved as shift
WARNING: shift/reduce conflict for CONST in state 183 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 183 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 185 resolved as shift
WARNING: shift/reduce conflict for DOT in state 185 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 185 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 185 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 185 resolved as shift
WARNING: shift/reduce conflict for INT in state 185 resolved as shift
WARNING: shift/reduce conflict for UINT in state 185 resolved as shift
WARNING: shift/reduce conflict for LONG in state 185 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 185 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 185 resolved as shift
WARNING: shift/reduce conflict for VOID in state 185 resolved as shift
WARNING: shift/reduce conflict for CONST in state 185 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 185 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 185 resolved as shift
WARNING: shift/reduce conflict for CONST in state 193 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 193 resolved as shift
WARNING: shift/reduce conflict for DOT in state 196 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 196 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 196 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 196 resolved as shift
WARNING: shift/reduce conflict for INT in state 196 resolved as shift
WARNING: shift/reduce conflict for UINT in state 196 resolved as shift
WARNING: shift/reduce conflict for LONG in state 196 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 196 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 196 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 196 resolved as shift
WARNING: shift/reduce conflict for VOID in state 196 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 196 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 196 resolved as shift
WARNING: shift/reduce conflict for CONST in state 196 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 196 resolved as shift
WARNING: shift/reduce conflict for DOT in state 203 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 203 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 203 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 203 resolved as shift
WARNING: shift/reduce conflict for INT in state 203 resolved as shift
WARNING: shift/reduce conflict for UINT in state 203 resolved as shift
WARNING: shift/reduce conflict for LONG in state 203 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 203 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 203 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 203 resolved as shift
WARNING: shift/reduce conflict for VOID in state 203 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 203 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 203 resolved as shift
WARNING: shift/reduce conflict for CONST in state 203 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 203 resolved as shift
WARNING: shift/reduce conflict for DOT in state 206 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 206 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 206 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 206 resolved as shift
WARNING: shift/reduce conflict for INT in state 206 resolved as shift
WARNING: shift/reduce conflict for UINT in state 206 resolved as shift
WARNING: shift/reduce conflict for LONG in state 206 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 206 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 206 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 206 resolved as shift
WARNING: shift/reduce conflict for VOID in state 206 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 206 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 206 resolved as shift
WARNING: shift/reduce conflict for CONST in state 206 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 206 resolved as shift
WARNING: shift/reduce conflict for CONST in state 207 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 207 resolved as shift
WARNING: shift/reduce conflict for DOT in state 212 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 212 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 212 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 212 resolved as shift
WARNING: shift/reduce conflict for INT in state 212 resolved as shift
WARNING: shift/reduce conflict for UINT in state 212 resolved as shift
WARNING: shift/reduce conflict for LONG in state 212 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 212 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 212 resolved as shift
WARNING: shift/reduce conflict for VOID in state 212 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 212 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 212 resolved as shift
WARNING: shift/reduce conflict for CONST in state 212 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 212 resolved as shift
WARNING: shift/reduce conflict for DOT in state 213 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 213 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 213 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 213 resolved as shift
WARNING: shift/reduce conflict for INT in state 213 resolved as shift
WARNING: shift/reduce conflict for UINT in state 213 resolved as shift
WARNING: shift/reduce conflict for LONG in state 213 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 213 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 213 resolved as shift
WARNING: shift/reduce conflict for VOID in state 213 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 213 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 213 resolved as shift
WARNING: shift/reduce conflict for CONST in state 213 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 213 resolved as shift
WARNING: shift/reduce conflict for DOT in state 221 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 221 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 221 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 221 resolved as shift
WARNING: shift/reduce conflict for INT in state 221 resolved as shift
WARNING: shift/reduce conflict for UINT in state 221 resolved as shift
WARNING: shift/reduce conflict for LONG in state 221 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 221 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 221 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 221 resolved as shift
WARNING: shift/reduce conflict for VOID in state 221 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 221 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 221 resolved as shift
WARNING: shift/reduce conflict for CONST in state 221 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 221 resolved as shift
WARNING: shift/reduce conflict for DOT in state 229 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 229 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 229 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 229 resolved as shift
WARNING: shift/reduce conflict for INT in state 229 resolved as shift
WARNING: shift/reduce conflict for UINT in state 229 resolved as shift
WARNING: shift/reduce conflict for LONG in state 229 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 229 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 229 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 229 resolved as shift
WARNING: shift/reduce conflict for VOID in state 229 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 229 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 229 resolved as shift
WARNING: shift/reduce conflict for CONST in state 229 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 229 resolved as shift
WARNING: shift/reduce conflict for DOT in state 242 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 242 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 242 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 242 resolved as shift
WARNING: shift/reduce conflict for INT in state 242 resolved as shift
WARNING: shift/reduce conflict for UINT in state 242 resolved as shift
WARNING: shift/reduce conflict for LONG in state 242 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 242 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 242 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 242 resolved as shift
WARNING: shift/reduce conflict for VOID in state 242 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 242 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 242 resolved as shift
WARNING: shift/reduce conflict for CONST in state 242 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 242 resolved as shift
WARNING: shift/reduce conflict for CONST in state 243 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 243 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 243 resolved as shift
WARNING: shift/reduce conflict for DOT in state 243 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 243 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 243 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 243 resolved as shift
WARNING: shift/reduce conflict for INT in state 243 resolved as shift
WARNING: shift/reduce conflict for UINT in state 243 resolved as shift
WARNING: shift/reduce conflict for LONG in state 243 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 243 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 243 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 243 resolved as shift
WARNING: shift/reduce conflict for VOID in state 243 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 243 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 252 resolved as shift
WARNING: shift/reduce conflict for DOT in state 254 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 254 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 254 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 254 resolved as shift
WARNING: shift/reduce conflict for INT in state 254 resolved as shift
WARNING: shift/reduce conflict for UINT in state 254 resolved as shift
WARNING: shift/reduce conflict for LONG in state 254 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 254 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 254 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 254 resolved as shift
WARNING: shift/reduce conflict for VOID in state 254 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 254 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 254 resolved as shift
WARNING: shift/reduce conflict for CONST in state 254 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 254 resolved as shift
WARNING: shift/reduce conflict for CONST in state 258 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 258 resolved as shift
WARNING: shift/reduce conflict for CONST in state 280 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 280 resolved as shift
WARNING: shift/reduce conflict for DOT in state 281 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 281 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 281 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 281 resolved as shift
WARNING: shift/reduce conflict for INT in state 281 resolved as shift
WARNING: shift/reduce conflict for UINT in state 281 resolved as shift
WARNING: shift/reduce conflict for LONG in state 281 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 281 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 281 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 281 resolved as shift
WARNING: shift/reduce conflict for VOID in state 281 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 281 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 281 resolved as shift
WARNING: shift/reduce conflict for CONST in state 281 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 281 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 286 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 286 resolved as shift
WARNING: shift/reduce conflict for DOT in state 288 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 288 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 288 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 288 resolved as shift
WARNING: shift/reduce conflict for INT in state 288 resolved as shift
WARNING: shift/reduce conflict for UINT in state 288 resolved as shift
WARNING: shift/reduce conflict for LONG in state 288 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 288 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 288 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 288 resolved as shift
WARNING: shift/reduce conflict for VOID in state 288 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 288 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 288 resolved as shift
WARNING: shift/reduce conflict for CONST in state 288 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 288 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 290 resolved as shift
WARNING: shift/reduce conflict for CONST in state 290 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 290 resolved as shift
WARNING: shift/reduce conflict for CONST in state 298 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 298 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 309 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 309 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 309 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 309 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 309 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 309 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 309 resolved as shift
WARNING: shift/reduce conflict for CONST in state 309 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 309 resolved as shift
WARNING: shift/reduce conflict for DOT in state 309 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 309 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 309 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 309 resolved as shift
WARNING: shift/reduce conflict for INT in state 309 resolved as shift
WARNING: shift/reduce conflict for UINT in state 309 resolved as shift
WARNING: shift/reduce conflict for LONG in state 309 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 309 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 309 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 309 resolved as shift
WARNING: shift/reduce conflict for VOID in state 309 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 309 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 318 resolved as shift
WARNING: shift/reduce conflict for DOT in state 318 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 318 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 318 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 318 resolved as shift
WARNING: shift/reduce conflict for INT in state 318 resolved as shift
WARNING: shift/reduce conflict for UINT in state 318 resolved as shift
WARNING: shift/reduce conflict for LONG in state 318 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 318 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 318 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 318 resolved as shift
WARNING: shift/reduce conflict for VOID in state 318 resolved as shift
WARNING: shift/reduce conflict for CONST in state 318 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 318 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 318 resolved as shift
WARNING: shift/reduce conflict for CONST in state 322 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 322 resolved as shift
WARNING: shift/reduce conflict for DOT in state 325 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 325 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 325 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 325 resolved as shift
WARNING: shift/reduce conflict for INT in state 325 resolved as shift
WARNING: shift/reduce conflict for UINT in state 325 resolved as shift
WARNING: shift/reduce conflict for LONG in state 325 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 325 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 325 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 325 resolved as shift
WARNING: shift/reduce conflict for VOID in state 325 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 325 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 325 resolved as shift
WARNING: shift/reduce conflict for CONST in state 325 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 325 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 331 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 331 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 331 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 331 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 331 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 331 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 331 resolved as shift
WARNING: shift/reduce conflict for CONST in state 331 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 331 resolved as shift
WARNING: shift/reduce conflict for DOT in state 331 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 331 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 331 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 331 resolved as shift
WARNING: shift/reduce conflict for INT in state 331 resolved as shift
WARNING: shift/reduce conflict for UINT in state 331 resolved as shift
WARNING: shift/reduce conflict for LONG in state 331 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 331 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 331 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 331 resolved as shift
WARNING: shift/reduce conflict for VOID in state 331 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 331 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 351 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 351 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 351 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 351 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 351 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 351 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 351 resolved as shift
WARNING: shift/reduce conflict for CONST in state 351 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 351 resolved as shift
WARNING: shift/reduce conflict for DOT in state 351 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 351 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 351 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 351 resolved as shift
WARNING: shift/reduce conflict for INT in state 351 resolved as shift
WARNING: shift/reduce conflict for UINT in state 351 resolved as shift
WARNING: shift/reduce conflict for LONG in state 351 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 351 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 351 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 351 resolved as shift
WARNING: shift/reduce conflict for VOID in state 351 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 351 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 353 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 353 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 353 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 353 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 353 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 353 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 353 resolved as shift
WARNING: shift/reduce conflict for CONST in state 353 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 353 resolved as shift
WARNING: shift/reduce conflict for DOT in state 353 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 353 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 353 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 353 resolved as shift
WARNING: shift/reduce conflict for INT in state 353 resolved as shift
WARNING: shift/reduce conflict for UINT in state 353 resolved as shift
WARNING: shift/reduce conflict for LONG in state 353 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 353 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 353 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 353 resolved as shift
WARNING: shift/reduce conflict for VOID in state 353 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 353 resolved as shift
WARNING: shift/reduce conflict for CONST in state 359 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 359 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 359 resolved as shift
WARNING: shift/reduce conflict for DOT in state 359 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 359 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 359 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 359 resolved as shift
WARNING: shift/reduce conflict for INT in state 359 resolved as shift
WARNING: shift/reduce conflict for UINT in state 359 resolved as shift
WARNING: shift/reduce conflict for LONG in state 359 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 359 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 359 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 359 resolved as shift
WARNING: shift/reduce conflict for VOID in state 359 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 359 resolved as shift
WARNING: shift/reduce conflict for CONST in state 367 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 367 resolved as shift
WARNING: shift/reduce conflict for CONST in state 371 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 371 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 373 resolved as shift
WARNING: shift/reduce conflict for DOT in state 373 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 373 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 373 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 373 resolved as shift
WARNING: shift/reduce conflict for INT in state 373 resolved as shift
WARNING: shift/reduce conflict for UINT in state 373 resolved as shift
WARNING: shift/reduce conflict for LONG in state 373 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 373 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 373 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 373 resolved as shift
WARNING: shift/reduce conflict for VOID in state 373 resolved as shift
WARNING: shift/reduce conflict for CONST in state 373 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 373 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 373 resolved as shift
WARNING: shift/reduce conflict for DOT in state 384 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 384 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 384 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 384 resolved as shift
WARNING: shift/reduce conflict for INT in state 384 resolved as shift
WARNING: shift/reduce conflict for UINT in state 384 resolved as shift
WARNING: shift/reduce conflict for LONG in state 384 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 384 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 384 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 384 resolved as shift
WARNING: shift/reduce conflict for VOID in state 384 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 384 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 384 resolved as shift
WARNING: shift/reduce conflict for CONST in state 384 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 384 resolved as shift
WARNING: shift/reduce conflict for DOT in state 385 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 385 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 385 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 385 resolved as shift
WARNING: shift/reduce conflict for INT in state 385 resolved as shift
WARNING: shift/reduce conflict for UINT in state 385 resolved as shift
WARNING: shift/reduce conflict for LONG in state 385 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 385 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 385 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 385 resolved as shift
WARNING: shift/reduce conflict for VOID in state 385 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 385 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 385 resolved as shift
WARNING: shift/reduce conflict for CONST in state 385 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 385 resolved as shift
WARNING: shift/reduce conflict for DOT in state 386 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 386 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 386 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 386 resolved as shift
WARNING: shift/reduce conflict for INT in state 386 resolved as shift
WARNING: shift/reduce conflict for UINT in state 386 resolved as shift
WARNING: shift/reduce conflict for LONG in state 386 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 386 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 386 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 386 resolved as shift
WARNING: shift/reduce conflict for VOID in state 386 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 386 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 386 resolved as shift
WARNING: shift/reduce conflict for CONST in state 386 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 386 resolved as shift
WARNING: shift/reduce conflict for DOT in state 387 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 387 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 387 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 387 resolved as shift
WARNING: shift/reduce conflict for INT in state 387 resolved as shift
WARNING: shift/reduce conflict for UINT in state 387 resolved as shift
WARNING: shift/reduce conflict for LONG in state 387 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 387 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 387 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 387 resolved as shift
WARNING: shift/reduce conflict for VOID in state 387 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 387 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 387 resolved as shift
WARNING: shift/reduce conflict for CONST in state 387 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 387 resolved as shift
WARNING: shift/reduce conflict for CONST in state 388 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 388 resolved as shift
WARNING: shift/reduce conflict for DOT in state 389 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 389 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 389 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 389 resolved as shift
WARNING: shift/reduce conflict for INT in state 389 resolved as shift
WARNING: shift/reduce conflict for UINT in state 389 resolved as shift
WARNING: shift/reduce conflict for LONG in state 389 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 389 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 389 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 389 resolved as shift
WARNING: shift/reduce conflict for VOID in state 389 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 389 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 389 resolved as shift
WARNING: shift/reduce conflict for CONST in state 389 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 389 resolved as shift
WARNING: shift/reduce conflict for DOT in state 390 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 390 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 390 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 390 resolved as shift
WARNING: shift/reduce conflict for INT in state 390 resolved as shift
WARNING: shift/reduce conflict for UINT in state 390 resolved as shift
WARNING: shift/reduce conflict for LONG in state 390 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 390 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 390 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 390 resolved as shift
WARNING: shift/reduce conflict for VOID in state 390 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 390 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 390 resolved as shift
WARNING: shift/reduce conflict for CONST in state 390 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 390 resolved as shift
WARNING: shift/reduce conflict for DOT in state 391 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 391 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 391 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 391 resolved as shift
WARNING: shift/reduce conflict for INT in state 391 resolved as shift
WARNING: shift/reduce conflict for UINT in state 391 resolved as shift
WARNING: shift/reduce conflict for LONG in state 391 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 391 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 391 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 391 resolved as shift
WARNING: shift/reduce conflict for VOID in state 391 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 391 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 391 resolved as shift
WARNING: shift/reduce conflict for CONST in state 391 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 391 resolved as shift
WARNING: shift/reduce conflict for DOT in state 392 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 392 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 392 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 392 resolved as shift
WARNING: shift/reduce conflict for INT in state 392 resolved as shift
WARNING: shift/reduce conflict for UINT in state 392 resolved as shift
WARNING: shift/reduce conflict for LONG in state 392 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 392 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 392 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 392 resolved as shift
WARNING: shift/reduce conflict for VOID in state 392 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 392 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 392 resolved as shift
WARNING: shift/reduce conflict for CONST in state 392 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 392 resolved as shift
WARNING: shift/reduce conflict for DOT in state 393 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 393 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 393 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 393 resolved as shift
WARNING: shift/reduce conflict for INT in state 393 resolved as shift
WARNING: shift/reduce conflict for UINT in state 393 resolved as shift
WARNING: shift/reduce conflict for LONG in state 393 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 393 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 393 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 393 resolved as shift
WARNING: shift/reduce conflict for VOID in state 393 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 393 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 393 resolved as shift
WARNING: shift/reduce conflict for CONST in state 393 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 393 resolved as shift
WARNING: shift/reduce conflict for DOT in state 394 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 394 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 394 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 394 resolved as shift
WARNING: shift/reduce conflict for INT in state 394 resolved as shift
WARNING: shift/reduce conflict for UINT in state 394 resolved as shift
WARNING: shift/reduce conflict for LONG in state 394 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 394 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 394 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 394 resolved as shift
WARNING: shift/reduce conflict for VOID in state 394 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 394 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 394 resolved as shift
WARNING: shift/reduce conflict for CONST in state 394 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 394 resolved as shift
WARNING: shift/reduce conflict for DOT in state 395 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 395 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 395 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 395 resolved as shift
WARNING: shift/reduce conflict for INT in state 395 resolved as shift
WARNING: shift/reduce conflict for UINT in state 395 resolved as shift
WARNING: shift/reduce conflict for LONG in state 395 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 395 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 395 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 395 resolved as shift
WARNING: shift/reduce conflict for VOID in state 395 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 395 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 395 resolved as shift
WARNING: shift/reduce conflict for CONST in state 395 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 395 resolved as shift
WARNING: shift/reduce conflict for DOT in state 396 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 396 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 396 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 396 resolved as shift
WARNING: shift/reduce conflict for INT in state 396 resolved as shift
WARNING: shift/reduce conflict for UINT in state 396 resolved as shift
WARNING: shift/reduce conflict for LONG in state 396 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 396 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 396 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 396 resolved as shift
WARNING: shift/reduce conflict for VOID in state 396 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 396 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 396 resolved as shift
WARNING: shift/reduce conflict for CONST in state 396 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 396 resolved as shift
WARNING: shift/reduce conflict for DOT in state 397 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 397 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 397 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 397 resolved as shift
WARNING: shift/reduce conflict for INT in state 397 resolved as shift
WARNING: shift/reduce conflict for UINT in state 397 resolved as shift
WARNING: shift/reduce conflict for LONG in state 397 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 397 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 397 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 397 resolved as shift
WARNING: shift/reduce conflict for VOID in state 397 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 397 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 397 resolved as shift
WARNING: shift/reduce conflict for CONST in state 397 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 397 resolved as shift
WARNING: shift/reduce conflict for DOT in state 398 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 398 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 398 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 398 resolved as shift
WARNING: shift/reduce conflict for INT in state 398 resolved as shift
WARNING: shift/reduce conflict for UINT in state 398 resolved as shift
WARNING: shift/reduce conflict for LONG in state 398 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 398 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 398 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 398 resolved as shift
WARNING: shift/reduce conflict for VOID in state 398 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 398 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 398 resolved as shift
WARNING: shift/reduce conflict for CONST in state 398 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 398 resolved as shift
WARNING: shift/reduce conflict for DOT in state 399 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 399 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 399 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 399 resolved as shift
WARNING: shift/reduce conflict for INT in state 399 resolved as shift
WARNING: shift/reduce conflict for UINT in state 399 resolved as shift
WARNING: shift/reduce conflict for LONG in state 399 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 399 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 399 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 399 resolved as shift
WARNING: shift/reduce conflict for VOID in state 399 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 399 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 399 resolved as shift
WARNING: shift/reduce conflict for CONST in state 399 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 399 resolved as shift
WARNING: shift/reduce conflict for DOT in state 401 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 401 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 401 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 401 resolved as shift
WARNING: shift/reduce conflict for INT in state 401 resolved as shift
WARNING: shift/reduce conflict for UINT in state 401 resolved as shift
WARNING: shift/reduce conflict for LONG in state 401 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 401 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 401 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 401 resolved as shift
WARNING: shift/reduce conflict for VOID in state 401 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 401 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 401 resolved as shift
WARNING: shift/reduce conflict for CONST in state 401 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 401 resolved as shift
WARNING: shift/reduce conflict for DOT in state 402 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 402 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 402 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 402 resolved as shift
WARNING: shift/reduce conflict for INT in state 402 resolved as shift
WARNING: shift/reduce conflict for UINT in state 402 resolved as shift
WARNING: shift/reduce conflict for LONG in state 402 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 402 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 402 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 402 resolved as shift
WARNING: shift/reduce conflict for VOID in state 402 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 402 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 402 resolved as shift
WARNING: shift/reduce conflict for CONST in state 402 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 402 resolved as shift
WARNING: shift/reduce conflict for DOT in state 403 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 403 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 403 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 403 resolved as shift
WARNING: shift/reduce conflict for INT in state 403 resolved as shift
WARNING: shift/reduce conflict for UINT in state 403 resolved as shift
WARNING: shift/reduce conflict for LONG in state 403 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 403 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 403 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 403 resolved as shift
WARNING: shift/reduce conflict for VOID in state 403 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 403 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 403 resolved as shift
WARNING: shift/reduce conflict for CONST in state 403 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 403 resolved as shift
WARNING: shift/reduce conflict for DOT in state 404 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 404 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 404 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 404 resolved as shift
WARNING: shift/reduce conflict for INT in state 404 resolved as shift
WARNING: shift/reduce conflict for UINT in state 404 resolved as shift
WARNING: shift/reduce conflict for LONG in state 404 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 404 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 404 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 404 resolved as shift
WARNING: shift/reduce conflict for VOID in state 404 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 404 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 404 resolved as shift
WARNING: shift/reduce conflict for CONST in state 404 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 404 resolved as shift
WARNING: shift/reduce conflict for DOT in state 405 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 405 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 405 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 405 resolved as shift
WARNING: shift/reduce conflict for INT in state 405 resolved as shift
WARNING: shift/reduce conflict for UINT in state 405 resolved as shift
WARNING: shift/reduce conflict for LONG in state 405 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 405 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 405 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 405 resolved as shift
WARNING: shift/reduce conflict for VOID in state 405 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 405 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 405 resolved as shift
WARNING: shift/reduce conflict for CONST in state 405 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 405 resolved as shift
WARNING: shift/reduce conflict for DOT in state 406 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 406 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 406 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 406 resolved as shift
WARNING: shift/reduce conflict for INT in state 406 resolved as shift
WARNING: shift/reduce conflict for UINT in state 406 resolved as shift
WARNING: shift/reduce conflict for LONG in state 406 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 406 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 406 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 406 resolved as shift
WARNING: shift/reduce conflict for VOID in state 406 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 406 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 406 resolved as shift
WARNING: shift/reduce conflict for CONST in state 406 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 406 resolved as shift
WARNING: shift/reduce conflict for DOT in state 407 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 407 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 407 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 407 resolved as shift
WARNING: shift/reduce conflict for INT in state 407 resolved as shift
WARNING: shift/reduce conflict for UINT in state 407 resolved as shift
WARNING: shift/reduce conflict for LONG in state 407 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 407 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 407 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 407 resolved as shift
WARNING: shift/reduce conflict for VOID in state 407 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 407 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 407 resolved as shift
WARNING: shift/reduce conflict for CONST in state 407 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 407 resolved as shift
WARNING: shift/reduce conflict for DOT in state 408 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 408 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 408 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 408 resolved as shift
WARNING: shift/reduce conflict for INT in state 408 resolved as shift
WARNING: shift/reduce conflict for UINT in state 408 resolved as shift
WARNING: shift/reduce conflict for LONG in state 408 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 408 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 408 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 408 resolved as shift
WARNING: shift/reduce conflict for VOID in state 408 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 408 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 408 resolved as shift
WARNING: shift/reduce conflict for CONST in state 408 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 408 resolved as shift
WARNING: shift/reduce conflict for DOT in state 417 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 417 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 417 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 417 resolved as shift
WARNING: shift/reduce conflict for INT in state 417 resolved as shift
WARNING: shift/reduce conflict for UINT in state 417 resolved as shift
WARNING: shift/reduce conflict for LONG in state 417 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 417 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 417 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 417 resolved as shift
WARNING: shift/reduce conflict for VOID in state 417 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 417 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 417 resolved as shift
WARNING: shift/reduce conflict for CONST in state 417 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 417 resolved as shift
WARNING: shift/reduce conflict for CONST in state 418 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 418 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 418 resolved as shift
WARNING: shift/reduce conflict for DOT in state 418 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 418 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 418 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 418 resolved as shift
WARNING: shift/reduce conflict for INT in state 418 resolved as shift
WARNING: shift/reduce conflict for UINT in state 418 resolved as shift
WARNING: shift/reduce conflict for LONG in state 418 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 418 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 418 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 418 resolved as shift
WARNING: shift/reduce conflict for VOID in state 418 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 418 resolved as shift
WARNING: shift/reduce conflict for DOT in state 421 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 421 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 421 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 421 resolved as shift
WARNING: shift/reduce conflict for INT in state 421 resolved as shift
WARNING: shift/reduce conflict for UINT in state 421 resolved as shift
WARNING: shift/reduce conflict for LONG in state 421 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 421 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 421 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 421 resolved as shift
WARNING: shift/reduce conflict for VOID in state 421 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 421 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 421 resolved as shift
WARNING: shift/reduce conflict for CONST in state 421 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 421 resolved as shift
WARNING: shift/reduce conflict for DOT in state 422 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 422 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 422 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 422 resolved as shift
WARNING: shift/reduce conflict for INT in state 422 resolved as shift
WARNING: shift/reduce conflict for UINT in state 422 resolved as shift
WARNING: shift/reduce conflict for LONG in state 422 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 422 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 422 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 422 resolved as shift
WARNING: shift/reduce conflict for VOID in state 422 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 422 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 422 resolved as shift
WARNING: shift/reduce conflict for CONST in state 422 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 422 resolved as shift
WARNING: shift/reduce conflict for CONST in state 426 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 426 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 427 resolved as shift
WARNING: shift/reduce conflict for DOT in state 427 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 427 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 427 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 427 resolved as shift
WARNING: shift/reduce conflict for INT in state 427 resolved as shift
WARNING: shift/reduce conflict for UINT in state 427 resolved as shift
WARNING: shift/reduce conflict for LONG in state 427 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 427 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 427 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 427 resolved as shift
WARNING: shift/reduce conflict for VOID in state 427 resolved as shift
WARNING: shift/reduce conflict for CONST in state 427 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 427 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 427 resolved as shift
WARNING: shift/reduce conflict for CONST in state 431 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 431 resolved as shift
WARNING: shift/reduce conflict for DOT in state 435 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 435 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 435 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 435 resolved as shift
WARNING: shift/reduce conflict for INT in state 435 resolved as shift
WARNING: shift/reduce conflict for UINT in state 435 resolved as shift
WARNING: shift/reduce conflict for LONG in state 435 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 435 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 435 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 435 resolved as shift
WARNING: shift/reduce conflict for VOID in state 435 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 435 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 435 resolved as shift
WARNING: shift/reduce conflict for CONST in state 435 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 435 resolved as shift
WARNING: shift/reduce conflict for DOT in state 436 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 436 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 436 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 436 resolved as shift
WARNING: shift/reduce conflict for INT in state 436 resolved as shift
WARNING: shift/reduce conflict for UINT in state 436 resolved as shift
WARNING: shift/reduce conflict for LONG in state 436 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 436 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 436 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 436 resolved as shift
WARNING: shift/reduce conflict for VOID in state 436 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 436 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 436 resolved as shift
WARNING: shift/reduce conflict for CONST in state 436 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 436 resolved as shift
WARNING: shift/reduce conflict for DOT in state 437 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 437 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 437 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 437 resolved as shift
WARNING: shift/reduce conflict for INT in state 437 resolved as shift
WARNING: shift/reduce conflict for UINT in state 437 resolved as shift
WARNING: shift/reduce conflict for LONG in state 437 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 437 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 437 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 437 resolved as shift
WARNING: shift/reduce conflict for VOID in state 437 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 437 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 437 resolved as shift
WARNING: shift/reduce conflict for CONST in state 437 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 437 resolved as shift
WARNING: shift/reduce conflict for DOT in state 438 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 438 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 438 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 438 resolved as shift
WARNING: shift/reduce conflict for INT in state 438 resolved as shift
WARNING: shift/reduce conflict for UINT in state 438 resolved as shift
WARNING: shift/reduce conflict for LONG in state 438 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 438 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 438 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 438 resolved as shift
WARNING: shift/reduce conflict for VOID in state 438 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 438 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 438 resolved as shift
WARNING: shift/reduce conflict for CONST in state 438 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 438 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 440 resolved as shift
WARNING: shift/reduce conflict for DOT in state 440 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 440 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 440 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 440 resolved as shift
WARNING: shift/reduce conflict for INT in state 440 resolved as shift
WARNING: shift/reduce conflict for UINT in state 440 resolved as shift
WARNING: shift/reduce conflict for LONG in state 440 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 440 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 440 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 440 resolved as shift
WARNING: shift/reduce conflict for VOID in state 440 resolved as shift
WARNING: shift/reduce conflict for CONST in state 440 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 440 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 440 resolved as shift
WARNING: shift/reduce conflict for DOT in state 441 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 441 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 441 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 441 resolved as shift
WARNING: shift/reduce conflict for INT in state 441 resolved as shift
WARNING: shift/reduce conflict for UINT in state 441 resolved as shift
WARNING: shift/reduce conflict for LONG in state 441 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 441 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 441 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 441 resolved as shift
WARNING: shift/reduce conflict for VOID in state 441 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 441 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 441 resolved as shift
WARNING: shift/reduce conflict for CONST in state 441 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 441 resolved as shift
WARNING: shift/reduce conflict for DOT in state 442 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 442 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 442 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 442 resolved as shift
WARNING: shift/reduce conflict for INT in state 442 resolved as shift
WARNING: shift/reduce conflict for UINT in state 442 resolved as shift
WARNING: shift/reduce conflict for LONG in state 442 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 442 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 442 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 442 resolved as shift
WARNING: shift/reduce conflict for VOID in state 442 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 442 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 442 resolved as shift
WARNING: shift/reduce conflict for CONST in state 442 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 442 resolved as shift
WARNING: shift/reduce conflict for CONST in state 444 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 444 resolved as shift
WARNING: shift/reduce conflict for DOT in state 448 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 448 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 448 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 448 resolved as shift
WARNING: shift/reduce conflict for INT in state 448 resolved as shift
WARNING: shift/reduce conflict for UINT in state 448 resolved as shift
WARNING: shift/reduce conflict for LONG in state 448 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 448 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 448 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 448 resolved as shift
WARNING: shift/reduce conflict for VOID in state 448 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 448 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 448 resolved as shift
WARNING: shift/reduce conflict for CONST in state 448 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 448 resolved as shift
WARNING: shift/reduce conflict for DOT in state 449 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 449 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 449 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 449 resolved as shift
WARNING: shift/reduce conflict for INT in state 449 resolved as shift
WARNING: shift/reduce conflict for UINT in state 449 resolved as shift
WARNING: shift/reduce conflict for LONG in state 449 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 449 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 449 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 449 resolved as shift
WARNING: shift/reduce conflict for VOID in state 449 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 449 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 449 resolved as shift
WARNING: shift/reduce conflict for CONST in state 449 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 449 resolved as shift
WARNING: shift/reduce conflict for DOT in state 452 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 452 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 452 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 452 resolved as shift
WARNING: shift/reduce conflict for INT in state 452 resolved as shift
WARNING: shift/reduce conflict for UINT in state 452 resolved as shift
WARNING: shift/reduce conflict for LONG in state 452 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 452 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 452 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 452 resolved as shift
WARNING: shift/reduce conflict for VOID in state 452 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 452 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 452 resolved as shift
WARNING: shift/reduce conflict for CONST in state 452 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 452 resolved as shift
WARNING: shift/reduce conflict for CONST in state 457 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 457 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 457 resolved as shift
WARNING: shift/reduce conflict for DOT in state 457 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 457 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 457 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 457 resolved as shift
WARNING: shift/reduce conflict for INT in state 457 resolved as shift
WARNING: shift/reduce conflict for UINT in state 457 resolved as shift
WARNING: shift/reduce conflict for LONG in state 457 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 457 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 457 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 457 resolved as shift
WARNING: shift/reduce conflict for VOID in state 457 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 457 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 466 resolved as shift
WARNING: shift/reduce conflict for DOT in state 473 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 473 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 473 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 473 resolved as shift
WARNING: shift/reduce conflict for INT in state 473 resolved as shift
WARNING: shift/reduce conflict for UINT in state 473 resolved as shift
WARNING: shift/reduce conflict for LONG in state 473 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 473 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 473 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 473 resolved as shift
WARNING: shift/reduce conflict for VOID in state 473 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 473 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 473 resolved as shift
WARNING: shift/reduce conflict for CONST in state 473 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 473 resolved as shift
WARNING: shift/reduce conflict for DOT in state 486 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 486 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 486 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 486 resolved as shift
WARNING: shift/reduce conflict for INT in state 486 resolved as shift
WARNING: shift/reduce conflict for UINT in state 486 resolved as shift
WARNING: shift/reduce conflict for LONG in state 486 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 486 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 486 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 486 resolved as shift
WARNING: shift/reduce conflict for VOID in state 486 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 486 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 486 resolved as shift
WARNING: shift/reduce conflict for CONST in state 486 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 486 resolved as shift
WARNING: shift/reduce conflict for DOT in state 498 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 498 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 498 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 498 resolved as shift
WARNING: shift/reduce conflict for INT in state 498 resolved as shift
WARNING: shift/reduce conflict for UINT in state 498 resolved as shift
WARNING: shift/reduce conflict for LONG in state 498 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 498 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 498 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 498 resolved as shift
WARNING: shift/reduce conflict for VOID in state 498 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 498 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 498 resolved as shift
WARNING: shift/reduce conflict for CONST in state 498 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 498 resolved as shift
WARNING: shift/reduce conflict for DOT in state 499 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 499 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 499 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 499 resolved as shift
WARNING: shift/reduce conflict for INT in state 499 resolved as shift
WARNING: shift/reduce conflict for UINT in state 499 resolved as shift
WARNING: shift/reduce conflict for LONG in state 499 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 499 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 499 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 499 resolved as shift
WARNING: shift/reduce conflict for VOID in state 499 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 499 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 499 resolved as shift
WARNING: shift/reduce conflict for CONST in state 499 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 499 resolved as shift
WARNING: shift/reduce conflict for CONST in state 506 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 506 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 512 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 512 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 512 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 512 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 512 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 512 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 512 resolved as shift
WARNING: shift/reduce conflict for CONST in state 512 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 512 resolved as shift
WARNING: shift/reduce conflict for DOT in state 512 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 512 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 512 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 512 resolved as shift
WARNING: shift/reduce conflict for INT in state 512 resolved as shift
WARNING: shift/reduce conflict for UINT in state 512 resolved as shift
WARNING: shift/reduce conflict for LONG in state 512 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 512 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 512 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 512 resolved as shift
WARNING: shift/reduce conflict for VOID in state 512 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 512 resolved as shift
WARNING: shift/reduce conflict for DOT in state 516 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 516 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 516 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 516 resolved as shift
WARNING: shift/reduce conflict for INT in state 516 resolved as shift
WARNING: shift/reduce conflict for UINT in state 516 resolved as shift
WARNING: shift/reduce conflict for LONG in state 516 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 516 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 516 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 516 resolved as shift
WARNING: shift/reduce conflict for VOID in state 516 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 516 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 516 resolved as shift
WARNING: shift/reduce conflict for CONST in state 516 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 516 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 520 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 520 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 520 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 520 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 520 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 520 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 520 resolved as shift
WARNING: shift/reduce conflict for CONST in state 520 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 520 resolved as shift
WARNING: shift/reduce conflict for DOT in state 520 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 520 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 520 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 520 resolved as shift
WARNING: shift/reduce conflict for INT in state 520 resolved as shift
WARNING: shift/reduce conflict for UINT in state 520 resolved as shift
WARNING: shift/reduce conflict for LONG in state 520 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 520 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 520 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 520 resolved as shift
WARNING: shift/reduce conflict for VOID in state 520 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 520 resolved as shift
WARNING: shift/reduce conflict for DOT in state 521 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 521 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 521 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 521 resolved as shift
WARNING: shift/reduce conflict for INT in state 521 resolved as shift
WARNING: shift/reduce conflict for UINT in state 521 resolved as shift
WARNING: shift/reduce conflict for LONG in state 521 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 521 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 521 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 521 resolved as shift
WARNING: shift/reduce conflict for VOID in state 521 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 521 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 521 resolved as shift
WARNING: shift/reduce conflict for CONST in state 521 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 521 resolved as shift
WARNING: shift/reduce conflict for DOT in state 522 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 522 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 522 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 522 resolved as shift
WARNING: shift/reduce conflict for INT in state 522 resolved as shift
WARNING: shift/reduce conflict for UINT in state 522 resolved as shift
WARNING: shift/reduce conflict for LONG in state 522 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 522 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 522 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 522 resolved as shift
WARNING: shift/reduce conflict for VOID in state 522 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 522 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 522 resolved as shift
WARNING: shift/reduce conflict for CONST in state 522 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 522 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 523 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 523 resolved as shift
WARNING: shift/reduce conflict for CASE in state 523 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 523 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 523 resolved as shift
WARNING: shift/reduce conflict for IF in state 523 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 523 resolved as shift
WARNING: shift/reduce conflict for DO in state 523 resolved as shift
WARNING: shift/reduce conflict for FOR in state 523 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 523 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 523 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 523 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 523 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 523 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 523 resolved as shift
WARNING: shift/reduce conflict for WITH in state 523 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 523 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 523 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 523 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 523 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 523 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 523 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 523 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 523 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 523 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 523 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 523 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 523 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 523 resolved as shift
WARNING: shift/reduce conflict for CONST in state 523 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 523 resolved as shift
WARNING: shift/reduce conflict for UAMPERSAND in state 523 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 523 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 523 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 523 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 523 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 523 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 523 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 523 resolved as shift
WARNING: shift/reduce conflict for CAST in state 523 resolved as shift
WARNING: shift/reduce conflict for DOT in state 523 resolved as shift
WARNING: shift/reduce conflict for THIS in state 523 resolved as shift
WARNING: shift/reduce conflict for NULL in state 523 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 523 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 523 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 523 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 523 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 523 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 523 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 523 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 523 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 523 resolved as shift
WARNING: shift/reduce conflict for NEW in state 523 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 523 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 523 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 523 resolved as shift
WARNING: shift/reduce conflict for INT in state 523 resolved as shift
WARNING: shift/reduce conflict for UINT in state 523 resolved as shift
WARNING: shift/reduce conflict for LONG in state 523 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 523 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 523 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 523 resolved as shift
WARNING: shift/reduce conflict for VOID in state 523 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 523 resolved as shift
WARNING: shift/reduce conflict for TYPEID in state 523 resolved as shift
WARNING: shift/reduce conflict for BODY in state 523 resolved as shift
WARNING: shift/reduce conflict for CONST in state 530 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 530 resolved as shift
WARNING: shift/reduce conflict for CONST in state 531 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 531 resolved as shift
WARNING: shift/reduce conflict for CONST in state 537 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 537 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 537 resolved as shift
WARNING: shift/reduce conflict for DOT in state 537 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 537 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 537 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 537 resolved as shift
WARNING: shift/reduce conflict for INT in state 537 resolved as shift
WARNING: shift/reduce conflict for UINT in state 537 resolved as shift
WARNING: shift/reduce conflict for LONG in state 537 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 537 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 537 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 537 resolved as shift
WARNING: shift/reduce conflict for VOID in state 537 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 537 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 550 resolved as shift
WARNING: shift/reduce conflict for DOT in state 552 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 552 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 552 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 552 resolved as shift
WARNING: shift/reduce conflict for INT in state 552 resolved as shift
WARNING: shift/reduce conflict for UINT in state 552 resolved as shift
WARNING: shift/reduce conflict for LONG in state 552 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 552 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 552 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 552 resolved as shift
WARNING: shift/reduce conflict for VOID in state 552 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 552 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 552 resolved as shift
WARNING: shift/reduce conflict for CONST in state 552 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 552 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 578 resolved as shift
WARNING: shift/reduce conflict for BODY in state 578 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 593 resolved as shift
WARNING: shift/reduce conflict for DOT in state 593 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 593 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 593 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 593 resolved as shift
WARNING: shift/reduce conflict for INT in state 593 resolved as shift
WARNING: shift/reduce conflict for UINT in state 593 resolved as shift
WARNING: shift/reduce conflict for LONG in state 593 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 593 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 593 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 593 resolved as shift
WARNING: shift/reduce conflict for VOID in state 593 resolved as shift
WARNING: shift/reduce conflict for CONST in state 593 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 593 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 593 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 612 resolved as shift
WARNING: shift/reduce conflict for DOT in state 614 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 614 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 614 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 614 resolved as shift
WARNING: shift/reduce conflict for INT in state 614 resolved as shift
WARNING: shift/reduce conflict for UINT in state 614 resolved as shift
WARNING: shift/reduce conflict for LONG in state 614 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 614 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 614 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 614 resolved as shift
WARNING: shift/reduce conflict for VOID in state 614 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 614 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 614 resolved as shift
WARNING: shift/reduce conflict for CONST in state 614 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 614 resolved as shift
WARNING: shift/reduce conflict for DOT in state 632 resolved as shift
WARNING: shift/reduce conflict for DOT in state 642 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 642 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 642 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 642 resolved as shift
WARNING: shift/reduce conflict for INT in state 642 resolved as shift
WARNING: shift/reduce conflict for UINT in state 642 resolved as shift
WARNING: shift/reduce conflict for LONG in state 642 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 642 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 642 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 642 resolved as shift
WARNING: shift/reduce conflict for VOID in state 642 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 642 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 642 resolved as shift
WARNING: shift/reduce conflict for CONST in state 642 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 642 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 643 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 643 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 643 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 643 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 643 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 643 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 643 resolved as shift
WARNING: shift/reduce conflict for CONST in state 643 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 643 resolved as shift
WARNING: shift/reduce conflict for DOT in state 643 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 643 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 643 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 643 resolved as shift
WARNING: shift/reduce conflict for INT in state 643 resolved as shift
WARNING: shift/reduce conflict for UINT in state 643 resolved as shift
WARNING: shift/reduce conflict for LONG in state 643 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 643 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 643 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 643 resolved as shift
WARNING: shift/reduce conflict for VOID in state 643 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 643 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 646 resolved as shift
WARNING: shift/reduce conflict for DOT in state 646 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 646 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 646 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 646 resolved as shift
WARNING: shift/reduce conflict for INT in state 646 resolved as shift
WARNING: shift/reduce conflict for UINT in state 646 resolved as shift
WARNING: shift/reduce conflict for LONG in state 646 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 646 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 646 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 646 resolved as shift
WARNING: shift/reduce conflict for VOID in state 646 resolved as shift
WARNING: shift/reduce conflict for CONST in state 646 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 646 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 646 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 651 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 651 resolved as shift
WARNING: shift/reduce conflict for IF in state 651 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 651 resolved as shift
WARNING: shift/reduce conflict for DO in state 651 resolved as shift
WARNING: shift/reduce conflict for FOR in state 651 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 651 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 651 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 651 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 651 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 651 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 651 resolved as shift
WARNING: shift/reduce conflict for WITH in state 651 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 651 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 651 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 651 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 651 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 651 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 651 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 651 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 651 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 651 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 651 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 651 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 651 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 651 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 651 resolved as shift
WARNING: shift/reduce conflict for CONST in state 651 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 651 resolved as shift
WARNING: shift/reduce conflict for UAMPERSAND in state 651 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 651 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 651 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 651 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 651 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 651 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 651 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 651 resolved as shift
WARNING: shift/reduce conflict for CAST in state 651 resolved as shift
WARNING: shift/reduce conflict for DOT in state 651 resolved as shift
WARNING: shift/reduce conflict for THIS in state 651 resolved as shift
WARNING: shift/reduce conflict for NULL in state 651 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 651 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 651 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 651 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 651 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 651 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 651 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 651 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 651 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 651 resolved as shift
WARNING: shift/reduce conflict for NEW in state 651 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 651 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 651 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 651 resolved as shift
WARNING: shift/reduce conflict for INT in state 651 resolved as shift
WARNING: shift/reduce conflict for UINT in state 651 resolved as shift
WARNING: shift/reduce conflict for LONG in state 651 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 651 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 651 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 651 resolved as shift
WARNING: shift/reduce conflict for VOID in state 651 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 651 resolved as shift
WARNING: shift/reduce conflict for TYPEID in state 651 resolved as shift
WARNING: shift/reduce conflict for BODY in state 651 resolved as shift
WARNING: shift/reduce conflict for DOT in state 666 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 666 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 666 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 666 resolved as shift
WARNING: shift/reduce conflict for INT in state 666 resolved as shift
WARNING: shift/reduce conflict for UINT in state 666 resolved as shift
WARNING: shift/reduce conflict for LONG in state 666 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 666 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 666 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 666 resolved as shift
WARNING: shift/reduce conflict for VOID in state 666 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 666 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 666 resolved as shift
WARNING: shift/reduce conflict for CONST in state 666 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 666 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 668 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 671 resolved as shift
WARNING: shift/reduce conflict for DOT in state 676 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 676 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 676 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 676 resolved as shift
WARNING: shift/reduce conflict for INT in state 676 resolved as shift
WARNING: shift/reduce conflict for UINT in state 676 resolved as shift
WARNING: shift/reduce conflict for LONG in state 676 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 676 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 676 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 676 resolved as shift
WARNING: shift/reduce conflict for VOID in state 676 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 676 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 676 resolved as shift
WARNING: shift/reduce conflict for CONST in state 676 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 676 resolved as shift
WARNING: shift/reduce conflict for DOT in state 678 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 678 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 678 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 678 resolved as shift
WARNING: shift/reduce conflict for INT in state 678 resolved as shift
WARNING: shift/reduce conflict for UINT in state 678 resolved as shift
WARNING: shift/reduce conflict for LONG in state 678 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 678 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 678 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 678 resolved as shift
WARNING: shift/reduce conflict for VOID in state 678 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 678 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 678 resolved as shift
WARNING: shift/reduce conflict for CONST in state 678 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 678 resolved as shift
WARNING: shift/reduce conflict for DOT in state 680 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 680 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 680 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 680 resolved as shift
WARNING: shift/reduce conflict for INT in state 680 resolved as shift
WARNING: shift/reduce conflict for UINT in state 680 resolved as shift
WARNING: shift/reduce conflict for LONG in state 680 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 680 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 680 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 680 resolved as shift
WARNING: shift/reduce conflict for VOID in state 680 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 680 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 680 resolved as shift
WARNING: shift/reduce conflict for CONST in state 680 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 680 resolved as shift
WARNING: shift/reduce conflict for DOT in state 682 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 682 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 682 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 682 resolved as shift
WARNING: shift/reduce conflict for INT in state 682 resolved as shift
WARNING: shift/reduce conflict for UINT in state 682 resolved as shift
WARNING: shift/reduce conflict for LONG in state 682 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 682 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 682 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 682 resolved as shift
WARNING: shift/reduce conflict for VOID in state 682 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 682 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 682 resolved as shift
WARNING: shift/reduce conflict for CONST in state 682 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 682 resolved as shift
WARNING: shift/reduce conflict for CONST in state 689 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 689 resolved as shift
WARNING: shift/reduce conflict for DOT in state 690 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 690 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 690 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 690 resolved as shift
WARNING: shift/reduce conflict for INT in state 690 resolved as shift
WARNING: shift/reduce conflict for UINT in state 690 resolved as shift
WARNING: shift/reduce conflict for LONG in state 690 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 690 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 690 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 690 resolved as shift
WARNING: shift/reduce conflict for VOID in state 690 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 690 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 690 resolved as shift
WARNING: shift/reduce conflict for CONST in state 690 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 690 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 691 resolved as shift
WARNING: shift/reduce conflict for DOT in state 691 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 691 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 691 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 691 resolved as shift
WARNING: shift/reduce conflict for INT in state 691 resolved as shift
WARNING: shift/reduce conflict for UINT in state 691 resolved as shift
WARNING: shift/reduce conflict for LONG in state 691 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 691 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 691 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 691 resolved as shift
WARNING: shift/reduce conflict for VOID in state 691 resolved as shift
WARNING: shift/reduce conflict for CONST in state 691 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 691 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 691 resolved as shift
WARNING: shift/reduce conflict for DOT in state 693 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 693 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 693 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 693 resolved as shift
WARNING: shift/reduce conflict for INT in state 693 resolved as shift
WARNING: shift/reduce conflict for UINT in state 693 resolved as shift
WARNING: shift/reduce conflict for LONG in state 693 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 693 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 693 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 693 resolved as shift
WARNING: shift/reduce conflict for VOID in state 693 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 693 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 693 resolved as shift
WARNING: shift/reduce conflict for CONST in state 693 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 693 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 694 resolved as shift
WARNING: shift/reduce conflict for DOT in state 694 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 694 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 694 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 694 resolved as shift
WARNING: shift/reduce conflict for INT in state 694 resolved as shift
WARNING: shift/reduce conflict for UINT in state 694 resolved as shift
WARNING: shift/reduce conflict for LONG in state 694 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 694 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 694 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 694 resolved as shift
WARNING: shift/reduce conflict for VOID in state 694 resolved as shift
WARNING: shift/reduce conflict for CONST in state 694 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 694 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 694 resolved as shift
WARNING: shift/reduce conflict for DOT in state 697 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 697 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 697 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 697 resolved as shift
WARNING: shift/reduce conflict for INT in state 697 resolved as shift
WARNING: shift/reduce conflict for UINT in state 697 resolved as shift
WARNING: shift/reduce conflict for LONG in state 697 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 697 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 697 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 697 resolved as shift
WARNING: shift/reduce conflict for VOID in state 697 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 697 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 697 resolved as shift
WARNING: shift/reduce conflict for CONST in state 697 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 697 resolved as shift
WARNING: shift/reduce conflict for DOT in state 698 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 698 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 698 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 698 resolved as shift
WARNING: shift/reduce conflict for INT in state 698 resolved as shift
WARNING: shift/reduce conflict for UINT in state 698 resolved as shift
WARNING: shift/reduce conflict for LONG in state 698 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 698 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 698 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 698 resolved as shift
WARNING: shift/reduce conflict for VOID in state 698 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 698 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 698 resolved as shift
WARNING: shift/reduce conflict for CONST in state 698 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 698 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 718 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 718 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 718 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 718 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 718 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 718 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 718 resolved as shift
WARNING: shift/reduce conflict for CONST in state 718 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 718 resolved as shift
WARNING: shift/reduce conflict for DOT in state 718 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 718 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 718 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 718 resolved as shift
WARNING: shift/reduce conflict for INT in state 718 resolved as shift
WARNING: shift/reduce conflict for UINT in state 718 resolved as shift
WARNING: shift/reduce conflict for LONG in state 718 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 718 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 718 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 718 resolved as shift
WARNING: shift/reduce conflict for VOID in state 718 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 718 resolved as shift
WARNING: shift/reduce conflict for DOT in state 720 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 721 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 721 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 721 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 721 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 721 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 721 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 721 resolved as shift
WARNING: shift/reduce conflict for CONST in state 721 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 721 resolved as shift
WARNING: shift/reduce conflict for DOT in state 721 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 721 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 721 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 721 resolved as shift
WARNING: shift/reduce conflict for INT in state 721 resolved as shift
WARNING: shift/reduce conflict for UINT in state 721 resolved as shift
WARNING: shift/reduce conflict for LONG in state 721 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 721 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 721 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 721 resolved as shift
WARNING: shift/reduce conflict for VOID in state 721 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 721 resolved as shift
WARNING: shift/reduce conflict for CONST in state 724 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 724 resolved as shift
WARNING: shift/reduce conflict for DOT in state 725 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 725 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 725 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 725 resolved as shift
WARNING: shift/reduce conflict for INT in state 725 resolved as shift
WARNING: shift/reduce conflict for UINT in state 725 resolved as shift
WARNING: shift/reduce conflict for LONG in state 725 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 725 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 725 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 725 resolved as shift
WARNING: shift/reduce conflict for VOID in state 725 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 725 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 725 resolved as shift
WARNING: shift/reduce conflict for CONST in state 725 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 725 resolved as shift
WARNING: shift/reduce conflict for DOT in state 728 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 728 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 728 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 728 resolved as shift
WARNING: shift/reduce conflict for INT in state 728 resolved as shift
WARNING: shift/reduce conflict for UINT in state 728 resolved as shift
WARNING: shift/reduce conflict for LONG in state 728 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 728 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 728 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 728 resolved as shift
WARNING: shift/reduce conflict for VOID in state 728 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 728 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 728 resolved as shift
WARNING: shift/reduce conflict for CONST in state 728 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 728 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 733 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 735 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 735 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 735 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 735 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 735 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 735 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 735 resolved as shift
WARNING: shift/reduce conflict for CONST in state 735 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 735 resolved as shift
WARNING: shift/reduce conflict for DOT in state 735 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 735 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 735 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 735 resolved as shift
WARNING: shift/reduce conflict for INT in state 735 resolved as shift
WARNING: shift/reduce conflict for UINT in state 735 resolved as shift
WARNING: shift/reduce conflict for LONG in state 735 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 735 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 735 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 735 resolved as shift
WARNING: shift/reduce conflict for VOID in state 735 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 735 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 736 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 736 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 736 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 736 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 736 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 736 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 736 resolved as shift
WARNING: shift/reduce conflict for CONST in state 736 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 736 resolved as shift
WARNING: shift/reduce conflict for DOT in state 736 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 736 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 736 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 736 resolved as shift
WARNING: shift/reduce conflict for INT in state 736 resolved as shift
WARNING: shift/reduce conflict for UINT in state 736 resolved as shift
WARNING: shift/reduce conflict for LONG in state 736 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 736 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 736 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 736 resolved as shift
WARNING: shift/reduce conflict for VOID in state 736 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 736 resolved as shift
WARNING: shift/reduce conflict for DOT in state 737 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 737 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 737 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 737 resolved as shift
WARNING: shift/reduce conflict for INT in state 737 resolved as shift
WARNING: shift/reduce conflict for UINT in state 737 resolved as shift
WARNING: shift/reduce conflict for LONG in state 737 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 737 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 737 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 737 resolved as shift
WARNING: shift/reduce conflict for VOID in state 737 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 737 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 737 resolved as shift
WARNING: shift/reduce conflict for CONST in state 737 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 737 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 742 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 742 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 742 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 742 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 742 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 742 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 742 resolved as shift
WARNING: shift/reduce conflict for CONST in state 742 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 742 resolved as shift
WARNING: shift/reduce conflict for DOT in state 742 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 742 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 742 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 742 resolved as shift
WARNING: shift/reduce conflict for INT in state 742 resolved as shift
WARNING: shift/reduce conflict for UINT in state 742 resolved as shift
WARNING: shift/reduce conflict for LONG in state 742 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 742 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 742 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 742 resolved as shift
WARNING: shift/reduce conflict for VOID in state 742 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 742 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 744 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 751 resolved as shift
WARNING: shift/reduce conflict for DOT in state 751 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 751 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 751 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 751 resolved as shift
WARNING: shift/reduce conflict for INT in state 751 resolved as shift
WARNING: shift/reduce conflict for UINT in state 751 resolved as shift
WARNING: shift/reduce conflict for LONG in state 751 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 751 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 751 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 751 resolved as shift
WARNING: shift/reduce conflict for VOID in state 751 resolved as shift
WARNING: shift/reduce conflict for CONST in state 751 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 751 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 751 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 753 resolved as shift
WARNING: shift/reduce conflict for DOT in state 766 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 766 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 766 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 766 resolved as shift
WARNING: shift/reduce conflict for INT in state 766 resolved as shift
WARNING: shift/reduce conflict for UINT in state 766 resolved as shift
WARNING: shift/reduce conflict for LONG in state 766 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 766 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 766 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 766 resolved as shift
WARNING: shift/reduce conflict for VOID in state 766 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 766 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 766 resolved as shift
WARNING: shift/reduce conflict for CONST in state 766 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 766 resolved as shift
WARNING: shift/reduce conflict for DOT in state 767 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 767 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 767 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 767 resolved as shift
WARNING: shift/reduce conflict for INT in state 767 resolved as shift
WARNING: shift/reduce conflict for UINT in state 767 resolved as shift
WARNING: shift/reduce conflict for LONG in state 767 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 767 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 767 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 767 resolved as shift
WARNING: shift/reduce conflict for VOID in state 767 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 767 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 767 resolved as shift
WARNING: shift/reduce conflict for CONST in state 767 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 767 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 775 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 775 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 775 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 775 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 775 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 775 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 775 resolved as shift
WARNING: shift/reduce conflict for CONST in state 775 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 775 resolved as shift
WARNING: shift/reduce conflict for DOT in state 775 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 775 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 775 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 775 resolved as shift
WARNING: shift/reduce conflict for INT in state 775 resolved as shift
WARNING: shift/reduce conflict for UINT in state 775 resolved as shift
WARNING: shift/reduce conflict for LONG in state 775 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 775 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 775 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 775 resolved as shift
WARNING: shift/reduce conflict for VOID in state 775 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 775 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 778 resolved as shift
WARNING: shift/reduce conflict for DOT in state 778 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 778 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 778 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 778 resolved as shift
WARNING: shift/reduce conflict for INT in state 778 resolved as shift
WARNING: shift/reduce conflict for UINT in state 778 resolved as shift
WARNING: shift/reduce conflict for LONG in state 778 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 778 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 778 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 778 resolved as shift
WARNING: shift/reduce conflict for VOID in state 778 resolved as shift
WARNING: shift/reduce conflict for CONST in state 778 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 778 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 778 resolved as shift
WARNING: shift/reduce conflict for DOT in state 783 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 783 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 783 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 783 resolved as shift
WARNING: shift/reduce conflict for INT in state 783 resolved as shift
WARNING: shift/reduce conflict for UINT in state 783 resolved as shift
WARNING: shift/reduce conflict for LONG in state 783 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 783 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 783 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 783 resolved as shift
WARNING: shift/reduce conflict for VOID in state 783 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 783 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 783 resolved as shift
WARNING: shift/reduce conflict for CONST in state 783 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 783 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 785 resolved as shift
WARNING: shift/reduce conflict for DOT in state 786 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 786 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 786 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 786 resolved as shift
WARNING: shift/reduce conflict for INT in state 786 resolved as shift
WARNING: shift/reduce conflict for UINT in state 786 resolved as shift
WARNING: shift/reduce conflict for LONG in state 786 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 786 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 786 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 786 resolved as shift
WARNING: shift/reduce conflict for VOID in state 786 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 786 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 786 resolved as shift
WARNING: shift/reduce conflict for CONST in state 786 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 786 resolved as shift
WARNING: shift/reduce conflict for DOT in state 788 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 788 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 788 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 788 resolved as shift
WARNING: shift/reduce conflict for INT in state 788 resolved as shift
WARNING: shift/reduce conflict for UINT in state 788 resolved as shift
WARNING: shift/reduce conflict for LONG in state 788 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 788 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 788 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 788 resolved as shift
WARNING: shift/reduce conflict for VOID in state 788 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 788 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 788 resolved as shift
WARNING: shift/reduce conflict for CONST in state 788 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 788 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 801 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 801 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 801 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 801 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 801 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 801 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 801 resolved as shift
WARNING: shift/reduce conflict for CONST in state 801 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 801 resolved as shift
WARNING: shift/reduce conflict for DOT in state 801 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 801 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 801 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 801 resolved as shift
WARNING: shift/reduce conflict for INT in state 801 resolved as shift
WARNING: shift/reduce conflict for UINT in state 801 resolved as shift
WARNING: shift/reduce conflict for LONG in state 801 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 801 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 801 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 801 resolved as shift
WARNING: shift/reduce conflict for VOID in state 801 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 801 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 809 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 809 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 809 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 809 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 809 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 809 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 809 resolved as shift
WARNING: shift/reduce conflict for CONST in state 809 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 809 resolved as shift
WARNING: shift/reduce conflict for DOT in state 809 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 809 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 809 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 809 resolved as shift
WARNING: shift/reduce conflict for INT in state 809 resolved as shift
WARNING: shift/reduce conflict for UINT in state 809 resolved as shift
WARNING: shift/reduce conflict for LONG in state 809 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 809 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 809 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 809 resolved as shift
WARNING: shift/reduce conflict for VOID in state 809 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 809 resolved as shift
WARNING: shift/reduce conflict for DOT in state 811 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 811 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 811 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 811 resolved as shift
WARNING: shift/reduce conflict for INT in state 811 resolved as shift
WARNING: shift/reduce conflict for UINT in state 811 resolved as shift
WARNING: shift/reduce conflict for LONG in state 811 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 811 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 811 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 811 resolved as shift
WARNING: shift/reduce conflict for VOID in state 811 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 811 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 811 resolved as shift
WARNING: shift/reduce conflict for CONST in state 811 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 811 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 816 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 816 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 816 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 816 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 816 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 816 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 816 resolved as shift
WARNING: shift/reduce conflict for CONST in state 816 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 816 resolved as shift
WARNING: shift/reduce conflict for DOT in state 816 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 816 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 816 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 816 resolved as shift
WARNING: shift/reduce conflict for INT in state 816 resolved as shift
WARNING: shift/reduce conflict for UINT in state 816 resolved as shift
WARNING: shift/reduce conflict for LONG in state 816 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 816 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 816 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 816 resolved as shift
WARNING: shift/reduce conflict for VOID in state 816 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 816 resolved as shift
WARNING: reduce/reduce conflict in state 104 resolved using rule (StorageClass -> CONST)
WARNING: rejected rule (Attribute -> CONST) in state 104
WARNING: reduce/reduce conflict in state 105 resolved using rule (StorageClass -> STATIC)
WARNING: rejected rule (Attribute -> STATIC) in state 105
WARNING: reduce/reduce conflict in state 106 resolved using rule (StorageClass -> EXTERN)
WARNING: rejected rule (Attribute -> EXTERN) in state 106
WARNING: reduce/reduce conflict in state 109 resolved using rule (StorageClass -> FINAL)
WARNING: rejected rule (Attribute -> FINAL) in state 109
WARNING: reduce/reduce conflict in state 120 resolved using rule (StorageClass -> AUTO)
WARNING: rejected rule (Attribute -> AUTO) in state 120
WARNING: reduce/reduce conflict in state 123 resolved using rule (StorageClass -> IMMUTABLE)
WARNING: rejected rule (Attribute -> IMMUTABLE) in state 123
WARNING: reduce/reduce conflict in state 138 resolved using rule (EnumMembers -> EnumMember)
WARNING: rejected rule (AnonymousEnumMember -> EnumMember) in state 138
WARNING: reduce/reduce conflict in state 270 resolved using rule (SuperClass -> BasicType)
WARNING: rejected rule (Interface -> BasicType) in state 270
WARNING: reduce/reduce conflict in state 312 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (ScopeBlockStatement -> BlockStatement) in state 312
WARNING: reduce/reduce conflict in state 350 resolved using rule (TypeCtors_opt -> empty)
WARNING: rejected rule (StorageClasses_opt -> empty) in state 350
WARNING: reduce/reduce conflict in state 352 resolved using rule (TypeCtor -> CONST)
WARNING: rejected rule (StorageClass -> CONST) in state 352
WARNING: reduce/reduce conflict in state 360 resolved using rule (TypeCtor -> IMMUTABLE)
WARNING: rejected rule (StorageClass -> IMMUTABLE) in state 360
WARNING: reduce/reduce conflict in state 444 resolved using rule (TypeCtors -> TypeCtor)
WARNING: rejected rule (InOutX -> TypeCtor) in state 444
WARNING: reduce/reduce conflict in state 445 resolved using rule (TypeCtors_opt -> empty)
WARNING: rejected rule (InOut_opt -> empty) in state 445
WARNING: reduce/reduce conflict in state 511 resolved using rule (ArgumentList -> AssignExpression)
WARNING: rejected rule (FirstExp -> AssignExpression) in state 511
WARNING: reduce/reduce conflict in state 517 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (ScopeStatement -> BlockStatement) in state 517
WARNING: reduce/reduce conflict in state 523 resolved using rule (LabeledStatement -> IDENTIFIER COLON)
WARNING: rejected rule (empty -> <empty>) in state 523
WARNING: reduce/reduce conflict in state 527 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (NoScopeNonEmptyStatement -> BlockStatement) in state 527
WARNING: reduce/reduce conflict in state 530 resolved using rule (ForeachTypeAttributes -> ForeachTypeAttribute)
WARNING: rejected rule (empty -> <empty>) in state 530
WARNING: reduce/reduce conflict in state 531 resolved using rule (TypeCtors -> TypeCtor)
WARNING: rejected rule (ForeachTypeAttribute -> TypeCtor) in state 531
WARNING: reduce/reduce conflict in state 531 resolved using rule (TypeCtors -> TypeCtor)
WARNING: rejected rule (InOutX -> TypeCtor) in state 531
WARNING: reduce/reduce conflict in state 534 resolved using rule (TypeCtors_opt -> empty)
WARNING: rejected rule (ForeachTypeAttributes_opt -> empty) in state 534
WARNING: reduce/reduce conflict in state 534 resolved using rule (TypeCtors_opt -> empty)
WARNING: rejected rule (InOut_opt -> empty) in state 534
WARNING: reduce/reduce conflict in state 549 resolved using rule (ArrayMemberInitializations_opt -> empty)
WARNING: rejected rule (ArgumentList_opt -> empty) in state 549
WARNING: reduce/reduce conflict in state 550 resolved using rule (ExpInitializer -> AssignExpression)
WARNING: rejected rule (ArgumentList -> AssignExpression) in state 550
WARNING: reduce/reduce conflict in state 632 resolved using rule (PrimaryExpression -> IDENTIFIER)
WARNING: rejected rule (SymbolTail -> IDENTIFIER) in state 632
WARNING: reduce/reduce conflict in state 651 resolved using rule (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault)
WARNING: rejected rule (empty -> <empty>) in state 651
WARNING: reduce/reduce conflict in state 659 resolved using rule (NoScopeStatement -> BlockStatement)
WARNING: rejected rule (ScopeBlockStatement -> BlockStatement) in state 659
WARNING: reduce/reduce conflict in state 659 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (NoScopeStatement -> BlockStatement) in state 659
WARNING: reduce/reduce conflict in state 660 resolved using rule (Statement -> SEMICOLON)
WARNING: rejected rule (NoScopeStatement -> SEMICOLON) in state 660
WARNING: reduce/reduce conflict in state 662 resolved using rule (Statement -> NonEmptyStatement)
WARNING: rejected rule (NoScopeStatement -> NonEmptyStatement) in state 662
WARNING: reduce/reduce conflict in state 720 resolved using rule (PrimaryExpression -> DOT IDENTIFIER)
WARNING: rejected rule (SymbolTail -> IDENTIFIER) in state 720
WARNING: Rule (FirstExp -> AssignExpression) is never reduced
WARNING: Rule (NoScopeStatement -> SEMICOLON) is never reduced
WARNING: Rule (NoScopeStatement -> NonEmptyStatement) is never reduced
